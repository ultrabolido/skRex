@org=$4000
@expand=#DEF(#TILE(n) #UDG($63E0+8*$n,#PEEK($6BE0+$n),2)(tile#EVAL($n,,2)*))
@expand=#DEF(#LOGO #POKES$FFFE,$42 #SCR1,0,0,32,24,$E4FF,$FCFF(logo))
@expand=#DEF(#TILES(n,m) #FOR(0,$m-1)(j, #TILE($n+j), | ))
@expand=#DEF(#TILETABLE(n,m) #UDGTABLE(rex,#FOR(0,$m-1)//j/centre/,//) { #FOR(0,$m-1)//j/=h #SPACE(1)$#EVAL($n+j,16,2)#SPACE(1)/ | // } { #TILES($n,$m) } TABLE#)
@expand=#DEF(#SSUPERTILE(i) #UDGARRAY#(3;#FOR(0,8)//n/($63E0+#PEEK($6CE0+$i*9+n)*8)/;//@#FOR(0,8)//n/($6BE0+#PEEK($6CE0+$i*9+n))/;//))
@expand=#DEF(#SUPERTILE(i) #SSUPERTILE($i)(supertile#EVAL($i,,3)*))
@expand=#DEF(#MESSAGE(m,l) #UDGARRAY#(#EVAL($l-$m+1),#PEEK($m-3);#FOR($m,$l)//n/($5FE0+#PEEK(n)*8)/;//))
@expand=#DEF(#ROOM(i)
@expand=+       #UDGARRAY30,$47,,1;$0-$13AF-1-240(*room_buffer)
@expand=+       #FOR(0,6)(mm,
@expand=+           #FOR(0,9)(nn,
@expand=+               #LET(id=#PEEK($75E0+nn+mm*10+$i*70))
@expand=+               #SSUPERTILE({id})(*s)
@expand=+               #OVER(nn*3,mm*3,0,0,3)($f)($f)(room_buffer,s)
@expand=+           )
@expand=+       )
@expand=+       #UDGARRAY*room_buffer(room$i)
@expand=+)

; Loading screen
;
; #UDGTABLE
; { #SCR(loading) | Rex loading screen. }
; TABLE#
@label=Loading screen
@label=DISPLAY_FILE
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Graphics
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$40,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$07,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$24,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$00,$EE,$1C,$F4,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $00,$00,$77,$3C,$EE,$F3,$8E,$74,$98,$1C,$CE,$77,$A4,$00,$02,$20,$00,$00,$00,$84,$00,$00,$C9,$2C,$00,$0C,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$67,$39,$DD,$22,$5D,$C6,$00,$00,$00,$00,$00,$00,$10,$78,$00,$00,$40,$18,$00,$1C,$23,$80,$E0,$00,$80,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$97,$B9,$D2,$E2,$17,$28,$00,$00,$00,$00,$00,$00,$22,$A0,$0A,$00,$21,$80,$03,$80,$10,$00,$45,$C0,$0F,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$C0,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$04,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$49,$12,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$00,$00,$08,$01,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$84,$A1,$04,$84,$09,$26,$A4,$21,$29,$24,$34,$00,$04,$60,$00,$00,$01,$0E,$00,$01,$82,$0E,$00,$04,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$94,$92,$09,$A2,$49,$29,$00,$00,$00,$00,$00,$00,$09,$94,$00,$00,$AC,$30,$00,$30,$43,$48,$60,$00,$40,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$94,$12,$12,$42,$10,$A8,$00,$00,$00,$00,$00,$00,$54,$20,$00,$00,$0B,$80,$06,$00,$38,$00,$8B,$E0,$1E,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$C0,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$8A,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$09,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$49,$52,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$01,$00,$00,$14,$03,$D6,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$84,$A1,$04,$84,$29,$25,$A4,$21,$29,$24,$2C,$00,$00,$00,$00,$00,$01,$14,$00,$03,$24,$22,$00,$02,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$94,$92,$09,$6A,$49,$29,$00,$00,$00,$00,$00,$00,$10,$20,$00,$00,$83,$20,$00,$60,$07,$94,$28,$00,$C0,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$94,$12,$12,$4A,$00,$80,$00,$00,$00,$04,$00,$00,$E0,$08,$00,$00,$05,$00,$0C,$01,$30,$01,$15,$C0,$3E,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$A1,$80,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$66,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$A1,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$49,$1C,$E3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$48,$00,$00,$00,$25,$00,$00,$19,$06,$07,$80,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$67,$39,$04,$E3,$0E,$24,$A5,$99,$EE,$27,$24,$00,$0D,$C0,$00,$00,$02,$CC,$00,$03,$84,$46,$00,$01,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$97,$12,$C9,$23,$C9,$CF,$00,$00,$00,$00,$00,$00,$38,$1C,$60,$03,$00,$80,$00,$70,$87,$20,$0C,$00,$C0,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$F7,$12,$DE,$43,$C3,$00,$00,$00,$00,$08,$00,$00,$8E,$00,$00,$00,$0A,$00,$0A,$06,$60,$00,$0B,$80,$FE,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$A0,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$91,$80,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$1C,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$52,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$49,$52,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$00,$00,$23,$00,$00,$30,$0E,$01,$C0,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$14,$21,$04,$80,$A9,$24,$A4,$05,$28,$24,$24,$00,$08,$B0,$00,$00,$02,$28,$00,$06,$08,$63,$00,$03,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$94,$92,$49,$2A,$49,$29,$00,$00,$00,$00,$00,$00,$20,$26,$94,$06,$80,$40,$00,$C1,$0E,$20,$07,$01,$80,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$94,$12,$52,$4A,$44,$00,$00,$00,$00,$0A,$00,$01,$1D,$00,$00,$00,$24,$00,$1C,$23,$50,$00,$56,$03,$FC,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$A0,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$4B,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$19,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$3D,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$49,$12,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$42,$00,$00,$60,$0C,$04,$60,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$14,$21,$04,$80,$89,$24,$A4,$05,$28,$24,$24,$00,$0C,$50,$00,$00,$04,$00,$00,$0C,$08,$D3,$00,$00,$80,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$94,$92,$49,$22,$49,$29,$00,$00,$00,$00,$00,$00,$30,$41,$8A,$19,$00,$E0,$01,$80,$0D,$00,$03,$83,$80,$80,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$94,$12,$52,$42,$44,$00,$00,$00,$00,$10,$00,$02,$90,$80,$04,$00,$88,$00,$30,$26,$E0,$00,$AD,$01,$EC,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$60,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$27,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$32,$20,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$0F,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$EE,$12,$F4,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$AC,$00,$00,$74,$8C,$01,$20,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$E4,$3C,$EE,$F7,$09,$74,$98,$39,$28,$77,$A4,$00,$18,$30,$00,$00,$18,$18,$00,$0C,$10,$E1,$80,$01,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$64,$B9,$DD,$22,$5D,$C9,$00,$00,$00,$00,$00,$00,$20,$01,$00,$68,$01,$40,$01,$C2,$1A,$00,$10,$FF,$01,$80,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$97,$B9,$D2,$43,$C7,$80,$00,$00,$00,$11,$00,$08,$20,$00,$00,$00,$00,$00,$38,$4C,$40,$00,$7A,$00,$F8,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$60,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$88,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$72,$40,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$E0,$00,$00,$00,$82,$00,$00,$C1,$0C,$00,$88,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$00,$00,$00,$10,$28,$00,$19,$21,$C1,$C0,$00,$40,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$31,$C0,$00,$80,$02,$C0,$03,$04,$9C,$00,$02,$3C,$07,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$06,$70,$80,$02,$00,$00,$00,$60,$96,$C8,$02,$BC,$0F,$B8,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$8B,$DC,$E9,$71,$C8,$30,$00,$00,$00,$08,$00,$10,$C8,$00,$48,$02,$20,$00,$C0,$AC,$60,$05,$68,$3F,$78,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$E6,$12,$26,$00,$00,$00,$00,$00,$00,$08,$02,$00,$00,$00,$70,$2B,$86,$1E,$14,$92,$50,$7A,$3F,$DF,$80,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$8B,$9C,$EE,$64,$80,$00,$00,$00,$00,$06,$00,$2F,$20,$00,$00,$BD,$0D,$3C,$50,$48,$7C,$50,$A6,$04,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$3A,$5E,$E8,$77,$19,$DE,$00,$00,$00,$00,$40,$00,$00,$22,$AB,$A9,$D0,$8F,$11,$5A,$00,$24,$E0,$03,$80,$0C,$00,$00,$00,$00 ;
 $4880 DEFB $00,$00,$25,$2E,$7B,$8E,$E3,$25,$2E,$00,$00,$00,$68,$04,$00,$48,$AE,$0D,$2D,$21,$50,$C8,$51,$BE,$10,$1A,$93,$E0,$1C,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$1C,$C8,$B9,$0F,$48,$00,$00,$00,$00,$00,$00,$C1,$04,$9E,$81,$B7,$03,$54,$28,$20,$78,$67,$00,$01,$CE,$82,$C0,$00,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$F7,$68,$0E,$34,$A2,$28,$01,$09,$23,$C0,$00,$00,$01,$7F,$46,$88,$00,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$A0,$07,$05,$21,$00,$40,$10,$00,$70,$30,$25,$E7,$E5,$0B,$D0,$00,$00,$00 ;
 $4900 DEFB $00,$00,$8A,$09,$09,$20,$28,$48,$00,$00,$00,$10,$40,$30,$04,$00,$14,$00,$40,$00,$E1,$36,$62,$02,$F0,$1F,$F0,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$49,$1A,$29,$00,$00,$00,$00,$00,$00,$18,$05,$39,$02,$01,$E0,$9E,$09,$08,$26,$84,$2D,$07,$3F,$BF,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$D9,$21,$04,$96,$80,$00,$00,$00,$00,$03,$40,$5D,$D0,$00,$00,$78,$1A,$16,$40,$8C,$FB,$03,$C7,$5C,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$13,$50,$48,$24,$A4,$90,$00,$00,$00,$00,$70,$00,$00,$49,$55,$C0,$EA,$17,$88,$CE,$01,$10,$E8,$05,$80,$1C,$00,$00,$00,$00 ;
 $4980 DEFB $00,$00,$25,$A9,$42,$50,$94,$A5,$A9,$00,$00,$00,$70,$21,$10,$05,$5C,$1E,$1E,$90,$40,$40,$88,$CC,$00,$04,$48,$E0,$28,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$21,$2D,$A5,$08,$48,$00,$00,$00,$00,$00,$00,$40,$00,$45,$51,$C3,$91,$78,$00,$02,$B0,$58,$04,$40,$33,$41,$C0,$00,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$DE,$C0,$BC,$38,$44,$34,$80,$00,$E1,$A0,$00,$00,$00,$AF,$B1,$58,$00,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$D0,$45,$49,$91,$0A,$30,$00,$04,$30,$40,$02,$F2,$6F,$C5,$A0,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$8A,$09,$09,$24,$2A,$4A,$80,$00,$00,$10,$10,$41,$C0,$00,$09,$02,$80,$01,$82,$54,$10,$15,$A0,$0F,$F0,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$49,$56,$49,$00,$00,$00,$00,$00,$00,$0C,$0A,$C4,$04,$07,$C0,$2D,$04,$E4,$0D,$44,$1E,$DE,$7F,$FE,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$A9,$21,$04,$95,$80,$00,$00,$00,$00,$02,$00,$2B,$80,$00,$02,$F4,$34,$3C,$41,$01,$77,$A5,$8F,$F8,$00,$00,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$92,$D0,$48,$24,$A4,$90,$00,$00,$00,$00,$3A,$00,$00,$12,$AB,$81,$F1,$0D,$48,$17,$C8,$0D,$72,$A6,$80,$28,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$00,$25,$69,$42,$50,$94,$A5,$69,$00,$00,$00,$6A,$0A,$AA,$82,$BE,$18,$0F,$44,$A3,$20,$5C,$30,$00,$0A,$05,$E0,$58,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$21,$2A,$A5,$08,$48,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$83,$17,$00,$B4,$4C,$01,$40,$A0,$00,$15,$0D,$A3,$80,$00,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$29,$25,$50,$60,$4E,$08,$21,$40,$50,$E0,$00,$00,$12,$17,$E8,$A8,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$A2,$0E,$2A,$0A,$15,$24,$04,$00,$18,$80,$01,$A6,$A7,$02,$C0,$00,$00,$00 ;
 $4B00 DEFB $00,$00,$AB,$89,$6F,$20,$CF,$4A,$80,$00,$00,$18,$20,$63,$20,$10,$BE,$05,$20,$03,$C2,$46,$28,$4B,$C0,$3F,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$49,$12,$4F,$00,$00,$00,$00,$00,$00,$08,$01,$64,$08,$1F,$80,$56,$08,$90,$1A,$08,$27,$FC,$7F,$FC,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$89,$18,$C4,$94,$80,$00,$00,$00,$00,$03,$20,$95,$50,$00,$81,$68,$38,$9E,$22,$02,$EE,$8B,$0F,$F0,$00,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$12,$5C,$48,$27,$3C,$9C,$00,$00,$00,$00,$34,$00,$20,$24,$57,$40,$78,$0A,$88,$2D,$A2,$04,$A7,$F5,$80,$08,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$00,$25,$29,$73,$96,$E4,$A5,$29,$00,$00,$00,$30,$15,$D5,$55,$74,$35,$8A,$A4,$09,$00,$A8,$00,$2A,$A0,$24,$E0,$B0,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$21,$28,$B9,$0E,$30,$00,$00,$00,$00,$00,$00,$10,$06,$3D,$06,$61,$C4,$78,$4A,$48,$E1,$40,$00,$02,$A2,$68,$40,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$04,$02,$A0,$E0,$90,$09,$00,$E0,$21,$40,$00,$00,$00,$4D,$FA,$A0,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$08,$19,$13,$04,$2F,$80,$00,$01,$0C,$00,$0A,$F3,$59,$91,$E0,$00,$00,$00 ;
 $4C00 DEFB $00,$00,$AA,$09,$29,$24,$22,$4A,$E0,$00,$00,$14,$50,$06,$01,$05,$62,$22,$90,$03,$04,$55,$10,$96,$90,$7E,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$49,$52,$49,$00,$00,$00,$00,$00,$00,$0C,$12,$B0,$84,$FF,$80,$3D,$09,$02,$14,$10,$09,$F0,$7F,$F8,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$89,$04,$24,$94,$80,$00,$00,$00,$00,$01,$90,$02,$80,$00,$42,$F2,$74,$AD,$22,$65,$CC,$26,$1F,$E1,$00,$00,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$92,$50,$48,$24,$A4,$90,$00,$00,$00,$00,$19,$00,$50,$4A,$AD,$80,$B0,$87,$40,$5F,$44,$23,$05,$47,$C0,$78,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$00,$25,$29,$42,$52,$94,$A5,$29,$00,$00,$00,$2A,$62,$7C,$A2,$B8,$2A,$07,$C2,$30,$80,$1C,$00,$BF,$EA,$00,$59,$70,$00,$00,$00 ;
 $4CA0 DEFB $00,$00,$21,$28,$A1,$08,$48,$00,$00,$00,$00,$00,$00,$51,$40,$F8,$87,$29,$A4,$7D,$22,$02,$A2,$80,$00,$15,$51,$94,$A0,$00,$00,$00 ;
 $4CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$48,$28,$00,$C9,$38,$06,$90,$58,$10,$C0,$00,$05,$40,$12,$FC,$50,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8F,$00,$18,$16,$04,$17,$0A,$00,$00,$5E,$00,$01,$65,$CE,$29,$D0,$00,$00,$00 ;
 $4D00 DEFB $00,$00,$AA,$09,$29,$20,$22,$4A,$A0,$00,$00,$10,$20,$80,$12,$4B,$80,$15,$40,$06,$85,$4A,$85,$2F,$18,$FC,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$4A,$12,$89,$00,$00,$00,$00,$00,$00,$0A,$04,$7C,$00,$3F,$00,$5E,$12,$9C,$38,$10,$2F,$48,$6D,$F0,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$89,$04,$24,$94,$80,$00,$00,$00,$00,$01,$D0,$05,$00,$00,$15,$E0,$21,$1E,$04,$73,$98,$9C,$3C,$01,$00,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$12,$50,$48,$24,$A4,$90,$00,$00,$00,$00,$0E,$00,$72,$05,$57,$02,$78,$46,$84,$AE,$84,$55,$CA,$8D,$C0,$B8,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$25,$29,$42,$52,$94,$A5,$29,$00,$00,$00,$11,$D0,$0D,$55,$60,$70,$07,$A1,$00,$40,$38,$0A,$C0,$1F,$40,$0C,$B0,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$21,$28,$A1,$08,$48,$00,$00,$00,$00,$00,$00,$B9,$CF,$E1,$0E,$D4,$C2,$1A,$11,$91,$C1,$00,$00,$02,$E8,$6D,$60,$00,$00,$00 ;
 $4DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$01,$A5,$50,$07,$44,$E8,$00,$40,$00,$29,$25,$05,$5F,$50,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BE,$A0,$3A,$24,$08,$2F,$C4,$00,$00,$0A,$00,$02,$BB,$E3,$74,$E0,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$53,$DC,$E9,$21,$C2,$32,$E0,$00,$00,$18,$08,$8F,$01,$16,$00,$2B,$80,$0F,$09,$23,$02,$5E,$1D,$FC,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$E5,$12,$89,$00,$00,$00,$00,$00,$00,$05,$00,$AF,$00,$0E,$00,$BD,$17,$0C,$B0,$22,$5F,$D0,$F9,$80,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$8B,$B9,$CE,$64,$80,$00,$00,$00,$00,$00,$80,$0A,$40,$00,$AB,$74,$1B,$8F,$14,$37,$02,$41,$38,$03,$00,$00,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$3A,$50,$EF,$24,$A4,$9E,$00,$00,$00,$00,$19,$40,$20,$10,$AE,$86,$3D,$07,$40,$59,$42,$3E,$80,$2B,$D8,$F0,$04,$00,$00,$00 ;
 $4E80 DEFB $00,$00,$19,$2E,$7A,$4E,$93,$19,$2E,$00,$00,$00,$1B,$83,$D1,$EB,$D0,$D9,$03,$D0,$24,$42,$5C,$57,$3F,$E1,$E8,$08,$60,$00,$00,$00 ;
 $4EA0 DEFB $00,$00,$1C,$C8,$A1,$EF,$48,$00,$00,$00,$00,$00,$00,$12,$1B,$42,$8C,$10,$61,$0B,$13,$62,$A2,$00,$00,$09,$75,$12,$30,$00,$00,$00 ;
 $4EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$34,$02,$01,$C2,$28,$03,$A3,$30,$00,$20,$03,$85,$C2,$A0,$3E,$30,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$74,$00,$31,$48,$08,$5F,$52,$00,$00,$57,$00,$04,$71,$F1,$6A,$F0,$00,$00,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$14,$19,$80,$48,$00,$15,$44,$0C,$11,$22,$A1,$BD,$3F,$FF,$C0,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$01,$5F,$C0,$00,$00,$5A,$0E,$9A,$28,$44,$AF,$A1,$D3,$02,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E4,$01,$00,$00,$15,$C0,$C2,$1E,$91,$86,$04,$AA,$70,$01,$80,$04,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$01,$5D,$06,$7A,$03,$A2,$14,$02,$7F,$00,$09,$C9,$70,$0C,$00,$00,$00 ;
 $4F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$61,$86,$77,$20,$C3,$A5,$A8,$00,$34,$B0,$B8,$C0,$1E,$34,$11,$E0,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$FC,$15,$19,$24,$F0,$84,$8B,$05,$C0,$00,$00,$04,$FE,$8D,$10,$00,$00,$00 ;
 $4FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1A,$00,$03,$22,$A0,$81,$C0,$0A,$00,$60,$0C,$0B,$6B,$56,$1F,$A8,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$AA,$08,$68,$C8,$12,$3F,$A0,$00,$00,$A9,$80,$00,$AB,$9E,$FD,$60,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$D0,$00,$D0,$A4,$30,$1F,$70,$80,$00,$05,$40,$00,$75,$FF,$FA,$70,$00,$00,$00 ;
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$04,$0E,$12,$42,$03,$92,$00,$00,$00,$0F,$AB,$00,$B6,$FF,$2E,$A2,$00,$00,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$34,$4F,$40,$41,$50,$00,$00,$10,$00,$00,$AB,$F4,$04,$40,$7E,$E0,$00,$00,$00 ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$32,$10,$84,$09,$0A,$00,$40,$80,$40,$00,$00,$00,$00,$15,$DD,$15,$50,$00,$00,$00 ;
 $5080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$86,$44,$30,$80,$2F,$FB,$00,$28,$00,$00,$08,$20,$00,$01,$11,$17,$4B,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$8C,$2E,$00,$02,$00,$00,$01,$AA,$A0,$2B,$81,$40,$00,$00,$81,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$41,$87,$00,$20,$20,$DC,$20,$40,$EC,$00,$05,$F0,$BC,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$7E,$00,$00,$00,$00,$00,$00,$00,$02,$48,$69,$88,$00,$E8,$01,$72,$02,$0B,$C0,$00,$00,$14,$1E,$06,$0A,$A5,$10,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$A8,$00,$E8,$B4,$28,$A6,$D0,$00,$00,$0A,$A0,$00,$38,$F7,$EC,$20,$00,$00,$00 ;
 $5120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$40,$18,$13,$24,$10,$C1,$00,$40,$00,$15,$DD,$A0,$C0,$FE,$59,$84,$00,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$82,$D0,$92,$40,$80,$20,$81,$00,$00,$00,$00,$15,$7E,$AA,$A0,$9D,$C8,$00,$00,$00 ;
 $5160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$76,$4C,$88,$10,$24,$00,$2A,$40,$01,$04,$00,$08,$01,$01,$7A,$94,$80,$00,$00,$00 ;
 $5180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$C4,$09,$00,$5E,$A5,$80,$45,$58,$04,$08,$30,$00,$00,$08,$4A,$88,$80,$00,$00,$00 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$C3,$18,$00,$08,$00,$40,$02,$5F,$E0,$5F,$04,$80,$00,$00,$40,$40,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$01,$0A,$0A,$00,$00,$2E,$00,$10,$DA,$00,$0F,$81,$50,$10,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$81,$2E,$EE,$57,$77,$77,$50,$00,$05,$00,$D0,$80,$01,$50,$00,$1C,$02,$17,$A0,$00,$00,$00,$2E,$03,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$40,$01,$81,$62,$45,$49,$A0,$40,$00,$21,$68,$00,$45,$E3,$DA,$A0,$00,$00,$00 ;
 $5220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$A0,$34,$25,$08,$5C,$3F,$00,$80,$00,$02,$B5,$43,$3E,$1E,$B0,$C8,$00,$00,$00 ;
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$47,$41,$52,$21,$04,$00,$54,$00,$41,$80,$00,$02,$BD,$55,$E8,$B8,$B0,$00,$00,$00 ;
 $5260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$64,$43,$10,$10,$00,$10,$00,$00,$00,$00,$00,$00,$40,$80,$AD,$13,$20,$00,$00,$00 ;
 $5280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$45,$88,$27,$0A,$B5,$02,$80,$00,$08,$08,$38,$BC,$00,$00,$02,$05,$2B,$00,$00,$00,$00 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$20,$80,$74,$3C,$30,$00,$80,$0A,$2B,$40,$BE,$0B,$C0,$00,$00,$82,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$54,$47,$16,$90,$00,$04,$02,$10,$A0,$EC,$00,$27,$80,$F0,$23,$0C,$63,$20,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$9D,$2A,$AA,$75,$52,$44,$50,$00,$00,$11,$21,$80,$02,$00,$00,$2E,$05,$4D,$40,$12,$11,$10,$5C,$16,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$81,$D2,$70,$40,$F1,$40,$20,$00,$88,$50,$00,$28,$DB,$F5,$40,$00,$00,$00 ;
 $5320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$12,$01,$F8,$26,$08,$AA,$01,$00,$00,$00,$05,$ED,$E0,$C0,$E9,$7A,$E0,$00,$00,$00 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$47,$02,$14,$21,$0A,$80,$01,$00,$00,$80,$00,$01,$5F,$BB,$B4,$5D,$80,$00,$00,$00 ;
 $5360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$C8,$80,$90,$20,$40,$00,$20,$40,$00,$11,$00,$02,$90,$24,$7B,$96,$50,$00,$00,$00 ;
 $5380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$EB,$10,$41,$0F,$D0,$01,$00,$04,$04,$00,$71,$6C,$00,$00,$00,$49,$01,$00,$00,$00,$00 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$40,$38,$FD,$E0,$00,$00,$04,$5F,$80,$70,$1F,$80,$00,$00,$50,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$D1,$27,$2D,$04,$07,$C0,$05,$01,$41,$D8,$00,$D3,$05,$D0,$35,$96,$B5,$90,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$A1,$2E,$EE,$57,$62,$64,$70,$00,$04,$20,$00,$80,$05,$00,$00,$12,$02,$AA,$80,$00,$00,$00,$F0,$38,$02,$10,$80,$00,$00,$00,$00 ;
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$03,$0A,$40,$83,$7C,$20,$00,$00,$52,$28,$00,$1D,$BC,$EB,$80,$00,$00,$00 ;
 $5420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$0E,$60,$4C,$10,$54,$55,$00,$08,$00,$02,$FF,$D1,$00,$12,$FA,$60,$00,$00,$00 ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8E,$85,$24,$12,$21,$40,$80,$80,$04,$00,$00,$02,$17,$F5,$4A,$5A,$D0,$00,$00,$00 ;
 $5460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$A8,$80,$20,$40,$00,$00,$10,$00,$00,$00,$00,$00,$45,$02,$2B,$08,$E8,$00,$00,$00 ;
 $5480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$5A,$30,$82,$F6,$80,$25,$81,$0A,$AA,$00,$82,$B0,$00,$00,$00,$02,$42,$00,$00,$00,$00 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$4A,$00,$E1,$F5,$B6,$00,$40,$10,$BE,$80,$F0,$2C,$06,$00,$00,$01,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$80,$1F,$7A,$20,$1F,$F0,$00,$08,$02,$F0,$00,$A0,$0B,$E0,$C3,$8E,$73,$90,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$A1,$22,$AA,$55,$52,$44,$50,$00,$08,$01,$01,$40,$02,$00,$50,$05,$00,$00,$00,$00,$75,$51,$E0,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$80,$07,$84,$A0,$05,$EB,$00,$00,$00,$2D,$14,$00,$28,$CE,$E7,$C0,$00,$00,$00 ;
 $5520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$30,$50,$9A,$20,$A8,$00,$00,$00,$00,$04,$BB,$68,$00,$01,$7D,$10,$00,$00,$00 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$88,$22,$02,$54,$81,$3F,$00,$08,$20,$00,$01,$0A,$FF,$B4,$2F,$60,$00,$00,$00 ;
 $5560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$51,$00,$20,$45,$10,$00,$0F,$E0,$00,$40,$00,$00,$0A,$A8,$5F,$89,$C4,$00,$00,$00 ;
 $5580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$2D,$C0,$05,$D5,$40,$0E,$00,$00,$02,$01,$85,$F0,$00,$00,$00,$00,$20,$00,$00,$00,$00 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$81,$C3,$C8,$57,$00,$00,$08,$5F,$00,$70,$5C,$0A,$00,$04,$10,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$C0,$1D,$38,$00,$1D,$5E,$81,$04,$41,$E8,$00,$F2,$1F,$03,$70,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$9D,$22,$AA,$55,$52,$44,$50,$00,$02,$0A,$88,$00,$00,$01,$0A,$00,$00,$00,$00,$10,$22,$60,$C1,$79,$16,$A5,$90,$00,$00,$00,$00 ;
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$06,$04,$80,$02,$FE,$80,$00,$00,$56,$8D,$00,$55,$ED,$CF,$A0,$00,$00,$00 ;
 $5620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C1,$A0,$94,$20,$54,$01,$00,$0A,$00,$10,$5F,$F0,$00,$04,$FA,$AA,$00,$00,$00 ;
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$1D,$54,$42,$04,$2A,$00,$40,$80,$00,$40,$00,$00,$14,$5F,$DA,$27,$70,$00,$00,$00 ;
 $5660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$B2,$40,$40,$80,$00,$00,$00,$10,$00,$85,$80,$00,$01,$15,$3F,$4B,$82,$00,$00,$00 ;
 $5680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$04,$A1,$0E,$A2,$02,$50,$00,$02,$00,$83,$8B,$80,$80,$00,$00,$40,$40,$00,$00,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$04,$78,$A2,$90,$8A,$C0,$20,$00,$3D,$00,$40,$BC,$1D,$00,$21,$22,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$21,$3D,$68,$00,$3A,$2B,$A2,$08,$03,$F0,$A8,$E5,$3F,$05,$E1,$9E,$E7,$10,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$81,$22,$EE,$55,$52,$77,$50,$00,$11,$55,$00,$40,$10,$00,$00,$81,$00,$00,$00,$02,$55,$50,$02,$F2,$8A,$F7,$10,$00,$00,$00,$00 ;
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$02,$0D,$08,$42,$15,$8F,$00,$00,$00,$1F,$5E,$80,$09,$73,$96,$40,$00,$00,$00 ;
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0E,$11,$08,$42,$A0,$7F,$00,$02,$00,$01,$16,$BA,$11,$02,$F6,$70,$00,$00,$00 ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$19,$00,$44,$88,$45,$04,$00,$00,$00,$00,$00,$00,$0A,$AA,$EC,$2E,$E8,$00,$00,$00 ;
 $5760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$62,$60,$40,$85,$7C,$00,$10,$10,$00,$07,$10,$00,$08,$4A,$AA,$89,$C0,$00,$00,$00 ;
 $5780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$B0,$1D,$01,$00,$80,$80,$01,$00,$43,$17,$80,$C0,$00,$00,$00,$A0,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$00,$C3,$85,$00,$01,$70,$00,$08,$7E,$00,$02,$F8,$2E,$00,$02,$40,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$92,$74,$B0,$80,$70,$02,$E5,$01,$85,$E0,$04,$F7,$3A,$07,$C0,$94,$52,$80,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$02,$00,$26,$00,$00,$00,$00,$00,$00,$07,$C1,$16,$A5,$90,$00,$00,$00,$00 ; }
@label=ATTRIBUTE_FILE
 $5800 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$45,$05,$47,$47,$47,$47,$47 ; {Attributes
 $5820 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$45,$47,$05,$47,$47,$47,$47,$47 ;
 $5840 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$47,$47,$04,$44,$45,$45,$47,$47,$47,$47,$47,$47 ;
 $5860 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$47,$47,$47,$47,$44,$44,$47,$46,$44,$45,$47,$47,$47,$47,$06,$47,$47 ;
 $5880 DEFB $47,$42,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$47,$47,$46,$44,$44,$46,$46,$47,$45,$45,$47,$47,$47,$06,$47,$47 ;
 $58A0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$47,$47,$44,$46,$44,$46,$05,$46,$45,$45,$45,$47,$47,$47,$47,$47 ;
 $58C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$04,$47,$47,$46,$44,$46,$44,$44,$46,$44,$46,$46,$45,$45,$47,$47,$47,$47,$47,$47,$47 ;
 $58E0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$47,$44,$46,$44,$44,$44,$46,$46,$46,$44,$46,$45,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5900 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$44,$44,$44,$44,$04,$06,$46,$44,$05,$05,$45,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5920 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$06,$44,$42,$42,$04,$46,$04,$44,$45,$45,$45,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5940 DEFB $47,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$46,$46,$44,$44,$42,$04,$04,$06,$44,$04,$45,$45,$45,$47,$47,$45,$05,$47,$47,$47,$47 ;
 $5960 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$46,$47,$04,$04,$04,$04,$44,$44,$04,$45,$45,$45,$45,$45,$45,$45,$45,$05,$47,$47 ;
 $5980 DEFB $47,$47,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$46,$44,$04,$04,$04,$06,$44,$44,$04,$04,$44,$05,$05,$05,$45,$45,$45,$05,$47,$47 ;
 $59A0 DEFB $47,$47,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47,$47,$46,$04,$04,$06,$04,$44,$04,$04,$04,$44,$05,$04,$04,$04,$45,$45,$45,$47,$47 ;
 $59C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$44,$44,$06,$05,$44,$44,$04,$04,$44,$04,$05,$05,$04,$04,$45,$05,$47,$47 ;
 $59E0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$44,$44,$06,$05,$05,$05,$44,$04,$04,$44,$01,$05,$05,$05,$05,$04,$04,$47,$47 ;
 $5A00 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$06,$06,$05,$05,$05,$04,$42,$04,$04,$44,$05,$05,$05,$05,$04,$47,$47,$47 ;
 $5A20 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$45,$06,$06,$05,$05,$05,$05,$05,$42,$05,$04,$04,$44,$05,$05,$05,$45,$47,$47,$47 ;
 $5A40 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$46,$44,$06,$06,$45,$05,$05,$05,$05,$05,$42,$42,$47,$04,$04,$04,$04,$45,$45,$47,$47,$47 ;
 $5A60 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$05,$06,$44,$06,$05,$05,$05,$04,$05,$05,$05,$42,$42,$42,$04,$04,$04,$04,$04,$45,$47,$47,$47 ;
 $5A80 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$06,$05,$44,$44,$44,$44,$04,$05,$05,$42,$42,$42,$42,$42,$04,$04,$04,$45,$47,$47,$47 ;
 $5AA0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$05,$04,$44,$04,$04,$04,$05,$05,$05,$05,$02,$42,$42,$42,$04,$04,$04,$47,$47,$47,$47 ;
 $5AC0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$05,$44,$04,$04,$04,$04,$05,$05,$05,$44,$02,$02,$42,$42,$02,$02,$02,$47,$47,$47,$47 ;
 $5AE0 DEFB $47,$02,$02,$02,$02,$02,$02,$02,$47,$05,$06,$05,$05,$04,$04,$04,$04,$05,$05,$05,$44,$42,$02,$02,$02,$02,$02,$02,$47,$47,$47,$47 ; }

; Unused
s$5B00 DEFS $60

; Rex projectile configuration
;
; Initialised at routine #R$A89D
g$5B60 DEFS $01C2

; Enemy projectiles configuration for the current room
;
; Initialised at routine #R$A89D.
; #TABLE(default)
; { =h Byte | =h Meaning }
; { 0x00 | x-position (in pixels) }
; { 0x01 | y-position (in pixels) }
; { 0x02 - 0x03 | Address of the location into the room graphic buffer }
; { 0x04 | x-delta (in pixels) }
; { 0x05 | y-delta (in pixels) }
; { 0x06 | Projectile status: $00 Destroyed - $01 Flying - $02 Impact 1 - $03
; Impact 2 }
; { 0x07 - 0x08 | Precomputed offset to add to address pointer into room
; graphic buffer every frame }
; { 0x0B | Projectile type: $00-$01 basic laser , $02 laser, $03 multiple, $04
; spray, $07 missile # Bit 7: subtype }
; { 0x0C | For $07: Missile trajectory index - For $02: Number of laser type
; $06 to create }
; { 0x0D | x-position for laser type $06 }
; { 0x0E | Laser duration counter - Destroy laser at $00 }
; TABLE#
g$5D22 DEFS $012C

; Drones configuration for multiple weapon
;
; Initialised at routine #R$A628. Three bytes for every drone. 8 drones max.
; Byte $00 - x-position of drone Byte $01 - y-position of drone Byte $02 -
; index into the offset position table for the drone
g$5E4E DEFS $18

; Data buffer for the state of every enemy on screen
;
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00 | X position }
; { 0x01 | Y position }
; { 0x02 | Bit 0: reverse sprite if set - Enemy direction $00 left $01 right }
; { 0x03 | $00 FOOT MAN not jumping - $01 FOOT MAN jumping ; For Enemy type $FF
; (EXPLOSION) debris expansion counter }
; { 0x04 - 0x05 | Address pointer to graphic data for static (non-animated)
; sprites or y-offset address pointer for FOOT MAN jumping }
; { 0x06 | FOOT MAN Falling speed? $00 Not falling  - $02 - $04  }
; { 0x07 | $00 Not used }
; { 0x08 | $00 Not used }
; { =r3 0x09 | Bit 7: 1 - graphic data for fixed (non animated) sprite.
; Computed by: address at 0x04-0x05 }
; {                   0 - graphic data from animated sprite. Computed by: base
; graphic data address at 0x0A-0x0B + offset of animation from base address at
; 0x16-0x17 }
; {            Bit 6-0: enemy type -> $00 FOOT MAN , $FF Explosion, $FE Bubble,
; $FD Smartbomb, $FC Question }
; { 0x0A - 0x0B | Address pointer to animation offset table }
; { 0x0C | Enemy status $00 dead / $01 alive }
; { 0x0D | Explosion counter (decrement)) }
; { 0x0E | Number of columns of the sprite (in bytes) }
; { 0x0F | Number of rows of the sprite (in pixels) }
; { 0x10 | Enemy speed velocity ($00 stopped). For Bubble: bubble y-position
; counter offset }
; { =r9 0x11 | Enemy type: }
; { 0x00 (FOOTMAN) - Counter for state change duration: $C8 fixed crouched }
; { 0x08 (SCANNER) - SCANNER movement direction - $00 horizontal (direction
; based on byte 0x02) - $01 moving down - $02 moving up - $03 bump/fire }
; { 0x10 (BOSS) - Boos direction $00 Up - $01 Down }
; { 0x0B - 0x0A (LAUNCHER/SHOOTER) - Counter desc . From shot frequency to 0.
; Shots when counter equals zero }
; { 0x0C - 0x0D (POD/MINE LAYER) - Move direction ($00 up ) }
; { 0x09 (SWING GUN) - Gun orientation if fixed (0 - left, 1 - left bottom, 2 -
; bottom, 3 - right bottom, 4 - right) }
; { 0x0E-0x0F (BLOB/MINE) State change counter }
; { 0xF9 (BUBBLE) Bubble duration counter }
; { =r9 0x12 | Enemy type: }
; { 0x00 (FOOTMAN): $00 walking - $01 crouched - $02 stand-by }
; { 0x08 (SCANNER): state change counter }
; { 0x10 (BOOS): Boss speed $02 healed $01 wounded }
; { 0x0B - 0x0A (LAUNCHER/SHOTTER) - Shot frequency }
; { 0x0C - 0x0D (POD/MINE LAYER) - speed }
; { 0x09 (SWING GUN) - $00 mobile - $01 fixed }
; { 0x0E (MINE) - Mine state $00 Continue with same x/y-delta $01 Change
; x/y-delta to chase Rex }
; { 0xF9 (BUBBLE) - MSB of address graphic data }
; { =r2 0x13 | 0xF9 (BUBBLE) LSB of address graphic data }
; { 0x10 (BOSS) Boss status $00 Good health $01 Wounded $02 Escape pod }
; { 0x14 | Enemy health }
; { 0x15 | Energy bubble $01 big / $00 small / $FF no bubble }
; { 0x16 - 0x17 | Address pointer to graphic data for animated sprites }
; TABLE#
g$5E66 DEFS $0180

; Stack (SP = $6000 at init game )
g$5FE6 DEFS $1A

; Not used
s$6000 DEFS $18

; Graphic data for FOOT MAN falling/jumping
;
; Copied in routine #R$DAC0 from data buffer at #R$E336
; .
; #UDGARRAY3,$47,,3;$E336-$E3F5-1-24(footman_falling)
b$6018 DEFS $C0

; Unused
s$60D8 DEFS $08

; Charset and ui graphics
;
; Base address for charset and ui graphics begins at $5FE0, but $20 first chars
; are not used
b$60E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$60E0,$47
 $60E8 DEFB $1C,$1C,$1C,$1C,$1C,$00,$1C,$00 ; #UDG$60E8,$47
 $60F0 DEFB $00,$00,$7B,$63,$7B,$0B,$78,$00 ; #UDG$60F0,$47
 $60F8 DEFB $00,$7E,$3E,$7E,$3E,$5E,$00,$00 ; #UDG$60F8,$47
 $6100 DEFB $00,$00,$63,$63,$7B,$6B,$78,$00 ; #UDG$6100,$47
 $6108 DEFB $00,$00,$7B,$1B,$1B,$1B,$18,$00 ; #UDG$6108,$47
 $6110 DEFB $00,$00,$7B,$6B,$7B,$6B,$78,$00 ; #UDG$6110,$47
 $6118 DEFB $00,$00,$7B,$6B,$7B,$0B,$08,$00 ; #UDG$6118,$47
 $6120 DEFB $00,$7E,$7C,$7E,$7C,$7E,$54,$00 ; #UDG$6120,$47
 $6128 DEFB $00,$7E,$7C,$7E,$7C,$7E,$54,$00 ; #UDG$6128,$47
 $6130 DEFB $00,$3E,$5C,$6E,$34,$5A,$54,$00 ; #UDG$6130,$47
 $6138 DEFB $00,$7E,$7C,$7E,$7C,$7E,$54,$00 ; #UDG$6138,$47
 $6140 DEFB $00,$00,$FF,$FF,$FF,$55,$00,$00 ; #UDG$6140,$47
 $6148 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$6148,$47
 $6150 DEFB $02,$06,$0C,$18,$30,$60,$40,$00 ; #UDG$6150,$47
 $6158 DEFB $00,$00,$55,$FF,$00,$AA,$00,$00 ; #UDG$6158,$47
 $6160 DEFB $7E,$62,$62,$22,$6A,$22,$5E,$00 ; #UDG$6160,$47
 $6168 DEFB $18,$08,$10,$18,$18,$18,$18,$00 ; #UDG$6168,$47
 $6170 DEFB $7E,$02,$02,$7E,$20,$40,$7E,$00 ; #UDG$6170,$47
 $6178 DEFB $7E,$06,$06,$3E,$02,$04,$7E,$00 ; #UDG$6178,$47
 $6180 DEFB $60,$22,$42,$7E,$02,$02,$02,$00 ; #UDG$6180,$47
 $6188 DEFB $7E,$20,$40,$7E,$02,$02,$7E,$00 ; #UDG$6188,$47
 $6190 DEFB $60,$60,$60,$3E,$62,$22,$5E,$00 ; #UDG$6190,$47
 $6198 DEFB $7E,$06,$06,$06,$02,$04,$06,$00 ; #UDG$6198,$47
 $61A0 DEFB $7E,$62,$62,$7E,$62,$22,$5E,$00 ; #UDG$61A0,$47
 $61A8 DEFB $7E,$22,$42,$7E,$02,$02,$02,$00 ; #UDG$61A8,$47
 $61B0 DEFB $00,$00,$00,$18,$00,$00,$00,$00 ; #UDG$61B0,$47
 $61B8 DEFB $38,$3C,$38,$3C,$38,$3C,$38,$3C ; #UDG$61B8,$47
 $61C0 DEFB $10,$34,$10,$34,$10,$34,$10,$34 ; #UDG$61C0,$47
 $61C8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$61C8,$47
 $61D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$61D0,$47
 $61D8 DEFB $FE,$0E,$1C,$38,$38,$00,$38,$00 ; #UDG$61D8,$47
 $61E0 DEFB $00,$00,$63,$63,$7B,$1B,$18,$00 ; #UDG$61E0,$47
 $61E8 DEFB $7E,$62,$62,$7E,$62,$22,$62,$00 ; #UDG$61E8,$47
 $61F0 DEFB $7C,$62,$62,$7C,$62,$22,$5C,$00 ; #UDG$61F0,$47
 $61F8 DEFB $7E,$60,$60,$60,$60,$20,$5E,$00 ; #UDG$61F8,$47
 $6200 DEFB $7C,$62,$62,$22,$62,$22,$5C,$00 ; #UDG$6200,$47
 $6208 DEFB $7E,$60,$60,$7C,$60,$20,$5E,$00 ; #UDG$6208,$47
 $6210 DEFB $7E,$60,$60,$7C,$60,$20,$60,$00 ; #UDG$6210,$47
 $6218 DEFB $7E,$60,$60,$66,$62,$22,$5E,$00 ; #UDG$6218,$47
 $6220 DEFB $62,$62,$7E,$62,$62,$22,$62,$00 ; #UDG$6220,$47
 $6228 DEFB $7E,$18,$18,$08,$10,$18,$7E,$00 ; #UDG$6228,$47
 $6230 DEFB $7E,$06,$02,$04,$06,$06,$3C,$00 ; #UDG$6230,$47
 $6238 DEFB $62,$64,$68,$60,$68,$24,$62,$00 ; #UDG$6238,$47
 $6240 DEFB $60,$60,$60,$20,$60,$20,$5E,$00 ; #UDG$6240,$47
 $6248 DEFB $62,$76,$7E,$6A,$22,$42,$62,$00 ; #UDG$6248,$47
 $6250 DEFB $62,$72,$7A,$6E,$66,$62,$62,$00 ; #UDG$6250,$47
 $6258 DEFB $7E,$62,$62,$62,$62,$22,$5E,$00 ; #UDG$6258,$47
 $6260 DEFB $7E,$62,$62,$7E,$60,$20,$60,$00 ; #UDG$6260,$47
 $6268 DEFB $7E,$62,$62,$62,$62,$26,$5E,$00 ; #UDG$6268,$47
 $6270 DEFB $7C,$62,$62,$74,$78,$2C,$66,$00 ; #UDG$6270,$47
 $6278 DEFB $7E,$20,$40,$7E,$02,$02,$7E,$00 ; #UDG$6278,$47
 $6280 DEFB $7E,$18,$18,$18,$08,$10,$18,$00 ; #UDG$6280,$47
 $6288 DEFB $62,$62,$62,$22,$62,$22,$5E,$00 ; #UDG$6288,$47
 $6290 DEFB $62,$22,$42,$62,$76,$3C,$18,$00 ; #UDG$6290,$47
 $6298 DEFB $62,$62,$62,$6A,$7E,$36,$62,$00 ; #UDG$6298,$47
 $62A0 DEFB $42,$66,$3C,$18,$3C,$66,$42,$00 ; #UDG$62A0,$47
 $62A8 DEFB $62,$36,$1C,$18,$30,$60,$40,$00 ; #UDG$62A8,$47
 $62B0 DEFB $5E,$06,$0C,$18,$30,$60,$7E,$00 ; #UDG$62B0,$47
 $62B8 DEFB $00,$3C,$7E,$72,$72,$72,$30,$00 ; #UDG$62B8,$47
 $62C0 DEFB $00,$00,$DE,$5A,$5A,$DE,$00,$00 ; #UDG$62C0,$47
 $62C8 DEFB $00,$00,$1B,$1B,$1B,$1B,$18,$00 ; #UDG$62C8,$47
 $62D0 DEFB $00,$00,$7B,$0B,$7B,$63,$78,$00 ; #UDG$62D0,$47
 $62D8 DEFB $00,$00,$7B,$1B,$3B,$1B,$78,$00 ; #UDG$62D8,$47

; Tile collision behaviour
;
; Every tile has an associated byte value, indicating the action to execute if
; Rex, an enemy or a shot collides with it.
; #TABLE(default)
; { =h Value | =h Action }
; { 0x00 | Decorative tile. Anyone can pass trough it. The tile is drawn over
; Rex or the enemy }
; { 0x01 | Platform tile. Anyone can walk over it and pass trought it if jumped
; from below }
; { 0x02 | Wall tile (solid). Nobody can move trough this tile }
; { 0x03 | Not used in game }
; { 0x04 | Destructible tile. Needs 3 hits to destroy }
; { 0x05 | Destructible tile. Needs 2 hits to destroy }
; { 0x06 | Destructible tile. Needs 1 hit to destroy }
; { 0x07 | Respawn activated }
; { 0x08 | Shield recharging }
; { 0x09 | Not used in game }
; { 0x0A | Get Laser weapon }
; { 0x0B | Get Multiple weapon }
; { 0x0C | Get Spray weapon }
; { 0x0D | Get Double Fire weapon }
; { 0x0E | Enemy always crouch and hopefully(?) fire }
; { 0x0F | Enemy always jump }
; { 0x10 | Enemy can crouch and fire }
; { 0x11 | Enemy can jump }
; { 0x12 | Elevator }
; TABLE#
b$62E0 DEFB $00,$02,$02,$02,$02,$00,$00,$00
 $62E8 DEFB $00,$00,$02,$02,$02,$02,$00,$00
 $62F0 DEFB $11,$02,$00,$01,$00,$00,$00,$00
 $62F8 DEFB $00,$01,$02,$00,$02,$01,$00,$00
 $6300 DEFB $02,$01,$00,$02,$00,$02,$02,$02
 $6308 DEFB $02,$01,$01,$01,$01,$00,$01,$02
 $6310 DEFB $02,$01,$00,$00,$02,$02,$02,$01
 $6318 DEFB $02,$00,$01,$01,$01,$01,$01,$01
 $6320 DEFB $02,$01,$02,$00,$00,$00,$00,$02
 $6328 DEFB $00,$01,$07,$07,$01,$01,$01,$01
 $6330 DEFB $02,$02,$02,$00,$00,$02,$02,$02
 $6338 DEFB $00,$00,$00,$00,$00,$02,$02,$02
 $6340 DEFB $00,$02,$00,$00,$00,$00,$00,$00
 $6348 DEFB $00,$00,$00,$01,$00,$00,$05,$00
 $6350 DEFB $00,$0E,$00,$00,$00,$00,$00,$00
 $6358 DEFB $00,$00,$01,$00,$12,$00,$00,$00
 $6360 DEFB $02,$0F,$02,$00,$00,$12,$00,$12
 $6368 DEFB $00,$04,$05,$06,$01,$00,$00,$02
 $6370 DEFB $02,$10,$02,$00,$00,$01,$01,$01
 $6378 DEFB $01,$04,$05,$06,$00,$00,$02,$02
 $6380 DEFB $02,$02,$02,$02,$02,$01,$02,$01
 $6388 DEFB $02,$04,$05,$06,$00,$00,$00,$00
 $6390 DEFB $02,$02,$02,$02,$00,$02,$01,$01
 $6398 DEFB $01,$01,$01,$00,$00,$00,$00,$00
 $63A0 DEFB $02,$02,$02,$02,$02,$02,$00,$02
 $63A8 DEFB $02,$02,$02,$02,$02,$00,$01,$01
 $63B0 DEFB $00,$00,$02,$02,$02,$02,$01,$02
 $63B8 DEFB $00,$00,$00,$00,$02,$02,$00,$00
 $63C0 DEFB $01,$02,$01,$02,$02,$02,$02,$00
 $63C8 DEFB $0D,$0D,$0A,$0A,$0B,$0B,$0C,$0C
 $63D0 DEFB $02,$02,$02,$02,$02,$02,$00,$00
 $63D8 DEFB $00,$00,$08,$08,$00,$00,$00,$00

; Tiles graphic data
;
; Every 8 byte respresent the sprite for a tile. There are 256 tiles. The
; attribute data for every sprite is defined in #R$6BE0 #TILETABLE(0,32)
; #TILETABLE(32,32) #TILETABLE(64,32) #TILETABLE(96,32) #TILETABLE(128,32)
; #TILETABLE(160,32) #TILETABLE(192,32) #TILETABLE(224,32)
b$63E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $63E8 DEFB $00,$7E,$40,$7E,$02,$02,$7E,$00
 $63F0 DEFB $00,$00,$00,$10,$00,$00,$00,$00
 $63F8 DEFB $00,$00,$30,$30,$00,$00,$00,$00
 $6400 DEFB $00,$00,$00,$00,$00,$00,$00,$02
 $6408 DEFB $00,$15,$3F,$7A,$35,$78,$34,$78
 $6410 DEFB $00,$55,$FF,$AA,$55,$00,$AA,$00
 $6418 DEFB $72,$38,$72,$38,$72,$38,$72,$38
 $6420 DEFB $00,$AA,$00,$55,$AA,$FF,$55,$00
 $6428 DEFB $00,$7A,$74,$7A,$54,$00,$F5,$AB
 $6430 DEFB $7E,$3C,$7E,$00,$52,$3C,$7E,$3C
 $6438 DEFB $00,$30,$30,$30,$3F,$31,$3A,$30
 $6440 DEFB $92,$B1,$92,$B1,$92,$B1,$92,$B1
 $6448 DEFB $92,$B1,$92,$B1,$92,$80,$AA,$00
 $6450 DEFB $00,$8B,$87,$8B,$86,$8B,$87,$8B
 $6458 DEFB $00,$FE,$FC,$FE,$D4,$FE,$FC,$FE
 $6460 DEFB $00,$60,$50,$67,$51,$01,$02,$00
 $6468 DEFB $00,$00,$00,$20,$00,$00,$00,$00
 $6470 DEFB $00,$34,$00,$7E,$2C,$6E,$6C,$00
 $6478 DEFB $00,$00,$00,$00,$02,$00,$00,$00
 $6480 DEFB $00,$00,$00,$00,$00,$00,$00,$AA
 $6488 DEFB $74,$3A,$7F,$2A,$75,$40,$2A,$00
 $6490 DEFB $3A,$50,$FA,$50,$AA,$04,$A8,$00
 $6498 DEFB $00,$54,$FA,$78,$72,$B8,$72,$38
 $64A0 DEFB $4E,$1C,$4E,$1C,$4E,$1C,$4E,$1C
 $64A8 DEFB $00,$56,$0C,$56,$00,$FF,$FF,$AA
 $64B0 DEFB $00,$00,$40,$28,$54,$2A,$00,$7E
 $64B8 DEFB $00,$04,$00,$7F,$7F,$00,$24,$24
 $64C0 DEFB $00,$20,$A3,$02,$B4,$BF,$00,$10
 $64C8 DEFB $00,$CD,$E6,$73,$A8,$54,$00,$00
 $64D0 DEFB $00,$00,$12,$11,$12,$11,$00,$00
 $64D8 DEFB $00,$00,$F0,$F0,$F0,$F0,$00,$00
 $64E0 DEFB $0C,$1C,$38,$3C,$78,$7C,$F8,$B4
 $64E8 DEFB $00,$FE,$00,$FE,$AA,$00,$54,$00
 $64F0 DEFB $00,$54,$C0,$FF,$FF,$AA,$00,$00
 $64F8 DEFB $00,$6D,$00,$55,$2B,$00,$55,$00
 $6500 DEFB $08,$08,$AA,$CB,$EA,$CB,$EB,$CB
 $6508 DEFB $00,$7F,$40,$5D,$42,$57,$4F,$5F
 $6510 DEFB $00,$FE,$02,$FA,$00,$52,$F8,$FA
 $6518 DEFB $F8,$F2,$F8,$E2,$F0,$F2,$E0,$FA
 $6520 DEFB $57,$55,$40,$5E,$40,$57,$5F,$5F
 $6528 DEFB $AB,$F5,$00,$54,$7A,$74,$7A,$00
 $6530 DEFB $5E,$2E,$00,$0A,$04,$02,$00,$01
 $6538 DEFB $00,$FF,$00,$AA,$00,$3B,$15,$00
 $6540 DEFB $00,$FE,$00,$54,$00,$EE,$54,$00
 $6548 DEFB $00,$7A,$74,$7A,$00,$FF,$F5,$00
 $6550 DEFB $00,$6A,$10,$3A,$00,$FF,$00,$AA
 $6558 DEFB $00,$00,$40,$28,$54,$2A,$00,$7E
 $6560 DEFB $F8,$FC,$F8,$BC,$F8,$BC,$B8,$9C
 $6568 DEFB $6A,$00,$F5,$00,$7A,$74,$00,$7E
 $6570 DEFB $54,$2A,$00,$6A,$00,$7A,$3A,$7A
 $6578 DEFB $00,$02,$40,$00,$00,$08,$00,$00
 $6580 DEFB $49,$AA,$49,$08,$4A,$08,$00,$00
 $6588 DEFB $1F,$1F,$5F,$17,$5F,$00,$55,$00
 $6590 DEFB $F2,$F8,$F2,$E8,$52,$00,$AA,$00
 $6598 DEFB $FA,$02,$40,$52,$00,$02,$A8,$FA
 $65A0 DEFB $00,$4C,$50,$44,$54,$40,$5C,$00
 $65A8 DEFB $7A,$00,$3C,$00,$18,$00,$5A,$42
 $65B0 DEFB $00,$15,$3F,$7A,$35,$78,$34,$78
 $65B8 DEFB $0C,$49,$ED,$AC,$4D,$0C,$AC,$0C
 $65C0 DEFB $72,$38,$00,$FF,$FD,$00,$72,$38
 $65C8 DEFB $74,$3A,$7F,$2A,$75,$40,$2A,$00
 $65D0 DEFB $00,$55,$37,$57,$35,$75,$20,$7D
 $65D8 DEFB $00,$55,$AB,$81,$81,$81,$81,$DD
 $65E0 DEFB $B8,$9C,$48,$44,$20,$20,$10,$08
 $65E8 DEFB $7A,$7C,$7A,$7C,$00,$FA,$ED,$FA
 $65F0 DEFB $00,$64,$24,$6B,$2B,$64,$24,$04
 $65F8 DEFB $00,$00,$00,$08,$1C,$08,$00,$00
 $6600 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6608 DEFB $0B,$20,$41,$02,$CB,$00,$87,$00
 $6610 DEFB $40,$F0,$F8,$00,$68,$00,$F4,$00
 $6618 DEFB $0C,$0E,$AC,$C6,$EC,$CE,$E4,$CE
 $6620 DEFB $00,$00,$00,$10,$08,$10,$04,$04
 $6628 DEFB $00,$5E,$5E,$00,$3C,$00,$18,$00
 $6630 DEFB $00,$4F,$57,$00,$2D,$00,$07,$00
 $6638 DEFB $00,$FA,$FA,$00,$FC,$00,$A0,$00
 $6640 DEFB $00,$7A,$7A,$00,$3C,$00,$18,$00
 $6648 DEFB $3A,$50,$FA,$50,$AA,$04,$A8,$00
 $6650 DEFB $00,$A8,$F4,$FA,$50,$BA,$50,$3A
 $6658 DEFB $74,$3A,$7F,$2A,$75,$40,$2A,$00
 $6660 DEFB $00,$00,$00,$00,$00,$44,$00,$64
 $6668 DEFB $01,$7D,$3D,$7D,$3D,$7D,$01,$4D
 $6670 DEFB $24,$24,$7F,$40,$78,$0B,$08,$08
 $6678 DEFB $00,$02,$0F,$0E,$05,$00,$40,$92
 $6680 DEFB $0C,$1C,$0B,$13,$94,$5A,$20,$88
 $6688 DEFB $00,$45,$42,$10,$10,$45,$42,$00
 $6690 DEFB $00,$7E,$FE,$08,$00,$7E,$BE,$00
 $6698 DEFB $44,$AE,$4C,$06,$0C,$AE,$04,$0A
 $66A0 DEFB $7A,$B4,$3B,$DD,$9A,$4D,$8A,$00
 $66A8 DEFB $00,$00,$00,$20,$50,$68,$50,$00
 $66B0 DEFB $00,$00,$22,$25,$22,$25,$22,$00
 $66B8 DEFB $00,$00,$7F,$7F,$7F,$7F,$7F,$00
 $66C0 DEFB $00,$00,$58,$10,$58,$10,$58,$00
 $66C8 DEFB $BA,$BD,$BA,$BD,$BA,$BD,$BA,$BD
 $66D0 DEFB $40,$00,$40,$00,$40,$00,$40,$00
 $66D8 DEFB $80,$50,$80,$50,$80,$50,$80,$50
 $66E0 DEFB $0D,$64,$6D,$04,$6D,$64,$6D,$04
 $66E8 DEFB $6D,$64,$09,$64,$69,$04,$69,$00
 $66F0 DEFB $55,$FF,$00,$5A,$50,$4A,$50,$42
 $66F8 DEFB $04,$52,$25,$7A,$3D,$5E,$3C,$1A
 $6700 DEFB $39,$34,$51,$0A,$4C,$06,$04,$84
 $6708 DEFB $14,$2A,$5D,$2A,$3C,$3A,$18,$1C
 $6710 DEFB $00,$04,$08,$C9,$4A,$22,$24,$D3
 $6718 DEFB $00,$00,$00,$00,$40,$40,$22,$8A
 $6720 DEFB $00,$C6,$E8,$48,$16,$56,$30,$5A
 $6728 DEFB $00,$02,$37,$7A,$34,$0E,$4C,$00
 $6730 DEFB $00,$00,$00,$56,$4E,$56,$00,$00
 $6738 DEFB $00,$FF,$00,$FF,$AA,$00,$55,$00
 $6740 DEFB $00,$23,$25,$23,$25,$23,$25,$00
 $6748 DEFB $00,$F4,$FC,$F4,$FC,$F4,$FC,$00
 $6750 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6758 DEFB $00,$00,$00,$00,$00,$00,$3C,$7E
 $6760 DEFB $6D,$64,$6D,$64,$6D,$64,$0D,$64
 $6768 DEFB $00,$60,$50,$50,$60,$00,$00,$00
 $6770 DEFB $58,$4A,$50,$42,$58,$4A,$50,$42
 $6778 DEFB $3C,$38,$3D,$1C,$1D,$1A,$1C,$1A
 $6780 DEFB $60,$28,$14,$04,$3A,$60,$60,$38
 $6788 DEFB $10,$0C,$08,$08,$00,$00,$00,$00
 $6790 DEFB $68,$D0,$C8,$24,$20,$24,$00,$20
 $6798 DEFB $52,$34,$44,$4C,$06,$48,$08,$04
 $67A0 DEFB $59,$0A,$10,$12,$10,$00,$00,$10
 $67A8 DEFB $25,$2E,$1F,$24,$25,$24,$21,$00
 $67B0 DEFB $97,$8F,$97,$8F,$97,$8F,$97,$8F
 $67B8 DEFB $00,$00,$2C,$24,$2C,$24,$2C,$24
 $67C0 DEFB $25,$2B,$25,$2B,$25,$2B,$25,$00
 $67C8 DEFB $1F,$2F,$1F,$2F,$1F,$2F,$1F,$2F
 $67D0 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$5E
 $67D8 DEFB $FF,$FF,$FF,$AE,$FF,$48,$FF,$BE
 $67E0 DEFB $03,$07,$12,$05,$02,$07,$0A,$01
 $67E8 DEFB $00,$70,$10,$10,$20,$00,$00,$00
 $67F0 DEFB $C0,$E0,$48,$A0,$40,$E0,$50,$80
 $67F8 DEFB $0A,$08,$0C,$08,$04,$04,$00,$00
 $6800 DEFB $08,$10,$00,$10,$00,$00,$10,$00
 $6808 DEFB $47,$4B,$47,$4B,$47,$4B,$47,$49
 $6810 DEFB $00,$00,$00,$30,$10,$10,$00,$00
 $6818 DEFB $00,$2B,$00,$2B,$25,$2B,$25,$00
 $6820 DEFB $08,$10,$00,$00,$00,$00,$00,$00
 $6828 DEFB $00,$52,$E7,$6A,$80,$36,$78,$31
 $6830 DEFB $00,$12,$04,$6A,$80,$36,$18,$00
 $6838 DEFB $00,$10,$00,$5A,$90,$00,$18,$00
 $6840 DEFB $FF,$A1,$B1,$FF,$D3,$FF,$E7,$FF
 $6848 DEFB $02,$1A,$1A,$02,$57,$AA,$57,$EE
 $6850 DEFB $40,$58,$58,$40,$EA,$55,$EA,$77
 $6858 DEFB $00,$EF,$20,$EF,$00,$BA,$00,$00
 $6860 DEFB $01,$02,$01,$04,$0F,$05,$02,$00
 $6868 DEFB $00,$60,$50,$66,$55,$05,$06,$00
 $6870 DEFB $40,$C0,$A0,$70,$20,$80,$44,$A0
 $6878 DEFB $00,$05,$4F,$47,$4F,$05,$00,$00
 $6880 DEFB $00,$54,$FF,$FF,$FF,$54,$00,$00
 $6888 DEFB $00,$43,$00,$65,$00,$20,$10,$04
 $6890 DEFB $00,$FF,$00,$D6,$00,$7F,$3F,$0D
 $6898 DEFB $00,$FA,$00,$B4,$00,$FC,$F8,$A0
 $68A0 DEFB $FF,$05,$0B,$16,$2D,$5A,$B4,$68
 $68A8 DEFB $4C,$1E,$0C,$62,$F4,$62,$07,$92
 $68B0 DEFB $00,$04,$0C,$62,$54,$22,$04,$10
 $68B8 DEFB $00,$10,$00,$22,$54,$22,$00,$00
 $68C0 DEFB $7E,$6A,$70,$6A,$00,$6A,$70,$6A
 $68C8 DEFB $00,$20,$98,$A8,$9A,$AA,$98,$AA
 $68D0 DEFB $00,$00,$00,$00,$00,$AA,$00,$AA
 $68D8 DEFB $00,$00,$00,$00,$00,$22,$00,$26
 $68E0 DEFB $00,$01,$01,$04,$0E,$35,$7B,$B3
 $68E8 DEFB $4C,$1E,$0C,$62,$F4,$62,$07,$92
 $68F0 DEFB $00,$40,$E0,$4C,$1E,$5C,$8B,$52
 $68F8 DEFB $00,$80,$00,$40,$E0,$44,$2E,$74
 $6900 DEFB $00,$54,$C0,$FF,$FF,$AA,$00,$00
 $6908 DEFB $FF,$A0,$D0,$68,$B4,$5A,$2D,$16
 $6910 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6918 DEFB $2A,$20,$05,$2A,$0F,$2F,$0F,$25
 $6920 DEFB $2D,$5E,$B4,$68,$D0,$E1,$40,$04
 $6928 DEFB $12,$38,$78,$32,$07,$17,$02,$00
 $6930 DEFB $02,$28,$18,$30,$02,$11,$02,$00
 $6938 DEFB $12,$08,$48,$20,$00,$14,$02,$00
 $6940 DEFB $00,$FE,$FE,$FE,$FE,$FE,$FE,$00
 $6948 DEFB $00,$04,$18,$14,$58,$54,$18,$54
 $6950 DEFB $00,$00,$00,$00,$AA,$55,$AA,$55
 $6958 DEFB $B0,$26,$B6,$20,$B6,$26,$B6,$20
 $6960 DEFB $12,$38,$78,$32,$07,$17,$02,$00
 $6968 DEFB $69,$96,$4F,$96,$68,$F6,$6F,$96
 $6970 DEFB $40,$E0,$40,$A0,$C8,$A0,$50,$A0
 $6978 DEFB $54,$E1,$42,$81,$C0,$82,$67,$F2
 $6980 DEFB $10,$08,$00,$00,$00,$00,$00,$00
 $6988 DEFB $B4,$7A,$2D,$16,$0B,$87,$02,$20
 $6990 DEFB $55,$00,$2A,$55,$7F,$7F,$7F,$2D
 $6998 DEFB $54,$04,$A0,$54,$F0,$F4,$F0,$A4
 $69A0 DEFB $00,$5A,$A7,$EC,$C0,$00,$00,$00
 $69A8 DEFB $00,$02,$27,$76,$21,$6C,$1E,$2C
 $69B0 DEFB $00,$5A,$E5,$37,$03,$00,$00,$00
 $69B8 DEFB $FF,$FF,$FF,$ED,$EA,$ED,$EA,$FF
 $69C0 DEFB $FF,$FF,$FF,$7C,$6C,$6C,$7D,$FF
 $69C8 DEFB $FF,$FF,$FF,$0F,$1F,$0F,$5F,$FF
 $69D0 DEFB $00,$18,$18,$00,$AA,$55,$AA,$77
 $69D8 DEFB $B6,$26,$B6,$26,$B6,$26,$B0,$26
 $69E0 DEFB $12,$38,$78,$32,$07,$17,$02,$00
 $69E8 DEFB $89,$16,$2F,$76,$21,$06,$0F,$16
 $69F0 DEFB $00,$80,$00,$00,$40,$80,$00,$80
 $69F8 DEFB $02,$07,$0A,$00,$0A,$1D,$0B,$02
 $6A00 DEFB $07,$07,$38,$38,$C1,$E4,$02,$CF
 $6A08 DEFB $E0,$D0,$06,$E3,$E3,$00,$F6,$E2
 $6A10 DEFB $00,$00,$28,$00,$00,$00,$00,$00
 $6A18 DEFB $00,$10,$8E,$5F,$DF,$8F,$32,$77
 $6A20 DEFB $00,$52,$E7,$6A,$80,$36,$78,$31
 $6A28 DEFB $00,$50,$E4,$6A,$83,$36,$78,$34
 $6A30 DEFB $00,$02,$27,$76,$21,$6C,$1E,$AC
 $6A38 DEFB $00,$00,$43,$F6,$C1,$2C,$1E,$8C
 $6A40 DEFB $00,$08,$71,$FA,$FB,$F1,$4C,$EE
 $6A48 DEFB $6F,$4B,$45,$4B,$45,$4B,$45,$00
 $6A50 DEFB $E7,$E7,$E7,$E7,$A2,$45,$A2,$00
 $6A58 DEFB $B6,$26,$90,$26,$96,$20,$96,$00
 $6A60 DEFB $08,$00,$07,$4F,$47,$4F,$05,$00
 $6A68 DEFB $A0,$00,$FE,$FF,$FF,$FF,$54,$00
 $6A70 DEFB $07,$0B,$60,$C7,$C7,$00,$6F,$47
 $6A78 DEFB $00,$32,$D8,$E6,$46,$00,$CE,$EE
 $6A80 DEFB $E0,$E0,$1C,$1C,$83,$27,$40,$F3
 $6A88 DEFB $00,$00,$00,$00,$00,$C0,$DC,$1E
 $6A90 DEFB $00,$7C,$7D,$54,$29,$00,$01,$7C
 $6A98 DEFB $88,$32,$76,$37,$42,$E8,$40,$00
 $6AA0 DEFB $AA,$54,$A0,$22,$00,$20,$00,$00
 $6AA8 DEFB $28,$08,$00,$08,$00,$00,$00,$00
 $6AB0 DEFB $15,$04,$00,$04,$00,$00,$00,$00
 $6AB8 DEFB $95,$02,$11,$02,$00,$00,$00,$00
 $6AC0 DEFB $11,$4C,$6E,$EC,$42,$17,$02,$00
 $6AC8 DEFB $00,$7E,$56,$2A,$56,$2A,$54,$00
 $6AD0 DEFB $00,$60,$24,$00,$24,$60,$00,$00
 $6AD8 DEFB $80,$E8,$88,$E2,$E8,$E8,$80,$F8
 $6AE0 DEFB $1F,$2F,$1F,$2F,$1F,$2F,$1F,$2F
 $6AE8 DEFB $60,$F4,$F2,$E4,$4A,$1D,$4F,$0A
 $6AF0 DEFB $2F,$1F,$2F,$1F,$2F,$1F,$2F,$1F
 $6AF8 DEFB $00,$00,$00,$0C,$0E,$1E,$1D,$0D
 $6B00 DEFB $00,$00,$30,$64,$7A,$F6,$7D,$FA
 $6B08 DEFB $0C,$60,$60,$80,$00,$00,$00,$00
 $6B10 DEFB $00,$7E,$42,$02,$42,$02,$56,$00
 $6B18 DEFB $10,$10,$18,$30,$18,$30,$18,$34
 $6B20 DEFB $00,$4F,$55,$00,$01,$01,$00,$01
 $6B28 DEFB $00,$FA,$5A,$00,$80,$80,$80,$80
 $6B30 DEFB $00,$4F,$57,$00,$2D,$00,$01,$01
 $6B38 DEFB $00,$FA,$FA,$00,$FC,$00,$80,$80
 $6B40 DEFB $00,$4F,$57,$00,$2D,$00,$07,$01
 $6B48 DEFB $00,$FA,$FA,$00,$FC,$00,$A0,$80
 $6B50 DEFB $00,$4E,$56,$00,$32,$02,$30,$23
 $6B58 DEFB $00,$7A,$7A,$00,$CC,$C0,$0C,$C8
 $6B60 DEFB $D0,$E4,$4E,$24,$72,$67,$77,$22
 $6B68 DEFB $04,$70,$E8,$F0,$EA,$F7,$67,$02
 $6B70 DEFB $88,$A0,$18,$BC,$3C,$99,$80,$08
 $6B78 DEFB $02,$0D,$5E,$ED,$43,$1A,$3C,$18
 $6B80 DEFB $7D,$36,$3E,$5F,$0D,$42,$E8,$4C
 $6B88 DEFB $80,$00,$A0,$90,$68,$58,$30,$00
 $6B90 DEFB $10,$10,$18,$30,$3C,$38,$54,$CA
 $6B98 DEFB $3C,$34,$3A,$7C,$7A,$5C,$AA,$45
 $6BA0 DEFB $00,$00,$00,$00,$10,$10,$28,$34
 $6BA8 DEFB $00,$18,$18,$DB,$D3,$18,$00,$18
 $6BB0 DEFB $00,$56,$3F,$56,$00,$16,$00,$00
 $6BB8 DEFB $00,$FA,$FC,$FA,$00,$F8,$00,$00
 $6BC0 DEFB $00,$7C,$7C,$7C,$FE,$7C,$38,$10
 $6BC8 DEFB $10,$38,$7C,$FE,$7C,$7C,$7C,$00
 $6BD0 DEFB $10,$3E,$7E,$FE,$7E,$3E,$10,$00
 $6BD8 DEFB $08,$7C,$7E,$7F,$7E,$7C,$08,$00

; Tiles attributes
;
; Every byte represent attribute data for the specific tile. The graphic data
; for every tile is defined in #R$63E0
b$6BE0 DEFB $47,$47,$05,$46,$45,$41,$41,$01
 $6BE8 DEFB $01,$05,$04,$41,$05,$04,$06,$07
 $6BF0 DEFB $47,$07,$45,$07,$07,$01,$01,$01
 $6BF8 DEFB $01,$06,$05,$41,$41,$03,$02,$02
 $6C00 DEFB $45,$05,$6F,$05,$05,$05,$05,$05
 $6C08 DEFB $05,$05,$05,$05,$05,$03,$05,$05
 $6C10 DEFB $45,$04,$04,$07,$04,$05,$05,$05
 $6C18 DEFB $07,$04,$03,$03,$03,$03,$05,$04
 $6C20 DEFB $05,$44,$41,$46,$42,$06,$07,$44
 $6C28 DEFB $02,$06,$46,$06,$06,$03,$03,$03
 $6C30 DEFB $07,$05,$42,$04,$44,$45,$45,$44
 $6C38 DEFB $02,$02,$01,$01,$45,$10,$50,$5A
 $6C40 DEFB $07,$41,$41,$42,$42,$42,$04,$04
 $6C48 DEFB $44,$04,$01,$45,$01,$01,$50,$01
 $6C50 DEFB $45,$47,$41,$42,$04,$42,$04,$44
 $6C58 DEFB $04,$05,$06,$02,$05,$66,$44,$0D
 $6C60 DEFB $02,$47,$42,$42,$44,$04,$05,$05
 $6C68 DEFB $45,$42,$42,$42,$30,$29,$28,$44
 $6C70 DEFB $43,$47,$43,$06,$07,$05,$45,$07
 $6C78 DEFB $68,$42,$42,$42,$04,$46,$07,$07
 $6C80 DEFB $43,$42,$02,$43,$6F,$28,$05,$45
 $6C88 DEFB $45,$02,$42,$42,$45,$46,$7D,$07
 $6C90 DEFB $42,$42,$43,$42,$44,$05,$45,$45
 $6C98 DEFB $42,$42,$02,$30,$30,$70,$29,$45
 $6CA0 DEFB $03,$02,$42,$02,$02,$02,$05,$43
 $6CA8 DEFB $42,$43,$42,$03,$42,$05,$41,$41
 $6CB0 DEFB $06,$07,$42,$42,$42,$42,$05,$02
 $6CB8 DEFB $04,$04,$04,$04,$03,$05,$41,$01
 $6CC0 DEFB $3E,$02,$37,$42,$03,$42,$05,$02
 $6CC8 DEFB $04,$46,$02,$03,$05,$07,$06,$47
 $6CD0 DEFB $03,$03,$02,$02,$43,$02,$42,$02
 $6CD8 DEFB $42,$05,$04,$45,$46,$46,$46,$46

; Supertiles layout
;
; Each supertile is composed of 9 tiles in a 3x3 grid configuration. Every
; block of 9 bytes references the tiles, from left to right, top to bottom.
; There are 256 supertile in game. Tile graphics data is defined in #R$63E0
b$6CE0 DEFB $00,$00,$00 ; {#SUPERTILE(0)
 $6CE3 DEFB $00,$00,$00 ;
 $6CE6 DEFB $00,$00,$00 ; }
 $6CE9 DEFB $A1,$C1,$82 ; {#SUPERTILE(1)
 $6CEC DEFB $C1,$A1,$D7 ;
 $6CEF DEFB $55,$56,$00 ; }
 $6CF2 DEFB $00,$00,$00 ; {#SUPERTILE(2)
 $6CF5 DEFB $A4,$21,$23 ;
 $6CF8 DEFB $32,$DD,$DD ; }
 $6CFB DEFB $39,$00,$00 ; {#SUPERTILE(3)
 $6CFE DEFB $49,$4A,$4B ;
 $6D01 DEFB $44,$00,$00 ; }
 $6D04 DEFB $F3,$55,$56 ; {#SUPERTILE(4)
 $6D07 DEFB $00,$55,$56 ;
 $6D0A DEFB $00,$00,$00 ; }
 $6D0D DEFB $55,$56,$B8 ; {#SUPERTILE(5)
 $6D10 DEFB $00,$00,$00 ;
 $6D13 DEFB $00,$00,$00 ; }
 $6D16 DEFB $39,$00,$00 ; {#SUPERTILE(6)
 $6D19 DEFB $4C,$B9,$B8 ;
 $6D1C DEFB $44,$00,$00 ; }
 $6D1F DEFB $2E,$2E,$2E ; {#SUPERTILE(7)
 $6D22 DEFB $3F,$3F,$3F ;
 $6D25 DEFB $3E,$3E,$3E ; }
 $6D28 DEFB $00,$00,$00 ; {#SUPERTILE(8)
 $6D2B DEFB $F9,$00,$00 ;
 $6D2E DEFB $9C,$00,$00 ; }
 $6D31 DEFB $00,$07,$00 ; {#SUPERTILE(9)
 $6D34 DEFB $00,$15,$06 ;
 $6D37 DEFB $00,$00,$00 ; }
 $6D3A DEFB $00,$00,$00 ; {#SUPERTILE(10)
 $6D3D DEFB $06,$06,$06 ;
 $6D40 DEFB $00,$00,$00 ; }
 $6D43 DEFB $00,$00,$00 ; {#SUPERTILE(11)
 $6D46 DEFB $00,$05,$06 ;
 $6D49 DEFB $00,$07,$00 ; }
 $6D4C DEFB $00,$07,$00 ; {#SUPERTILE(12)
 $6D4F DEFB $00,$07,$00 ;
 $6D52 DEFB $00,$07,$00 ; }
 $6D55 DEFB $00,$00,$00 ; {#SUPERTILE(13)
 $6D58 DEFB $BA,$FA,$FB ;
 $6D5B DEFB $00,$00,$00 ; }
 $6D5E DEFB $00,$00,$00 ; {#SUPERTILE(14)
 $6D61 DEFB $B8,$00,$00 ;
 $6D64 DEFB $00,$81,$00 ; }
 $6D67 DEFB $00,$07,$00 ; {#SUPERTILE(15)
 $6D6A DEFB $06,$16,$00 ;
 $6D6D DEFB $00,$00,$00 ; }
 $6D70 DEFB $00,$00,$00 ; {#SUPERTILE(16)
 $6D73 DEFB $06,$17,$00 ;
 $6D76 DEFB $00,$07,$00 ; }
 $6D79 DEFB $F1,$FA,$FB ; {#SUPERTILE(17)
 $6D7C DEFB $B0,$F0,$C1 ;
 $6D7F DEFB $F1,$F1,$C1 ; }
 $6D82 DEFB $00,$00,$00 ; {#SUPERTILE(18)
 $6D85 DEFB $00,$BA,$B9 ;
 $6D88 DEFB $00,$00,$00 ; }
 $6D8B DEFB $8F,$8F,$8F ; {#SUPERTILE(19)
 $6D8E DEFB $B0,$F0,$C1 ;
 $6D91 DEFB $F1,$F1,$C1 ; }
 $6D94 DEFB $C1,$C1,$82 ; {#SUPERTILE(20)
 $6D97 DEFB $E1,$A1,$55 ;
 $6D9A DEFB $C0,$E1,$00 ; }
 $6D9D DEFB $E1,$A1,$F1 ; {#SUPERTILE(21)
 $6DA0 DEFB $56,$A1,$A1 ;
 $6DA3 DEFB $00,$00,$E1 ; }
 $6DA6 DEFB $10,$00,$10 ; {#SUPERTILE(22)
 $6DA9 DEFB $22,$21,$23 ;
 $6DAC DEFB $32,$DD,$DD ; }
 $6DAF DEFB $00,$A7,$B6 ; {#SUPERTILE(23)
 $6DB2 DEFB $00,$C6,$C6 ;
 $6DB5 DEFB $81,$00,$00 ; }
 $6DB8 DEFB $00,$00,$00 ; {#SUPERTILE(24)
 $6DBB DEFB $00,$FF,$00 ;
 $6DBE DEFB $00,$00,$00 ; }
 $6DC1 DEFB $00,$00,$00 ; {#SUPERTILE(25)
 $6DC4 DEFB $00,$FE,$00 ;
 $6DC7 DEFB $00,$00,$00 ; }
 $6DCA DEFB $00,$00,$00 ; {#SUPERTILE(26)
 $6DCD DEFB $00,$FD,$00 ;
 $6DD0 DEFB $00,$00,$00 ; }
 $6DD3 DEFB $00,$00,$00 ; {#SUPERTILE(27)
 $6DD6 DEFB $00,$FC,$00 ;
 $6DD9 DEFB $00,$00,$00 ; }
 $6DDC DEFB $00,$00,$00 ; {#SUPERTILE(28)
 $6DDF DEFB $00,$00,$00 ;
 $6DE2 DEFB $00,$00,$10 ; }
 $6DE5 DEFB $2F,$1C,$0C ; {#SUPERTILE(29)
 $6DE8 DEFB $0A,$1C,$0D ;
 $6DEB DEFB $2F,$1C,$0C ; }
 $6DEE DEFB $10,$00,$00 ; {#SUPERTILE(30)
 $6DF1 DEFB $BA,$B9,$B8 ;
 $6DF4 DEFB $00,$78,$00 ; }
 $6DF7 DEFB $00,$BA,$A2 ; {#SUPERTILE(31)
 $6DFA DEFB $00,$00,$00 ;
 $6DFD DEFB $00,$00,$00 ; }
 $6E00 DEFB $A1,$A2,$00 ; {#SUPERTILE(32)
 $6E03 DEFB $A1,$F1,$00 ;
 $6E06 DEFB $A1,$A1,$A2 ; }
 $6E09 DEFB $82,$00,$00 ; {#SUPERTILE(33)
 $6E0C DEFB $92,$00,$00 ;
 $6E0F DEFB $A2,$00,$00 ; }
 $6E12 DEFB $F0,$B0,$A1 ; {#SUPERTILE(34)
 $6E15 DEFB $F1,$B1,$C1 ;
 $6E18 DEFB $F1,$F0,$A1 ; }
 $6E1B DEFB $A3,$00,$00 ; {#SUPERTILE(35)
 $6E1E DEFB $A1,$A3,$00 ;
 $6E21 DEFB $B0,$B0,$A3 ; }
 $6E24 DEFB $92,$00,$00 ; {#SUPERTILE(36)
 $6E27 DEFB $A1,$82,$00 ;
 $6E2A DEFB $B0,$A1,$92 ; }
 $6E2D DEFB $F1,$C1,$B0 ; {#SUPERTILE(37)
 $6E30 DEFB $B0,$F0,$C1 ;
 $6E33 DEFB $F1,$F1,$C1 ; }
 $6E36 DEFB $F0,$F2,$A1 ; {#SUPERTILE(38)
 $6E39 DEFB $F0,$F1,$C1 ;
 $6E3C DEFB $F1,$F2,$A1 ; }
 $6E3F DEFB $A1,$F2,$A1 ; {#SUPERTILE(39)
 $6E42 DEFB $B0,$A1,$B3 ;
 $6E45 DEFB $A1,$F2,$A1 ; }
 $6E48 DEFB $C0,$B0,$A1 ; {#SUPERTILE(40)
 $6E4B DEFB $C0,$F0,$C0 ;
 $6E4E DEFB $E1,$C0,$E1 ; }
 $6E51 DEFB $00,$10,$00 ; {#SUPERTILE(41)
 $6E54 DEFB $00,$00,$BA ;
 $6E57 DEFB $00,$00,$00 ; }
 $6E5A DEFB $E1,$C0,$F2 ; {#SUPERTILE(42)
 $6E5D DEFB $C0,$E4,$E3 ;
 $6E60 DEFB $F3,$F4,$E1 ; }
 $6E63 DEFB $00,$00,$80 ; {#SUPERTILE(43)
 $6E66 DEFB $00,$00,$90 ;
 $6E69 DEFB $00,$00,$C3 ; }
 $6E6C DEFB $00,$00,$C3 ; {#SUPERTILE(44)
 $6E6F DEFB $00,$00,$E1 ;
 $6E72 DEFB $00,$C3,$F0 ; }
 $6E75 DEFB $00,$E3,$A1 ; {#SUPERTILE(45)
 $6E78 DEFB $80,$C0,$A1 ;
 $6E7B DEFB $F3,$C1,$F0 ; }
 $6E7E DEFB $00,$00,$00 ; {#SUPERTILE(46)
 $6E81 DEFB $00,$00,$00 ;
 $6E84 DEFB $BA,$B8,$00 ; }
 $6E87 DEFB $00,$00,$00 ; {#SUPERTILE(47)
 $6E8A DEFB $C7,$C8,$C9 ;
 $6E8D DEFB $D7,$D8,$D9 ; }
 $6E90 DEFB $00,$00,$00 ; {#SUPERTILE(48)
 $6E93 DEFB $00,$00,$10 ;
 $6E96 DEFB $00,$00,$00 ; }
 $6E99 DEFB $9E,$9E,$9E ; {#SUPERTILE(49)
 $6E9C DEFB $AE,$00,$AE ;
 $6E9F DEFB $8D,$BE,$8E ; }
 $6EA2 DEFB $39,$00,$10 ; {#SUPERTILE(50)
 $6EA5 DEFB $4C,$B9,$B8 ;
 $6EA8 DEFB $44,$00,$00 ; }
 $6EAB DEFB $00,$00,$00 ; {#SUPERTILE(51)
 $6EAE DEFB $B8,$00,$00 ;
 $6EB1 DEFB $00,$00,$00 ; }
 $6EB4 DEFB $00,$00,$00 ; {#SUPERTILE(52)
 $6EB7 DEFB $00,$00,$BA ;
 $6EBA DEFB $00,$00,$00 ; }
 $6EBD DEFB $A1,$00,$00 ; {#SUPERTILE(53)
 $6EC0 DEFB $A1,$A3,$00 ;
 $6EC3 DEFB $C1,$D4,$00 ; }
 $6EC6 DEFB $82,$00,$00 ; {#SUPERTILE(54)
 $6EC9 DEFB $00,$00,$00 ;
 $6ECC DEFB $00,$00,$00 ; }
 $6ECF DEFB $CE,$CF,$8F ; {#SUPERTILE(55)
 $6ED2 DEFB $B1,$E1,$A1 ;
 $6ED5 DEFB $E1,$A1,$CC ; }
 $6ED8 DEFB $8F,$8F,$61 ; {#SUPERTILE(56)
 $6EDB DEFB $F3,$F3,$A1 ;
 $6EDE DEFB $F3,$A1,$A1 ; }
 $6EE1 DEFB $01,$01,$01 ; {#SUPERTILE(57)
 $6EE4 DEFB $00,$00,$00 ;
 $6EE7 DEFB $00,$00,$00 ; }
 $6EEA DEFB $00,$00,$00 ; {#SUPERTILE(58)
 $6EED DEFB $CA,$F2,$CC ;
 $6EF0 DEFB $DA,$DC,$E1 ; }
 $6EF3 DEFB $E1,$F3,$F1 ; {#SUPERTILE(59)
 $6EF6 DEFB $00,$F3,$E1 ;
 $6EF9 DEFB $00,$00,$E1 ; }
 $6EFC DEFB $C1,$C1,$82 ; {#SUPERTILE(60)
 $6EFF DEFB $E1,$A1,$D7 ;
 $6F02 DEFB $C0,$E1,$00 ; }
 $6F05 DEFB $8F,$8F,$8F ; {#SUPERTILE(61)
 $6F08 DEFB $B9,$A1,$A1 ;
 $6F0B DEFB $A1,$B9,$A1 ; }
 $6F0E DEFB $8F,$61,$CE ; {#SUPERTILE(62)
 $6F11 DEFB $00,$00,$00 ;
 $6F14 DEFB $7F,$7F,$7F ; }
 $6F17 DEFB $CE,$CF,$8F ; {#SUPERTILE(63)
 $6F1A DEFB $00,$31,$00 ;
 $6F1D DEFB $7F,$41,$7F ; }
 $6F20 DEFB $00,$50,$9E ; {#SUPERTILE(64)
 $6F23 DEFB $00,$60,$AE ;
 $6F26 DEFB $00,$70,$BE ; }
 $6F29 DEFB $00,$E3,$49 ; {#SUPERTILE(65)
 $6F2C DEFB $80,$C0,$A1 ;
 $6F2F DEFB $F3,$C1,$F0 ; }
 $6F32 DEFB $9E,$9F,$00 ; {#SUPERTILE(66)
 $6F35 DEFB $AE,$AF,$00 ;
 $6F38 DEFB $BE,$BF,$00 ; }
 $6F3B DEFB $CE,$CE,$CE ; {#SUPERTILE(67)
 $6F3E DEFB $00,$00,$00 ;
 $6F41 DEFB $0A,$0B,$00 ; }
 $6F44 DEFB $00,$00,$00 ; {#SUPERTILE(68)
 $6F47 DEFB $00,$00,$00 ;
 $6F4A DEFB $81,$93,$94 ; }
 $6F4D DEFB $B1,$C7,$A1 ; {#SUPERTILE(69)
 $6F50 DEFB $C1,$A1,$F3 ;
 $6F53 DEFB $00,$55,$56 ; }
 $6F56 DEFB $00,$00,$00 ; {#SUPERTILE(70)
 $6F59 DEFB $00,$00,$00 ;
 $6F5C DEFB $10,$00,$91 ; }
 $6F5F DEFB $C1,$C1,$49 ; {#SUPERTILE(71)
 $6F62 DEFB $E1,$A1,$D7 ;
 $6F65 DEFB $C0,$E1,$00 ; }
 $6F68 DEFB $00,$00,$F9 ; {#SUPERTILE(72)
 $6F6B DEFB $00,$00,$9C ;
 $6F6E DEFB $00,$00,$39 ; }
 $6F71 DEFB $A3,$00,$00 ; {#SUPERTILE(73)
 $6F74 DEFB $A1,$00,$00 ;
 $6F77 DEFB $A1,$D4,$00 ; }
 $6F7A DEFB $E1,$A1,$D7 ; {#SUPERTILE(74)
 $6F7D DEFB $E1,$B0,$00 ;
 $6F80 DEFB $D7,$00,$00 ; }
 $6F83 DEFB $00,$00,$80 ; {#SUPERTILE(75)
 $6F86 DEFB $00,$00,$00 ;
 $6F89 DEFB $00,$00,$00 ; }
 $6F8C DEFB $A2,$CC,$A2 ; {#SUPERTILE(76)
 $6F8F DEFB $B0,$F3,$B0 ;
 $6F92 DEFB $00,$B0,$C1 ; }
 $6F95 DEFB $C1,$D7,$00 ; {#SUPERTILE(77)
 $6F98 DEFB $A2,$82,$00 ;
 $6F9B DEFB $C1,$00,$00 ; }
 $6F9E DEFB $01,$01,$01 ; {#SUPERTILE(78)
 $6FA1 DEFB $01,$01,$01 ;
 $6FA4 DEFB $01,$01,$01 ; }
 $6FA7 DEFB $F3,$B0,$B8 ; {#SUPERTILE(79)
 $6FAA DEFB $00,$00,$00 ;
 $6FAD DEFB $00,$00,$00 ; }
 $6FB0 DEFB $C2,$BA,$E1 ; {#SUPERTILE(80)
 $6FB3 DEFB $92,$00,$90 ;
 $6FB6 DEFB $F2,$B8,$C3 ; }
 $6FB9 DEFB $00,$00,$C3 ; {#SUPERTILE(81)
 $6FBC DEFB $00,$00,$E1 ;
 $6FBF DEFB $00,$C3,$F0 ; }
 $6FC2 DEFB $00,$00,$00 ; {#SUPERTILE(82)
 $6FC5 DEFB $00,$BA,$B8 ;
 $6FC8 DEFB $00,$00,$00 ; }
 $6FCB DEFB $00,$00,$00 ; {#SUPERTILE(83)
 $6FCE DEFB $BA,$B9,$B8 ;
 $6FD1 DEFB $00,$00,$00 ; }
 $6FD4 DEFB $8F,$8F,$8F ; {#SUPERTILE(84)
 $6FD7 DEFB $00,$31,$00 ;
 $6FDA DEFB $7F,$41,$7F ; }
 $6FDD DEFB $8F,$8F,$8F ; {#SUPERTILE(85)
 $6FE0 DEFB $00,$00,$00 ;
 $6FE3 DEFB $7F,$7F,$7F ; }
 $6FE6 DEFB $B0,$F3,$F1 ; {#SUPERTILE(86)
 $6FE9 DEFB $80,$A1,$F3 ;
 $6FEC DEFB $00,$B0,$A2 ; }
 $6FEF DEFB $A1,$D3,$A1 ; {#SUPERTILE(87)
 $6FF2 DEFB $C0,$B1,$D4 ;
 $6FF5 DEFB $E1,$C0,$D2 ; }
 $6FF8 DEFB $00,$00,$8C ; {#SUPERTILE(88)
 $6FFB DEFB $00,$00,$44 ;
 $6FFE DEFB $00,$10,$00 ; }
 $7001 DEFB $A2,$00,$00 ; {#SUPERTILE(89)
 $7004 DEFB $A1,$A3,$00 ;
 $7007 DEFB $E1,$A1,$00 ; }
 $700A DEFB $00,$00,$00 ; {#SUPERTILE(90)
 $700D DEFB $00,$00,$00 ;
 $7010 DEFB $F2,$E3,$B0 ; }
 $7013 DEFB $00,$00,$00 ; {#SUPERTILE(91)
 $7016 DEFB $00,$00,$00 ;
 $7019 DEFB $B0,$E3,$C8 ; }
 $701C DEFB $00,$00,$10 ; {#SUPERTILE(92)
 $701F DEFB $BA,$B9,$B8 ;
 $7022 DEFB $00,$00,$00 ; }
 $7025 DEFB $00,$F3,$A2 ; {#SUPERTILE(93)
 $7028 DEFB $C4,$A1,$A2 ;
 $702B DEFB $C5,$C7,$A1 ; }
 $702E DEFB $00,$00,$00 ; {#SUPERTILE(94)
 $7031 DEFB $00,$00,$00 ;
 $7034 DEFB $BA,$B9,$B8 ; }
 $7037 DEFB $00,$00,$00 ; {#SUPERTILE(95)
 $703A DEFB $00,$00,$00 ;
 $703D DEFB $00,$BA,$B8 ; }
 $7040 DEFB $BA,$B9,$B8 ; {#SUPERTILE(96)
 $7043 DEFB $00,$00,$00 ;
 $7046 DEFB $00,$00,$00 ; }
 $7049 DEFB $CE,$CE,$CE ; {#SUPERTILE(97)
 $704C DEFB $C8,$C0,$A1 ;
 $704F DEFB $B0,$E1,$E1 ; }
 $7052 DEFB $9E,$9E,$9E ; {#SUPERTILE(98)
 $7055 DEFB $AE,$AE,$AE ;
 $7058 DEFB $BE,$BE,$BE ; }
 $705B DEFB $CF,$8F,$8F ; {#SUPERTILE(99)
 $705E DEFB $D4,$00,$00 ;
 $7061 DEFB $F4,$C1,$7F ; }
 $7064 DEFB $9F,$00,$00 ; {#SUPERTILE(100)
 $7067 DEFB $AF,$00,$00 ;
 $706A DEFB $BF,$00,$00 ; }
 $706D DEFB $8F,$8F,$61 ; {#SUPERTILE(101)
 $7070 DEFB $00,$00,$A1 ;
 $7073 DEFB $7F,$7F,$A1 ; }
 $7076 DEFB $00,$00,$50 ; {#SUPERTILE(102)
 $7079 DEFB $00,$00,$60 ;
 $707C DEFB $00,$00,$70 ; }
 $707F DEFB $00,$00,$00 ; {#SUPERTILE(103)
 $7082 DEFB $C7,$C8,$C9 ;
 $7085 DEFB $D7,$00,$00 ; }
 $7088 DEFB $00,$10,$00 ; {#SUPERTILE(104)
 $708B DEFB $B8,$00,$00 ;
 $708E DEFB $00,$00,$00 ; }
 $7091 DEFB $00,$FD,$00 ; {#SUPERTILE(105)
 $7094 DEFB $00,$00,$00 ;
 $7097 DEFB $BA,$B9,$B8 ; }
 $709A DEFB $00,$00,$00 ; {#SUPERTILE(106)
 $709D DEFB $00,$00,$00 ;
 $70A0 DEFB $10,$10,$00 ; }
 $70A3 DEFB $20,$DF,$AF ; {#SUPERTILE(107)
 $70A6 DEFB $30,$DF,$BF ;
 $70A9 DEFB $40,$DE,$CF ; }
 $70AC DEFB $4A,$4B,$4C ; {#SUPERTILE(108)
 $70AF DEFB $00,$00,$44 ;
 $70B2 DEFB $00,$00,$00 ; }
 $70B5 DEFB $00,$00,$49 ; {#SUPERTILE(109)
 $70B8 DEFB $00,$00,$44 ;
 $70BB DEFB $00,$00,$00 ; }
 $70BE DEFB $00,$00,$10 ; {#SUPERTILE(110)
 $70C1 DEFB $00,$00,$00 ;
 $70C4 DEFB $00,$00,$00 ; }
 $70C7 DEFB $60,$DF,$AF ; {#SUPERTILE(111)
 $70CA DEFB $70,$DF,$BF ;
 $70CD DEFB $61,$DE,$CF ; }
 $70D0 DEFB $95,$96,$97 ; {#SUPERTILE(112)
 $70D3 DEFB $00,$00,$00 ;
 $70D6 DEFB $00,$00,$00 ; }
 $70D9 DEFB $B6,$B6,$B7 ; {#SUPERTILE(113)
 $70DC DEFB $55,$56,$C6 ;
 $70DF DEFB $00,$00,$00 ; }
 $70E2 DEFB $00,$00,$00 ; {#SUPERTILE(114)
 $70E5 DEFB $81,$22,$23 ;
 $70E8 DEFB $D6,$32,$DD ; }
 $70EB DEFB $00,$00,$00 ; {#SUPERTILE(115)
 $70EE DEFB $00,$00,$00 ;
 $70F1 DEFB $10,$00,$00 ; }
 $70F4 DEFB $10,$00,$00 ; {#SUPERTILE(116)
 $70F7 DEFB $00,$00,$00 ;
 $70FA DEFB $00,$00,$00 ; }
 $70FD DEFB $89,$8A,$99 ; {#SUPERTILE(117)
 $7100 DEFB $8A,$A9,$89 ;
 $7103 DEFB $00,$89,$99 ; }
 $7106 DEFB $A9,$99,$00 ; {#SUPERTILE(118)
 $7109 DEFB $A9,$89,$9A ;
 $710C DEFB $89,$A9,$89 ; }
 $710F DEFB $00,$89,$A9 ; {#SUPERTILE(119)
 $7112 DEFB $A9,$99,$89 ;
 $7115 DEFB $00,$9A,$89 ; }
 $7118 DEFB $5D,$5E,$5F ; {#SUPERTILE(120)
 $711B DEFB $7B,$00,$7B ;
 $711E DEFB $7B,$00,$7B ; }
 $7121 DEFB $8A,$00,$00 ; {#SUPERTILE(121)
 $7124 DEFB $89,$99,$00 ;
 $7127 DEFB $AA,$99,$A9 ; }
 $712A DEFB $56,$F3,$F1 ; {#SUPERTILE(122)
 $712D DEFB $00,$F3,$E1 ;
 $7130 DEFB $00,$00,$E1 ; }
 $7133 DEFB $9A,$00,$00 ; {#SUPERTILE(123)
 $7136 DEFB $A9,$00,$00 ;
 $7139 DEFB $8A,$A9,$00 ; }
 $713C DEFB $99,$A9,$8A ; {#SUPERTILE(124)
 $713F DEFB $8A,$89,$9A ;
 $7142 DEFB $A9,$8A,$A9 ; }
 $7145 DEFB $00,$00,$89 ; {#SUPERTILE(125)
 $7148 DEFB $00,$8A,$A9 ;
 $714B DEFB $89,$C1,$A1 ; }
 $714E DEFB $AA,$89,$9A ; {#SUPERTILE(126)
 $7151 DEFB $89,$A9,$A9 ;
 $7154 DEFB $9A,$89,$A9 ; }
 $7157 DEFB $00,$10,$00 ; {#SUPERTILE(127)
 $715A DEFB $00,$3A,$3B ;
 $715D DEFB $00,$3C,$00 ; }
 $7160 DEFB $64,$65,$55 ; {#SUPERTILE(128)
 $7163 DEFB $00,$75,$00 ;
 $7166 DEFB $00,$00,$00 ; }
 $7169 DEFB $00,$3C,$00 ; {#SUPERTILE(129)
 $716C DEFB $F9,$4F,$3B ;
 $716F DEFB $9C,$00,$00 ; }
 $7172 DEFB $4A,$4B,$4C ; {#SUPERTILE(130)
 $7175 DEFB $A1,$C1,$B9 ;
 $7178 DEFB $D3,$F3,$C7 ; }
 $717B DEFB $00,$00,$00 ; {#SUPERTILE(131)
 $717E DEFB $00,$00,$00 ;
 $7181 DEFB $00,$55,$56 ; }
 $7184 DEFB $00,$00,$00 ; {#SUPERTILE(132)
 $7187 DEFB $00,$55,$56 ;
 $718A DEFB $00,$55,$56 ; }
 $718D DEFB $00,$55,$56 ; {#SUPERTILE(133)
 $7190 DEFB $00,$00,$00 ;
 $7193 DEFB $00,$00,$00 ; }
 $7196 DEFB $24,$24,$24 ; {#SUPERTILE(134)
 $7199 DEFB $34,$34,$34 ;
 $719C DEFB $00,$55,$56 ; }
 $719F DEFB $B6,$B6,$B6 ; {#SUPERTILE(135)
 $71A2 DEFB $C6,$55,$56 ;
 $71A5 DEFB $00,$00,$00 ; }
 $71A8 DEFB $E1,$A1,$D7 ; {#SUPERTILE(136)
 $71AB DEFB $56,$E5,$76 ;
 $71AE DEFB $00,$00,$00 ; }
 $71B1 DEFB $12,$00,$00 ; {#SUPERTILE(137)
 $71B4 DEFB $22,$21,$23 ;
 $71B7 DEFB $32,$DD,$DD ; }
 $71BA DEFB $7A,$E2,$E0 ; {#SUPERTILE(138)
 $71BD DEFB $87,$00,$00 ;
 $71C0 DEFB $7C,$00,$00 ; }
 $71C3 DEFB $E1,$F3,$F1 ; {#SUPERTILE(139)
 $71C6 DEFB $00,$F3,$55 ;
 $71C9 DEFB $00,$00,$00 ; }
 $71CC DEFB $5D,$5E,$5F ; {#SUPERTILE(140)
 $71CF DEFB $5A,$DD,$5C ;
 $71D2 DEFB $5D,$5E,$5F ; }
 $71D5 DEFB $00,$42,$DD ; {#SUPERTILE(141)
 $71D8 DEFB $00,$42,$E6 ;
 $71DB DEFB $00,$42,$DD ; }
 $71DE DEFB $25,$DD,$26 ; {#SUPERTILE(142)
 $71E1 DEFB $DD,$E6,$DD ;
 $71E4 DEFB $35,$DD,$36 ; }
 $71E7 DEFB $A2,$E6,$42 ; {#SUPERTILE(143)
 $71EA DEFB $A1,$A2,$42 ;
 $71ED DEFB $E1,$E6,$42 ; }
 $71F0 DEFB $00,$A1,$A1 ; {#SUPERTILE(144)
 $71F3 DEFB $00,$DD,$E6 ;
 $71F6 DEFB $00,$42,$DD ; }
 $71F9 DEFB $24,$24,$47 ; {#SUPERTILE(145)
 $71FC DEFB $34,$34,$57 ;
 $71FF DEFB $00,$00,$00 ; }
 $7202 DEFB $24,$24,$24 ; {#SUPERTILE(146)
 $7205 DEFB $34,$34,$34 ;
 $7208 DEFB $00,$00,$00 ; }
 $720B DEFB $B7,$FA,$FB ; {#SUPERTILE(147)
 $720E DEFB $C6,$00,$00 ;
 $7211 DEFB $00,$00,$00 ; }
 $7214 DEFB $01,$01,$01 ; {#SUPERTILE(148)
 $7217 DEFB $00,$05,$06 ;
 $721A DEFB $00,$07,$00 ; }
 $721D DEFB $00,$00,$00 ; {#SUPERTILE(149)
 $7220 DEFB $00,$00,$00 ;
 $7223 DEFB $D6,$D6,$D6 ; }
 $7226 DEFB $00,$00,$00 ; {#SUPERTILE(150)
 $7229 DEFB $00,$00,$00 ;
 $722C DEFB $81,$00,$00 ; }
 $722F DEFB $00,$00,$00 ; {#SUPERTILE(151)
 $7232 DEFB $00,$00,$00 ;
 $7235 DEFB $00,$00,$81 ; }
 $7238 DEFB $00,$00,$00 ; {#SUPERTILE(152)
 $723B DEFB $00,$00,$00 ;
 $723E DEFB $00,$00,$10 ; }
 $7241 DEFB $00,$00,$00 ; {#SUPERTILE(153)
 $7244 DEFB $00,$00,$00 ;
 $7247 DEFB $00,$10,$00 ; }
 $724A DEFB $51,$DD,$B0 ; {#SUPERTILE(154)
 $724D DEFB $DD,$DD,$42 ;
 $7250 DEFB $51,$42,$42 ; }
 $7253 DEFB $51,$52,$E6 ; {#SUPERTILE(155)
 $7256 DEFB $DD,$25,$26 ;
 $7259 DEFB $D6,$35,$36 ; }
 $725C DEFB $7C,$00,$00 ; {#SUPERTILE(156)
 $725F DEFB $79,$00,$00 ;
 $7262 DEFB $5D,$5E,$5F ; }
 $7265 DEFB $39,$00,$00 ; {#SUPERTILE(157)
 $7268 DEFB $4C,$00,$00 ;
 $726B DEFB $44,$00,$00 ; }
 $726E DEFB $00,$00,$00 ; {#SUPERTILE(158)
 $7271 DEFB $00,$FD,$00 ;
 $7274 DEFB $81,$00,$00 ; }
 $7277 DEFB $00,$00,$00 ; {#SUPERTILE(159)
 $727A DEFB $00,$00,$00 ;
 $727D DEFB $00,$93,$94 ; }
 $7280 DEFB $00,$00,$00 ; {#SUPERTILE(160)
 $7283 DEFB $00,$93,$94 ;
 $7286 DEFB $00,$D0,$D1 ; }
 $7289 DEFB $00,$00,$00 ; {#SUPERTILE(161)
 $728C DEFB $94,$00,$00 ;
 $728F DEFB $D1,$00,$00 ; }
 $7292 DEFB $00,$D0,$D1 ; {#SUPERTILE(162)
 $7295 DEFB $93,$94,$93 ;
 $7298 DEFB $D0,$D1,$D0 ; }
 $729B DEFB $A8,$88,$00 ; {#SUPERTILE(163)
 $729E DEFB $88,$00,$00 ;
 $72A1 DEFB $00,$00,$00 ; }
 $72A4 DEFB $A7,$B6,$B6 ; {#SUPERTILE(164)
 $72A7 DEFB $C6,$C6,$C6 ;
 $72AA DEFB $00,$00,$00 ; }
 $72AD DEFB $00,$81,$98 ; {#SUPERTILE(165)
 $72B0 DEFB $81,$98,$A8 ;
 $72B3 DEFB $98,$A8,$88 ; }
 $72B6 DEFB $B6,$B6,$B7 ; {#SUPERTILE(166)
 $72B9 DEFB $C6,$C6,$C6 ;
 $72BC DEFB $00,$00,$00 ; }
 $72BF DEFB $B6,$B6,$B6 ; {#SUPERTILE(167)
 $72C2 DEFB $C6,$C6,$C6 ;
 $72C5 DEFB $00,$00,$00 ; }
 $72C8 DEFB $00,$B4,$B5 ; {#SUPERTILE(168)
 $72CB DEFB $00,$00,$B4 ;
 $72CE DEFB $00,$00,$00 ; }
 $72D1 DEFB $A5,$81,$00 ; {#SUPERTILE(169)
 $72D4 DEFB $B5,$A5,$81 ;
 $72D7 DEFB $B4,$B5,$A5 ; }
 $72DA DEFB $00,$00,$00 ; {#SUPERTILE(170)
 $72DD DEFB $00,$00,$00 ;
 $72E0 DEFB $00,$91,$00 ; }
 $72E3 DEFB $00,$00,$00 ; {#SUPERTILE(171)
 $72E6 DEFB $00,$00,$00 ;
 $72E9 DEFB $00,$81,$00 ; }
 $72EC DEFB $10,$00,$00 ; {#SUPERTILE(172)
 $72EF DEFB $95,$96,$97 ;
 $72F2 DEFB $81,$00,$81 ; }
 $72F5 DEFB $00,$00,$00 ; {#SUPERTILE(173)
 $72F8 DEFB $00,$00,$00 ;
 $72FB DEFB $45,$46,$00 ; }
 $72FE DEFB $EE,$EF,$8C ; {#SUPERTILE(174)
 $7301 DEFB $00,$00,$44 ;
 $7304 DEFB $00,$00,$00 ; }
 $7307 DEFB $EC,$ED,$8C ; {#SUPERTILE(175)
 $730A DEFB $00,$00,$44 ;
 $730D DEFB $00,$00,$00 ; }
 $7310 DEFB $EA,$EB,$8C ; {#SUPERTILE(176)
 $7313 DEFB $00,$00,$44 ;
 $7316 DEFB $00,$00,$00 ; }
 $7319 DEFB $00,$00,$8C ; {#SUPERTILE(177)
 $731C DEFB $00,$00,$44 ;
 $731F DEFB $00,$00,$00 ; }
 $7322 DEFB $E8,$E9,$8C ; {#SUPERTILE(178)
 $7325 DEFB $00,$00,$44 ;
 $7328 DEFB $00,$00,$00 ; }
 $732B DEFB $00,$00,$00 ; {#SUPERTILE(179)
 $732E DEFB $00,$00,$00 ;
 $7331 DEFB $00,$00,$AD ; }
 $7334 DEFB $0E,$0F,$00 ; {#SUPERTILE(180)
 $7337 DEFB $1E,$1F,$00 ;
 $733A DEFB $0E,$0F,$9D ; }
 $733D DEFB $7B,$00,$7B ; {#SUPERTILE(181)
 $7340 DEFB $7B,$00,$7B ;
 $7343 DEFB $2D,$00,$2D ; }
 $7346 DEFB $5D,$5E,$5F ; {#SUPERTILE(182)
 $7349 DEFB $5D,$5E,$5F ;
 $734C DEFB $BB,$BC,$BD ; }
 $734F DEFB $85,$7E,$7D ; {#SUPERTILE(183)
 $7352 DEFB $87,$00,$00 ;
 $7355 DEFB $7C,$00,$00 ; }
 $7358 DEFB $00,$00,$00 ; {#SUPERTILE(184)
 $735B DEFB $95,$96,$97 ;
 $735E DEFB $00,$00,$00 ; }
 $7361 DEFB $10,$00,$00 ; {#SUPERTILE(185)
 $7364 DEFB $3B,$3B,$3B ;
 $7367 DEFB $00,$00,$00 ; }
 $736A DEFB $5D,$5E,$5F ; {#SUPERTILE(186)
 $736D DEFB $5A,$5B,$5C ;
 $7370 DEFB $5D,$5E,$5F ; }
 $7373 DEFB $CE,$CE,$CE ; {#SUPERTILE(187)
 $7376 DEFB $00,$00,$00 ;
 $7379 DEFB $0C,$1A,$0B ; }
 $737C DEFB $00,$00,$00 ; {#SUPERTILE(188)
 $737F DEFB $06,$06,$06 ;
 $7382 DEFB $00,$78,$00 ; }
 $7385 DEFB $00,$00,$00 ; {#SUPERTILE(189)
 $7388 DEFB $3B,$3B,$3B ;
 $738B DEFB $00,$78,$00 ; }
 $738E DEFB $00,$00,$00 ; {#SUPERTILE(190)
 $7391 DEFB $00,$10,$00 ;
 $7394 DEFB $BA,$B9,$B8 ; }
 $7397 DEFB $00,$67,$00 ; {#SUPERTILE(191)
 $739A DEFB $3B,$3B,$3B ;
 $739D DEFB $00,$78,$76 ; }
 $73A0 DEFB $CE,$CE,$CE ; {#SUPERTILE(192)
 $73A3 DEFB $00,$00,$00 ;
 $73A6 DEFB $2F,$1C,$0C ; }
 $73A9 DEFB $B9,$E3,$00 ; {#SUPERTILE(193)
 $73AC DEFB $A1,$F1,$00 ;
 $73AF DEFB $A1,$A1,$A2 ; }
 $73B2 DEFB $00,$00,$00 ; {#SUPERTILE(194)
 $73B5 DEFB $94,$00,$00 ;
 $73B8 DEFB $D1,$10,$00 ; }
 $73BB DEFB $00,$00,$00 ; {#SUPERTILE(195)
 $73BE DEFB $00,$00,$00 ;
 $73C1 DEFB $55,$56,$59 ; }
 $73C4 DEFB $00,$00,$00 ; {#SUPERTILE(196)
 $73C7 DEFB $53,$66,$67 ;
 $73CA DEFB $A1,$B0,$E1 ; }
 $73CD DEFB $00,$00,$00 ; {#SUPERTILE(197)
 $73D0 DEFB $00,$00,$00 ;
 $73D3 DEFB $A1,$B9,$B8 ; }
 $73D6 DEFB $00,$00,$00 ; {#SUPERTILE(198)
 $73D9 DEFB $00,$00,$00 ;
 $73DC DEFB $A1,$B0,$E1 ; }
 $73DF DEFB $00,$00,$00 ; {#SUPERTILE(199)
 $73E2 DEFB $00,$00,$00 ;
 $73E5 DEFB $BA,$B9,$A1 ; }
 $73E8 DEFB $00,$68,$A1 ; {#SUPERTILE(200)
 $73EB DEFB $80,$C0,$A1 ;
 $73EE DEFB $F3,$C1,$F0 ; }
 $73F1 DEFB $82,$00,$00 ; {#SUPERTILE(201)
 $73F4 DEFB $76,$00,$00 ;
 $73F7 DEFB $A2,$00,$00 ; }
 $73FA DEFB $E1,$A1,$E1 ; {#SUPERTILE(202)
 $73FD DEFB $E1,$E1,$74 ;
 $7400 DEFB $D7,$00,$84 ; }
 $7403 DEFB $00,$00,$00 ; {#SUPERTILE(203)
 $7406 DEFB $00,$00,$00 ;
 $7409 DEFB $53,$54,$68 ; }
 $740C DEFB $00,$00,$00 ; {#SUPERTILE(204)
 $740F DEFB $00,$00,$00 ;
 $7412 DEFB $66,$67,$67 ; }
 $7415 DEFB $00,$00,$00 ; {#SUPERTILE(205)
 $7418 DEFB $00,$E7,$00 ;
 $741B DEFB $F6,$F7,$F8 ; }
 $741E DEFB $00,$00,$00 ; {#SUPERTILE(206)
 $7421 DEFB $BA,$B9,$B8 ;
 $7424 DEFB $00,$78,$00 ; }
 $7427 DEFB $00,$53,$54 ; {#SUPERTILE(207)
 $742A DEFB $00,$BA,$B8 ;
 $742D DEFB $00,$00,$00 ; }
 $7430 DEFB $66,$00,$67 ; {#SUPERTILE(208)
 $7433 DEFB $BA,$B9,$B8 ;
 $7436 DEFB $00,$00,$00 ; }
 $7439 DEFB $00,$00,$00 ; {#SUPERTILE(209)
 $743C DEFB $53,$54,$67 ;
 $743F DEFB $A1,$E1,$F3 ; }
 $7442 DEFB $F3,$74,$B8 ; {#SUPERTILE(210)
 $7445 DEFB $00,$84,$00 ;
 $7448 DEFB $00,$00,$00 ; }
 $744B DEFB $E1,$A1,$F1 ; {#SUPERTILE(211)
 $744E DEFB $78,$A1,$A1 ;
 $7451 DEFB $00,$00,$E1 ; }
 $7454 DEFB $E1,$F3,$F1 ; {#SUPERTILE(212)
 $7457 DEFB $68,$F3,$E1 ;
 $745A DEFB $78,$76,$E1 ; }
 $745D DEFB $A1,$F2,$A1 ; {#SUPERTILE(213)
 $7460 DEFB $B0,$A1,$B3 ;
 $7463 DEFB $A1,$66,$A1 ; }
 $7466 DEFB $68,$66,$68 ; {#SUPERTILE(214)
 $7469 DEFB $78,$74,$78 ;
 $746C DEFB $00,$84,$00 ; }
 $746F DEFB $64,$65,$78 ; {#SUPERTILE(215)
 $7472 DEFB $00,$75,$00 ;
 $7475 DEFB $00,$00,$00 ; }
 $7478 DEFB $E1,$A1,$D7 ; {#SUPERTILE(216)
 $747B DEFB $E1,$B0,$76 ;
 $747E DEFB $D7,$00,$00 ; }
 $7481 DEFB $00,$00,$00 ; {#SUPERTILE(217)
 $7484 DEFB $00,$00,$00 ;
 $7487 DEFB $66,$67,$68 ; }
 $748A DEFB $63,$64,$65 ; {#SUPERTILE(218)
 $748D DEFB $73,$00,$75 ;
 $7490 DEFB $83,$00,$00 ; }
 $7493 DEFB $64,$65,$64 ; {#SUPERTILE(219)
 $7496 DEFB $00,$75,$00 ;
 $7499 DEFB $00,$00,$00 ; }
 $749C DEFB $65,$63,$64 ; {#SUPERTILE(220)
 $749F DEFB $75,$73,$00 ;
 $74A2 DEFB $00,$83,$00 ; }
 $74A5 DEFB $01,$01,$01 ; {#SUPERTILE(221)
 $74A8 DEFB $01,$04,$01 ;
 $74AB DEFB $01,$01,$01 ; }
 $74AE DEFB $01,$01,$01 ; {#SUPERTILE(222)
 $74B1 DEFB $13,$01,$13 ;
 $74B4 DEFB $01,$01,$01 ; }
 $74B7 DEFB $03,$01,$13 ; {#SUPERTILE(223)
 $74BA DEFB $13,$01,$01 ;
 $74BD DEFB $43,$33,$01 ; }
 $74C0 DEFB $13,$04,$33 ; {#SUPERTILE(224)
 $74C3 DEFB $04,$01,$03 ;
 $74C6 DEFB $01,$13,$04 ; }
 $74C9 DEFB $04,$01,$01 ; {#SUPERTILE(225)
 $74CC DEFB $01,$04,$01 ;
 $74CF DEFB $01,$01,$03 ; }
 $74D2 DEFB $01,$01,$11 ; {#SUPERTILE(226)
 $74D5 DEFB $01,$01,$01 ;
 $74D8 DEFB $01,$02,$01 ; }
 $74DB DEFB $01,$01,$02 ; {#SUPERTILE(227)
 $74DE DEFB $11,$03,$04 ;
 $74E1 DEFB $01,$01,$01 ; }
 $74E4 DEFB $00,$3C,$00 ; {#SUPERTILE(228)
 $74E7 DEFB $00,$3C,$3B ;
 $74EA DEFB $00,$3C,$00 ; }
 $74ED DEFB $00,$3C,$00 ; {#SUPERTILE(229)
 $74F0 DEFB $06,$06,$06 ;
 $74F3 DEFB $00,$3C,$00 ; }
 $74F6 DEFB $00,$00,$00 ; {#SUPERTILE(230)
 $74F9 DEFB $00,$20,$0D ;
 $74FC DEFB $00,$40,$0D ; }
 $74FF DEFB $CE,$CE,$CE ; {#SUPERTILE(231)
 $7502 DEFB $0D,$1A,$0B ;
 $7505 DEFB $0C,$1A,$0B ; }
 $7508 DEFB $00,$91,$00 ; {#SUPERTILE(232)
 $750B DEFB $95,$96,$97 ;
 $750E DEFB $00,$00,$00 ; }
 $7511 DEFB $00,$3C,$00 ; {#SUPERTILE(233)
 $7514 DEFB $00,$3C,$00 ;
 $7517 DEFB $00,$09,$00 ; }
 $751A DEFB $00,$07,$00 ; {#SUPERTILE(234)
 $751D DEFB $3B,$07,$3B ;
 $7520 DEFB $00,$07,$00 ; }
 $7523 DEFB $00,$3C,$00 ; {#SUPERTILE(235)
 $7526 DEFB $00,$4F,$3B ;
 $7529 DEFB $00,$00,$00 ; }
 $752C DEFB $00,$00,$00 ; {#SUPERTILE(236)
 $752F DEFB $00,$3A,$3B ;
 $7532 DEFB $00,$3C,$00 ; }
 $7535 DEFB $00,$3C,$00 ; {#SUPERTILE(237)
 $7538 DEFB $3B,$4D,$00 ;
 $753B DEFB $00,$00,$00 ; }
 $753E DEFB $00,$00,$00 ; {#SUPERTILE(238)
 $7541 DEFB $3B,$4E,$00 ;
 $7544 DEFB $00,$3C,$00 ; }
 $7547 DEFB $00,$3C,$00 ; {#SUPERTILE(239)
 $754A DEFB $00,$3C,$00 ;
 $754D DEFB $00,$3C,$00 ; }
 $7550 DEFB $00,$00,$00 ; {#SUPERTILE(240)
 $7553 DEFB $3B,$3B,$3B ;
 $7556 DEFB $00,$00,$00 ; }
 $7559 DEFB $8F,$8F,$8F ; {#SUPERTILE(241)
 $755C DEFB $00,$29,$00 ;
 $755F DEFB $00,$3C,$00 ; }
 $7562 DEFB $00,$00,$00 ; {#SUPERTILE(242)
 $7565 DEFB $00,$00,$00 ;
 $7568 DEFB $81,$00,$81 ; }
 $756B DEFB $00,$00,$00 ; {#SUPERTILE(243)
 $756E DEFB $81,$00,$00 ;
 $7571 DEFB $D6,$D6,$D6 ; }
 $7574 DEFB $CF,$8F,$8F ; {#SUPERTILE(244)
 $7577 DEFB $00,$00,$00 ;
 $757A DEFB $00,$00,$00 ; }
 $757D DEFB $8F,$8F,$8F ; {#SUPERTILE(245)
 $7580 DEFB $00,$00,$00 ;
 $7583 DEFB $00,$00,$00 ; }
 $7586 DEFB $8F,$8F,$8F ; {#SUPERTILE(246)
 $7589 DEFB $B9,$29,$A1 ;
 $758C DEFB $A1,$32,$A1 ; }
 $758F DEFB $00,$07,$00 ; {#SUPERTILE(247)
 $7592 DEFB $00,$07,$06 ;
 $7595 DEFB $00,$07,$00 ; }
 $7598 DEFB $00,$07,$00 ; {#SUPERTILE(248)
 $759B DEFB $00,$07,$00 ;
 $759E DEFB $00,$09,$00 ; }
 $75A1 DEFB $00,$12,$00 ; {#SUPERTILE(249)
 $75A4 DEFB $06,$22,$06 ;
 $75A7 DEFB $00,$32,$00 ; }
 $75AA DEFB $1B,$28,$27 ; {#SUPERTILE(250)
 $75AD DEFB $1B,$28,$27 ;
 $75B0 DEFB $1B,$35,$36 ; }
 $75B3 DEFB $1B,$25,$26 ; {#SUPERTILE(251)
 $75B6 DEFB $1B,$28,$27 ;
 $75B9 DEFB $1B,$28,$27 ; }
 $75BC DEFB $25,$26,$1B ; {#SUPERTILE(252)
 $75BF DEFB $38,$37,$1B ;
 $75C2 DEFB $35,$36,$1B ; }
 $75C5 DEFB $CE,$CE,$CE ; {#SUPERTILE(253)
 $75C8 DEFB $00,$00,$00 ;
 $75CB DEFB $00,$00,$00 ; }
 $75CE DEFB $8F,$61,$CE ; {#SUPERTILE(254)
 $75D1 DEFB $A1,$B0,$A1 ;
 $75D4 DEFB $B0,$A1,$E1 ; }
 $75D7 DEFB $0A,$0B,$00 ; {#SUPERTILE(255)
 $75DA DEFB $2F,$0B,$00 ;
 $75DD DEFB $0A,$0B,$00 ; }

; Room layout
;
; Every room is composed of 70 supertiles in a 10x7 grid configuration. Every
; supertile is a grid of 9 (3x3) tiles. This data block contains the references
; of the supertiles thats build every room (from left to right, top to bottom).
; The supertiles are defined at address #R$6CE0
;
; .
;
; ---------------------------------------- Room 0
; ---------------------------------------
; .
; #ROOM0
b$75E0 DEFB $2D,$27,$50,$25,$27,$2D,$28,$20,$27,$28
 $75EA DEFB $28,$D5,$28,$25,$DA,$D4,$28,$27,$DC,$D3
 $75F4 DEFB $26,$D6,$3B,$D8,$00,$00,$DB,$D7,$00,$00
 $75FE DEFB $27,$21,$4B,$36,$00,$00,$08,$08,$00,$18
 $7608 DEFB $50,$2F,$33,$CE,$00,$12,$03,$06,$5F,$00
 $7612 DEFB $D8,$00,$CD,$D9,$CC,$00,$00,$00,$D9,$2D
 $761C DEFB $20,$2D,$28,$27,$27,$24,$D1,$2D,$25,$27
; ---------------------------------------- Room 1
; ---------------------------------------
; .
; #ROOM1
 $7626 DEFB $28,$27,$27,$28,$14,$15,$27,$28,$27,$28
 $7630 DEFB $01,$D7,$D2,$DC,$00,$AD,$D7,$DB,$D4,$25
 $763A DEFB $00,$00,$00,$D0,$B3,$B4,$00,$00,$00,$45
 $7644 DEFB $00,$00,$CE,$00,$B1,$B2,$00,$00,$00,$00
 $764E DEFB $00,$52,$00,$00,$00,$46,$00,$00,$00,$18
 $7658 DEFB $23,$CD,$CB,$00,$00,$D3,$4A,$AB,$00,$2D
 $7662 DEFB $50,$27,$25,$20,$1B,$2B,$20,$27,$11,$27
; ---------------------------------------- Room 2
; ---------------------------------------
; .
; #ROOM2
 $766C DEFB $4C,$28,$27,$4D,$00,$00,$D4,$D5,$2D,$28
 $7676 DEFB $27,$27,$D8,$00,$08,$08,$00,$DB,$DC,$45
 $7680 DEFB $2D,$22,$21,$12,$03,$06,$00,$00,$00,$00
 $768A DEFB $3C,$D7,$00,$00,$00,$00,$00,$00,$52,$00
 $7694 DEFB $20,$D1,$52,$00,$AA,$00,$00,$D0,$00,$18
 $769E DEFB $62,$31,$64,$99,$60,$99,$00,$00,$AA,$40
 $76A8 DEFB $61,$61,$63,$55,$54,$55,$54,$55,$54,$3E
; ---------------------------------------- Room 3
; ---------------------------------------
; .
; #ROOM3
 $76B2 DEFB $28,$27,$28,$27,$27,$4C,$2D,$28,$27,$27
 $76BC DEFB $D8,$D6,$D4,$50,$27,$28,$27,$D5,$4A,$27
 $76C6 DEFB $00,$00,$00,$4C,$4A,$DC,$D7,$D2,$2B,$28
 $76D0 DEFB $00,$00,$00,$4B,$36,$52,$00,$00,$00,$DC
 $76DA DEFB $52,$00,$0D,$0E,$52,$00,$CE,$00,$5F,$18
 $76E4 DEFB $42,$00,$99,$60,$99,$00,$00,$00,$00,$40
 $76EE DEFB $3F,$55,$54,$55,$54,$55,$54,$55,$54,$3E
; ---------------------------------------- Room 4
; ---------------------------------------
; .
; #ROOM4
 $76F8 DEFB $27,$27,$20,$00,$5A,$00,$00,$00,$2D,$28
 $7702 DEFB $28,$4A,$27,$11,$27,$20,$D1,$18,$75,$79
 $770C DEFB $D5,$D8,$D3,$4A,$2D,$27,$27,$20,$27,$27
 $7716 DEFB $D2,$08,$08,$3B,$D4,$25,$27,$50,$4A,$D7
 $7720 DEFB $12,$03,$06,$00,$4B,$D3,$4A,$00,$00,$18
 $772A DEFB $42,$00,$AA,$60,$00,$AA,$AA,$AA,$60,$40
 $7734 DEFB $3F,$55,$54,$55,$54,$55,$54,$55,$54,$3E
; ---------------------------------------- Room 5
; ---------------------------------------
; .
; #ROOM5
 $773E DEFB $DB,$4F,$4F,$D4,$28,$27,$D5,$28,$27,$28
 $7748 DEFB $CD,$48,$48,$00,$77,$DC,$D2,$75,$4D,$3B
 $7752 DEFB $28,$47,$82,$50,$76,$D9,$00,$77,$76,$18
 $775C DEFB $DC,$00,$D7,$01,$3B,$27,$2A,$D1,$3C,$27
 $7766 DEFB $5E,$00,$CE,$00,$00,$D7,$04,$3B,$3C,$3B
 $7770 DEFB $42,$00,$AA,$00,$AA,$60,$00,$AA,$18,$40
 $777A DEFB $3F,$55,$54,$55,$54,$55,$54,$55,$54,$3E
; ---------------------------------------- Room 6
; ---------------------------------------
; .
; #ROOM6
 $7784 DEFB $28,$4A,$D6,$56,$4D,$00,$D7,$D4,$27,$56
 $778E DEFB $4D,$00,$00,$00,$76,$00,$00,$00,$4C,$3C
 $7798 DEFB $00,$D1,$2D,$11,$27,$4D,$AD,$00,$00,$00
 $77A2 DEFB $27,$D2,$D4,$01,$4F,$B3,$B4,$00,$1C,$18
 $77AC DEFB $4D,$00,$00,$48,$48,$B1,$B0,$1E,$2C,$2A
 $77B6 DEFB $42,$60,$AA,$6D,$6C,$99,$00,$66,$31,$31
 $77C0 DEFB $3F,$55,$54,$55,$54,$55,$54,$65,$61,$61
; ---------------------------------------- Room 7
; ---------------------------------------
; .
; #ROOM7
 $77CA DEFB $28,$D8,$00,$00,$5F,$1A,$00,$00,$D3,$27
 $77D4 DEFB $3C,$00,$00,$5F,$00,$00,$CE,$00,$2B,$27
 $77DE DEFB $00,$00,$5F,$00,$08,$08,$5F,$0D,$3A,$28
 $77E8 DEFB $00,$5F,$00,$12,$03,$06,$5B,$CD,$2D,$27
 $77F2 DEFB $24,$D1,$2D,$D5,$24,$2D,$28,$27,$50,$27
 $77FC DEFB $62,$31,$42,$D2,$66,$62,$31,$62,$31,$62
 $7806 DEFB $61,$61,$37,$13,$38,$61,$61,$61,$61,$61
; ---------------------------------------- Room 8
; ---------------------------------------
; .
; #ROOM8
 $7810 DEFB $27,$27,$28,$27,$4D,$1A,$27,$28,$3C,$4E
 $781A DEFB $CA,$D3,$27,$CA,$5E,$1F,$D4,$D5,$50,$24
 $7824 DEFB $00,$2D,$3C,$08,$08,$5E,$00,$D3,$27,$28
 $782E DEFB $2B,$27,$D8,$03,$32,$00,$5F,$00,$D3,$27
 $7838 DEFB $2D,$27,$C9,$00,$30,$2E,$00,$00,$2D,$25
 $7842 DEFB $27,$27,$2F,$33,$00,$5E,$29,$3A,$27,$3C
 $784C DEFB $28,$3C,$00,$C7,$C4,$C6,$C5,$00,$27,$24
; ---------------------------------------- Room 9
; ---------------------------------------
; .
; #ROOM9
 $7856 DEFB $28,$27,$CA,$4E,$E3,$4E,$E2,$E1,$4E,$E0
 $7860 DEFB $27,$27,$7B,$00,$00,$00,$00,$00,$E3,$DF
 $786A DEFB $DA,$77,$79,$00,$5F,$00,$00,$00,$00,$39
 $7874 DEFB $19,$7C,$7C,$00,$00,$5F,$00,$00,$00,$00
 $787E DEFB $00,$75,$7E,$7B,$5F,$00,$00,$00,$00,$00
 $7888 DEFB $11,$27,$27,$C1,$00,$00,$00,$48,$48,$2D
 $7892 DEFB $27,$28,$50,$4C,$35,$5F,$2D,$47,$82,$3C
; ---------------------------------------- Room 10
; --------------------------------------
; .
; #ROOM10
 $789C DEFB $28,$28,$27,$D5,$27,$D8,$DB,$DC,$4C,$C1
 $78A6 DEFB $27,$D4,$DA,$D6,$77,$79,$00,$00,$00,$D3
 $78B0 DEFB $3C,$D2,$00,$00,$00,$75,$00,$D0,$00,$00
 $78BA DEFB $4D,$00,$00,$00,$00,$7C,$7B,$00,$53,$00
 $78C4 DEFB $00,$00,$00,$00,$00,$77,$76,$CE,$48,$48
 $78CE DEFB $C1,$00,$00,$00,$2C,$27,$20,$CC,$41,$82
 $78D8 DEFB $28,$24,$C6,$D1,$28,$27,$27,$27,$50,$27
; ---------------------------------------- Room 11
; --------------------------------------
; .
; #ROOM11
 $78E2 DEFB $BA,$3C,$00,$00,$00,$00,$2B,$27,$B6,$C1
 $78EC DEFB $B5,$19,$00,$99,$44,$A0,$00,$D3,$27,$28
 $78F6 DEFB $BA,$93,$A4,$A9,$A4,$A7,$A6,$AD,$DC,$D3
 $7900 DEFB $B5,$19,$00,$A8,$A9,$99,$B3,$B4,$00,$00
 $790A DEFB $BA,$59,$AB,$00,$A8,$A6,$58,$AE,$48,$48
 $7914 DEFB $B6,$27,$20,$00,$00,$CC,$2C,$28,$47,$82
 $791E DEFB $27,$28,$4D,$00,$2D,$28,$27,$27,$4A,$28
; ---------------------------------------- Room 12
; --------------------------------------
; .
; #ROOM12
 $7928 DEFB $39,$BA,$00,$00,$00,$00,$00,$A0,$00,$00
 $7932 DEFB $19,$B5,$00,$00,$00,$00,$9F,$A2,$A1,$A0
 $793C DEFB $00,$BA,$C5,$00,$A4,$A7,$87,$A7,$87,$A7
 $7946 DEFB $2C,$8C,$20,$CF,$00,$00,$00,$00,$00,$00
 $7950 DEFB $2D,$B6,$27,$C1,$2D,$24,$00,$B8,$00,$2C
 $795A DEFB $27,$27,$C1,$D3,$27,$28,$20,$CD,$2D,$27
 $7964 DEFB $27,$27,$27,$D1,$27,$28,$27,$27,$27,$28
; ---------------------------------------- Room 13
; --------------------------------------
; .
; #ROOM13
 $796E DEFB $9B,$9A,$B7,$00,$00,$00,$9F,$00,$00,$00
 $7978 DEFB $3C,$D2,$B7,$00,$00,$00,$A2,$A1,$00,$00
 $7982 DEFB $24,$00,$B7,$00,$00,$A4,$87,$A7,$A6,$00
 $798C DEFB $27,$4D,$B7,$00,$00,$00,$00,$CE,$00,$00
 $7996 DEFB $28,$3C,$9C,$00,$00,$9F,$00,$00,$CC,$D0
 $79A0 DEFB $27,$27,$27,$24,$9F,$A2,$A1,$2D,$27,$27
 $79AA DEFB $3C,$2D,$27,$28,$27,$27,$27,$27,$28,$27
; ---------------------------------------- Room 14
; --------------------------------------
; .
; #ROOM14
 $79B4 DEFB $9B,$9A,$27,$C9,$00,$5E,$1A,$00,$00,$3B
 $79BE DEFB $8E,$9A,$CA,$53,$00,$00,$00,$00,$00,$00
 $79C8 DEFB $9A,$3C,$00,$00,$D0,$00,$53,$00,$00,$2D
 $79D2 DEFB $9B,$23,$00,$CE,$5F,$00,$00,$00,$00,$D4
 $79DC DEFB $9A,$27,$C9,$C7,$C6,$C4,$C6,$00,$00,$90
 $79E6 DEFB $8E,$8F,$24,$00,$D2,$DC,$D7,$00,$2D,$8E
 $79F0 DEFB $8F,$27,$27,$24,$00,$5B,$5B,$2D,$D5,$8F
; ---------------------------------------- Room 15
; --------------------------------------
; .
; #ROOM15
 $79FA DEFB $27,$28,$2A,$27,$28,$D5,$27,$27,$27,$3C
 $7A04 DEFB $27,$CA,$DC,$D4,$3C,$D6,$3B,$01,$D4,$27
 $7A0E DEFB $3C,$00,$00,$00,$D2,$00,$00,$00,$00,$3B
 $7A18 DEFB $00,$00,$00,$53,$00,$60,$00,$00,$00,$18
 $7A22 DEFB $00,$53,$00,$00,$00,$00,$CE,$00,$60,$00
 $7A2C DEFB $20,$D9,$CD,$00,$96,$96,$CC,$AA,$D9,$2D
 $7A36 DEFB $27,$27,$27,$27,$24,$27,$27,$27,$27,$27
; ---------------------------------------- Room 16
; --------------------------------------
; .
; #ROOM16
 $7A40 DEFB $27,$28,$3C,$D1,$2D,$27,$C9,$00,$2D,$27
 $7A4A DEFB $57,$D8,$DA,$56,$D5,$27,$3C,$CD,$26,$27
 $7A54 DEFB $3C,$00,$00,$00,$D6,$DA,$3B,$27,$27,$CA
 $7A5E DEFB $00,$00,$CF,$00,$08,$08,$00,$D4,$3C,$00
 $7A68 DEFB $99,$5C,$00,$12,$03,$06,$00,$5E,$D3,$23
 $7A72 DEFB $20,$D9,$00,$00,$00,$00,$00,$00,$00,$27
 $7A7C DEFB $27,$25,$23,$00,$00,$1B,$00,$00,$C8,$27
; ---------------------------------------- Room 17
; --------------------------------------
; .
; #ROOM17
 $7A86 DEFB $B6,$4D,$00,$00,$AA,$00,$6A,$00,$00,$3B
 $7A90 DEFB $27,$67,$68,$A4,$A7,$A6,$A5,$A6,$99,$18
 $7A9A DEFB $3C,$84,$00,$00,$AB,$A5,$A3,$00,$2B,$8F
 $7AA4 DEFB $24,$A4,$8A,$A7,$93,$A4,$A6,$00,$00,$3B
 $7AAE DEFB $28,$24,$B7,$00,$00,$00,$08,$08,$E8,$2C
 $7AB8 DEFB $9A,$27,$B7,$00,$E8,$6E,$03,$9D,$00,$2B
 $7AC2 DEFB $9B,$27,$B7,$00,$00,$00,$00,$00,$00,$00
; ---------------------------------------- Room 18
; --------------------------------------
; .
; #ROOM18
 $7ACC DEFB $00,$78,$00,$00,$00,$00,$00,$00,$00,$00
 $7AD6 DEFB $00,$B5,$73,$00,$E8,$99,$AA,$00,$00,$2C
 $7AE0 DEFB $9B,$BA,$00,$B8,$74,$A5,$71,$73,$00,$2B
 $7AEA DEFB $8F,$BA,$A0,$AB,$A5,$A3,$00,$70,$99,$18
 $7AF4 DEFB $27,$BA,$A4,$87,$A3,$08,$08,$00,$A5,$87
 $7AFE DEFB $3B,$BA,$00,$00,$00,$03,$9D,$A5,$A3,$00
 $7B08 DEFB $2C,$BA,$00,$95,$95,$95,$A5,$A3,$00,$00
; ---------------------------------------- Room 19
; --------------------------------------
; .
; #ROOM19
 $7B12 DEFB $BA,$D8,$00,$00,$B7,$00,$00,$00,$BA,$4E
 $7B1C DEFB $8C,$21,$08,$08,$B7,$00,$00,$2C,$BA,$24
 $7B26 DEFB $78,$00,$03,$9D,$B7,$00,$00,$90,$BA,$8F
 $7B30 DEFB $B5,$00,$AA,$00,$B7,$00,$00,$27,$8C,$8E
 $7B3A DEFB $BA,$00,$A4,$A9,$9C,$AA,$00,$D4,$BA,$8F
 $7B44 DEFB $8C,$AA,$CE,$A8,$A7,$A6,$00,$2B,$BA,$27
 $7B4E DEFB $BA,$4D,$00,$C7,$C4,$C5,$A5,$A6,$BA,$2A
; ---------------------------------------- Room 20
; --------------------------------------
; .
; #ROOM20
 $7B58 DEFB $27,$28,$3C,$52,$1A,$27,$28,$1D,$FF,$94
 $7B62 DEFB $D8,$8B,$88,$53,$00,$80,$7A,$1D,$FF,$09
 $7B6C DEFB $27,$08,$08,$00,$CE,$0B,$0A,$1D,$FF,$0A
 $7B76 DEFB $28,$03,$06,$00,$0B,$F9,$0A,$1D,$FF,$F0
 $7B80 DEFB $4D,$98,$53,$00,$0C,$F7,$FC,$1D,$FF,$0A
 $7B8A DEFB $42,$60,$99,$AA,$F8,$F8,$40,$62,$31,$62
 $7B94 DEFB $37,$3D,$3D,$3D,$F6,$F6,$FE,$C0,$43,$FD
; ---------------------------------------- Room 21
; --------------------------------------
; .
; #ROOM21
 $7B9E DEFB $E7,$10,$EF,$97,$9E,$EF,$EF,$D4,$28,$4D
 $7BA8 DEFB $E7,$F9,$E5,$FC,$FB,$ED,$EF,$00,$27,$3C
 $7BB2 DEFB $E7,$0F,$E4,$FC,$FA,$08,$81,$EE,$4C,$27
 $7BBC DEFB $E7,$BF,$ED,$0C,$EF,$03,$9D,$EB,$ED,$D3
 $7BC6 DEFB $E7,$0A,$BC,$0F,$EB,$BD,$EE,$0D,$3A,$27
 $7BD0 DEFB $31,$62,$31,$62,$64,$AA,$E9,$AA,$E6,$28
 $7BDA DEFB $BB,$FD,$FD,$FD,$F4,$F5,$F1,$F5,$F5,$56
; ---------------------------------------- Room 22
; --------------------------------------
; .
; #ROOM22
 $7BE4 DEFB $E7,$00,$00,$00,$0C,$1A,$EF,$D3,$27,$28
 $7BEE DEFB $E7,$FB,$BC,$0A,$F9,$10,$EB,$F0,$56,$4D
 $7BF8 DEFB $E7,$FA,$00,$0B,$0F,$0C,$EC,$BD,$EE,$27
 $7C02 DEFB $E7,$BF,$EE,$0C,$00,$09,$E5,$0A,$6B,$6F
 $7C0C DEFB $E7,$00,$E4,$EA,$EE,$00,$EB,$EE,$EB,$27
 $7C16 DEFB $E7,$0A,$E5,$0F,$EB,$EE,$EC,$ED,$2D,$27
 $7C20 DEFB $E7,$00,$EF,$00,$00,$EF,$EF,$2C,$27,$4A
; ---------------------------------------- Room 23
; --------------------------------------
; .
; #ROOM23
 $7C2A DEFB $E3,$4E,$E2,$E3,$4E,$E2,$E1,$DF,$4E,$E3
 $7C34 DEFB $E2,$E2,$DF,$E2,$E3,$E2,$4E,$E2,$E3,$4E
 $7C3E DEFB $19,$00,$39,$00,$00,$00,$00,$00,$E2,$E3
 $7C48 DEFB $00,$00,$00,$00,$08,$08,$00,$00,$AD,$00
 $7C52 DEFB $07,$EE,$00,$12,$03,$06,$00,$B3,$B4,$00
 $7C5C DEFB $E7,$EB,$F0,$B9,$F0,$F0,$EE,$B1,$AF,$00
 $7C66 DEFB $E7,$0A,$0A,$0A,$10,$00,$EF,$2D,$11,$27
; ---------------------------------------- Room 24
; --------------------------------------
; .
; #ROOM24
 $7C70 DEFB $D4,$27,$D8,$52,$1A,$00,$00,$1D,$FF,$4E
 $7C7A DEFB $2C,$20,$EC,$EE,$CE,$00,$2B,$1D,$FF,$0A
 $7C84 DEFB $27,$CA,$EF,$E4,$F0,$6B,$6F,$1D,$FF,$6F
 $7C8E DEFB $FC,$BD,$ED,$EB,$EE,$00,$2C,$1D,$FF,$F0
 $7C98 DEFB $20,$08,$08,$5F,$EB,$BF,$6B,$1D,$FF,$6F
 $7CA2 DEFB $D8,$03,$06,$5F,$00,$2C,$27,$1D,$FF,$0A
 $7CAC DEFB $C8,$D1,$C6,$C6,$C6,$5D,$27,$1D,$FF,$00
; ---------------------------------------- Room 25
; --------------------------------------
; .
; #ROOM25
 $7CB6 DEFB $4E,$E1,$E2,$4E,$E3,$E2,$4E,$DF,$DD,$E3
 $7CC0 DEFB $E3,$4E,$DE,$E2,$4E,$4E,$E0,$DE,$4E,$DF
 $7CCA DEFB $00,$00,$00,$00,$00,$00,$39,$00,$00,$39
 $7CD4 DEFB $19,$08,$08,$00,$00,$00,$00,$00,$00,$00
 $7CDE DEFB $12,$03,$06,$00,$00,$00,$00,$7F,$F0,$F0
 $7CE8 DEFB $D8,$AB,$00,$00,$00,$99,$00,$1D,$FF,$00
 $7CF2 DEFB $20,$27,$3C,$BE,$00,$60,$00,$1D,$FF,$0A
; ---------------------------------------- Room 26
; --------------------------------------
; .
; #ROOM26
 $7CFC DEFB $78,$91,$92,$86,$91,$92,$86,$91,$92,$92
 $7D06 DEFB $B5,$19,$00,$00,$00,$00,$00,$00,$CE,$00
 $7D10 DEFB $BA,$A9,$00,$00,$9F,$00,$00,$52,$74,$2D
 $7D1A DEFB $8C,$A8,$A9,$AB,$A2,$C2,$5C,$00,$2B,$9A
 $7D24 DEFB $BA,$00,$A8,$A7,$87,$A6,$6E,$B8,$90,$9B
 $7D2E DEFB $BA,$8F,$00,$00,$B8,$00,$E8,$00,$2B,$8F
 $7D38 DEFB $BA,$8E,$93,$A9,$95,$95,$95,$B8,$00,$D3
; ---------------------------------------- Room 27
; --------------------------------------
; .
; #ROOM27
 $7D42 DEFB $91,$BA,$92,$91,$86,$92,$91,$92,$92,$86
 $7D4C DEFB $19,$B5,$00,$00,$00,$00,$00,$00,$00,$00
 $7D56 DEFB $27,$BA,$00,$00,$96,$8A,$00,$00,$00,$00
 $7D60 DEFB $FB,$8C,$00,$8A,$00,$B7,$00,$8A,$00,$00
 $7D6A DEFB $FA,$BA,$00,$B7,$00,$9C,$00,$B7,$98,$00
 $7D74 DEFB $9B,$8C,$00,$9C,$00,$00,$00,$B7,$00,$A4
 $7D7E DEFB $D3,$BA,$00,$00,$00,$00,$00,$9C,$00,$00
; ---------------------------------------- Room 28
; --------------------------------------
; .
; #ROOM28
 $7D88 DEFB $BA,$86,$91,$92,$91,$92,$91,$92,$BA,$92
 $7D92 DEFB $BA,$00,$00,$00,$00,$00,$AA,$A0,$BA,$00
 $7D9C DEFB $BA,$9F,$00,$00,$AB,$A5,$93,$A4,$BA,$00
 $7DA6 DEFB $BA,$A7,$A9,$99,$A4,$A3,$00,$00,$8C,$00
 $7DB0 DEFB $B5,$AA,$A8,$A6,$99,$AA,$00,$00,$78,$00
 $7DBA DEFB $BA,$A7,$A7,$A7,$8A,$A7,$A9,$99,$B5,$18
 $7DC4 DEFB $8C,$00,$00,$00,$B7,$00,$A8,$A7,$BA,$A7
; ---------------------------------------- Room 29
; --------------------------------------
; .
; #ROOM29
 $7DCE DEFB $00,$00,$00,$00,$1A,$A5,$A3,$00,$2C,$27
 $7DD8 DEFB $00,$00,$00,$00,$A5,$A3,$CB,$2D,$27,$8E
 $7DE2 DEFB $84,$AA,$AA,$A4,$A3,$2B,$27,$9A,$9B,$9A
 $7DEC DEFB $A4,$A7,$A6,$AC,$00,$00,$D7,$04,$04,$D6
 $7DF6 DEFB $00,$00,$00,$00,$AC,$00,$00,$00,$AA,$00
 $7E00 DEFB $00,$AA,$F2,$00,$00,$AC,$99,$AB,$A5,$A6
 $7E0A DEFB $A7,$A6,$00,$A4,$A6,$00,$A4,$A7,$A3,$00
; ---------------------------------------- Room 30
; --------------------------------------
; .
; #ROOM30
 $7E14 DEFB $9B,$9A,$27,$28,$27,$4D,$27,$8F,$90,$8E
 $7E1E DEFB $9A,$27,$D8,$DB,$85,$00,$56,$28,$8E,$9B
 $7E28 DEFB $4D,$DC,$00,$00,$00,$5F,$00,$D7,$04,$DC
 $7E32 DEFB $3C,$00,$A4,$93,$A6,$00,$00,$00,$00,$00
 $7E3C DEFB $27,$A4,$A9,$96,$00,$08,$08,$00,$00,$00
 $7E46 DEFB $9B,$24,$A8,$A9,$96,$03,$9D,$00,$00,$18
 $7E50 DEFB $9A,$27,$23,$A8,$A9,$95,$95,$95,$72,$02
; ---------------------------------------- Room 31
; --------------------------------------
; .
; #ROOM31
 $7E5A DEFB $9A,$9B,$9A,$D8,$B7,$56,$27,$28,$8E,$8F
 $7E64 DEFB $27,$D5,$4D,$00,$B7,$00,$DB,$D3,$27,$8E
 $7E6E DEFB $D2,$DC,$00,$00,$B7,$00,$00,$00,$4F,$D3
 $7E78 DEFB $97,$83,$00,$00,$9C,$00,$B8,$00,$B8,$00
 $7E82 DEFB $A4,$A6,$00,$A4,$87,$A6,$00,$00,$B8,$00
 $7E8C DEFB $00,$00,$00,$00,$00,$00,$00,$E8,$00,$00
 $7E96 DEFB $02,$02,$89,$02,$02,$89,$16,$02,$89,$02
; ---------------------------------------- Room 32
; --------------------------------------
; .
; #ROOM32
 $7EA0 DEFB $9B,$27,$9A,$8D,$8F,$8D,$8E,$9A,$9B,$27
 $7EAA DEFB $27,$D8,$DC,$85,$85,$D3,$9A,$9B,$9A,$D8
 $7EB4 DEFB $3C,$83,$00,$00,$00,$00,$85,$85,$85,$00
 $7EBE DEFB $00,$A4,$93,$A4,$A9,$96,$00,$00,$00,$00
 $7EC8 DEFB $19,$00,$08,$08,$A8,$A9,$AB,$00,$F2,$00
 $7ED2 DEFB $A6,$00,$03,$9D,$00,$A4,$A7,$A6,$00,$A4
 $7EDC DEFB $02,$16,$89,$16,$02,$02,$02,$89,$02,$02
; ---------------------------------------- Room 33
; --------------------------------------
; .
; #ROOM33
 $7EE6 DEFB $D8,$27,$9B,$9B,$9A,$8D,$27,$8F,$8F,$27
 $7EF0 DEFB $2B,$28,$8F,$9B,$9A,$9A,$8F,$28,$9A,$28
 $7EFA DEFB $00,$85,$D3,$27,$9A,$8E,$27,$D8,$85,$3B
 $7F04 DEFB $00,$34,$3A,$9B,$9A,$27,$DC,$00,$00,$00
 $7F0E DEFB $19,$00,$00,$85,$D3,$DA,$00,$00,$00,$00
 $7F18 DEFB $A6,$B8,$00,$00,$00,$00,$00,$00,$00,$A4
 $7F22 DEFB $02,$02,$02,$02,$89,$02,$02,$02,$02,$02
; ---------------------------------------- Room 34
; --------------------------------------
; .
; #ROOM34
 $7F2C DEFB $9B,$D5,$9A,$3C,$9B,$9A,$28,$8E,$8F,$D8
 $7F36 DEFB $28,$D6,$3B,$27,$9B,$9B,$27,$D8,$27,$24
 $7F40 DEFB $D8,$00,$00,$DC,$85,$85,$D7,$00,$D3,$27
 $7F4A DEFB $00,$00,$00,$00,$00,$AA,$0D,$3A,$27,$8F
 $7F54 DEFB $19,$99,$00,$AA,$99,$A4,$A6,$00,$D3,$28
 $7F5E DEFB $A4,$A9,$17,$A7,$A6,$00,$00,$00,$AA,$D9
 $7F68 DEFB $00,$A8,$A9,$F3,$95,$95,$95,$A5,$A6,$27

; Graphics data for player, enemies, hud and room objects
b$7F72 DEFB $00,$00,$00,$23,$00,$00,$04,$00 ; {#UDGARRAY3,$47,,3;$7F72-$8031-1-24(footman_walking)
 $7F7A DEFB $00,$24,$00,$00,$13,$80,$00,$20 ;
 $7F82 DEFB $00,$00,$0A,$80,$00,$10,$B4,$00 ;
 $7F8A DEFB $0C,$40,$00,$20,$40,$00,$02,$00 ;
 $7F92 DEFB $00,$13,$00,$00,$01,$00,$00,$20 ;
 $7F9A DEFB $00,$00,$40,$A0,$00,$20,$40,$00 ;
 $7FA2 DEFB $00,$00,$00,$08,$C0,$00,$01,$00 ;
 $7FAA DEFB $00,$09,$00,$00,$04,$E0,$00,$08 ;
 $7FB2 DEFB $00,$00,$02,$A0,$00,$04,$2D,$00 ;
 $7FBA DEFB $03,$10,$00,$08,$10,$00,$00,$C0 ;
 $7FC2 DEFB $00,$02,$60,$00,$00,$20,$00,$08 ;
 $7FCA DEFB $00,$00,$10,$40,$00,$10,$60,$00 ;
 $7FD2 DEFB $00,$00,$00,$00,$8C,$00,$00,$10 ;
 $7FDA DEFB $00,$00,$90,$00,$00,$4E,$00,$00 ;
 $7FE2 DEFB $80,$00,$00,$2A,$00,$00,$42,$D0 ;
 $7FEA DEFB $00,$31,$00,$00,$85,$00,$00,$30 ;
 $7FF2 DEFB $00,$00,$10,$00,$01,$20,$00,$02 ;
 $7FFA DEFB $00,$00,$02,$40,$00,$00,$60,$00 ;
 $8002 DEFB $00,$46,$00,$00,$08,$00,$00,$48 ;
 $800A DEFB $00,$00,$27,$00,$00,$40,$00,$00 ;
 $8012 DEFB $15,$00,$00,$21,$68,$00,$18,$80 ;
 $801A DEFB $00,$00,$80,$00,$4C,$00,$00,$08 ;
 $8022 DEFB $00,$00,$19,$00,$00,$00,$00,$00 ;
 $802A DEFB $22,$00,$00,$44,$00,$00,$62,$00 ; }
 $8032 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY3,$47,,3;$8032-$80F1-1-24(stomper)
 $803A DEFB $00,$00,$00,$00,$01,$00,$00,$01 ;
 $8042 DEFB $00,$00,$01,$00,$00,$02,$80,$00 ;
 $804A DEFB $01,$00,$00,$00,$00,$00,$06,$40 ;
 $8052 DEFB $00,$0E,$20,$00,$17,$10,$00,$2F ;
 $805A DEFB $08,$00,$00,$00,$00,$1B,$50,$00 ;
 $8062 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $806A DEFB $00,$00,$20,$00,$00,$40,$00,$00 ;
 $8072 DEFB $40,$00,$00,$A0,$00,$00,$40,$00 ;
 $807A DEFB $00,$00,$00,$01,$90,$00,$03,$88 ;
 $8082 DEFB $00,$05,$C4,$00,$0B,$C2,$00,$00 ;
 $808A DEFB $00,$00,$00,$A0,$00,$06,$D4,$00 ;
 $8092 DEFB $00,$00,$00,$00,$10,$00,$00,$10 ;
 $809A DEFB $00,$00,$10,$00,$00,$28,$00,$00 ;
 $80A2 DEFB $10,$00,$00,$00,$00,$00,$64,$00 ;
 $80AA DEFB $00,$E2,$00,$01,$71,$00,$02,$F0 ;
 $80B2 DEFB $80,$00,$00,$00,$00,$28,$00,$00 ;
 $80BA DEFB $00,$00,$01,$B5,$00,$00,$00,$00 ;
 $80C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $80CA DEFB $00,$00,$08,$00,$00,$04,$00,$00 ;
 $80D2 DEFB $04,$00,$00,$0A,$00,$00,$04,$00 ;
 $80DA DEFB $00,$00,$00,$00,$19,$00,$00,$38 ;
 $80E2 DEFB $80,$00,$5C,$40,$00,$BC,$20,$00 ;
 $80EA DEFB $00,$00,$00,$0A,$00,$00,$6D,$40 ; }
 $80F2 DEFB $04,$80,$00,$02,$80,$00,$01,$64 ; {#UDGARRAY3,$47,,3;$80F2-$81B1-1-24(rex_walking)
 $80FA DEFB $00,$1A,$C8,$00,$39,$7C,$00,$70 ;
 $8102 DEFB $E0,$00,$68,$5C,$00,$34,$08,$00 ;
 $810A DEFB $4B,$C1,$00,$6C,$68,$00,$03,$32 ;
 $8112 DEFB $00,$01,$80,$00,$0D,$80,$00,$18 ;
 $811A DEFB $D0,$00,$18,$E0,$00,$0C,$40,$00 ;
 $8122 DEFB $00,$00,$00,$00,$48,$00,$00,$28 ;
 $812A DEFB $00,$01,$96,$40,$03,$AC,$80,$07 ;
 $8132 DEFB $17,$C0,$06,$8E,$00,$02,$45,$C0 ;
 $813A DEFB $05,$A0,$80,$06,$BC,$10,$00,$46 ;
 $8142 DEFB $80,$01,$73,$20,$01,$98,$00,$07 ;
 $814A DEFB $18,$00,$0C,$30,$00,$0C,$38,$00 ;
 $8152 DEFB $00,$00,$00,$00,$24,$00,$00,$14 ;
 $815A DEFB $00,$00,$CB,$20,$01,$D6,$40,$03 ;
 $8162 DEFB $8B,$E0,$03,$47,$00,$01,$22,$E0 ;
 $816A DEFB $02,$D0,$40,$03,$5E,$08,$00,$23 ;
 $8172 DEFB $40,$00,$39,$90,$00,$D8,$00,$01 ;
 $817A DEFB $98,$00,$01,$B0,$00,$00,$38,$00 ;
 $8182 DEFB $00,$12,$00,$00,$0A,$00,$00,$65 ;
 $818A DEFB $90,$00,$EB,$20,$01,$C5,$F0,$01 ;
 $8192 DEFB $A3,$80,$00,$91,$70,$01,$6C,$20 ;
 $819A DEFB $01,$A3,$04,$00,$09,$A0,$00,$0E ;
 $81A2 DEFB $C8,$00,$06,$80,$00,$1D,$00,$00 ;
 $81AA DEFB $1A,$00,$00,$37,$00,$00,$38,$00 ; }
 $81B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY3,$47,,3;$81B2-$83F1-1-24(explosion)
 $81BA DEFB $00,$02,$06,$10,$00,$00,$04,$20 ;
 $81C2 DEFB $45,$80,$00,$3E,$02,$01,$78,$08 ;
 $81CA DEFB $18,$23,$68,$11,$B8,$F0,$20,$45 ;
 $81D2 DEFB $70,$0B,$3C,$30,$28,$CB,$06,$05 ;
 $81DA DEFB $EB,$00,$01,$EC,$32,$0C,$C2,$CE ;
 $81E2 DEFB $00,$11,$F0,$03,$7D,$E8,$06,$A8 ;
 $81EA DEFB $D0,$20,$A6,$00,$05,$39,$08,$00 ;
 $81F2 DEFB $00,$40,$40,$00,$02,$00,$04,$00 ;
 $81FA DEFB $00,$02,$00,$01,$00,$00,$00,$00 ;
 $8202 DEFB $00,$10,$00,$40,$01,$14,$00,$2D ;
 $820A DEFB $8E,$00,$03,$88,$70,$03,$22,$A8 ;
 $8212 DEFB $80,$40,$3C,$0C,$0C,$BC,$06,$9E ;
 $821A DEFB $18,$05,$BE,$00,$28,$1E,$06,$0B ;
 $8222 DEFB $1C,$60,$20,$04,$F0,$11,$89,$C0 ;
 $822A DEFB $19,$C0,$C8,$03,$C8,$10,$03,$CE ;
 $8232 DEFB $02,$88,$85,$90,$00,$60,$00,$10 ;
 $823A DEFB $E6,$00,$00,$80,$40,$00,$00,$00 ;
 $8242 DEFB $00,$00,$00,$00,$82,$00,$01,$10 ;
 $824A DEFB $00,$00,$08,$C2,$01,$81,$E0,$21 ;
 $8252 DEFB $C2,$20,$07,$90,$04,$86,$B4,$70 ;
 $825A DEFB $00,$7D,$B0,$20,$EB,$80,$09,$C1 ;
 $8262 DEFB $A0,$09,$E1,$C9,$18,$C1,$C0,$01 ;
 $826A DEFB $E3,$84,$00,$CF,$B0,$30,$3F,$00 ;
 $8272 DEFB $00,$BC,$0C,$26,$41,$9C,$07,$13 ;
 $827A DEFB $C8,$5B,$1C,$80,$02,$28,$30,$00 ;
 $8282 DEFB $00,$80,$80,$82,$10,$00,$00,$00 ;
 $828A DEFB $00,$00,$80,$08,$80,$00,$00,$A9 ;
 $8292 DEFB $08,$6C,$4A,$1C,$02,$FF,$08,$03 ;
 $829A DEFB $BF,$00,$2E,$C5,$E5,$1C,$01,$E0 ;
 $82A2 DEFB $0A,$00,$70,$38,$00,$39,$1C,$00 ;
 $82AA DEFB $70,$B8,$00,$38,$00,$00,$30,$2C ;
 $82B2 DEFB $00,$18,$78,$00,$54,$18,$00,$60 ;
 $82BA DEFB $16,$00,$F0,$2D,$A7,$A2,$07,$FC ;
 $82C2 DEFB $44,$22,$29,$A0,$74,$60,$08,$A0 ;
 $82CA DEFB $0D,$00,$08,$21,$01,$00,$00,$00 ;
 $82D2 DEFB $00,$00,$00,$01,$43,$42,$40,$42 ;
 $82DA DEFB $00,$04,$55,$08,$23,$3B,$40,$11 ;
 $82E2 DEFB $41,$A8,$22,$00,$5A,$8C,$00,$78 ;
 $82EA DEFB $A0,$00,$1E,$68,$00,$08,$20,$00 ;
 $82F2 DEFB $05,$40,$00,$0E,$68,$00,$0C,$08 ;
 $82FA DEFB $00,$0C,$28,$00,$02,$00,$00,$08 ;
 $8302 DEFB $08,$00,$0A,$2C,$00,$64,$03,$60 ;
 $830A DEFB $D0,$8D,$0B,$A8,$01,$7C,$20,$04 ;
 $8312 DEFB $04,$00,$48,$10,$80,$00,$80,$04 ;
 $831A DEFB $80,$04,$04,$02,$00,$00,$20,$08 ;
 $8322 DEFB $00,$00,$00,$08,$00,$00,$00,$00 ;
 $832A DEFB $00,$00,$20,$00,$02,$00,$00,$00 ;
 $8332 DEFB $00,$00,$00,$00,$00,$00,$80,$00 ;
 $833A DEFB $00,$00,$00,$00,$00,$00,$01,$00 ;
 $8342 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $834A DEFB $00,$00,$02,$20,$00,$00,$80,$00 ;
 $8352 DEFB $00,$10,$08,$02,$00,$00,$00,$02 ;
 $835A DEFB $00,$20,$80,$00,$00,$00,$40,$08 ;
 $8362 DEFB $80,$04,$04,$00,$00,$00,$00,$00 ;
 $836A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8372 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $837A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8382 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $838A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8392 DEFB $00,$00,$00,$80,$00,$00,$00,$00 ;
 $839A DEFB $00,$00,$00,$02,$00,$00,$00,$00 ;
 $83A2 DEFB $00,$00,$00,$00,$00,$00,$40,$08 ;
 $83AA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83BA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83CA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83DA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $83EA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $83F2 DEFB $00,$00,$00,$00,$00,$00,$18,$00 ; {#UDGARRAY3,$47,,3;$83F2-$84B1-1-24(train_rear)
 $83FA DEFB $00,$20,$80,$00,$A0,$00,$00,$5C ;
 $8402 DEFB $80,$00,$21,$90,$00,$E4,$6B,$00 ;
 $840A DEFB $D3,$50,$00,$20,$00,$00,$7E,$C0 ;
 $8412 DEFB $00,$80,$A0,$00,$7E,$10,$00,$80 ;
 $841A DEFB $0C,$00,$01,$12,$00,$7E,$0C,$00 ;
 $8422 DEFB $00,$00,$00,$00,$00,$00,$06,$00 ;
 $842A DEFB $00,$08,$20,$00,$28,$00,$00,$17 ;
 $8432 DEFB $20,$00,$08,$64,$00,$39,$1A,$C0 ;
 $843A DEFB $34,$D4,$00,$08,$00,$00,$1F,$B0 ;
 $8442 DEFB $00,$20,$28,$00,$0F,$84,$00,$20 ;
 $844A DEFB $43,$00,$20,$45,$80,$1F,$03,$00 ;
 $8452 DEFB $00,$00,$00,$00,$00,$00,$01,$80 ;
 $845A DEFB $00,$02,$08,$00,$0A,$00,$00,$05 ;
 $8462 DEFB $C8,$00,$02,$19,$00,$0E,$46,$B0 ;
 $846A DEFB $0D,$35,$00,$02,$00,$00,$07,$EC ;
 $8472 DEFB $00,$08,$0A,$00,$06,$E1,$00,$08 ;
 $847A DEFB $10,$C0,$08,$11,$20,$07,$60,$C0 ;
 $8482 DEFB $00,$00,$00,$00,$00,$00,$00,$60 ;
 $848A DEFB $00,$00,$82,$00,$02,$80,$00,$01 ;
 $8492 DEFB $72,$00,$00,$86,$40,$03,$91,$AC ;
 $849A DEFB $03,$4D,$40,$00,$80,$00,$01,$FB ;
 $84A2 DEFB $00,$02,$02,$80,$01,$F0,$40,$02 ;
 $84AA DEFB $04,$30,$02,$04,$58,$00,$F8,$30 ; }
 $84B2 DEFB $00,$00,$00,$03,$40,$00,$07,$A0 ; {#UDGARRAY3,$47,,3;$84B2-$8571-1-24(train_vagon)
 $84BA DEFB $00,$13,$0C,$00,$38,$C8,$00,$00 ;
 $84C2 DEFB $00,$00,$57,$7E,$00,$00,$00,$00 ;
 $84CA DEFB $42,$FE,$00,$01,$7C,$00,$20,$FC ;
 $84D2 DEFB $00,$11,$78,$00,$00,$E0,$00,$10 ;
 $84DA DEFB $10,$00,$28,$38,$00,$10,$10,$00 ;
 $84E2 DEFB $00,$00,$00,$00,$D0,$00,$01,$E8 ;
 $84EA DEFB $00,$04,$C3,$00,$0E,$32,$00,$00 ;
 $84F2 DEFB $00,$00,$15,$DF,$80,$00,$00,$00 ;
 $84FA DEFB $10,$BF,$80,$00,$5F,$00,$08,$3F ;
 $8502 DEFB $00,$04,$5E,$00,$00,$38,$00,$04 ;
 $850A DEFB $04,$00,$0E,$0A,$00,$04,$04,$00 ;
 $8512 DEFB $00,$00,$00,$00,$34,$00,$00,$7A ;
 $851A DEFB $00,$01,$30,$C0,$03,$8C,$80,$00 ;
 $8522 DEFB $00,$00,$05,$77,$E0,$00,$00,$00 ;
 $852A DEFB $04,$2F,$E0,$00,$17,$C0,$02,$0F ;
 $8532 DEFB $C0,$01,$17,$80,$00,$0E,$00,$01 ;
 $853A DEFB $01,$00,$02,$83,$80,$01,$01,$00 ;
 $8542 DEFB $00,$00,$00,$00,$0D,$00,$00,$1E ;
 $854A DEFB $80,$00,$4C,$30,$00,$E3,$20,$00 ;
 $8552 DEFB $00,$00,$01,$5D,$F8,$00,$00,$00 ;
 $855A DEFB $01,$0B,$F8,$00,$05,$F0,$00,$83 ;
 $8562 DEFB $F0,$00,$45,$E0,$00,$03,$80,$00 ;
 $856A DEFB $40,$40,$00,$E0,$A0,$00,$40,$40 ; }
 $8572 DEFB $00,$00,$00,$02,$00,$00,$04,$00 ; {#UDGARRAY3,$47,,3;$8572-$8631-1-24(train_front)
 $857A DEFB $00,$00,$C0,$00,$08,$20,$00,$08 ;
 $8582 DEFB $28,$00,$B9,$C8,$00,$14,$00,$00 ;
 $858A DEFB $A2,$C8,$00,$11,$A2,$00,$18,$09 ;
 $8592 DEFB $00,$07,$80,$00,$08,$7E,$00,$30 ;
 $859A DEFB $80,$00,$58,$01,$00,$30,$7E,$00 ;
 $85A2 DEFB $00,$00,$00,$00,$80,$00,$01,$00 ;
 $85AA DEFB $00,$00,$30,$00,$02,$08,$00,$02 ;
 $85B2 DEFB $0A,$00,$2E,$72,$00,$05,$00,$00 ;
 $85BA DEFB $28,$B2,$00,$04,$68,$80,$06,$02 ;
 $85C2 DEFB $40,$01,$E0,$00,$02,$0F,$80,$0C ;
 $85CA DEFB $20,$40,$12,$20,$40,$0C,$1F,$00 ;
 $85D2 DEFB $00,$00,$00,$00,$20,$00,$00,$40 ;
 $85DA DEFB $00,$00,$0C,$00,$00,$82,$00,$00 ;
 $85E2 DEFB $82,$80,$0B,$9C,$80,$01,$40,$00 ;
 $85EA DEFB $0A,$2C,$80,$01,$1A,$20,$01,$80 ;
 $85F2 DEFB $90,$00,$78,$00,$00,$87,$60,$03 ;
 $85FA DEFB $08,$10,$05,$88,$10,$03,$06,$E0 ;
 $8602 DEFB $00,$00,$00,$00,$08,$00,$00,$10 ;
 $860A DEFB $00,$00,$03,$00,$00,$20,$80,$00 ;
 $8612 DEFB $20,$A0,$02,$E7,$20,$00,$50,$00 ;
 $861A DEFB $02,$8B,$20,$00,$46,$88,$00,$60 ;
 $8622 DEFB $24,$00,$1E,$00,$00,$21,$F0,$00 ;
 $862A DEFB $C2,$04,$01,$22,$04,$00,$C0,$F8 ; }
 $8632 DEFB $02,$00,$00,$00,$00,$00,$08,$80 ; {#UDGARRAY3,$47,,3;$8632-$86F1-1-24(footman_dead)
 $863A DEFB $00,$1C,$C0,$00,$06,$00,$00,$04 ;
 $8642 DEFB $C0,$00,$08,$30,$00,$01,$08,$00 ;
 $864A DEFB $00,$80,$00,$00,$20,$00,$04,$C0 ;
 $8652 DEFB $00,$0D,$80,$00,$03,$00,$00,$20 ;
 $865A DEFB $80,$00,$00,$40,$00,$00,$80,$00 ;
 $8662 DEFB $00,$00,$00,$00,$64,$00,$00,$30 ;
 $866A DEFB $00,$00,$34,$00,$00,$EC,$00,$04 ;
 $8672 DEFB $04,$00,$01,$90,$00,$00,$48,$00 ;
 $867A DEFB $00,$94,$00,$00,$02,$00,$00,$62 ;
 $8682 DEFB $00,$00,$80,$00,$01,$00,$00,$00 ;
 $868A DEFB $80,$00,$00,$80,$00,$01,$00,$00 ;
 $8692 DEFB $01,$00,$00,$00,$00,$00,$00,$40 ;
 $869A DEFB $00,$00,$61,$00,$00,$89,$80,$00 ;
 $86A2 DEFB $07,$20,$06,$52,$00,$29,$40,$C0 ;
 $86AA DEFB $11,$B5,$80,$03,$04,$00,$02,$12 ;
 $86B2 DEFB $00,$04,$02,$00,$04,$00,$00,$18 ;
 $86BA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86C2 DEFB $00,$10,$00,$00,$00,$00,$00,$04 ;
 $86CA DEFB $00,$00,$06,$10,$00,$08,$98,$00 ;
 $86D2 DEFB $00,$72,$00,$65,$20,$02,$94,$0C ;
 $86DA DEFB $01,$1B,$58,$00,$30,$40,$00,$21 ;
 $86E2 DEFB $20,$00,$40,$20,$00,$40,$00,$01 ;
 $86EA DEFB $80,$00,$00,$00,$00,$00,$00,$00 ; }
 $86F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$86F2-$87B1-1-16(bubble_large)
 $86FA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8702 DEFB $00,$00,$00,$00,$07,$F0,$18,$0C ;
 $870A DEFB $26,$02,$20,$02,$18,$0C,$07,$F0 ;
 $8712 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $871A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8722 DEFB $00,$00,$03,$E0,$0C,$18,$13,$04 ;
 $872A DEFB $13,$04,$10,$04,$0C,$18,$03,$E0 ;
 $8732 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $873A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8742 DEFB $03,$E0,$04,$10,$0B,$88,$0B,$08 ;
 $874A DEFB $08,$08,$08,$08,$04,$10,$03,$E0 ;
 $8752 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $875A DEFB $00,$00,$00,$00,$03,$E0,$04,$10 ;
 $8762 DEFB $0B,$88,$0B,$08,$08,$08,$08,$08 ;
 $876A DEFB $04,$10,$03,$E0,$00,$00,$00,$00 ;
 $8772 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $877A DEFB $03,$E0,$04,$10,$0B,$88,$0B,$08 ;
 $8782 DEFB $08,$08,$08,$08,$04,$10,$03,$E0 ;
 $878A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8792 DEFB $00,$00,$00,$00,$00,$00,$03,$E0 ;
 $879A DEFB $04,$10,$0B,$88,$0B,$08,$08,$08 ;
 $87A2 DEFB $08,$08,$04,$10,$03,$E0,$00,$00 ;
 $87AA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $87B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$87B2-$8871-1-16(bubble_small)
 $87BA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87C2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87CA DEFB $00,$00,$00,$00,$0F,$F0,$0F,$F0 ;
 $87D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87DA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87EA DEFB $00,$00,$03,$C0,$04,$20,$03,$C0 ;
 $87F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87FA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8802 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $880A DEFB $01,$80,$02,$40,$02,$40,$01,$80 ;
 $8812 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $881A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8822 DEFB $00,$00,$01,$80,$02,$40,$02,$40 ;
 $882A DEFB $01,$80,$00,$00,$00,$00,$00,$00 ;
 $8832 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $883A DEFB $00,$00,$00,$00,$00,$00,$01,$80 ;
 $8842 DEFB $02,$40,$02,$40,$01,$80,$00,$00 ;
 $884A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8852 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $885A DEFB $00,$00,$00,$00,$01,$80,$02,$40 ;
 $8862 DEFB $02,$40,$01,$80,$00,$00,$00,$00 ;
 $886A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8872 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8872-$88F1-1-16(bubble_burst)
 $887A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8882 DEFB $00,$00,$04,$20,$00,$00,$00,$00 ;
 $888A DEFB $04,$20,$00,$00,$00,$00,$00,$00 ;
 $8892 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $889A DEFB $00,$00,$00,$00,$00,$00,$08,$08 ;
 $88A2 DEFB $00,$00,$00,$00,$00,$00,$04,$10 ;
 $88AA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88B2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88BA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88C2 DEFB $20,$04,$00,$00,$00,$00,$10,$08 ;
 $88CA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88DA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88E2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88EA DEFB $00,$00,$40,$04,$00,$00,$00,$00 ; }
 $88F2 DEFB $00,$6A,$00,$00,$01,$01,$80,$00 ; {#UDGARRAY4,$47,,4;$88F2-$8A41-1-32{0,0,64,168}(shield)
 $88FA DEFB $04,$00,$60,$00,$08,$00,$00,$00 ;
 $8902 DEFB $00,$00,$08,$00,$20,$00,$04,$00 ;
 $890A DEFB $40,$00,$00,$00,$40,$00,$02,$00 ;
 $8912 DEFB $80,$00,$00,$00,$00,$00,$01,$00 ;
 $891A DEFB $80,$00,$00,$00,$80,$00,$01,$00 ;
 $8922 DEFB $00,$00,$01,$00,$40,$00,$02,$00 ;
 $892A DEFB $00,$00,$00,$00,$20,$00,$04,$00 ;
 $8932 DEFB $10,$00,$00,$00,$00,$00,$10,$00 ;
 $893A DEFB $04,$00,$20,$00,$01,$81,$80,$00 ;
 $8942 DEFB $00,$56,$00,$00,$00,$1A,$80,$00 ;
 $894A DEFB $00,$40,$60,$00,$01,$00,$18,$00 ;
 $8952 DEFB $02,$00,$00,$00,$00,$00,$02,$00 ;
 $895A DEFB $08,$00,$01,$00,$10,$00,$00,$00 ;
 $8962 DEFB $10,$00,$00,$80,$20,$00,$00,$00 ;
 $896A DEFB $00,$00,$00,$40,$20,$00,$00,$00 ;
 $8972 DEFB $20,$00,$00,$40,$00,$00,$00,$40 ;
 $897A DEFB $10,$00,$00,$80,$00,$00,$00,$00 ;
 $8982 DEFB $08,$00,$01,$00,$04,$00,$00,$00 ;
 $898A DEFB $00,$00,$04,$00,$01,$00,$08,$00 ;
 $8992 DEFB $00,$60,$60,$00,$00,$15,$80,$00 ;
 $899A DEFB $00,$06,$A0,$00,$00,$10,$18,$00 ;
 $89A2 DEFB $00,$40,$06,$00,$00,$80,$00,$00 ;
 $89AA DEFB $00,$00,$00,$80,$02,$00,$00,$40 ;
 $89B2 DEFB $04,$00,$00,$00,$04,$00,$00,$20 ;
 $89BA DEFB $08,$00,$00,$00,$00,$00,$00,$10 ;
 $89C2 DEFB $08,$00,$00,$00,$08,$00,$00,$10 ;
 $89CA DEFB $00,$00,$00,$10,$04,$00,$00,$20 ;
 $89D2 DEFB $00,$00,$00,$00,$02,$00,$00,$40 ;
 $89DA DEFB $01,$00,$00,$00,$00,$00,$01,$00 ;
 $89E2 DEFB $00,$40,$02,$00,$00,$18,$18,$00 ;
 $89EA DEFB $00,$05,$60,$00,$00,$01,$A8,$00 ;
 $89F2 DEFB $00,$04,$06,$00,$00,$10,$01,$80 ;
 $89FA DEFB $00,$20,$00,$00,$00,$00,$00,$20 ;
 $8A02 DEFB $00,$80,$00,$10,$01,$00,$00,$00 ;
 $8A0A DEFB $01,$00,$00,$08,$02,$00,$00,$00 ;
 $8A12 DEFB $00,$00,$00,$04,$02,$00,$00,$00 ;
 $8A1A DEFB $02,$00,$00,$04,$00,$00,$00,$04 ;
 $8A22 DEFB $01,$00,$00,$08,$00,$00,$00,$00 ;
 $8A2A DEFB $00,$80,$00,$10,$00,$40,$00,$00 ;
 $8A32 DEFB $00,$00,$00,$40,$00,$10,$00,$80 ;
 $8A3A DEFB $00,$06,$06,$00,$00,$01,$58,$00 ; }
 $8A42 DEFB $40,$1B,$06,$02,$53,$0E,$02,$00 ; {#UDGARRAY1,$47,,1;$8A42-$8A59-1-8(missile_left)
 $8A4A DEFB $06,$5C,$06,$00,$06,$0E,$51,$00 ;
 $8A52 DEFB $04,$06,$1B,$40,$06,$06,$0D,$10 ; }
 $8A5A DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$8A5A-$8B59-1-16(scanner_standing)
 $8A62 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8A6A DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $8A72 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8A7A DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ;
 $8A82 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8A8A DEFB $55,$00,$00,$00,$1E,$00,$04,$00 ;
 $8A92 DEFB $08,$00,$00,$00,$00,$00,$00,$00 ;
 $8A9A DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ;
 $8AA2 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8AAA DEFB $55,$00,$00,$00,$1E,$00,$04,$00 ;
 $8AB2 DEFB $08,$00,$12,$00,$08,$00,$00,$00 ;
 $8ABA DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ;
 $8AC2 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8ACA DEFB $55,$00,$00,$00,$1E,$00,$48,$00 ;
 $8AD2 DEFB $01,$00,$04,$00,$28,$00,$02,$00 ;
 $8ADA DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ;
 $8AE2 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8AEA DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $8AF2 DEFB $00,$00,$41,$00,$00,$00,$10,$00 ;
 $8AFA DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ;
 $8B02 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8B0A DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $8B12 DEFB $00,$00,$00,$00,$00,$00,$80,$80 ;
 $8B1A DEFB $00,$00,$00,$00,$1E,$00,$76,$80 ;
 $8B22 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8B2A DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $8B32 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8B3A DEFB $00,$00,$00,$00,$1E,$00,$3B,$00 ;
 $8B42 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8B4A DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $8B52 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8B5A DEFB $00,$00,$00,$00,$1E,$00,$2D,$00 ; {#UDGARRAY2,$47,,2;$8B5A-$8C09-1-16(scanner_moving)
 $8B62 DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $8B6A DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $8B72 DEFB $00,$00,$0F,$00,$16,$80,$1F,$80 ;
 $8B7A DEFB $00,$00,$3F,$C0,$14,$00,$2A,$80 ;
 $8B82 DEFB $00,$00,$0F,$00,$00,$00,$00,$00 ;
 $8B8A DEFB $07,$80,$0B,$40,$0F,$C0,$00,$00 ;
 $8B92 DEFB $1F,$E0,$0A,$00,$15,$40,$00,$00 ;
 $8B9A DEFB $07,$80,$00,$00,$00,$00,$03,$C0 ;
 $8BA2 DEFB $05,$A0,$07,$E0,$00,$00,$0F,$F0 ;
 $8BAA DEFB $05,$00,$0A,$A0,$00,$00,$03,$C0 ;
 $8BB2 DEFB $00,$00,$00,$00,$01,$E0,$02,$D0 ;
 $8BBA DEFB $03,$F0,$00,$00,$07,$F8,$02,$80 ;
 $8BC2 DEFB $05,$50,$00,$00,$01,$E0,$00,$00 ;
 $8BCA DEFB $00,$00,$00,$F0,$01,$68,$01,$F8 ;
 $8BD2 DEFB $00,$00,$03,$FC,$01,$40,$02,$A8 ;
 $8BDA DEFB $00,$00,$00,$F0,$00,$00,$00,$00 ;
 $8BE2 DEFB $00,$78,$00,$B4,$00,$FC,$00,$00 ;
 $8BEA DEFB $01,$FE,$00,$A0,$01,$54,$00,$00 ;
 $8BF2 DEFB $00,$78,$00,$00,$00,$00,$00,$3C ;
 $8BFA DEFB $00,$5A,$00,$7E,$00,$00,$00,$FF ;
 $8C02 DEFB $00,$50,$00,$AA,$00,$00,$00,$3C ; }
 $8C0A DEFB $00,$00,$3F,$F8,$3F,$F8,$3F,$F8 ; {#UDGARRAY2,$47,,2;$8C0A-$8C29-1-16(weapon_apa_150_mk1)
 $8C12 DEFB $3C,$D8,$0B,$00,$F5,$36,$A0,$80 ;
 $8C1A DEFB $8A,$98,$36,$B8,$1A,$38,$2D,$F8 ;
 $8C22 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8C2A DEFB $00,$00,$3F,$F8,$3F,$F8,$3F,$F8 ; {#UDGARRAY2,$47,,2;$8C2A-$8C49-1-16(weapon_apa_150_mk2)
 $8C32 DEFB $3F,$F8,$03,$F8,$6C,$03,$09,$68 ;
 $8C3A DEFB $71,$83,$64,$78,$0B,$F8,$2D,$F8 ;
 $8C42 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8C4A DEFB $00,$00,$21,$F8,$0C,$38,$24,$88 ; {#UDGARRAY2,$47,,2;$8C4A-$8C69-1-16(weapon_tusk_laser_mk4)
 $8C52 DEFB $2C,$A0,$0C,$A8,$64,$26,$6C,$A8 ;
 $8C5A DEFB $0C,$A0,$44,$88,$0D,$78,$21,$F8 ;
 $8C62 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8C6A DEFB $00,$00,$3F,$F8,$3F,$F8,$38,$40 ; {#UDGARRAY2,$47,,2;$8C6A-$8C89-1-16(weapon_remote_drone)
 $8C72 DEFB $33,$98,$24,$AC,$29,$BC,$2B,$D8 ;
 $8C7A DEFB $2B,$E0,$27,$C8,$13,$98,$28,$38 ;
 $8C82 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8C8A DEFB $00,$00,$23,$A8,$28,$22,$26,$84 ; {#UDGARRAY2,$47,,2;$8C8A-$8CA9-1-16(weapon_multispray)
 $8C92 DEFB $0B,$68,$41,$00,$76,$2B,$71,$60 ;
 $8C9A DEFB $26,$37,$0C,$48,$18,$80,$02,$78 ;
 $8CA2 DEFB $30,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8CAA DEFB $00,$00,$3F,$F8,$3F,$F8,$3F,$F8 ; {#UDGARRAY2,$47,,2;$8CAA-$8CC9-1-16(weapon_empty)
 $8CB2 DEFB $3F,$F8,$3F,$F8,$3F,$F8,$1F,$F8 ;
 $8CBA DEFB $2F,$F8,$37,$F8,$1B,$F8,$2D,$F8 ;
 $8CC2 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8CCA DEFB $00,$70,$3E,$E0,$3D,$C8,$3B,$98 ; {#UDGARRAY2,$47,,2;$8CCA-$8CE9-1-16(smartbomb_ui)
 $8CD2 DEFB $37,$38,$2E,$78,$1E,$00,$1F,$F8 ;
 $8CDA DEFB $15,$78,$00,$70,$1A,$E0,$2D,$C8 ;
 $8CE2 DEFB $33,$98,$07,$00,$2E,$78,$00,$00 ; }
 $8CEA DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8CEA-$8D09-1-16(smartbomb)
 $8CF2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8CFA DEFB $00,$60,$00,$30,$00,$18,$00,$FC ;
 $8D02 DEFB $00,$D4,$00,$60,$00,$30,$00,$18 ; }
 $8D0A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8D0A-$8D29-1-16(bonus.png)
 $8D12 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D1A DEFB $00,$78,$00,$FC,$00,$CC,$00,$E0 ;
 $8D22 DEFB $00,$70,$00,$30,$00,$00,$00,$30 ; }
 $8D2A DEFB $00,$18,$18,$DB,$D3,$18,$00,$18 ; {#UDGARRAY1,$05,,1;$8D2A-$8D59-1-8(respwan.png)
 $8D32 DEFB $00,$18,$76,$76,$18,$18,$00,$18 ;
 $8D3A DEFB $00,$18,$2C,$2C,$18,$18,$00,$18 ;
 $8D42 DEFB $00,$18,$18,$18,$18,$18,$00,$18 ;
 $8D4A DEFB $00,$18,$18,$34,$34,$18,$00,$18 ;
 $8D52 DEFB $00,$18,$18,$76,$76,$18,$00,$18 ; }
 $8D5A DEFB $00,$57,$3F,$57,$00,$15,$00,$01 ; {#UDGARRAY2,$47,,1;$8D5A,$04;$8D62,$45;$8D6A,$04;$8D72,$45;$8D7A,$04;$8D82,$45(energy_charger)
 $8D62 DEFB $00,$7A,$FC,$7A,$00,$F8,$00,$80 ;
 $8D6A DEFB $00,$57,$3F,$57,$00,$00,$15,$00 ;
 $8D72 DEFB $00,$7A,$FC,$7A,$00,$00,$D8,$00 ;
 $8D7A DEFB $00,$57,$3F,$57,$00,$01,$00,$15 ;
 $8D82 DEFB $00,$7A,$FC,$7A,$00,$80,$00,$F8 ; }
 $8D8A DEFB $03,$80,$00,$08,$60,$00,$00,$10 ; {#UDGARRAY3,$47,,3;$8D8A-$8E49-1-24(ramming_pod)
 $8D92 DEFB $00,$23,$10,$00,$04,$08,$00,$04 ;
 $8D9A DEFB $08,$00,$43,$84,$00,$08,$04,$00 ;
 $8DA2 DEFB $09,$24,$00,$84,$C4,$00,$00,$00 ;
 $8DAA DEFB $00,$DE,$F6,$00,$00,$00,$00,$2A ;
 $8DB2 DEFB $B8,$00,$17,$40,$00,$03,$80,$00 ;
 $8DBA DEFB $00,$E0,$00,$02,$18,$00,$00,$04 ;
 $8DC2 DEFB $00,$08,$C4,$00,$01,$02,$00,$01 ;
 $8DCA DEFB $02,$00,$10,$E1,$00,$02,$01,$00 ;
 $8DD2 DEFB $02,$49,$00,$21,$31,$00,$00,$00 ;
 $8DDA DEFB $00,$2F,$7B,$80,$00,$00,$00,$0A ;
 $8DE2 DEFB $FA,$00,$04,$04,$00,$04,$E4,$00 ;
 $8DEA DEFB $00,$38,$00,$00,$86,$00,$00,$01 ;
 $8DF2 DEFB $00,$02,$31,$00,$00,$40,$80,$00 ;
 $8DFA DEFB $40,$80,$04,$38,$40,$00,$80,$40 ;
 $8E02 DEFB $00,$92,$40,$08,$4C,$40,$00,$00 ;
 $8E0A DEFB $00,$07,$BD,$E0,$00,$00,$00,$03 ;
 $8E12 DEFB $EA,$80,$00,$14,$00,$00,$38,$00 ;
 $8E1A DEFB $00,$0E,$00,$00,$21,$80,$00,$00 ;
 $8E22 DEFB $40,$00,$8C,$40,$00,$10,$20,$00 ;
 $8E2A DEFB $10,$20,$01,$0E,$10,$00,$20,$10 ;
 $8E32 DEFB $00,$24,$90,$02,$13,$10,$00,$00 ;
 $8E3A DEFB $00,$03,$BD,$E8,$00,$00,$00,$00 ;
 $8E42 DEFB $EA,$A0,$00,$1D,$00,$00,$0E,$00 ; }
 $8E4A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8E4A-$8E69-1-16(launcher)
 $8E52 DEFB $00,$00,$00,$60,$02,$D0,$05,$E8 ;
 $8E5A DEFB $0B,$B0,$17,$44,$2E,$A8,$15,$D0 ;
 $8E62 DEFB $12,$80,$67,$40,$4A,$40,$A4,$A0 ; }
 $8E6A DEFB $00,$00,$00,$00,$00,$00,$01,$80 ; {#UDGARRAY2,$47,,2;$8E6A-$8E89-1-16(shooter)
 $8E72 DEFB $05,$A0,$00,$00,$0F,$50,$D7,$AB ;
 $8E7A DEFB $07,$E0,$2F,$B4,$00,$00,$3D,$AA ;
 $8E82 DEFB $00,$00,$1E,$88,$1F,$00,$1E,$88 ; }
 $8E8A DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8E8A-$8EA9-1-16(footman_fire_position)
 $8E92 DEFB $00,$00,$08,$C0,$01,$00,$09,$00 ;
 $8E9A DEFB $04,$E0,$09,$19,$01,$20,$08,$C0 ;
 $8EA2 DEFB $01,$A0,$04,$80,$0A,$A0,$09,$B0 ; }
 $8EAA DEFB $7A,$AA,$7B,$4A,$00,$00,$55,$42 ; {#UDGARRAY2,$47,,2;$8EAA-$8F49-1-16(swing_gun)
 $8EB2 DEFB $00,$00,$3F,$C4,$5F,$88,$EE,$10 ;
 $8EBA DEFB $41,$40,$00,$00,$00,$00,$00,$00 ;
 $8EC2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8ECA DEFB $7A,$AA,$7B,$4A,$00,$00,$55,$42 ;
 $8ED2 DEFB $00,$00,$3F,$C4,$1F,$88,$0E,$10 ;
 $8EDA DEFB $11,$40,$38,$00,$10,$00,$00,$00 ;
 $8EE2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8EEA DEFB $7A,$AA,$7B,$4A,$00,$00,$55,$42 ;
 $8EF2 DEFB $00,$00,$3F,$C4,$1F,$88,$0E,$10 ;
 $8EFA DEFB $01,$40,$00,$00,$03,$80,$03,$80 ;
 $8F02 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8F0A DEFB $7A,$AA,$7B,$4A,$00,$00,$55,$42 ;
 $8F12 DEFB $00,$00,$3F,$C4,$1F,$88,$0E,$10 ;
 $8F1A DEFB $01,$48,$00,$14,$00,$08,$00,$00 ;
 $8F22 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8F2A DEFB $7A,$AA,$7B,$4A,$00,$00,$55,$42 ;
 $8F32 DEFB $00,$00,$3F,$C4,$1F,$8A,$0E,$15 ;
 $8F3A DEFB $01,$42,$00,$00,$00,$00,$00,$00 ;
 $8F42 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8F4A DEFB $02,$D8,$60,$40,$CA,$70,$40,$00 ; {#UDGARRAY1,$47,,1;$8F4A-$8F61-1-8(missile_right)
 $8F52 DEFB $60,$3A,$60,$00,$60,$70,$8A,$00 ;
 $8F5A DEFB $20,$60,$D8,$02,$60,$60,$B0,$08 ; }
 $8F62 DEFB $04,$80,$00,$02,$80,$00,$19,$64 ; {#UDGARRAY3,$47,,3;$8F62-$9021-1-24(rex_jumping)
 $8F6A DEFB $00,$3A,$C8,$00,$71,$7C,$00,$68 ;
 $8F72 DEFB $E0,$00,$24,$5C,$00,$5A,$08,$00 ;
 $8F7A DEFB $69,$C1,$00,$00,$68,$00,$03,$B2 ;
 $8F82 DEFB $00,$01,$A0,$00,$07,$40,$00,$06 ;
 $8F8A DEFB $80,$00,$0D,$C0,$00,$0E,$00,$00 ;
 $8F92 DEFB $01,$20,$00,$00,$A0,$00,$06,$59 ;
 $8F9A DEFB $00,$0E,$B2,$00,$1C,$5F,$00,$1A ;
 $8FA2 DEFB $38,$00,$09,$17,$00,$16,$82,$00 ;
 $8FAA DEFB $1A,$70,$40,$00,$1A,$00,$00,$EC ;
 $8FB2 DEFB $80,$00,$68,$00,$01,$D0,$00,$01 ;
 $8FBA DEFB $A0,$00,$03,$70,$00,$03,$80,$00 ;
 $8FC2 DEFB $00,$48,$00,$00,$28,$00,$01,$96 ;
 $8FCA DEFB $40,$03,$AC,$80,$07,$17,$C0,$06 ;
 $8FD2 DEFB $8E,$00,$02,$45,$C0,$05,$A0,$80 ;
 $8FDA DEFB $06,$9C,$10,$00,$06,$80,$00,$3B ;
 $8FE2 DEFB $20,$00,$1A,$00,$00,$74,$00,$00 ;
 $8FEA DEFB $68,$00,$00,$DC,$00,$00,$E0,$00 ;
 $8FF2 DEFB $00,$12,$00,$00,$0A,$00,$00,$65 ;
 $8FFA DEFB $90,$00,$EB,$20,$01,$C5,$F0,$01 ;
 $9002 DEFB $A3,$80,$00,$91,$70,$01,$68,$20 ;
 $900A DEFB $01,$A7,$04,$00,$01,$A0,$00,$0E ;
 $9012 DEFB $C8,$00,$06,$80,$00,$1D,$00,$00 ;
 $901A DEFB $1A,$00,$00,$37,$00,$00,$38,$00 ; }
 $9022 DEFB $00,$00,$00,$00,$38,$00,$7C,$00 ; {#UDGARRAY2,$47,,2;$9022-$90A1-1-16(blob)
 $902A DEFB $6C,$00,$28,$00,$00,$00,$00,$00 ;
 $9032 DEFB $00,$00,$0C,$00,$1E,$00,$2A,$00 ;
 $903A DEFB $3C,$00,$18,$00,$00,$00,$00,$00 ;
 $9042 DEFB $00,$00,$05,$00,$0F,$80,$07,$80 ;
 $904A DEFB $1D,$00,$1C,$00,$08,$00,$00,$00 ;
 $9052 DEFB $01,$80,$0A,$C0,$0F,$A0,$17,$40 ;
 $905A DEFB $1D,$C0,$16,$00,$0C,$00,$00,$00 ;
 $9062 DEFB $01,$80,$03,$C0,$03,$A0,$05,$40 ;
 $906A DEFB $07,$80,$06,$80,$02,$00,$00,$00 ;
 $9072 DEFB $00,$00,$01,$C0,$02,$A0,$03,$A0 ;
 $907A DEFB $03,$40,$00,$A0,$00,$C0,$00,$00 ;
 $9082 DEFB $00,$00,$00,$00,$00,$60,$00,$D0 ;
 $908A DEFB $00,$D0,$00,$40,$00,$00,$00,$00 ;
 $9092 DEFB $00,$00,$00,$00,$00,$00,$00,$30 ;
 $909A DEFB $00,$20,$00,$00,$00,$00,$00,$00 ; }
 $90A2 DEFB $03,$C0,$00,$08,$10,$00,$22,$04 ; {#UDGARRAY3,$47,,3;$90A2-$9121-1-24(mine_layer)
 $90AA DEFB $00,$44,$02,$00,$00,$00,$00,$AA ;
 $90B2 DEFB $AA,$00,$00,$00,$00,$5D,$B6,$00 ;
 $90BA DEFB $03,$C0,$00,$13,$C8,$00,$09,$90 ;
 $90C2 DEFB $00,$04,$20,$00,$00,$F0,$00,$02 ;
 $90CA DEFB $04,$00,$08,$81,$00,$11,$00,$80 ;
 $90D2 DEFB $00,$00,$00,$37,$77,$40,$00,$00 ;
 $90DA DEFB $00,$17,$0D,$80,$00,$60,$00,$04 ;
 $90E2 DEFB $62,$00,$02,$04,$00,$01,$08,$00 ;
 $90EA DEFB $00,$3C,$00,$00,$81,$00,$02,$20 ;
 $90F2 DEFB $40,$04,$40,$20,$00,$00,$00,$0E ;
 $90FA DEFB $EE,$E0,$00,$00,$00,$05,$C3,$60 ;
 $9102 DEFB $00,$00,$00,$01,$00,$80,$00,$81 ;
 $910A DEFB $00,$00,$42,$00,$00,$0F,$00,$00 ;
 $9112 DEFB $20,$40,$00,$88,$10,$01,$10,$08 ;
 $911A DEFB $00,$00,$00,$02,$EE,$EC,$00,$00 ; }
 $9122 DEFB $00,$01,$70,$D8,$00,$06,$00,$00 ; {Not used
 $912A DEFB $46,$20,$00,$20,$40,$00,$10,$80 ; }
 $9132 DEFB $18,$00,$00,$00,$18,$00,$BD,$00 ; {#UDGARRAY2,$47,,2;$9132-$91B1-1-16(mine)
 $913A DEFB $B5,$00,$18,$00,$00,$00,$18,$00 ;
 $9142 DEFB $04,$00,$02,$00,$2C,$00,$5E,$00 ;
 $914A DEFB $1A,$80,$0D,$00,$10,$00,$08,$00 ;
 $9152 DEFB $00,$00,$09,$00,$16,$80,$0F,$00 ;
 $915A DEFB $0D,$00,$16,$80,$09,$00,$00,$00 ;
 $9162 DEFB $02,$00,$04,$00,$03,$40,$07,$A0 ;
 $916A DEFB $16,$80,$0B,$00,$00,$80,$01,$00 ;
 $9172 DEFB $01,$80,$00,$00,$01,$80,$0B,$D0 ;
 $917A DEFB $0B,$50,$01,$80,$00,$00,$01,$80 ;
 $9182 DEFB $00,$40,$00,$20,$02,$C0,$05,$E0 ;
 $918A DEFB $01,$A8,$00,$D0,$01,$00,$00,$80 ;
 $9192 DEFB $00,$00,$00,$90,$01,$68,$00,$F0 ;
 $919A DEFB $00,$D0,$01,$68,$00,$90,$00,$00 ;
 $91A2 DEFB $00,$20,$00,$40,$00,$34,$00,$7A ;
 $91AA DEFB $01,$68,$00,$B0,$00,$08,$00,$10 ; }
 $91B2 DEFB $00,$00,$08,$C0,$01,$00,$09,$00 ; {#UDGARRAY2,$47,,2;$91B2-$91D1-1-16(footman_standing)
 $91BA DEFB $04,$E0,$08,$00,$02,$80,$02,$40 ;
 $91C2 DEFB $01,$00,$08,$C0,$01,$50,$00,$88 ;
 $91CA DEFB $00,$92,$00,$00,$01,$00,$01,$C0 ; }
 $91D2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY6,$47,,6;$91D2-$92F1-1-48(boss)
 $91DA DEFB $3C,$71,$88,$00,$00,$01,$80,$06 ;
 $91E2 DEFB $44,$00,$00,$0C,$00,$00,$BF,$00 ;
 $91EA DEFB $00,$10,$05,$41,$61,$80,$00,$40 ;
 $91F2 DEFB $2A,$80,$C8,$88,$00,$00,$57,$01 ;
 $91FA DEFB $10,$28,$01,$02,$BF,$82,$90,$AB ;
 $9202 DEFB $02,$05,$5F,$99,$00,$20,$00,$02 ;
 $920A DEFB $FE,$22,$C0,$88,$04,$05,$7E,$C8 ;
 $9212 DEFB $61,$80,$00,$0B,$FD,$10,$BF,$00 ;
 $921A DEFB $10,$05,$DD,$50,$54,$00,$00,$2B ;
 $9222 DEFB $F0,$E8,$00,$00,$00,$17,$7F,$A8 ;
 $922A DEFB $08,$00,$20,$2E,$F5,$49,$1A,$00 ;
 $9232 DEFB $00,$57,$FF,$32,$08,$74,$40,$2D ;
 $923A DEFB $FA,$CD,$1A,$00,$00,$5F,$FF,$B6 ;
 $9242 DEFB $88,$00,$40,$AF,$C3,$FF,$21,$00 ;
 $924A DEFB $00,$5F,$28,$FE,$AD,$EA,$00,$BE ;
 $9252 DEFB $C0,$54,$26,$00,$01,$59,$00,$01 ;
 $925A DEFB $A6,$00,$80,$B5,$00,$FD,$25,$6A ;
 $9262 DEFB $01,$5A,$4E,$01,$A0,$02,$80,$B2 ;
 $926A DEFB $00,$95,$24,$DA,$00,$7A,$64,$E4 ;
 $9272 DEFB $20,$00,$80,$B2,$5E,$97,$3F,$A8 ;
 $927A DEFB $01,$75,$04,$00,$00,$00,$00,$B9 ;
 $9282 DEFB $00,$2A,$80,$04,$40,$54,$C0,$41 ;
 $928A DEFB $55,$54,$00,$AA,$28,$ED,$FF,$E4 ;
 $9292 DEFB $20,$05,$01,$52,$C1,$E8,$02,$B1 ;
 $929A DEFB $4A,$D2,$00,$68,$08,$04,$57,$D4 ;
 $92A2 DEFB $16,$10,$12,$42,$4F,$28,$0F,$10 ;
 $92AA DEFB $14,$02,$4C,$46,$1F,$80,$00,$00 ;
 $92B2 DEFB $40,$91,$C0,$00,$17,$FF,$5C,$30 ;
 $92BA DEFB $31,$28,$15,$6D,$02,$68,$88,$00 ;
 $92C2 DEFB $00,$00,$40,$90,$65,$2D,$04,$BC ;
 $92CA DEFB $4C,$88,$A0,$40,$02,$78,$0C,$50 ;
 $92D2 DEFB $40,$20,$02,$B8,$4B,$22,$20,$16 ;
 $92DA DEFB $00,$00,$05,$1C,$25,$00,$04,$BC ;
 $92E2 DEFB $02,$80,$0A,$00,$00,$00,$20,$55 ;
 $92EA DEFB $00,$00,$10,$BF,$05,$28,$00,$00 ; }
 $92F2 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY6,$47,,6;$92F2-$9411-1-48(boss_destroyed)
 $92FA DEFB $3A,$A0,$00,$00,$00,$01,$83,$E0 ;
 $9302 DEFB $10,$00,$00,$0C,$00,$ED,$00,$00 ;
 $930A DEFB $00,$10,$3E,$CD,$90,$00,$00,$7E ;
 $9312 DEFB $01,$DE,$0A,$88,$00,$0C,$14,$DD ;
 $931A DEFB $7E,$28,$01,$E6,$02,$E2,$92,$AB ;
 $9322 DEFB $00,$7F,$8C,$D9,$00,$20,$00,$7D ;
 $932A DEFB $08,$22,$10,$88,$00,$0F,$C0,$C8 ;
 $9332 DEFB $15,$00,$00,$03,$EB,$10,$0E,$00 ;
 $933A DEFB $00,$03,$FF,$10,$00,$00,$00,$50 ;
 $9342 DEFB $B6,$08,$00,$00,$01,$04,$0C,$08 ;
 $934A DEFB $08,$00,$10,$01,$18,$0A,$1A,$00 ;
 $9352 DEFB $02,$00,$9C,$32,$08,$74,$22,$60 ;
 $935A DEFB $58,$C1,$1A,$00,$20,$80,$08,$01 ;
 $9362 DEFB $08,$00,$42,$80,$2C,$32,$21,$00 ;
 $936A DEFB $40,$70,$00,$4C,$2D,$EA,$42,$02 ;
 $9372 DEFB $28,$80,$26,$00,$81,$34,$EC,$01 ;
 $937A DEFB $A6,$00,$81,$09,$18,$FD,$25,$6A ;
 $9382 DEFB $80,$86,$7E,$01,$A0,$02,$7F,$A0 ;
 $938A DEFB $C2,$95,$24,$DA,$00,$3F,$E4,$E4 ;
 $9392 DEFB $20,$00,$FF,$80,$00,$97,$3F,$A8 ;
 $939A DEFB $00,$85,$46,$00,$00,$00,$7E,$B0 ;
 $93A2 DEFB $BD,$C0,$33,$54,$1F,$EA,$B8,$03 ;
 $93AA DEFB $FE,$F4,$43,$FD,$C0,$0D,$BE,$F4 ;
 $93B2 DEFB $41,$BF,$84,$12,$0E,$68,$02,$F9 ;
 $93BA DEFB $18,$12,$30,$08,$03,$F5,$0C,$14 ;
 $93C2 DEFB $FE,$10,$43,$B5,$18,$28,$3B,$10 ;
 $93CA DEFB $02,$01,$1C,$46,$03,$80,$00,$00 ;
 $93D2 DEFB $00,$91,$C2,$00,$00,$08,$58,$26 ;
 $93DA DEFB $31,$28,$00,$08,$42,$5F,$C8,$00 ;
 $93E2 DEFB $00,$00,$0C,$BB,$A5,$2D,$00,$00 ;
 $93EA DEFB $18,$BC,$F0,$40,$00,$00,$0C,$5C ;
 $93F2 DEFB $1C,$20,$00,$00,$18,$22,$04,$16 ;
 $93FA DEFB $00,$00,$00,$1D,$00,$00,$00,$00 ;
 $9402 DEFB $2E,$01,$80,$00,$00,$00,$2E,$00 ;
 $940A DEFB $00,$00,$00,$00,$00,$28,$00,$00 ; }
 $9412 DEFB $18,$0C,$14,$08,$0C,$18,$00,$08 ; {#UDGARRAY1,$02,,1;$9412-$9441-8-8(fire)
 $941A DEFB $1C,$24,$0C,$10,$0C,$10,$08,$00 ;
 $9422 DEFB $08,$14,$0C,$1C,$08,$18,$00,$08 ;
 $942A DEFB $14,$0C,$1C,$08,$08,$00,$08,$00 ;
 $9432 DEFB $18,$2C,$18,$00,$10,$08,$10,$00 ;
 $943A DEFB $14,$08,$08,$00,$08,$00,$00,$00 ; }
 $9442 DEFB $00,$91,$00,$56,$00,$99,$00,$D5 ; {#UDGARRAY1,$47,,1;$9442-$9471-8-8(water)
 $944A DEFB $00,$9A,$00,$52,$00,$8D,$00,$51 ;
 $9452 DEFB $00,$46,$00,$34,$00,$43,$00,$AD ;
 $945A DEFB $00,$67,$00,$89,$00,$A5,$00,$4C ;
 $9462 DEFB $00,$46,$00,$B4,$00,$43,$00,$AD ;
 $946A DEFB $00,$67,$00,$89,$00,$A5,$00,$4C ; }
 $9472 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$9472,$47,2(empty)

; The game has just loaded
c$947A DI            ; Disable interrupts
 $947B XOR A         ; #REGa=0
 $947C LD ($A0AE),A  ; Initialise input device type to $00 at #R$A0AE
 $947F LD ($A0C2),A  ; Initialise to 0 the number of room to display in
                     ; attract-mode
 $9482 CALL $DAC0    ; Main loop for the tile screen
 $9485 LD HL,$E4FF   ; {Clear the attribute buffer for HUD and room
 $9488 LD DE,$E500   ;
 $948B LD BC,$02FF   ;
 $948E LD (HL),$00   ;
 $9490 LDIR          ; }
 $9492 LD HL,$000A   ; {Set the minimum score for the game to 1000 = $0A * 100
 $9495 LD ($A08B),HL ; }
; Initialise data buffers and game states variables. Used by the routines at
; #R$9C76, #R$A7CE and #R$A915.
*$9498 CALL $A628    ; Initialise drones configuration data buffer
 $949B LD A,$08      ; {Initialise laser duration to 8
 $949D LD ($A068),A  ; }
 $94A0 XOR A         ; Set #REGa=0
 $94A1 OUT ($FE),A   ; Reset keyboard reading
 $94A3 LD ($A071),A  ; Set Rex to be mortal
 $94A6 LD ($A0B8),A  ; Set current room number
 $94A9 LD ($A069),A  ; Set the respawn indicator index value for animation
 $94AC LD ($A06A),A  ; Set the shield recharger index value for animation
 $94AF LD ($A07C),A  ; Set the water effect index value for animation
 $94B2 LD ($A069),A  ; Duplicated code
 $94B5 LD ($A06B),A  ; Set the respawn fire index value for animation
 $94B8 LD ($A05B),A  ; Number of room in the last saved respawn
 $94BB LD ($A05C),A  ; Set current room not configured
 $94BE LD ($A072),A  ; {Set Rex speed to normal
 $94C1 LD ($A073),A  ; }
 $94C4 LD ($ABA0),A  ; Initialize variable related to DOUBLE FIRE weapon
                     ; selection windows in game
 $94C7 LD ($ABB1),A  ; Initialize variable related to LASER weapon selection
                     ; windows in game
 $94CA LD ($ABBC),A  ; Initialize variable related to MULTIPLE weapon selection
                     ; in game
 $94CD LD ($ABCA),A  ; Initialize variable related to SPRAY weapon selection in
                     ; game
 $94D0 LD ($A055),A  ; Set Rex alive
 $94D3 XOR A         ;
 $94D4 LD ($A064),A  ; Set time bar update slot index
 $94D7 LD ($A066),A  ; Set time bar update direction to right
 $94DA LD HL,$0313   ; {Initialise seed for pseudo random number generator
 $94DD LD ($A0A1),HL ;
 $94E0 LD A,$11      ;
 $94E2 LD ($A0A3),A  ; }
 $94E5 LD HL,$0000   ; {Set initial score
 $94E8 LD ($A03E),HL ; }
 $94EB LD ($A076),HL ; Set initial score for live bonus
 $94EE LD ($A089),HL ; Set humans killed
 $94F1 LD A,$04      ; {Set the number of lives of Rex
 $94F3 LD ($A063),A  ; }
 $94F6 LD A,$03      ; {Set the number of smartbombs in inventory
 $94F8 LD ($A06C),A  ; }
 $94FB CALL $BA49    ; Initialise weapon data
 $94FE LD A,$63      ; {Set shield power
 $9500 LD ($A04D),A  ; }
 $9503 LD A,$02      ; {Set shield loss counter. Shield loss when this value
 $9505 LD ($A04E),A  ; reaches 0}
 $9508 LD A,$01      ; {Machine gun weapon available on init
 $950A LD ($A04F),A  ; }
 $950D XOR A         ; Set #REGa=0
 $950E LD ($A050),A  ; Double fire weapon not available on init
 $9511 LD ($A051),A  ; Laser weapon not available on init
 $9514 LD ($A052),A  ; Multiple weapon not available on init
 $9517 LD ($A053),A  ; Spray weapon not available on init
 $951A XOR A         ;
 $951B LD ($A040),A  ; Set rapid shots inactive
 $951E LD ($A038),A  ; Variable not used in game
 $9521 LD ($A030),A  ; Set Destroy all enemies inactive
 $9524 LD ($A0B3),A  ; Variable not used in game
 $9527 LD ($A049),A  ; Shield inactive
 $952A LD A,$A0      ; {Set initial x-position of Rex
 $952C LD ($A0B6),A  ;
 $952F LD ($A059),A  ; }
 $9532 LD A,$60      ; {Set initial y-position of Rex
 $9534 LD ($A0B7),A  ;
 $9537 LD ($A05A),A  ; }
 $953A XOR A         ;
 $953B LD ($A0BB),A  ; Set Rex facing direction to right
 $953E LD ($A0BD),A  ; Set Rex not jumping
 $9541 LD ($A091),A  ; Rex falling y-speed 0
 $9544 LD ($A0BC),A  ; Set Rex not falling
 $9547 XOR A         ; {Set weapon energy quantity
 $9548 LD ($A018),A  ; }
 $954B LD A,$FF      ; {Set HUD flash inactive
 $954D LD ($A042),A  ; }
 $9550 LD A,$00      ;
 $9552 CALL $A3AE    ; Reset display and attribute file Draw HUD and the
                     ; windows to start play
 $9555 CALL $A1A5    ; Draw HUD
 $9558 CALL $99BB    ; Draw lives number on HUD
 $955B CALL $CF8F    ; Copy the attribute file of the HUD to the attribute
                     ; buffer of the HUD
 $955E LD IX,$AAAE   ; {Draw windows PHASE ONE: PROCEED ON FOOT THROUGH
 $9562 LD B,$03      ; UNDERGROUND COMPLEX
 $9564 CALL $A13E    ; }
 $9567 CALL $97C3    ; Reset sound buffer, volume channels and check for FIRE
                     ; key
 $956A LD IX,$AB25   ; {Draw windows PRESS FIRE TO BEGIN
 $956E LD B,$02      ;
 $9570 CALL $A13E    ; }
 $9573 CALL $97C3    ; Reset sound buffer, volume channels and check for FIRE
                     ; key
 $9576 LD A,($A093)  ; {FIRE key pressed?
 $9579 OR A          ; }
 $957A JP Z,$A915    ; Jump to attract-mode if it isn't
 $957D CALL $D5AE    ; Reset sound data buffer
 $9580 CALL $9D1F    ; Configure data for Rex teleporting on game begins
; Main loop for the game. This entry point is used by the routines at #R$9C76
; and #R$C95A.
*$9583 CALL $A89D    ; Configure current room
*$9586 CALL $B64E    ; Draw Rex projectiles
 $9589 CALL $B645    ; Draw enemy projectiles
 $958C CALL $A639    ; Draw drones for multiple weapon
 $958F CALL $969B    ; Draw Rex and shield
 $9592 CALL $9D71    ; Handle Rex visibility during teleporting
 $9595 CALL $9E02    ; Handle Rex atoms flush during teleporting
 $9598 CALL $BA5C    ; Draw enmies
 $959B CALL $D68C    ; Play sound channels
 $959E CALL $B33E    ; Copy tile graphic into room graphic data buffer
 $95A1 CALL $A28A    ; Copy room graphic data buffer to display file
 $95A4 CALL $B205    ; Reset room graphic data buffer
 $95A7 CALL $D68C    ; Play sound channels
 $95AA CALL $D1B9    ; Handle enemy projectile collision with Rex
 $95AD CALL $B96B    ; Update attribute color for weapon icon on HUD
 $95B0 CALL $C978    ; Generate train parts: front, middle or rear wagon
 $95B3 CALL $C9CA    ; Creates a new mobile enemy on room
 $95B6 CALL $9786    ; Destroy an enemy if smartbomb released or Rex has been
                     ; killed
 $95B9 CALL $9992    ; Update attribute color for score points in HUD
 $95BC CALL $9A4C    ; HUD flash
 $95BF CALL $A0C4    ; Update timer bar in HUD
 $95C2 CALL $A4DB    ; Check if DOWN key pressed
 $95C5 CALL Z,$967F  ; Active/inactive shield power if keypressed
 $95C8 CALL $A4DB    ; Check if DOWN key pressed
 $95CB JP Z,$95D2    ; Jump forward if DOWN key is still pressed
 $95CE XOR A         ; {Set Shield power key not hold down
 $95CF LD ($A04C),A  ; }
*$95D2 LD BC,$BFFE   ; {Check if RESET key (ENTER) is pressed
 $95D5 IN A,(C)      ;
 $95D7 BIT 0,A       ; }
 $95D9 JP Z,$9498    ; Jump back to reset game
 $95DC LD BC,$BFFE   ; {Check if PAUSE key (H) is pressed
 $95DF IN A,(C)      ;
 $95E1 BIT 4,A       ; }
 $95E3 CALL Z,$A4E7  ; Pause game if pressed
 $95E6 LD BC,$7FFE   ; {Check if SMARTBOMB key (SPACE) is pressed
 $95E9 IN A,(C)      ;
 $95EB BIT 0,A       ; }
 $95ED CALL Z,$9751  ; Release a smartbomb if pressed
 $95F0 LD A,($A0B6)  ; {Copy x-position of Rex into #R$A0AF
 $95F3 LD ($A0AF),A  ; }
 $95F6 LD A,($A0B7)  ; {Copy y-position of Rex into #R$A0B0
 $95F9 LD ($A0B0),A  ; }
 $95FC LD A,($A0BB)  ; Set #REGa the face direction of Rex
 $95FF CALL $A503    ; Computes address position in tile type buffer based on
                     ; (x,y) position on screen
 $9602 LD ($A019),HL ; Set this address into #R$A019
 $9605 LD A,($A055)  ; {Jump forward if Rex is dead
 $9608 OR A          ;
 $9609 JP NZ,$9645   ; }
; Rex is alive
 $960C LD A,($A040)  ; {Jump forward if no rapid shots
 $960F OR A          ;
 $9610 JP Z,$9617    ; }
 $9613 XOR A         ; {Set FIRE key not hold down
 $9614 LD ($A012),A  ; }
*$9617 CALL $A477    ; Check if FIRE key is pressed
 $961A CALL Z,$B372  ; Fire weapon if pressed
 $961D CALL $A477    ; Check if FIRE key is pressed
 $9620 JP Z,$9627    ; Jump forward if key is still pressed
 $9623 XOR A         ; {Set FIRE key not hold down
 $9624 LD ($A012),A  ; }
*$9627 CALL $A4A9    ; Check if RIGHT key is pressed
 $962A CALL Z,$CFDA  ; Jump to move Rex right if key pressed
 $962D CALL $A490    ; Check if LEFT key is pressed
 $9630 CALL Z,$CFF6  ; Jump to move Rex left is key pressed
 $9633 CALL $A4C2    ; Check if UP key is pressed
 $9636 CALL Z,$D0C2  ; Jump to set Rex jump is key pressed
 $9639 CALL $D0E4    ; Handle Rex jumping
 $963C CALL $D14D    ; Handle Rex falling
 $963F CALL $D013    ; Handle Rex lateral movement
 $9642 CALL $9F5F    ; Handle Rex over special tiles
; Rex is dead
*$9645 LD HL,$6758   ; {Rotate left tile $6F. Not used in game
 $9648 LD B,$08      ;
*$964A RRC (HL)      ;
 $964C INC HL        ;
 $964D DJNZ $964A    ; }
 $964F LD HL,$6858   ; {Rotate right two times tile $8F. Simulate horizontal
 $9652 LD B,$08      ; conveyor belt
*$9654 RLC (HL)      ;
 $9656 RLC (HL)      ;
 $9658 INC HL        ;
 $9659 DJNZ $9654    ; }
 $965B LD HL,$64C0   ; Set #REGhl to point to tile $1C graphic data (vertical
                     ; conveyor belt)
 $965E CALL $A7BA    ; Simulate conveyor belt going down
 $9661 LD HL,$6438   ; Set #REGhl to point to tile $0B graphic data (vertical
                     ; conveyor belt)
 $9664 CALL $A7A9    ; Simulate conveyor belt going up
 $9667 LD HL,$64B0   ; Set #REGhl to point to tile $1A graphic data (vertical
                     ; conveyor belt)
 $966A CALL $A7BA    ; Simulate conveyor belt going down
 $966D CALL $A55E    ; Update arrow tiles, shield recharger, respawn indicator,
                     ; fire and water effect
 $9670 LD A,($A017)  ; {Change tilt arrow tiles
 $9673 XOR $01       ;
 $9675 LD ($A017),A  ; }
 $9678 JP $9586      ; Jump back to main loop game

; Routine not used
s$967B CALL $D5D7
 $967E RET

; Active/inactive shield
;
; Used by the routine at #R$947A.
c$967F LD A,($A060)  ; {Return if Rex is teleporting
 $9682 OR A          ;
 $9683 RET NZ        ; }
 $9684 LD A,($A04C)  ; {Return if shield key is hold down
 $9687 OR A          ;
 $9688 RET NZ        ; }
 $9689 LD A,($A04D)  ; {Return if shield power is zero
 $968C OR A          ;
 $968D RET Z         ; }
 $968E LD A,$01      ; {Set shield key is hold down
 $9690 LD ($A04C),A  ; }
 $9693 LD A,($A049)  ; {Invert shield status active/inactive
 $9696 CPL           ;
 $9697 LD ($A049),A  ; }
 $969A RET           ;

; Draw Rex and shield
;
; Used by the routine at #R$947A.
c$969B LD A,($A05D)  ; {Return if Rex is not visible
 $969E OR A          ;
 $969F RET Z         ; }
 $96A0 LD A,($A055)  ; {Jump to handle dead animation if Rex is dead
 $96A3 OR A          ;
 $96A4 JP NZ,$9AC5   ; }
; This entry point is used by the routine at #R$9AC5.
*$96A7 LD A,($A0B6)  ; {Set #R$A0AF the x-position of Rex
 $96AA LD ($A0AF),A  ; }
 $96AD LD A,($A0B7)  ; {Set #R$A0B0 the y-position of Rex
 $96B0 LD ($A0B0),A  ; }
 $96B3 LD A,$03      ; {Set #R$A0B1 the width in bytes of Rex
 $96B5 LD ($A0B1),A  ; }
 $96B8 LD A,$10      ; {Set #R$A0B2 the height in pixels of Rex
 $96BA LD ($A0B2),A  ; }
 $96BD XOR A         ; {Set the entity type for Rex
 $96BE LD ($A033),A  ; }
 $96C1 LD HL,$AE5D   ; Set #REGhl the address for the offset animation for Rex
 $96C4 LD DE,$8F62   ; Set #REGde the address for graphic data of Rex
                     ; falling/jumping
 $96C7 LD A,($A07A)  ; {Jump forward if Rex on elevator
 $96CA OR A          ;
 $96CB JP NZ,$96DC   ; }
 $96CE LD A,($A0BD)  ; {Jump forward if Rex is jumping
 $96D1 OR A          ;
 $96D2 JP NZ,$96E2   ; }
 $96D5 LD A,($A0BC)  ; {Jump forward if Rex is falling
 $96D8 OR A          ;
 $96D9 JP NZ,$96E2   ; }
*$96DC LD HL,$AE5D   ; Set #REGhl the address for the offset animation for Rex
 $96DF LD DE,$80F2   ; Set #REGde the address for graphic data of Rex walking
; Rex is falling or jumping
*$96E2 LD A,($A0BB)  ; Set #REGa the facing direction of Rex
 $96E5 CALL $B258    ; Draw Rex
 $96E8 LD A,($A049)  ; {Return if shield not active
 $96EB OR A          ;
 $96EC RET Z         ; }
 $96ED LD A,($D83A)  ; {Jump forward if channel 2 is playing
 $96F0 CP $FF        ;
 $96F2 JP NZ,$970A   ; }
 $96F5 CALL $A375    ; {Set #REGa to a pseudo random number between 0-31
 $96F8 AND $1F       ; }
 $96FA LD E,A        ; {Configure random fine/noise pitch into shield sound
 $96FB LD D,$00      ; data
 $96FD LD HL,$04B0   ;
 $9700 ADD HL,DE     ;
 $9701 LD ($D7A0),HL ; }
 $9704 LD DE,$D79C   ; Set #REGde to play shield sound
 $9707 CALL $D5E7    ; Configure sound channel and mixer register
*$970A LD L,$01      ; {Decrease 1 shield point
 $970C CALL $99D3    ; }
 $970F LD A,($A0B6)  ; {Set #R$A0AF the x-position for the shield
 $9712 SUB $04       ;
 $9714 LD ($A0AF),A  ; }
 $9717 LD A,($A0BB)  ; {Jump forward if Rex facing right
 $971A OR A          ;
 $971B JP Z,$9726    ; }
 $971E LD A,($A0AF)  ; {Increment x-position of shield if Rex is facing left
 $9721 ADD A,$08     ;
 $9723 LD ($A0AF),A  ; }
*$9726 LD A,($A0B7)  ; {Set #R$A0B0 the y-position for the shield
 $9729 SUB $02       ;
 $972B LD ($A0B0),A  ; }
 $972E LD A,$04      ; {Set #R$A0B1 the width in bytes of the shield
 $9730 LD ($A0B1),A  ; }
 $9733 LD A,$15      ; {Set #R$A0B2 the height in pixels of the shield
 $9735 LD ($A0B2),A  ; }
 $9738 XOR A         ; {Set entity type of #0
 $9739 LD ($A033),A  ; }
 $973C LD HL,$AE65   ; Set #REGhl the address pointer for shield offsets
 $973F LD DE,$88F2   ; Set #REGhl the address pointer for shield graphic data
 $9742 LD A,($A0BB)  ; Set #REGa the face direction of Rex
 $9745 CALL $B258    ; Draw shield
 $9748 RET           ;

; Destroy all enemy projectiles
;
; Used by the routine at #R$9BDA.
c$9749 LD A,($A030)  ; {Return if not destroy all enemies active
 $974C OR A          ;
 $974D RET NZ        ; }
 $974E JP $9763      ; Destroy all enemy projectiles

; Release a smartbomb
;
; Used by the routine at #R$947A.
c$9751 LD A,($A030)  ; {Return if not destroy all enemies active
 $9754 OR A          ;
 $9755 RET NZ        ; }
 $9756 LD A,($A06C)  ; {Decrement smartbomb inventory
 $9759 DEC A         ;
 $975A CP $FF        ;
 $975C RET Z         ;
 $975D LD ($A06C),A  ; }
 $9760 CALL $A1C9    ; Draw smartbombs in HUD
; Destroy all enemies / projectiles flying. This entry point is used by the
; routine at #R$9749.
*$9763 LD A,$01      ; {Active destroy all enemies
 $9765 LD ($A030),A  ; }
 $9768 LD A,$10      ; {Set the max number of enemies to be killes equal to 16
 $976A LD ($A02F),A  ; }
 $976D LD HL,$5E66   ; {Set address pointer fot the data buffer of enemies
 $9770 LD ($A031),HL ; configuration}
 $9773 LD HL,$5D28   ; Set #REGhl to the address for the projectile status
 $9776 LD B,$14      ; Set #REGb to the max number of projectiles on screen
*$9778 LD A,(HL)     ; Set #REGa to the status of the projectile
 $9779 OR A          ; {Jump to the next projectile if projectile is destroyed
 $977A JP Z,$977F    ; }
 $977D LD (HL),$02   ; Set projectile status to Impact #1
*$977F LD DE,$000F   ; {Set #REGhl to pint to the next projectile status
 $9782 ADD HL,DE     ; }
 $9783 DJNZ $9778    ; Jump back until all projectiles checked
 $9785 RET           ;

; Destroy an enemy if smartbomb released or Rex dead
;
; Used by the routine at #R$947A.
c$9786 LD A,($A030)  ; {Return if Destroy all enemies not activated
 $9789 OR A          ;
 $978A RET Z         ; }
 $978B LD IX,($A031) ; Set #REGix the address pointer into enemy configuration
                     ; buffer for the next enemy to be destroyed
 $978F LD A,(IX+$09) ; Check enemy type
 $9792 CP $FE        ; {Jump to check next enemy if enemy type is bubble,
 $9794 JP Z,$97A9    ; smartbomb, question or boss
 $9797 CP $FD        ;
 $9799 JP Z,$97A9    ;
 $979C CP $FC        ;
 $979E JP Z,$97A9    ;
 $97A1 CP $90        ;
 $97A3 JP Z,$97A9    ; }
 $97A6 CALL $981F    ; Destroy enemy
*$97A9 LD DE,$0018   ; {Point address to the next enemy
 $97AC ADD IX,DE     ;
 $97AE LD ($A031),IX ; }
 $97B2 LD A,($A02F)  ; {Decrement the max number of enemies to be destroyed
 $97B5 DEC A         ;
 $97B6 LD ($A02F),A  ; }
 $97B9 OR A          ; {Return if is not zero
 $97BA RET NZ        ; }
 $97BB XOR A         ; {Inactive destroy all enemies if max number of enemiies
 $97BC LD ($A030),A  ; destroyed has been reached}
 $97BF CALL $C8BF    ; Copy room color attribute buffer to attribute file
 $97C2 RET           ;

; Reset sound buffer, volume channels and check for FIRE key
;
; Used by the routines at #R$947A and #R$D871.
c$97C3 XOR A         ; {Reset temporal buffer at #R$A093
 $97C4 LD ($A093),A  ; }
 $97C7 CALL $D5D7    ; Reset channel volumes of the AY-3-8912
 $97CA LD DE,$C350   ; Set #REGde to count 50.000 loops
*$97CD DEC DE        ; Decrement counter
 $97CE LD A,D        ; {Counter is 0?
 $97CF OR E          ; }
 $97D0 RET Z         ; Return if so
 $97D1 LD B,$1E      ; {Wait some time
*$97D3 DJNZ $97D3    ; }
 $97D5 CALL $A477    ; Check for FIRE key press
 $97D8 JP NZ,$97CD   ; Jump back if not pressed
*$97DB CALL $A477    ; Check for FIRE key press
 $97DE JP Z,$97DB    ; Jump back until FIRE key not pressed
 $97E1 CALL $D5AE    ; Reset sound data buffer
 $97E4 LD A,$01      ; {Set $01 to temporal buffer at #R$A093 meaning fire
 $97E6 LD ($A093),A  ; pressed}
 $97E9 RET           ;

; Reset sound data and wait for FIRE key press
;
; Used by the routines at #R$9C76 and #R$A7CE.
c$97EA CALL $D5D7    ; Reset sound volume channels
*$97ED CALL $A477    ; Check for FIRE key pressed
 $97F0 JP NZ,$97ED   ; Jump back until keypressed
*$97F3 CALL $A477    ; Check for FIRE key pressed
 $97F6 JP Z,$97F3    ; Jump back until key released
 $97F9 CALL $D5AE    ; Reset sound data buffer
 $97FC RET           ;

; Configure explosion
;
; Used by the routine at #R$98AF.
c$97FD LD HL,$81B2     ; {Set graphic data addres for explosion
 $9800 LD (IX+$04),L   ;
 $9803 LD (IX+$05),H   ; }
 $9806 LD (IX+$0D),$08 ; Set explosion counter
 $980A LD (IX+$0F),$18 ; Set sprite height
 $980E LD (IX+$0E),$03 ; Set sprite width
 $9812 LD (IX+$09),$FF ; Set entity type explosion
 $9816 LD (IX+$02),$00 ; Reset sprite direction
 $981A LD (IX+$03),$00 ; Reset explosion debris counter
 $981E RET             ;

; Destroy enemy
;
; Used by the routines at #R$9786, #R$C14D, #R$C3E0, #R$C620, #R$C6C2, #R$D215
; and #R$D3C2.
c$981F LD HL,$E9FF     ; {Set #R$A039 the base address for attribute buffer
 $9822 LD ($A039),HL   ; pointing to score points}
 $9825 LD HL,$0000     ; {Set #R$A03C the score points for enemy dying
 $9828 LD ($A03C),HL   ; }
 $982B LD A,(IX+$09)   ; Check enemy type
 $982E CP $90          ; is Boss?
 $9830 JP Z,$98AF      ; Jump to handle Boss destruction
 $9833 LD A,(IX+$01)   ; {Return if y-position of enemy is greater than $B0
 $9836 CP $B0          ;
 $9838 RET NC          ; }
 $9839 CP $10          ; {Return if y-position of enemy is less than $10
 $983B RET C           ; }
 $983C LD A,(IX+$09)   ; Check enemy type
 $983F CP $05          ; is front train?
 $9841 CALL Z,$9968    ; Jump to handle train destruction
 $9844 LD HL,$81B2     ; {Set base address for explosion graphic data
 $9847 LD (IX+$04),L   ;
 $984A LD (IX+$05),H   ; }
 $984D LD (IX+$0D),$08 ; Set explosion counter
 $9851 LD (IX+$0F),$18 ; Set height of explosion
 $9855 LD (IX+$0E),$03 ; Set width of explosion
 $9859 LD A,(IX+$09)   ; Check enemy
 $985C OR A            ; is FOOT MAN?
 $985D CALL Z,$98A7    ; Jump to increment enemy dead count
 $9860 CP $07          ; is FOOT MAN dying?
 $9862 CALL Z,$98A7    ; Jump to increment enemy dead count
 $9865 CP $06          ; is FOOT MAN crouched/dying?
 $9867 CALL Z,$98A7    ; Jump to increment enemy dead count
 $986A CP $0C          ; is Pod?
 $986C CALL Z,$98A7    ; Jump to increment enemy dead count
 $986F CP $04          ; is rear train?
 $9871 CALL Z,$98A7    ; Jump to increment enemy dead count
 $9874 CP $05          ; is front train?
 $9876 CALL Z,$98A7    ; Jump to increment enemy dead count
 $9879 AND $0F         ; {Set into #REGhl to the address into the enemy points
 $987B LD E,A          ; table
 $987C LD D,$00        ;
 $987E LD HL,$994E     ;
 $9881 ADD HL,DE       ; }
 $9882 LD E,(HL)       ; {Set #REGde to the points obtained
 $9883 LD D,$00        ; }
 $9885 LD A,E          ; {Check number of points
 $9886 OR A            ; }
 $9887 CALL NZ,$9A27   ; if points greater than 0 then increment score
 $988A LD DE,$D790     ; Set address for explosion sound
 $988D CALL $D5E7      ; Configure sound channel and mixer register
 $9890 LD (IX+$09),$FF ; Set entity type explosion
 $9894 LD (IX+$02),$00 ; Reset sprite direction
 $9898 LD A,(IX+$01)   ; {Set explosion y-position (fixed grid)
 $989B SUB $08         ;
 $989D AND $F8         ;
 $989F LD (IX+$01),A   ; }
 $98A2 LD (IX+$03),$00 ; Reset explosion debris expansion counter
 $98A6 RET             ;
; Increment enemy dead counter
*$98A7 LD HL,($A089)   ; {Increment humans killed
 $98AA INC HL          ;
 $98AB LD ($A089),HL   ; }
 $98AE RET             ;

; Handle Boss destruction. Boss semi/full destroyed
;
; Used by the routine at #R$981F.
c$98AF LD DE,$000A     ; Set #REGde to the points obtained
 $98B2 CALL $9A27      ; Increment score
 $98B5 CALL $CE67      ; Recompute boss health
 $98B8 LD (IX+$12),$01 ; Set boss type semidestroyed - boss speed 1
 $98BC LD A,$0F        ;
 $98BE LD ($A092),A    ;
 $98C1 LD HL,$92F2     ; {Set address for semidestroyed boss graphic data
 $98C4 LD (IX+$04),L   ;
 $98C7 LD (IX+$05),H   ; }
 $98CA LD A,(IX+$00)   ; {Set #R$A093 the x-position of Boss
 $98CD LD ($A093),A    ; }
 $98D0 LD A,(IX+$01)   ; {Set #R$A095 the y-position of Boss
 $98D3 LD ($A095),A    ; }
 $98D6 LD A,(IX+$13)   ; {Set #R$A097 the boss status
 $98D9 LD ($A097),A    ; }
 $98DC INC (IX+$13)    ; Incremetnt boss status
 $98DF LD A,(IX+$13)   ; {if boss status equals $02?
 $98E2 CP $02          ; }
 $98E4 JP NZ,$990A     ; Jump forward if not and explode
; convert Boss to an escape Pod
 $98E7 CALL $CDA2      ; Configure escape pod
 $98EA LD (IX+$16),E   ; {Set address for graphic data
 $98ED LD (IX+$17),D   ; }
 $98F0 LD (IX+$15),$00 ; Set bubble type
 $98F4 LD (IX+$0A),L   ; {Set address for the offset animation table
 $98F7 LD (IX+$0B),H   ; }
 $98FA LD (IX+$0E),$03 ; Set width of sprite
 $98FE LD (IX+$0F),$10 ; Set height of sprite
 $9902 LD (IX+$09),$0C ; Set enemy type (POD)
 $9906 LD (IX+$14),$08 ; Set health for enemy
; generate explosions
*$990A PUSH IX         ; Save #REGix
 $990C LD B,$05        ; Set #REGb to the number of explosions to generate
*$990E PUSH BC         ; Save #REGbc
 $990F CALL $D858      ; Check for an avaliable slot into Enemy configuration
                       ; buffer to configure the explosion
 $9912 CALL $97FD      ; Configure explosion
 $9915 CALL $A375      ; {Set random bubble type
 $9918 AND $01         ;
 $991A LD (IX+$15),A   ; }
 $991D LD A,($A097)    ; {check Boss status
 $9920 OR A            ; }
 $9921 JP NZ,$9928     ; Jump forward if Boss was wounded
 $9924 LD (IX+$15),$FF ; Set to no bubble if Boss was in good health
*$9928 LD (IX+$0C),$01 ; Set explosion visible
 $992C CALL $A375      ; {Set #REGa to a random number between $00-$1F
 $992F AND $1F         ; }
 $9931 LD L,A          ; {Set x-position of explosion based on x-position of
 $9932 LD A,($A093)    ; Boss and random generated number
 $9935 ADD A,L         ;
 $9936 LD (IX+$00),A   ; }
 $9939 CALL $A375      ; {Set #REGa to a random number between $00-$1F
 $993C AND $1F         ; }
 $993E LD L,A          ; {Set y-position of explosion based on y-position of
 $993F LD A,($A095)    ; Boss and random generated number
 $9942 ADD A,L         ;
 $9943 AND $F8         ;
 $9945 LD (IX+$01),A   ; }
 $9948 POP BC          ; Restore #REGbc
 $9949 DJNZ $990E      ; Jump back and configure new explosion
 $994B POP IX          ; Restore #REGix
 $994D RET             ;

; Table points based on enemy types. Score = points * 100
b$994E DEFB $01,$02,$01,$01,$02,$03,$01,$01
 $9956 DEFB $06,$06,$05,$08,$03,$0A,$00,$02
 $995E DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $9966 DEFB $01,$01

; Handle train stop. Front wagon has been destroyed
;
; Used by the routine at #R$981F.
c$9968 PUSH IY         ; Save #REGiy
 $996A LD IY,$5E66     ; {Search for entities middle and rear wagon and jump to
 $996E LD A,($A092)    ; stop the wagon if found
 $9971 LD B,A          ;
*$9972 LD A,(IY+$09)   ;
 $9975 CP $03          ;
 $9977 CALL Z,$9989    ;
 $997A CP $04          ;
 $997C CALL Z,$9989    ;
 $997F LD DE,$0018     ;
 $9982 ADD IY,DE       ;
 $9984 DJNZ $9972      ; }
 $9986 POP IY          ; Restore #REGiy
 $9988 RET             ;
; Stop waagon
*$9989 LD (IY+$10),$00 ; Set wagon speed to zero
 $998D XOR A           ; {Stop generating train
 $998E LD ($A045),A    ; }
 $9991 RET             ;

; Update attribute color for score points in HUD
;
; Used by the routines at #R$947A and #R$A915.
c$9992 LD HL,$5840   ; Set #REGhl the base address into attribute file to score
                     ; points in HUD
 $9995 LD B,$1E      ; Set the number of color attributes to modify
*$9997 LD A,(HL)     ; Set #REGa the color attribute
 $9998 DEC A         ; Decrement color attribute
 $9999 CP $FF        ; {If color attribute is black then jump forward
 $999B JP Z,$999F    ; }
 $999E LD (HL),A     ; Set the new color attribute
*$999F INC HL        ; Increment address into attribute file
 $99A0 DJNZ $9997    ; Jump back and update color attribute for next byte
 $99A2 LD HL,($A039) ; Set #REGhl to the address into attribute file for the
                     ; current score points
 $99A5 LD (HL),$07   ; {Set color attribute to white for this
 $99A7 INC HL        ;
 $99A8 LD (HL),$07   ; }
 $99AA RET           ;

; Draw score on HUD
;
; Used by the routine at #R$9A27.
c$99AB LD HL,($A03E) ; Set #REGhl to the score
 $99AE CALL $A402    ; Computes the charcode digit of the score
 $99B1 LD E,$10      ; Set #REGe to the horizontal position of the unit digit
 $99B3 LD L,$00      ; Set #REGl to the vertical position of the number to draw
 $99B5 LD B,$05      ; Set #REGb to the number of digits to draw
 $99B7 CALL $A3C8    ; Draw the score at HUD into display file
 $99BA RET           ;

; Draws lives number on HUD
;
; Used by the routines at #R$947A, #R$9C76 and #R$D5A0.
c$99BB LD A,($A063)  ; Set #REGa to the number of lives of rex
 $99BE LD L,A        ; {Copy number of lives to #REGhl
 $99BF LD H,$00      ; }
 $99C1 CALL $A402    ; Computes the charcode digit of the number of lives
 $99C4 LD E,$17      ; Set #REGe to the horizontal position of the unit digit
 $99C6 LD L,$00      ; Set #REGl to the vertical position of the number to draw
 $99C8 LD B,$01      ; Set #REGb to the number of digits to draw
 $99CA CALL $A3C8    ; Draw the number at lives at HUD into display file
 $99CD RET           ;

; Handle shield loss
;
; Used by the routines at #R$D1B9 and #R$D215.
;
; I:L Shield loss quantity
c$99CE LD A,$01      ; {Set shield loss counter to 1
 $99D0 LD ($A04E),A  ; }
; This entry point is used by the routine at #R$969B.
*$99D3 LD A,($A04E)  ; {Decrement shield loss counter
 $99D6 DEC A         ;
 $99D7 LD ($A04E),A  ; }
 $99DA OR A          ; {Return is shield loss counter is not zero
 $99DB RET NZ        ; }
 $99DC LD A,$04      ; {Reset shield loss counter
 $99DE LD ($A04E),A  ; }
 $99E1 LD A,($A04D)  ; {Decrement shield power
 $99E4 SUB L         ; }
 $99E5 JP C,$99EF    ; Jump forward if shield loss is less than 0
 $99E8 LD ($A04D),A  ; Set new shield power value
 $99EB CALL $99FA    ; Draw shield power in HUD
 $99EE RET           ;
*$99EF XOR A         ; {Set shield power to zero
 $99F0 LD ($A04D),A  ; }
 $99F3 LD ($A049),A  ; Deactivite shield
 $99F6 CALL $99FA    ; Draw shield power in HUD
 $99F9 RET           ;

; Draw shield power
;
; Used by the routines at #R$99CE, #R$9C76, #R$9F5F and #R$A89D.
c$99FA LD A,($A04D)  ; Set #REGa to shield power
 $99FD LD L,A        ; {Copy shield power to #REGhl
 $99FE LD H,$00      ; }
 $9A00 CALL $A402    ; Convert shield power to charcode digits
 $9A03 LD E,$15      ; {Draw shield power into display file
 $9A05 LD L,$00      ;
 $9A07 LD B,$02      ;
 $9A09 CALL $A3C8    ; }
 $9A0C LD A,($A04D)  ; {Computes color attribute of digits based on shield
 $9A0F SRL A         ; power Color attribute is bit6-4 of shield power + 1
 $9A11 SRL A         ;
 $9A13 SRL A         ;
 $9A15 SRL A         ;
 $9A17 AND $07       ;
 $9A19 INC A         ; }
 $9A1A LD ($5815),A  ; {Set color attribute into attribute file
 $9A1D LD ($5814),A  ; }
 $9A20 LD ($E514),A  ; {Set color attribute into attribute buffer for HUD
 $9A23 LD ($E513),A  ; }
 $9A26 RET           ;

; Increment score
;
; Used by the routines at #R$981F, #R$98AF, #R$D3C2 and #R$D41F.
;
; I:DE Points to increment
c$9A27 LD A,($A055)  ; {Return if Rex is dead
 $9A2A OR A          ;
 $9A2B RET NZ        ; }
 $9A2C LD HL,($A03E) ; {Increment score
 $9A2F ADD HL,DE     ;
 $9A30 LD ($A03E),HL ; }
 $9A33 LD HL,($A076) ; {Increment lives score
 $9A36 ADD HL,DE     ;
 $9A37 LD ($A076),HL ; }
 $9A3A LD DE,$0064   ; {If lives score greather than 100 then increment live
 $9A3D AND A         ;
 $9A3E SBC HL,DE     ;
 $9A40 JP C,$9A49    ; }
 $9A43 LD ($A076),HL ; Reset lives score
 $9A46 CALL $D5A0    ; Increment lives
*$9A49 JP $99AB      ; Draw score on HUD

; HUD flash
;
; Used by the routines at #R$947A and #R$A915.
c$9A4C LD A,($A042)  ; {Return if HUD flash is not active
 $9A4F CP $FF        ;
 $9A51 RET Z         ; }
 $9A52 LD E,A        ; {Set #REGhl to the address into commands table for HUD
 $9A53 LD D,$00      ; flash based on flash index value
 $9A55 LD HL,$9AB3   ;
 $9A58 ADD HL,DE     ; }
 $9A59 LD A,(HL)     ; Set #REGa to the value of the commands table for HUD
                     ; flash
 $9A5A CP $FF        ; {Jump forward if command value is not equal to $FF
 $9A5C JP NZ,$9A65   ; }
 $9A5F LD A,$FF      ; {inactive HUD flash
 $9A61 LD ($A042),A  ; }
 $9A64 RET           ;
*$9A65 LD ($A093),A  ; Save into #R$A093 the value of the command
 $9A68 LD HL,$5800   ; Set #REGhl the base address of the attribute file
 $9A6B LD DE,$E4FF   ; Set #REGde the base address of the attribute buffer
 $9A6E LD B,$40      ; Set #REGb the number of bytes to flash
*$9A70 LD A,($A093)  ; Set #REGa to the value of the command
 $9A73 CP $01        ; command 1?
 $9A75 JP Z,$9A9A    ; Jump to handle flash command 1
 $9A78 OR A          ; command 0?
 $9A79 JP Z,$9AA7    ; Jump to handle flash command 0
 $9A7C CP $02        ; command 2?
 $9A7E JP Z,$9A8D    ; Jump to handle flash command 2
; handle the next byte
*$9A81 INC HL        ; Increase address into attribute file
 $9A82 INC DE        ; Increase address into attribute buffer
 $9A83 DJNZ $9A70    ; Jump to process the next byte
 $9A85 LD A,($A042)  ; {Increment flash index into commands table
 $9A88 INC A         ;
 $9A89 LD ($A042),A  ; }
 $9A8C RET           ;
; handle flash command #2
*$9A8D LD A,(DE)     ; Set #REGa the color attribute from attribute buffer
 $9A8E CP (HL)       ; Compare with attribute file
 $9A8F JP Z,$9A81    ; Jump to the next byte if equal
 $9A92 LD A,(HL)     ; {Increment attribute color in attribute file
 $9A93 INC A         ;
 $9A94 AND $07       ;
 $9A96 LD (HL),A     ; }
 $9A97 JP $9A81      ; Jump to process next byte
; handle flash command #1
*$9A9A LD A,(HL)     ; Set #REGa the color attribute
 $9A9B INC A         ; Increase color attribute
 $9A9C CP $07        ; {Jump to the next byte if color attribute is $07
 $9A9E JP Z,$9A81    ; }
 $9AA1 AND $07       ; {Set the new color attribute
 $9AA3 LD (HL),A     ; }
 $9AA4 JP $9A81      ; Jump to the next byte
; handle flash command #0
*$9AA7 LD A,(HL)     ; Set #REGa the color attribute
 $9AA8 DEC A         ; Decrease color attribute
 $9AA9 OR A          ; {Jump to the next byte if color attribute is $00
 $9AAA JP Z,$9A81    ; }
 $9AAD AND $07       ; {Set the new color attribute
 $9AAF LD (HL),A     ; }
 $9AB0 JP $9A81      ; Jump to the next byte

; Commands table for HUD flash
;
; Commands: $01 increase color attribute $00 decrease color attribute $02
; increase color attribute until original color
b$9AB3 DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $9ABB DEFB $00,$00,$00,$02,$02,$02,$02,$02
 $9AC3 DEFB $02,$FF

; Handle Rex Dead - Last live explossion
;
; Used by the routine at #R$969B.
c$9AC5 LD A,($A063)    ; {Jump back if not the last live
 $9AC8 OR A            ;
 $9AC9 JP NZ,$96A7     ; }
 $9ACC LD IY,$9C0B     ; Set #REGiy to the address for explosion data position
                       ; and index graphic data
 $9AD0 LD B,$10        ; Set #REGb the number of explosions
*$9AD2 PUSH BC         ; Save #REGbc
 $9AD3 LD A,(IY+$00)   ; Set #REGa the index of explosion graphic data
 $9AD6 OR A            ; {if index = 0 jump forward to configure explosion
 $9AD7 JP Z,$9B62      ; position}
 $9ADA LD B,A          ; {Multiply index number by 72 (length of graphic data
 $9ADB LD DE,$0048     ; explosion)
 $9ADE CALL $C8E8      ; }
 $9AE1 LD DE,$816A     ; {Set #R$A034 to the address point for the current
 $9AE4 ADD HL,DE       ; graphic data explosion
 $9AE5 LD ($A034),HL   ; }
 $9AE8 LD A,(IY+$01)   ; {Set #R$A0AF the x-position for the explosion
 $9AEB LD ($A0AF),A    ; }
 $9AEE LD A,(IY+$02)   ; Set #REGa the y-position for the explosion
 $9AF1 CP $A8          ; {Jump forward to configure (x-y) position if
 $9AF3 JP NC,$9B62     ; y-position is greater than 168 or less than 24
 $9AF6 CP $18          ;
 $9AF8 JP C,$9B62      ; }
 $9AFB LD ($A0B0),A    ; Set #R$A0B0 the y-position of explosion
 $9AFE LD A,$03        ; {Set #R$A0B1 the width in bytes for the sprite
 $9B00 LD ($A0B1),A    ; }
 $9B03 LD A,$18        ; {Set #R$A0B2 the height in pixels of the sprite
 $9B05 LD ($A0B2),A    ; }
 $9B08 LD A,$FF        ; {Set #R$A033 the entity type for explosion
 $9B0A LD ($A033),A    ; }
 $9B0D XOR A           ; Set #REGa the facing direction to right
 $9B0E CALL $B258      ; Draw the explosion
 $9B11 LD A,(IY+$01)   ; {Set #R$A0AF the x-position for the explosion
 $9B14 LD ($A0AF),A    ; }
 $9B17 LD A,(IY+$02)   ; {Set #R$A0B0 the y-position of explosion
 $9B1A LD ($A0B0),A    ; }
 $9B1D CALL $CF9B      ; Compute address into attribute file based on (x,y)
                       ; position
 $9B20 LD A,(IY+$00)   ; {Increment index of explosion
 $9B23 INC A           ;
 $9B24 LD (IY+$00),A   ; }
 $9B27 CP $09          ; {Jump forward and process next explosion if index is
 $9B29 JP NZ,$9B3A     ; less than 9}
 $9B2C LD (IY+$00),$00 ; Set index to 0
 $9B30 LD HL,($A093)   ; Set #REGhl to the address into the attribute file for
                       ; the explosion
 $9B33 LD DE,($A095)   ; Set #REGde to the address into the attribute buffer
                       ; for the explosion
 $9B37 CALL $CF6E      ; Reset attribute color when explosion ended
; handle next explosion
*$9B3A LD DE,$0003     ; {Point #REGiy to the next explosion data
 $9B3D ADD IY,DE       ; }
 $9B3F POP BC          ; Restore #REGbc
 $9B40 DJNZ $9AD2      ; Jump back and process next explosion
 $9B42 LD A,($A056)    ; {Decrement explosion counter
 $9B45 DEC A           ;
 $9B46 LD ($A056),A    ; }
 $9B49 CP $2F          ; {If explosion counter is 47 or 34 jump to change
 $9B4B CALL Z,$9BC8    ; offset pair
 $9B4E CP $22          ;
 $9B50 CALL Z,$9BC8    ; }
 $9B53 CP $19          ; {If explosion counter is 25 or 23 jump to change
 $9B55 CALL Z,$9BD1    ; offset pair
 $9B58 CP $17          ;
 $9B5A CALL Z,$9BD1    ; }
 $9B5D OR A            ; {If counter is zero jump to handle finish game
 $9B5E JP Z,$9C76      ; }
 $9B61 RET             ;
; configure explosion position
*$9B62 LD A,($A056)    ; {If counter equals 16 jump to process next explosion
 $9B65 CP $10          ;
 $9B67 JP C,$9B3A      ; }
 $9B6A CALL $A375      ; Set #REGa a pseudo random number
 $9B6D CP $96          ; {If number is less than $96 then jump to process next
 $9B6F JP C,$9B3A      ; explosion}
; computes x-position of explosion
 $9B72 LD HL,($A057)   ; {Substract offset to x-position of Rex
 $9B75 LD A,($A0B6)    ;
 $9B78 SUB (HL)        ; }
 $9B79 LD E,A          ; Set #REGe the x-position for explosion
 $9B7A CALL $A388      ; Set #REGa a pseudo random number
 $9B7D LD HL,($A057)   ; {Increment address into explosion data offsets
 $9B80 INC HL          ; }
 $9B81 AND (HL)        ; And pattern for random number
 $9B82 SLA A           ; {Multiply by 8 this number and add to the previous
 $9B84 SLA A           ; partial computed position x-position of explosion =
 $9B86 SLA A           ; x-position of Rex - offset #1 + (random & offset #2)*8
 $9B88 ADD A,E         ; }
 $9B89 AND $F8         ; Set new position grid fixed
 $9B8B CP $F0          ; {If x-position of explosion is greater than 230 jump
 $9B8D JP NC,$9B3A     ; forward and handle next explosion}
 $9B90 LD (IY+$01),A   ; Set the new x-position into explosion data buffer
; computes y-position of explosion
 $9B93 LD A,($A0B7)    ; {Substract offset to y-position of Rex
 $9B96 LD HL,($A057)   ;
 $9B99 SUB (HL)        ; }
 $9B9A LD E,A          ; Set #REGe the x-position for explosion
 $9B9B CALL $A388      ; Set #REGa a pseudo random number
 $9B9E LD HL,($A057)   ; {Increment address into explosion data offsets
 $9BA1 INC HL          ; }
 $9BA2 AND (HL)        ; And pattern for random number
 $9BA3 SLA A           ; {Multiply by 8 this number and add to the previous
 $9BA5 SLA A           ; partial computed position y-position of explosion =
 $9BA7 SLA A           ; y-position of Rex - offset #1 + (random & offset #2)*8
 $9BA9 ADD A,E         ; }
 $9BAA AND $F8         ; Set new position grid fixed
 $9BAC LD (IY+$02),A   ; Set the new y-position into explosion data buffer
 $9BAF LD (IY+$00),$01 ; Increment graphic data index of explosion
; configure sound explosion
*$9BB3 CALL $A375      ; {Generate a random number between 1 and 3 for channel
 $9BB6 AND $03         ; sound
 $9BB8 OR A            ;
 $9BB9 JP Z,$9BB3      ; }
 $9BBC LD ($D790),A    ; Set the random channel used for explosion
 $9BBF LD DE,$D790     ; Set #REGde to address for explosion sound
 $9BC2 CALL $D5E7      ; Configure sound channel and mixer register
 $9BC5 JP $9B3A        ; Jump back and process next explosion
; Increment address into data pairs
*$9BC8 LD HL,($A057)   ; {Point #R$A057 to the next pair of data to compute
 $9BCB INC HL          ; position
 $9BCC INC HL          ;
 $9BCD LD ($A057),HL   ; }
 $9BD0 RET             ;
; Decrement address into data pairs
*$9BD1 LD HL,($A057)   ; {Point #R$A057 to the previous pair of data to compute
 $9BD4 DEC HL          ; position
 $9BD5 DEC HL          ;
 $9BD6 LD ($A057),HL   ; }
 $9BD9 RET             ;

; Handle Rex dead - Main routine
;
; Used by the routines at #R$A0C4, #R$D14D, #R$D1B9 and #R$D215.
c$9BDA LD A,($A071)  ; {Return if Rex is inmortal
 $9BDD OR A          ;
 $9BDE RET NZ        ; }
 $9BDF CALL $A133    ; Initialize time bar loop counters
 $9BE2 LD A,$01      ; {Set Rex dead
 $9BE4 LD ($A055),A  ; }
 $9BE7 LD A,$32      ; {Set Rex explosion counter
 $9BE9 LD ($A056),A  ; }
 $9BEC LD HL,$9C05   ; {Set address pointer for Rex explosion data to compute
 $9BEF LD ($A057),HL ; position}
 $9BF2 CALL $9749    ; Destroy all enemy projectiles
 $9BF5 CALL $BA3D    ; Handle weapon energy loss
 $9BF8 LD A,$63      ; {Reset shield power
 $9BFA LD ($A04D),A  ; }
 $9BFD LD A,($A063)  ; {Jump forward to configure teleporting Rex if lives > 0
 $9C00 OR A          ;
 $9C01 CALL NZ,$9D47 ; }
 $9C04 RET           ;

; Rex offsets for compute explosion position
;
; Three pairs of data used to compute position. Byte $00 : offset substracted
; to x/y-position of Rex Byte $01 : patter(&) for random number added to
; x/y-position of Rex
b$9C05 DEFB $10,$03,$20,$07,$40,$0F

; Rex explosion position and index for graphic data
;
; Byte $00: index for graphic data Byte $01: x-position of explosion Byte $02:
; y-position of explosion
b$9C0B DEFB $00,$00,$00,$01,$00,$00,$02,$00,$00
 $9C14 DEFB $03,$00,$00,$04,$00,$00,$05,$00,$00
 $9C1D DEFB $06,$00,$00,$07,$00,$00,$00,$00,$00
 $9C26 DEFB $08,$00,$00,$02,$00,$00,$03,$00,$00
 $9C2F DEFB $04,$00,$00,$05,$00,$00,$06,$00,$00
 $9C38 DEFB $07,$00,$00

; Handle respawn
;
; Used by the routine at #R$9F5F.
c$9C3B INC HL        ; Increment address of tile type buffer
 $9C3C LD A,($A0BB)  ; {Jump forward if Rex is facing right
 $9C3F OR A          ;
 $9C40 JP Z,$9C45    ; }
 $9C43 DEC HL        ; {Rex is facing left, decrement address into til type
 $9C44 DEC HL        ; buffer to check for tile type}
*$9C45 LD A,(HL)     ; {Return if tile type is not respawn
 $9C46 CP $07        ;
 $9C48 RET NZ        ; }
 $9C49 LD DE,$D805   ; Set #REGde to point to respawn sound data
 $9C4C LD A,($D83A)  ; {Configure sound channel and mixer register if sound
 $9C4F CP $FF        ; channel 2 is free
 $9C51 CALL Z,$D5E7  ; }
 $9C54 CALL $A5B7    ; Update graphic data of respawn indicators
 $9C57 LD A,($A0B6)  ; {Return if x-position of Rex bits 2-0 is not 2
 $9C5A AND $07       ;
 $9C5C CP $02        ;
 $9C5E RET NZ        ; }
; save respawn point
 $9C5F LD A,($A0B6)  ; {Save fixed grid x-position of Rex into #R$A059
 $9C62 AND $F8       ;
 $9C64 LD ($A059),A  ; }
 $9C67 LD A,($A0B7)  ; {Save fixed grid y-position of Rex into #R$A05A
 $9C6A AND $F8       ;
 $9C6C LD ($A05A),A  ; }
 $9C6F LD A,($A0B8)  ; {Save room number into #R$A05B
 $9C72 LD ($A05B),A  ; }
 $9C75 RET           ;

; Handle Rex dead - Resume or finish game
;
; Used by the routines at #R$9AC5 and #R$9E52.
c$9C76 LD A,($A063)  ; {Decrement Rex lives
 $9C79 DEC A         ;
 $9C7A LD ($A063),A  ; }
 $9C7D CP $FF        ; {Jump forward if Rex has no more lives
 $9C7F JP Z,$9CBF    ; }
 $9C82 CALL $99BB    ; Draw lives in HUD
 $9C85 LD A,($A059)  ; {Set the x-position of respawn
 $9C88 LD ($A0B6),A  ; }
 $9C8B LD A,($A05A)  ; {Set the y-poistion of respawn
 $9C8E LD ($A0B7),A  ; }
 $9C91 XOR A         ;
 $9C92 LD ($A0B3),A  ; Not used
 $9C95 LD ($A049),A  ; Set shield inactive
 $9C98 LD ($A0BB),A  ; Set face direction to right
 $9C9B LD ($A0BD),A  ; Set Rex not jumping
 $9C9E LD ($A091),A  ; Reset falling y-speed
 $9CA1 LD ($A0BC),A  ; Set Rex not falling
 $9CA4 LD ($A055),A  ; Set Rex alive
 $9CA7 CALL $9D1F    ; Configure data for Rex teleporting when game resume
 $9CAA LD A,($A05B)  ; {If current room equals to respawn room jump to draw
 $9CAD LD HL,$A0B8   ; shield power
 $9CB0 CP (HL)       ;
 $9CB1 JP Z,$9CBB    ; }
 $9CB4 LD ($A0B8),A  ; Set the new current room
 $9CB7 POP BC        ; Restore #REGbc
 $9CB8 JP $9583      ; Jump to the main loop for the game
*$9CBB CALL $99FA    ; Draw shield power on HUD
 $9CBE RET           ;
; no more lives
*$9CBF LD DE,($A03E) ; {Set #R$A08B the final score. Final score will be the
 $9CC3 LD HL,($A08B) ; value initialised on #R$A08B if this value is greater
 $9CC6 AND A         ; than the actual score on #R$A03E
 $9CC7 SBC HL,DE     ;
 $9CC9 JP NC,$9CD0   ;
 $9CCC LD ($A08B),DE ; }
*$9CD0 LD IX,$AAED   ; {Show GAME OVER windows
 $9CD4 LD B,$01      ;
 $9CD6 CALL $A13E    ; }
 $9CD9 LD IX,$AAFA   ; {Show HI SCORE windows
 $9CDD LD B,$01      ;
 $9CDF CALL $A13E    ; }
 $9CE2 LD IX,$AB0E   ; {Show HUMANS KILLED windows
 $9CE6 LD B,$01      ;
 $9CE8 CALL $A13E    ; }
 $9CEB LD HL,($A089) ; {Convert humans killed valur into a list of charcodes
 $9CEE CALL $A402    ; }
 $9CF1 LD E,$1B      ; {Draw the number of humans killed
 $9CF3 LD L,$80      ;
 $9CF5 LD B,$05      ;
 $9CF7 CALL $A3C8    ; }
 $9CFA LD HL,($A08B) ; {Convert the score into a list of charcodes
 $9CFD CALL $A402    ; }
 $9D00 LD E,$14      ; {Draw the score into the windows
 $9D02 LD L,$60      ;
 $9D04 LD B,$05      ;
 $9D06 CALL $A3C8    ; }
 $9D09 CALL $97EA    ; Reset sound data and wait for FIRE key press
 $9D0C JP $9498      ; Jump to init game

; Rex visibility active
;
; Used by the routine at #R$9ED7.
c$9D0F LD A,($A05D)  ; {Return if Rex visible
 $9D12 OR A          ;
 $9D13 RET NZ        ; }
 $9D14 LD A,$01      ; {Set Rex visible
 $9D16 LD ($A05D),A  ; }
 $9D19 LD A,$12      ; {Set teleporting hide lines counter to 18 (height of
 $9D1B LD ($A05E),A  ; Rex)}
 $9D1E RET           ;

; Configure data for Rex teleporting when game begins or resume
;
; Used by the routines at #R$947A and #R$9C76.
c$9D1F LD A,$01      ;
 $9D21 LD ($A05F),A  ; Set Rex atoms flushing active
 $9D24 LD ($A060),A  ; Set Rex teleporting active
 $9D27 XOR A         ;
 $9D28 LD ($A062),A  ; Set Rex teleporting on init game
 $9D2B LD ($A05D),A  ; Set Rex invisible
 $9D2E LD A,$64      ; {Set teleporting counter loop to 100
 $9D30 LD ($A061),A  ; }
; Reset buffer data for teleporting and configure sound
*$9D33 LD HL,$9F14   ; {Reset teleporting buffer data
 $9D36 LD DE,$9F15   ;
 $9D39 LD BC,$003B   ;
 $9D3C LD (HL),$00   ;
 $9D3E LDIR          ; }
 $9D40 LD DE,$D7AE   ; Set #REGde to teleporting sound
 $9D43 CALL $D5E7    ; Configure sound channel and mixer register
 $9D46 RET           ;

; Configure data for Rex teleporting when dead
;
; Used by the routine at #R$9BDA.
c$9D47 LD DE,$D7BA   ; Set #REGde sound data for Rex dead
 $9D4A CALL $D5E7    ; Configure sound channel and mixer register
 $9D4D XOR A         ; {Deactivate shield
 $9D4E LD ($A049),A  ; }
 $9D51 LD A,$01      ;
 $9D53 LD ($A05F),A  ; Set Rex atoms flushing active
 $9D56 LD ($A060),A  ; Set teleporting active
 $9D59 LD ($A062),A  ; Set teleporting after Rex dead
 $9D5C LD A,($A05D)  ; {Set Rex visible
 $9D5F LD L,A        ;
 $9D60 LD ($A05D),A  ; }
 $9D63 LD ($A05E),A  ; Set Rex visibility counter to 1
 $9D66 LD A,$64      ; {Set teleporting counter loop to 100
 $9D68 LD ($A061),A  ; }
 $9D6B LD A,L        ; {Return if Rex visible
 $9D6C OR A          ;
 $9D6D RET NZ        ; }
 $9D6E JP $9D33      ; Jump to reset teleporting buffer data and sound play

; Handle Rex visibility during teleporting
;
; Used by the routine at #R$947A.
c$9D71 LD A,($A060)  ; {Return if Rex is not teleporting
 $9D74 OR A          ;
 $9D75 RET Z         ; }
 $9D76 LD A,($A05D)  ; {Return if Rex not visible
 $9D79 OR A          ;
 $9D7A RET Z         ; }
 $9D7B LD A,($A0B7)  ; {Computes into #REGhl the address pointer into room
 $9D7E LD L,A        ; graphic data for Rex position
 $9D7F LD H,$00      ;
 $9D81 ADD HL,HL     ;
 $9D82 ADD HL,HL     ;
 $9D83 ADD HL,HL     ;
 $9D84 ADD HL,HL     ;
 $9D85 ADD HL,HL     ;
 $9D86 LD A,($A0B6)  ;
 $9D89 SRL A         ;
 $9D8B SRL A         ;
 $9D8D SRL A         ;
 $9D8F LD E,A        ;
 $9D90 LD D,$00      ;
 $9D92 ADD HL,DE     ;
 $9D93 LD DE,$E89F   ;
 $9D96 ADD HL,DE     ; }
 $9D97 LD C,$00      ; Set #REGc the graphic data to draw
 $9D99 LD A,($A05E)  ; {Set #REGb to the number of lines to hide from Rex
 $9D9C LD B,A        ; sprite}
 $9D9D CALL $9DF6    ; Hide a portion of Rex to simulate teleporting
 $9DA0 LD DE,$001D   ; {Garble randomly the last three lines of the Rex sprite
 $9DA3 LD B,$03      ; not hidden
*$9DA5 PUSH BC       ;
 $9DA6 LD B,$03      ;
*$9DA8 PUSH BC       ;
 $9DA9 CALL $A375    ;
 $9DAC AND (HL)      ;
 $9DAD LD (HL),A     ;
 $9DAE INC HL        ;
 $9DAF POP BC        ;
 $9DB0 DJNZ $9DA8    ;
 $9DB2 ADD HL,DE     ;
 $9DB3 POP BC        ;
 $9DB4 DJNZ $9DA5    ; }
 $9DB6 LD A,($A062)  ; {Jump forward if teleporting Rex dead
 $9DB9 OR A          ;
 $9DBA JP NZ,$9DCE   ; }
 $9DBD LD A,($A05E)  ; {Decrement number of lines to hide
 $9DC0 DEC A         ;
 $9DC1 LD ($A05E),A  ; }
 $9DC4 OR A          ; {Return if number of lines is not zero
 $9DC5 RET NZ        ; }
 $9DC6 JP $9DDF      ; Jump to finish teleporting
; Code not reached!
 $9DC9 LD A,$64      ;
 $9DCB LD ($A061),A  ;
; Handle teleporting Rex after dead. This entry point is used by the routine at
; #R$9D71.
*$9DCE LD A,($A05E)  ; {Increment the number of lines to hide
 $9DD1 INC A         ;
 $9DD2 LD ($A05E),A  ; }
 $9DD5 CP $12        ; {Return if number of lines is not 18
 $9DD7 RET NZ        ; }
 $9DD8 XOR A         ; {Set Rex invisible
 $9DD9 LD ($A05D),A  ; }
 $9DDC JP $9DE8      ; Jump to reset teleporting counter
; Rex has teleported completely
*$9DDF XOR A         ; {Stop teleporting
 $9DE0 LD ($A060),A  ; }
 $9DE3 LD A,$01      ; {Set Rex visible
 $9DE5 LD ($A05D),A  ; }
; Reset teleporting loop counter
*$9DE8 LD A,$1E      ; {Reset the teleporting loop counter
 $9DEA LD ($A061),A  ; }
 $9DED RET           ;
; Code not reached!
 $9DEE LD A,($A05F)  ;
 $9DF1 OR A          ;
 $9DF2 CALL NZ,$9E02 ;
 $9DF5 RET           ;
; Hide #REGb lines of Rex (used in teleporting animation) beginning from top of
; sprite
*$9DF6 LD DE,$001E   ; Set #REGde to the increment for point to the next line
                     ; of pixels
*$9DF9 LD (HL),C     ; {Copy the graphic data from #REGc into room graphic data
 $9DFA INC HL        ;
 $9DFB LD (HL),C     ;
 $9DFC INC HL        ;
 $9DFD LD (HL),C     ; }
 $9DFE ADD HL,DE     ; Increment #REGhl to the next line
 $9DFF DJNZ $9DF9    ; Jump back until all the lines of Rex are hidden
 $9E01 RET           ;

; Handle Rex atoms flush during teleporting
;
; Used by the routine at #R$947A.
c$9E02 LD A,($A05F)    ; {Return if atoms are not flushing on teleporting
 $9E05 OR A            ;
 $9E06 RET Z           ; }
 $9E07 LD IY,$9F14     ; Set #REGiy to the address for the Rex atoms data
                       ; buffer during teleporting
 $9E0B LD B,$14        ; Set #REGbc to the number of 'Rex atoms' (20)
; This entry point is used by the routine at #R$9E52.
*$9E0D PUSH BC         ; Save #REGbc
 $9E0E LD A,(IY+$00)   ; {If atom is not configured jump to iniciatise atom
 $9E11 OR A            ; data
 $9E12 JP Z,$9E8A      ; }
 $9E15 LD A,($A0B6)    ; {Set #R$A093 the x-position of the atom, based on
 $9E18 ADD A,(IY+$01)  ; x-offset of atom and x-position of Rex
 $9E1B LD ($A093),A    ; }
 $9E1E AND $07         ; {Set #REGa the graphic data for atom based on bit2-0
 $9E20 LD E,A          ; x-position of atom
 $9E21 LD D,$00        ;
 $9E23 LD HL,$9F0C     ;
 $9E26 ADD HL,DE       ;
 $9E27 LD A,(HL)       ; }
 $9E28 PUSH AF         ; Save #REGaf
 $9E29 LD A,(IY+$02)   ; {Computes into #REGhl the address into room graphic
 $9E2C LD L,A          ; data of the atom
 $9E2D LD H,$00        ;
 $9E2F ADD HL,HL       ;
 $9E30 ADD HL,HL       ;
 $9E31 ADD HL,HL       ;
 $9E32 ADD HL,HL       ;
 $9E33 ADD HL,HL       ;
 $9E34 LD A,($A093)    ;
 $9E37 SRL A           ;
 $9E39 SRL A           ;
 $9E3B SRL A           ;
 $9E3D LD E,A          ;
 $9E3E LD D,$00        ;
 $9E40 ADD HL,DE       ;
 $9E41 LD DE,$EAFF     ;
 $9E44 ADD HL,DE       ; }
 $9E45 POP AF          ; Restore #REGaf
 $9E46 OR (HL)         ; {Put the graphic data atom in this location
 $9E47 LD (HL),A       ; }
 $9E48 LD A,($A062)    ; {if teleporting Rex at game begin jump to update atom
 $9E4B OR A            ; position
 $9E4C JP Z,$9ED7      ; }
 $9E4F JP $9EF4        ; Jump to update atom position
; Process another atom
*$9E52 LD DE,$0003     ; {Point #REGiy to the next atom into Rex atom data
 $9E55 ADD IY,DE       ; table}
 $9E57 POP BC          ; Restore #REGbc
 $9E58 DJNZ $9E0D      ; Jump back until all atoms has been processed
; All atoms processed
 $9E5A LD A,($A062)    ; {Jump forward if Rex is teleporing on init game
 $9E5D OR A            ;
 $9E5E JP Z,$9E6D      ; }
 $9E61 LD A,($A0B7)    ; {Decrement y-position of Rex if y-position less than
 $9E64 DEC A           ; 24
 $9E65 CP $18          ;
 $9E67 JP C,$9E6D      ;
 $9E6A LD ($A0B7),A    ; }
*$9E6D LD A,($A061)    ; {Decrement teleporting loop counter
 $9E70 DEC A           ;
 $9E71 LD ($A061),A    ; }
 $9E74 OR A            ; {Return if loop counter is not zero
 $9E75 RET NZ          ; }
; Loop counter for teleporting finished
 $9E76 LD A,$01        ; {Set Rex visible
 $9E78 LD ($A05D),A    ; }
 $9E7B XOR A           ; {Finish teleporting
 $9E7C LD ($A05F),A    ;
 $9E7F LD ($A060),A    ; }
 $9E82 LD A,($A055)    ; {Jump to resume game after Rex is dead
 $9E85 OR A            ;
 $9E86 JP NZ,$9C76     ; }
 $9E89 RET             ;
; Initialise data for Rex atoms during teleporting
*$9E8A LD A,($A062)    ; {Jump forward if teleporting Rex after dead
 $9E8D OR A            ;
 $9E8E JP NZ,$9EB2     ; }
; Rex is teleporting on game begin
 $9E91 LD A,($A061)    ; {If teleporting loop counter < 50 jump to process next
 $9E94 CP $32          ; atom
 $9E96 JP C,$9E52      ; }
 $9E99 CALL $A388      ; {Set #REGa a random number between 4 and 19
 $9E9C AND $0F         ;
 $9E9E ADD A,$04       ; }
 $9EA0 LD (IY+$00),A   ; Set this number as y-delta into data buffer for atom
                       ; y-position variation
 $9EA3 CALL $A388      ; {Set #REGa a random number between 0 and 15
 $9EA6 AND $0F         ; }
 $9EA8 LD (IY+$01),A   ; Set this number as x-offset into the teleporting data
                       ; buffer
 $9EAB LD (IY+$02),$00 ; Set 0 as y-position of Rex atoms into the teleporting
                       ; data buffer
 $9EAF JP $9E52        ; Jump to process next atom
; Rex is teleporting after dead
*$9EB2 LD A,($A061)    ; {If teleporting loop counter < 50 jump to process next
 $9EB5 CP $32          ; atom
 $9EB7 JP C,$9E52      ; }
 $9EBA CALL $A388      ; {Set #REGa a random number between 4 and 19
 $9EBD AND $0F         ;
 $9EBF ADD A,$04       ; }
 $9EC1 LD (IY+$00),A   ; Set this number as y-delta into data buffer for atom
                       ; y-position variation
 $9EC4 CALL $A388      ; {Set #REGa a random number between 0 and 15
 $9EC7 AND $0F         ; }
 $9EC9 LD (IY+$01),A   ; Set this number as x-offset into the teleporting data
                       ; buffer
 $9ECC LD A,($A0B7)    ; {Set the y-position of Rex minus 4 the y-position for
 $9ECF SUB $04         ; Rex atoms during teleporting
 $9ED1 LD (IY+$02),A   ; }
 $9ED4 JP $9E52        ; Jump to process next atom
; Update data for the atom when teleporting Rex at game begin
*$9ED7 LD A,(IY+$02)   ; Set #REGa the y-position of atom
 $9EDA ADD A,(IY+$00)  ; Add to #REGa the y-offset of atom
 $9EDD LD HL,$A0B7     ; {Compare atom y-position with Rex y-position
 $9EE0 CP (HL)         ; }
 $9EE1 JP C,$9EEE      ; Jump forward if Rex y-position is greater than
                       ; y-position of atom
 $9EE4 LD (IY+$00),$00 ; Reset y-offset
 $9EE8 CALL $9D0F      ; Set Rex visible
 $9EEB JP $9E52        ; Jump to process next atom
*$9EEE LD (IY+$02),A   ; Set the new y-position for the atom
 $9EF1 JP $9E52        ; Jump to process next atom
; Update data for the atom when teleporting Rex afer dead
*$9EF4 LD A,(IY+$02)   ; Set #REGa the y-position of atom
 $9EF7 SUB (IY+$00)    ; substract to #REGa the y-offset of atom
 $9EFA CP $DF          ; {Jump forward if atom y-position greater than 32
 $9EFC JP C,$9F06      ; }
 $9EFF LD (IY+$00),$00 ; Reset y-offset
 $9F03 JP $9E52        ; Jump to process next atom
*$9F06 LD (IY+$02),A   ; Set the new y-position for the atom
 $9F09 JP $9E52        ; Jump to process next atom

; Graphic data for atoms based on bits2-0 x-position of atom
b$9F0C DEFB $80,$40,$20,$10,$08,$04,$02,$01

; Rex atoms data during teleporting
;
; Three bytes for every atom. $00 y-delta $01 x-offset $02 y-position
g$9F14 DEFS $4B

; Handle Rex over special tiles
;
; Used by the routine at #R$947A.
c$9F5F XOR A         ; {Reset Rex on elevtor
 $9F60 LD ($A07A),A  ; }
 $9F63 LD HL,($A019) ; {Set #REGhl to point into tile type buffer data under
 $9F66 LD DE,$0060   ; Rex feet
 $9F69 ADD HL,DE     ; }
 $9F6A LD A,(HL)     ; Check tile type
 $9F6B CP $12        ; {Jump forward to handle elevator
 $9F6D JP Z,$9F97    ; }
 $9F70 LD HL,($A019) ; {Set #REGhl to point into tile type buffer data in
 $9F73 LD DE,$0061   ; front-under Rex feet
 $9F76 ADD HL,DE     ; }
 $9F77 LD A,(HL)     ; Check tile type
 $9F78 CP $07        ; {Jump to handle respawn
 $9F7A JP Z,$9C3B    ; }
 $9F7D CP $08        ; {Jump to handle shield recharging
 $9F7F JP Z,$9FEE    ; }
 $9F82 CP $0D        ; {Jump to handle Double fire weapon bonus
 $9F84 JP Z,$9FB2    ; }
 $9F87 CP $0A        ; {Jump to handle laser weapon bonus
 $9F89 JP Z,$9FC1    ; }
 $9F8C CP $0B        ; {Jump to handle multiple weapon bonus
 $9F8E JP Z,$9FD0    ; }
 $9F91 CP $0C        ; {Jump to handle spray weapon bonus
 $9F93 JP Z,$9FDF    ; }
 $9F96 RET           ;
; handle Rex on elevator
*$9F97 XOR A         ; {Reset speed Rex
 $9F98 LD ($A091),A  ; }
 $9F9B LD A,$01      ; {Set Rex on elevator
 $9F9D LD ($A07A),A  ; }
 $9FA0 LD A,($A0B7)  ; {Return if Rex is not grid fixed
 $9FA3 AND $07       ;
 $9FA5 OR A          ;
 $9FA6 RET NZ        ; }
 $9FA7 XOR A         ; {Set falling speed to zero
 $9FA8 LD ($A0BC),A  ; }
 $9FAB CALL $D11A    ; Configure Rex for falling - Does nothing
 $9FAE CALL $D0C2    ; Configure Rex for jump
 $9FB1 RET           ;
; handle double fire weapon bonus
*$9FB2 INC HL        ; {Return if next tile is not the same type
 $9FB3 LD A,(HL)     ;
 $9FB4 CP $0D        ;
 $9FB6 RET NZ        ; }
 $9FB7 CALL $A78B    ; Update weapon in inventory (HUD)
 $9FBA LD HL,$ABA0   ; Set #REGhl the base address for text definition of
                     ; DOUBLE FIRE weapon
 $9FBD CALL $D871    ; Show weapon bonus windows
 $9FC0 RET           ;
; handle laser weapon bonus
*$9FC1 INC HL        ; {Return if next tile is not the same type
 $9FC2 LD A,(HL)     ;
 $9FC3 CP $0A        ;
 $9FC5 RET NZ        ; }
 $9FC6 CALL $A791    ; Update weapon in inventory (HUD)
 $9FC9 LD HL,$ABB1   ; Set #REGhl the base address for text definition of LASER
                     ; weapon
 $9FCC CALL $D871    ; Show weapon bonus windows
 $9FCF RET           ;
; handle multiple weapon bonus
*$9FD0 INC HL        ; {Return if next tile is not the same type
 $9FD1 LD A,(HL)     ;
 $9FD2 CP $0B        ;
 $9FD4 RET NZ        ; }
 $9FD5 CALL $A797    ; Update weapon in inventory (HUD)
 $9FD8 LD HL,$ABBC   ; Set #REGhl the base address for text definition of
                     ; MULTIPLE weapon
 $9FDB CALL $D871    ; Show weapon bonus windows
 $9FDE RET           ;
; handle spray weapon bonus
*$9FDF INC HL        ; {Return if next tile is not the same type
 $9FE0 LD A,(HL)     ;
 $9FE1 CP $0C        ;
 $9FE3 RET NZ        ; }
 $9FE4 CALL $A79D    ; Update weapon in inventory (HUD)
 $9FE7 LD HL,$ABCA   ; Set #REGhl the base address for text definition of SPRAY
                     ; weapon
 $9FEA CALL $D871    ; Show weapon bonus windows
 $9FED RET           ;
; handle shield recharging
*$9FEE INC HL        ; {Return if next tile is not the same type
 $9FEF LD A,(HL)     ;
 $9FF0 CP $08        ;
 $9FF2 RET NZ        ; }
 $9FF3 LD A,($A049)  ; {Return if shield active
 $9FF6 OR A          ;
 $9FF7 RET NZ        ; }
 $9FF8 LD A,($A04D)  ; {Increment shield power
 $9FFB INC A         ; }
 $9FFC CP $64        ; {Return if shield power = 100
 $9FFE RET Z         ; }
 $9FFF LD ($A04D),A  ; Set the new shield power
 $A002 CALL $99FA    ; Draw shield power
 $A005 LD A,($D83A)  ; {Return if channel 2 in use
 $A008 CP $FF        ;
 $A00A RET NZ        ; }
 $A00B LD DE,$D826   ; Set #REGde to the shield recharging sound
 $A00E CALL $D5E7    ; Configure sound channel and mixer register
 $A011 RET           ;

; FIRE key hold down
;
; Variable used to prevent multiple shots while FIRE key is hold down. FIRE key
; hold down is only available when rapid shots bonus is active
g$A012 DEFS $01

; Rex weapon in use
;
; 0-Basic Laser, 1-Double fire, 2-Laser, 3-Multiple, 4-Spray. Used to compute
; BOSS health
g$A013 DEFS $01

; Weapon energy level. Value on init $01
g$A014 DEFS $01

; Attribute file pointer to current weapon icon in HUD
g$A015 DEFS $02

; Tilt arrow tiles
;
; $00 or $01 select distints graphic data
g$A017 DEFS $01

; Weapon energy quantity - Value $00 on init
;
; Values from 0 to 120
g$A018 DEFS $01

; Address pointer into tile type buffer based on Rex position
g$A019 DEFS $02

; Address pointer into tile buffer of the tile under the entity
g$A01B DEFS $02

; Counter for tile drawn on room graphic buffer
g$A01D DEFS $01

; Pointer to the tile type buffer for the currently draw tile
g$A01E DEFS $02

; Addres pointer to static enemy definition for the current room
g$A020 DEFS $02

; BOSS health
g$A022 DEFS $01

; Nou used
g$A023 DEFS $05

; Horizontal position for windows
g$A028 DEFS $01

; Vertical position for windows
g$A029 DEFS $01

; Length of the longest line for the windows
g$A02A DEFS $01

; Number of lines for the windows
g$A02B DEFS $01

; Enemy enters the room from left
;
; $00 No / $FF Yes
g$A02C DEFS $01

; Enemy enters the room from right
;
; $00 No / $FF Yes
g$A02D DEFS $01

; Enemy enters the room from top
;
; $00 No / $FF Yes
g$A02E DEFS $01

; Max number of enemies to be destroyed when Destroy all enemies indicator
; active
g$A02F DEFS $01

; Destroy all enemies indicator
;
; $00 Not destroy all - $01 Destroy all. Value $00 on init
g$A030 DEFS $01

; Address pointer into the enemy configuration buffer for the enemy to be
; destroyed when Destroy all enemies indicator is active
g$A031 DEFS $02

; Entity type
;
; Used in routine #R$B258
g$A033 DEFS $01

; Address for the graphic data of entity
;
; Used in routine #R$B258
g$A034 DEFS $02

; Not used
s$A036 DEFS $02

; Initialised but never used
g$A038 DEFS $01

; Address pointer into attribute file/buffers for score points
g$A039 DEFS $02

; Loop counter for score points
;
; From 9 to 0
g$A03B DEFS $01

; Score points value
g$A03C DEFS $02

; Score - Value $0000 on init
;
; Real score = score * 100
g$A03E DEFS $02

; Rapid shots active - Value $00 on init
;
; $00 inactive - $01 active
g$A040 DEFS $01

; Number of rapid shots
g$A041 DEFS $01

; HUD flash index - Value $FF on init
;
; $FF inactive. Otherwise the value is the index into the table for flash
; commands at #R$9AB3
g$A042 DEFS $01

; Counter for enemy enter the room (updated)
g$A043 DEFS $01

; Counter for enemy enter the room (original)
g$A044 DEFS $01

; Train is generating on current room. Used at routine #R$A89D
;
; $00 train not generating $01 Generating train
g$A045 DEFS $01

; Address into train definition buffer. Used at routine #R$A89D
g$A046 DEFS $02

; Counter for train appearance. Used at routine #R$A89D
g$A048 DEFS $01

; Shield power active - Value $00 on init
;
; $00 not active $01 active
g$A049 DEFS $01

; Not used
s$A04A DEFS $02

; Shield power key hold down
;
; Variable used to prevent activate and inactivate of shield if DOWN key is
; hold down
g$A04C DEFS $01

; Shield power - Value $63 on init
g$A04D DEFS $01

; Shield loss counter - Value $02 on init
;
; Shield decrement when counter reaches zero
g$A04E DEFS $01

; Machine gun weapon on inventory indicator
;
; $00: Not available / $01: Available. Available on init
g$A04F DEFS $01

; Double Fire weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A050 DEFS $01

; Laser weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A051 DEFS $01

; Multiple weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A052 DEFS $01

; Spray weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A053 DEFS $01

; Projectile type of enemy
g$A054 DEFS $01

; Rex status - Value $00 on init
;
; $00 Rex alive $01 Rex dead
g$A055 DEFS $01

; Rex explosion counter
g$A056 DEFS $01

; Address pointer into Rex explosion data buffer to compute explosion position
g$A057 DEFS $02

; x-position of last respawn saved - Value $A0 on init
g$A059 DEFS $01

; y-position of last respawn saved - Value $60 on init
g$A05A DEFS $01

; room number of last respawn saved - Value $00 on init
g$A05B DEFS $01

; Room configured - Value $00 on init
;
; $00 room not configured $01 room configured
g$A05C DEFS $01

; Rex visibility
;
; $00 invisible $01 visible
g$A05D DEFS $01

; Number of lines of Rex to hide (used in teleporting animation)
g$A05E DEFS $01

; Atoms flush during teleporting
;
; $00 not atom flushing $01 atoms flushing
g$A05F DEFS $01

; Rex teleporting
;
; $00 not teleporting $01 teleporting
g$A060 DEFS $01

; Teleporting counter
g$A061 DEFS $01

; Teleporting (begin game or dead)
;
; $00 teleporting on game begin $01 teleporting after dead
g$A062 DEFS $01

; Number of lives
;
; $04 on init
g$A063 DEFS $01

; Time bar update slot index - Value $00 on init
g$A064 DEFS $01

; Loop counter used for title screen main loop and time bar in HUD
;
; Initialised with value $32 for title screen main loop Initialised with value
; $05 for time bar: number of zig-zag to remove a timer slot
g$A065 DEFS $01

; Time bar update direction - Value $00 on init
;
; $00 right $01 left
g$A066 DEFS $01

; Number of time slots availables
;
; Timer bar: 12 slots of time
g$A067 DEFS $01

; Laser duration - Value $00 on init
;
; Used as well for index into laser template graphic table at #R$B943
g$A068 DEFS $01

; Respawn indicator index value - Value $00 on init
g$A069 DEFS $01

; Shield recharger index value - Value $00 on init
g$A06A DEFS $01

; Respawn fire index value - Value $00 on init
g$A06B DEFS $01

; Number of smartbombs in the inventory
;
; 3 smartbombs on init
g$A06C DEFS $01

; Not used
s$A06D DEFS $01

; Number of weapon that has energy
;
; Every time that energy quantity in #R$A018
g$A06E DEFS $01

; Bonus windows number
;
; (0-speed up 1-shield loss 2-1000 bonus 3-energy loss 4-100 rapid shots)
g$A06F DEFS $01

; Not used
s$A070 DEFS $01

; Rex inmortal - Value $00 on init
;
; $00 inmortal $01 mortal
g$A071 DEFS $01

; Rex speed - Value $00 on init
;
; $00 normal speed - $01 fast speed
g$A072 DEFS $01

; Rex speed up duration - Value $00 on init
g$A073 DEFS $01

; Not used
s$A074 DEFS $02

; Lives Score - Value $0000 on init
;
; Every 100 points increment a lives. Reset on every live awarded
g$A076 DEFS $02

; Not used
s$A078 DEFS $02

; Rex on elevator
g$A07A DEFS $01

; Actor firing indicator
;
; $01 enemy fired weapon  / $00 Rex fired weapon
g$A07B DEFS $01

; Water effect index value - Value $00 on init
g$A07C DEFS $01

; Bonus Windows Loop Counter
g$A07D DEFS $02

; Animation frame number of the enemy showed in the tile screen
;
; Value $00 on init
g$A07F DEFS $01

; Not used
s$A080 DEFS $01

; Point address for animation definition of every enemy displayed in the tile
; screen
;
; Used in routines #R$E00B an #R$E04F
g$A081 DEFS $02

; Point address for the base animation definition of the enemies displayed in
; the tile screen
;
; Initialised with value of $E05B on init, although the base address of the
; table is $E067. Every animation definition spans $0C bytes and in the first
; the value $0C is added to the initial address. Used in routine #R$947A
g$A083 DEFS $02

; Enemy windows on tile screen visible or hidden
;
; Hidden on init. $00 Hidden / $01 Visible
g$A085 DEFS $01

; Address pointer for the next windows data to show on tile screen
;
; Value #R$DC26 on init so initially this points to the FOOT MAN windows.
g$A086 DEFS $02

; Type of mobile enemy for the current room
g$A088 DEFS $01

; Humans killed - Value $0000 on init
g$A089 DEFS $02

; Not used
s$A08A DEFS $01

; Minimum score for the game - Value $000A on init
g$A08B DEFS $02

; Room connection - right room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B133
g$A08D DEFS $01

; Room connection - top room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B133
g$A08E DEFS $01

; Room connection - bottom room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B133
g$A08F DEFS $01

; Room connection - left room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B133
g$A090 DEFS $01

; Speed of Rex - Value $00 on init
g$A091 DEFS $01

; Max number of enemies in the current room
;
; Value copied from the corresponding Enemy room configuration at #R$AECD
g$A092 DEFS $01

; Used in multiple routines as temporal variable
;
; Used as: length of the current processing line for windows setup, color
; attribute for windows border, color attribute for text content of the
; windows, ... Used in routine #R$A13E. As x-position of the tile at routine
; #R$C745. As stack pointer at routine #R$B205 and #R$A28A. As destructible
; tile type and laser x-position at routine #R$B645. As position into offset
; table for debris expansion at routine #R$BF66
g$A093 DEFS $02

; Used in multiple routines as temporal variable
;
; Used as: max length of the lines processed for windows setup, number of
; columns of the windows, horizontal position of the windows, ... Used in
; routine #R$A13E. As tile number in #R$C745. As stack pointer at routine
; R$B33E. As address into mapping table of tile graphics/room graphics and
; laser y-position at routine #R$B645
g$A095 DEFS $02

; Used in multiple routines as temporal variable
;
; Vertical position of the windows Used in routine #R$A13E. As tile color
; attribute and laser direction at #R$B645
g$A097 DEFS $02

; Used in multiple routines as temporal variable
;
; Used as increment for laser y-position at routine #R$B645
g$A099 DEFS $01

; Not used
s$A09A DEFS $05

; Color attribute for windows body
g$A09F DEFS $01

; Not used
s$A0A0 DEFS $01

; Seed for pseudo-random number generator.
;
; Value $0313 on init. Used at routines #R$A375 and #R$A388.
g$A0A1 DEFS $02

; Seed status variable
;
; Value $11 on init
g$A0A3 DEFS $01

; Charcode buffer for number conversion
g$A0A4 DEFS $02      ; Number to convert
 $A0A6 DEFS $01      ; Charcode for units
 $A0A7 DEFS $01      ; Charcode for tens
 $A0A8 DEFS $01      ; Charcode for hundreds
 $A0A9 DEFS $01      ; Charcode for thousands
 $A0AA DEFS $01      ; Charcode for ten thousands

; Port used to read the key pressed
g$A0AB DEFS $02

; Opcode of the corresponent BIT operation to check key presses
;
; Is used to configure the routines at #R$A46A to check for key presses of the
; defined keys
g$A0AD DEFB $00

; Input device type
;
; $FF Kempston | $00 Cursor, Sinclair or Defined keys. $00 on init. Not used in
; game
g$A0AE DEFS $01

; X-position of entity
;
; As x-pixel-position of entity in routine #R$B258. As x-byte-position of
; debris in routine #R$BF66
g$A0AF DEFS $01

; Y-position of entity
;
; As y-pixel-position of entity in routine #R$B258. As y-pixel-position of
; debris in routine #R$BF66
g$A0B0 DEFS $01

; Width of entity sprite (in bytes)
;
; Used in routine #R$B258
g$A0B1 DEFS $01

; Height of entity sprite (in pixels)
g$A0B2 DEFS $01

; Initialised in game, but not used
g$A0B3 DEFS $01

; Not used
s$A0B4 DEFS $02

; Rex x-position (in pixels) - Value $A0 on init
g$A0B6 DEFS $01

; Rex y-position (in pixels) - Value $60 on init
g$A0B7 DEFS $01

; Current room number
;
; Value $00 on init
g$A0B8 DEFS $01

; Pointer to the address mapping table of tile graphics data and room graphics
; buffer
g$A0B9 DEFS $02

; Rex facing direction ($00 right / $01 left) - Value $00 on init
g$A0BB DEFS $01

; Rex falling speed - Value $00 on init
;
; $00 not falling / otherwise falling speed ($02 or $04)
g$A0BC DEFS $01

; Rex is jumping - Value $00 on init
g$A0BD DEFS $01

; Not used
s$A0BE DEFS $02

; Address pointer into table for Rex jumping y-offsets
g$A0C0 DEFS $02

; List number of the room displayed on attract-mode
;
; The list of rooms are stored into table at #R$A90C. Value $00 on init
g$A0C2 DEFS $01

; Loop counter for run the displayed room on attract-mode
;
; Value $C8 on init. Equals to 200 loops to run.
g$A0C3 DEFB $00

; Update timer bar in HUD
;
; Used by the routines at #R$947A and #R$A915.
c$A0C4 LD A,($A042)  ; {Return if HDU flash active
 $A0C7 CP $FF        ;
 $A0C9 RET NZ        ; }
 $A0CA LD A,($A064)  ; {Set #REGde the timer bar update slot
 $A0CD LD E,A        ;
 $A0CE LD D,$00      ; }
 $A0D0 LD HL,$582B   ; {Set #REGhl to the address into attribute file for the
 $A0D3 ADD HL,DE     ; time bar position}
 $A0D4 LD (HL),$46   ; Set color attribute to bright yellow
 $A0D6 INC HL        ; Increase to the next time bar slot
 $A0D7 LD A,(HL)     ; {Jump forward if slot is green
 $A0D8 CP $04        ;
 $A0DA JP Z,$A0DF    ; }
 $A0DD LD (HL),$06   ; Set color attribute to normal yellow
*$A0DF LD A,($A066)  ; Check for time bar update direction
 $A0E2 OR A          ; {Jump forward to increase slot if direction is right
 $A0E3 JP Z,$A0E9    ; }
 $A0E6 JP $A0FB      ; Jump forward to decrease slot if direction is left
*$A0E9 LD A,($A064)  ; {Increase time bar update slot
 $A0EC INC A         ;
 $A0ED LD ($A064),A  ; }
 $A0F0 LD HL,$A067   ; {Return if current update slot is less than the number
 $A0F3 CP (HL)       ; of slots availables
 $A0F4 RET NZ        ; }
 $A0F5 LD A,$01      ; {Change update direction to left
 $A0F7 LD ($A066),A  ; }
 $A0FA RET           ;
*$A0FB LD A,($A064)  ; {Decrease timer bar update slot
 $A0FE DEC A         ;
 $A0FF LD ($A064),A  ; }
 $A102 OR A          ; {Return if slot is not zero
 $A103 RET NZ        ; }
 $A104 XOR A         ; {Change direction to right
 $A105 LD ($A066),A  ; }
 $A108 LD A,($A065)  ; {Decrement time bar counter
 $A10B DEC A         ;
 $A10C LD ($A065),A  ; }
 $A10F OR A          ; {if time bar counter is not zero return
 $A110 RET NZ        ; }
 $A111 LD A,$05      ; {Reset time bar counter
 $A113 LD ($A065),A  ; }
 $A116 LD A,($A067)  ; {Decrement a time slot
 $A119 DEC A         ; }
 $A11A OR A          ; {Jump to kill rex if no time slots availables
 $A11B JP Z,$9BDA    ; }
 $A11E LD ($A067),A  ; Set the number of availables time slots
 $A121 LD E,A        ; {Set this slot to green color in attribute file
 $A122 LD D,$00      ;
 $A124 PUSH DE       ;
 $A125 LD HL,$582C   ;
 $A128 ADD HL,DE     ;
 $A129 LD (HL),$04   ; }
 $A12B POP DE        ; {Set this slot to green color in attribute buffer
 $A12C LD HL,$E52B   ;
 $A12F ADD HL,DE     ;
 $A130 LD (HL),$04   ; }
 $A132 RET           ;

; Initialize time bar loop counters
;
; Used by the routines at #R$9BDA and #R$A89D.
c$A133 LD A,$0C      ; {Number of time slots availables
 $A135 LD ($A067),A  ; }
 $A138 LD A,$05      ; {Loop counter for time bar - number of zig-zag updates
 $A13A LD ($A065),A  ; to remove an slot}
 $A13D RET           ;

; Draws a windows in the display file
;
; Reads the text definition data format (explained at #R$AAAE) and draws the
; border and content of the windows Used by the routines at #R$947A, #R$9C76,
; #R$A7CE, #R$D871, #R$DAC0 and #R$DED2
;
; IX Address of the text definition data
; B Number of lines of the windows
c$A13E PUSH IX       ; {Save #REGix and #REGbc
 $A140 PUSH BC       ; }
 $A141 LD A,$01      ; {Initialise the width of the popup at #R$A095
 $A143 LD ($A095),A  ; }
; First compute the width of the windows based on the max length of all the
; lines of text plus 2 Special case: the first line of text computes a width of
; length of text plus 1
*$A146 LD A,$01      ; {Initialise the temporal computed width of the windows
 $A148 LD ($A093),A  ; at #R$A093}
 $A14B LD DE,$0003   ; {In the first iteration, point #REGix to the first
 $A14E ADD IX,DE     ; character of the line. Subsequent iterations points to
                     ; the vertical position}
*$A150 LD A,(IX+$00) ; Pick up the character at #REGix
 $A153 OR A          ; Is the character an end of marker ($00)?
 $A154 JP Z,$A160    ; Jump if so
 $A157 LD HL,$A093   ; {Increment the temporal computed width at #R$A093
 $A15A INC (HL)      ; }
 $A15B INC IX        ; Increment the address pointer to read the next character
 $A15D JP $A150      ; Jump back to #R$A150 and repeat the process
*$A160 LD A,($A093)  ; {Compare the width computed in the last iteration with
 $A163 LD HL,$A095   ; the max width previously saved
 $A166 CP (HL)       ; }
 $A167 JP C,$A16D    ; Jump to #R$A16D if the max width is greater or equal
                     ; than the current computed width
 $A16A LD ($A095),A  ; Update the max width of the windows at #R$A095 with the
                     ; new computed value
*$A16D DJNZ $A146    ; Jump back while there are lines to process
; The next section of code obtain the position and color attributes of the
; windows
 $A16F POP BC        ; {Restore #REGbc and #REGix
 $A170 POP IX        ; }
 $A172 PUSH IX       ; {Save #REGbc and #REGix
 $A174 PUSH BC       ; }
 $A175 LD A,B        ; {Is there only one line of text?
 $A176 CP $01        ; }
 $A178 JP NZ,$A17F   ; Jump if not
 $A17B LD HL,$A095   ; {Increment the width of the windows by one at #R$A095.
 $A17E INC (HL)      ; This account for the special case described above}
*$A17F LD A,(IX+$01) ; Pick up the horizontal position of the first line of
                     ; text
 $A182 SUB $03       ; Substract 3 to obtain the horizontal position of the
                     ; windows: one for the border and two for the left margin.
 $A184 LD H,A        ; Save the horizontal position of the windows at #REGh
 $A185 LD A,(IX+$02) ; Pick up the vertical position of the first line of text
 $A188 SRL A         ; {The position is defined in bits 7-3 so move this value
 $A18A SRL A         ; to bits 4-0
 $A18C SRL A         ; }
 $A18E DEC A         ; Decrement by one to account for the top border
 $A18F LD L,A        ; Save the vertical position of the windows at #REGl
 $A190 LD E,B        ; Save the number of lines of the windows in register E
 $A191 LD A,($A095)  ; Pick up the width of the windows saved at #R$A095
 $A194 SUB $02       ; Substract 2 for the borders
 $A196 LD D,A        ; Save the width of the windows (minus borders) at #REGd
 $A197 LD A,$47      ; Save at #REGa the color attributes for the windows
                     ; border
 $A199 LD C,$07      ; Save at #REGc the color attributes for the windows body
 $A19B CALL $CE7B    ; Draws the windows borders in the display file
 $A19E POP BC        ; {Save #REGbc and #REGix
 $A19F POP IX        ; }
 $A1A1 CALL $A2DF    ; Print the text content of the windows in the display
                     ; file
 $A1A4 RET           ;

; Draw HUD
;
; Draw Scores, shield power, lives, bonus points, timer bar and weapon icons.
; Used by the routine at #R$947A.
c$A1A5 LD B,$03      ; Set #REGb to the number of lines of text to print
 $A1A7 LD IX,$A24C   ; Set #REGix to the text definition data for the HUD
 $A1AB CALL $A2DF    ; Draw HUD text/icons: score, shield power, lives, time
                     ; bar and points.
 $A1AE LD HL,$5801   ; {Fill into attribute file the attribute color for HUD
 $A1B1 LD B,$02      ; weapon icons
 $A1B3 LD E,$0A      ;
 $A1B5 LD A,$01      ;
 $A1B7 CALL $D909    ; }
 $A1BA LD HL,$5819   ; {Fill into attribute file the attribute color for
 $A1BD LD B,$02      ; smartbombs icons
 $A1BF LD E,$06      ;
 $A1C1 LD A,$02      ;
 $A1C3 CALL $D909    ; }
 $A1C6 CALL $A212    ; Draw the sprites for the weapon icons in HUD
; Draw smartbombs. This entry point is used by the routines at #R$9751 and
; #R$D494.
*$A1C9 LD A,($A06C)  ; Set #REGa to the number of smartbombs availables
 $A1CC SLA A         ; {Computes address in #R$A202 for obtain the offset of
 $A1CE SLA A         ; the graphics data of the corresponents smartbomb icons
 $A1D0 LD E,A        ;
 $A1D1 LD D,$00      ;
 $A1D3 LD HL,$A202   ;
 $A1D6 ADD HL,DE     ; }
 $A1D7 CALL $A1DB    ; Draw the sprites for the smartbomb icons in HUD
 $A1DA RET           ;

; Draw the sprites for the smartbomb icons in HUD (1/2)
;
; Used by the routine at #R$A1A5.
c$A1DB LD B,$03      ; Set #REGb to the number of smartbomb icons
 $A1DD LD A,$19      ; {Set horizontal position of first smartbomb icon in data
 $A1DF LD ($A1F3),A  ; buffer at #R$A1F1}
; This entry point is used by the routine at #R$A1F7.
*$A1E2 PUSH BC       ; Save #REGbc
 $A1E3 LD E,(HL)     ; Set #REGe to the offset of the graphics data for the
                     ; corresponent smartbomb icon
 $A1E4 PUSH HL       ; Save #REGhl
 $A1E5 LD D,$00      ; {Add the offset to the base addres of the graphics data
 $A1E7 LD HL,$8C0A   ; and set #REGhl to point to the graphcis data of the
 $A1EA ADD HL,DE     ; smartbomb icon}
 $A1EB LD ($A1F1),HL ; Save this addres to the data buffer
 $A1EE CALL $D8C0    ; Draw the smarbomb icon

; Data buffer for the smartbomb icons in HUD
;
; Used in routine #R$A1DB
; .
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00-0x01 | Address pointer to sprite graphics data }
; { 0x02 | Horitzontal position of sprite }
; { 0x03 | Vertical position of sprite. Always $00 }
; { 0x04 | Width of sprite (in bytes). Always $02 }
; { 0x05 | Height of sprite (in pixels). Always $10 }
; TABLE#
g$A1F1 DEFB $CA,$8C,$19,$00,$02,$10

; Draw the sprites for the smartbomb icons in HUD (2/2)
c$A1F7 LD HL,$A1F3   ; {Increment the horizontal position in data buffer to
 $A1FA INC (HL)      ; point to the next icon
 $A1FB INC (HL)      ; }
 $A1FC POP HL        ; Restore #REGhl
 $A1FD INC HL        ; Increment #REGhl to point the addres to the next
                     ; graphics data offser at #R$A202
 $A1FE POP BC        ; Restore #REGbc
 $A1FF DJNZ $A1E2    ; Jump back until all three smartbomb icons has been
                     ; displayed
 $A201 RET           ;

; Offsets graphics data for smartbombs in HUD
;
; Values $A0 and $C0 are added to $8C0A to obtain the corresponent smartbomb
; icon. Value $A0 is for empty smartbomb icon Value $C0 is for smartbomb icon
b$A202 DEFB $A0,$A0,$A0,$00 ; No smartbomb available in inventory
 $A206 DEFB $C0,$A0,$A0,$00 ; One smartbomb available in inventory
 $A20A DEFB $C0,$C0,$A0,$00 ; Two smartbomb available in inventory
 $A20E DEFB $C0,$C0,$C0,$00 ; Three smartbomb available in inventory

; Draw the sprites for the weapon icons in HUD (1/2)
;
; Used by the routines at #R$A1A5 and #R$A79D.
c$A212 LD A,$01      ; {Set horizontal position of the first weapon icon in
 $A214 LD ($A235),A  ; data buffer at #R$A233}
 $A217 LD DE,$A04F   ; Point #REGde to the weapon inventory status.
 $A21A LD HL,$8C0A   ; Point #REGhl to the graphics data of weapon sprites
 $A21D LD B,$05      ; Set #REGb to the number of weapons availables
; Check if Rex got the weapon and draw the corresponent sprite
*$A21F PUSH BC       ; {Save #REGbc, #REGde and #REGhl
 $A220 PUSH DE       ;
 $A221 PUSH HL       ; }
 $A222 LD ($A233),HL ; Set address of the graphics data for the weapon in data
                     ; buffer at #R$A233
 $A225 LD A,(DE)     ; Set #REGa to the status inventory of the corresponent
                     ; weapon
 $A226 OR A          ; Is the weapon in the inventory of Rex?
 $A227 JP NZ,$A230   ; Jump if so
 $A22A LD HL,$8CAA   ; Set #REGhl to the empty weapon graphics data
 $A22D LD ($A233),HL ; Set address of the graphics data for the empty weapon in
                     ; data buffer at #R$A233
*$A230 CALL $D8C0    ; Draw the sprite of the weapon icon to display file

; Data buffer for the weapon icons in HUD
;
; Used in routine #R$A212
; .
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00-0x01 | Address pointer to sprite graphics data }
; { 0x02 | Horitzontal position of sprite }
; { 0x03 | Vertical position of sprite. Always $00 }
; { 0x04 | Width of sprite (in bytes). Always $02 }
; { 0x05 | Height of sprite (in pixels). Always $10 }
; TABLE#
g$A233 DEFB $0A,$8C,$01,$00,$02,$10

; Draw the sprites for the weapon icons in HUD (2/2)
c$A239 LD A,($A235)  ; {Increment the horizontal position in the data buffer
 $A23C ADD A,$02     ; for the next icon
 $A23E LD ($A235),A  ; }
 $A241 POP HL        ; Restore #REGhl
 $A242 LD DE,$0020   ; {Increment the address of the graphics data to point to
 $A245 ADD HL,DE     ; the next weapon icon}
 $A246 POP DE        ; Restore #REGde
 $A247 INC DE        ; Point to the next weapon in the weapon inventory status
 $A248 POP BC        ; Restore #REGbc
 $A249 DJNZ $A21F    ; Jump back until all the 5 weapon icons are displayed
 $A24B RET           ;

; Text definition for HUD
;
; Time bar
b$A24C DEFB $06,$0C,$08                     ; Color attributes and position of
                                            ; text
 $A24F DEFB $23,$23,$23,$23,$23,$23,$23,$23 ; {#MESSAGE($A24F,$A25A)(time_bar)
 $A257 DEFB $23,$23,$23,$23                 ; }
 $A25B DEFB $00                             ; End marker
; Score, shield and lives
 $A25C DEFB $06,$0C,$00                     ; Color attributes and position of
                                            ; text
 $A25F DEFM "0000000:99:3"                  ; #MESSAGE($A25F,$A26A)(score)
 $A26B DEFB $00                             ; End marker
; Points bar
 $A26C DEFB $07,$03,$10                     ; Color attributes and position of
                                            ; text
 $A26F DEFB $5D,$5C,$20,$5E,$5C,$20,$5F,$5C ; {#MESSAGE($A26F,$A288)(points_bar)
 $A277 DEFB $20,$40,$5C,$20,$22,$5C,$20,$24 ;
 $A27F DEFB $5C,$20,$25,$5C,$20,$26,$5C,$20 ;
 $A287 DEFB $27,$5C                         ; }
 $A289 DEFB $00                             ; End marker

; Copy room graphic buffer to display file
;
; Used by the routines at #R$947A, #R$A89D, #R$A915 and #R$D871.
c$A28A LD ($A093),SP ; Save #REGsp to temporal variable #R$A093
 $A28E LD SP,$AC0D   ; Set #REGsp to point to display file lookup table at
                     ; position (0,24)
 $A291 LD HL,$EAFF   ; Set #REGhl to the base address for the room graphics
                     ; buffer
 $A294 LD BC,$13B0   ; Set #REGbc to the number of bytes to copy
*$A297 POP DE        ; Set #REGde to the corresponent addres into display file
 $A298 INC DE        ; Increment display file to the next byte (first and last
                     ; column of room screen are not copied)
 $A299 INC HL        ; Increment base address for the room graphics buffer
 $A29A LDI           ; {Copy the 30 bytes for this scanline
 $A29C LDI           ;
 $A29E LDI           ;
 $A2A0 LDI           ;
 $A2A2 LDI           ;
 $A2A4 LDI           ;
 $A2A6 LDI           ;
 $A2A8 LDI           ;
 $A2AA LDI           ;
 $A2AC LDI           ;
 $A2AE LDI           ;
 $A2B0 LDI           ;
 $A2B2 LDI           ;
 $A2B4 LDI           ;
 $A2B6 LDI           ;
 $A2B8 LDI           ;
 $A2BA LDI           ;
 $A2BC LDI           ;
 $A2BE LDI           ;
 $A2C0 LDI           ;
 $A2C2 LDI           ;
 $A2C4 LDI           ;
 $A2C6 LDI           ;
 $A2C8 LDI           ;
 $A2CA LDI           ;
 $A2CC LDI           ;
 $A2CE LDI           ;
 $A2D0 LDI           ;
 $A2D2 LDI           ;
 $A2D4 LDI           ; }
 $A2D6 INC HL        ; Increment base address for the room graphics buffer
                     ; (next line)
 $A2D7 JP PE,$A297   ; Jump back if not all bytes are copied
 $A2DA LD SP,($A093) ; Recover #REGsp
 $A2DE RET           ;

; Print the text content of the windows
;
; Used by the routines at #R$A13E and #R$A1A5.
;
; B Number of lines of text to print
; IX Address of the text definition data
c$A2DF PUSH BC       ; Save #REGbc
 $A2E0 CALL $A307    ; Print a line of text
 $A2E3 INC IX        ; Point #REGix to the address of the first byte of the
                     ; next line
 $A2E5 POP BC        ; Save #REGbc
 $A2E6 DJNZ $A2DF    ; Jump back while there are lines left to print
 $A2E8 RET           ;
; Compute the address at the lookup table of the display file and the address
; of the graphic data for the character to display
*$A2E9 LD A,($A097)  ; {Set #REGhl to the vertical position of the text
 $A2EC LD L,A        ;
 $A2ED LD H,$00      ; }
 $A2EF ADD HL,HL     ; Vertical position is in bit 7-3 so it's only necessari
                     ; multiply by two
 $A2F0 LD DE,$ABDD   ; {Point #REGhl to the display file lookup table
 $A2F3 ADD HL,DE     ; }
 $A2F4 PUSH HL       ; Save #REGhl
 $A2F5 LD L,(IX+$00) ; {Set #REGhl to the character to display
 $A2F8 LD H,$00      ; }
 $A2FA ADD HL,HL     ; {Computes the address of the graphic data of the
 $A2FB ADD HL,HL     ; character into the charset data tabla at $5FE0
 $A2FC ADD HL,HL     ;
 $A2FD LD DE,$5FE0   ;
 $A300 ADD HL,DE     ; }
 $A301 EX DE,HL      ; Exchange #REGde and #REGhl
 $A302 POP IY        ; Restore #REGiy
 $A304 LD B,$08      ; Set #REGb=8
 $A306 RET           ;
; Prints a line of text
*$A307 LD A,(IX+$00) ; {Save color attribute of text at #R$A093
 $A30A LD ($A093),A  ; }
 $A30D LD A,(IX+$01) ; {Save horizontal position of text at #R$A095
 $A310 LD ($A095),A  ; }
 $A313 LD A,(IX+$02) ; {Save vertical position of text at #R$A097
 $A316 LD ($A097),A  ; }
 $A319 LD DE,$0003   ; {Point #REGix to the first character
 $A31C ADD IX,DE     ; }
*$A31E CALL $A2E9    ; Computes addres into lookup table and address of the
                     ; graphics data for the character
; Prints a character
*$A321 LD L,(IY+$00) ; {Point at #REGhl the address into the display file from
 $A324 LD H,(IY+$01) ; the lookup table}
 $A327 PUSH DE       ; Save #REGde
 $A328 LD A,($A095)  ; {Save the horizontal position of text at #REGde
 $A32B LD E,A        ;
 $A32C LD D,$00      ; }
 $A32E ADD HL,DE     ; Adds the horizontal position to the address into the
                     ; display file
 $A32F POP DE        ; Restore #REGde
 $A330 LD A,(DE)     ; Read the next byte of the graphic data for the character
 $A331 LD (HL),A     ; Puts the byte in to the display file
 $A332 INC DE        ; Points to the next byte of the graphic data for the
                     ; character
 $A333 INC IY        ; {Points to the next address of the display file lookup
 $A335 INC IY        ; table}
 $A337 DJNZ $A321    ; Jump back until displayed all of the eight bytes of the
                     ; character
 $A339 LD A,(IX+$00) ; {The character is an space ($20)?
 $A33C CP $20        ; }
 $A33E JR Z,$A359    ; Jump if so
; Set the color attribute for the character if is not an SPACE ($20)
 $A340 LD A,($A097)  ; {Set #REGhl to the vertical position of the text (only
 $A343 AND $F8       ; bits 7-3)
 $A345 LD L,A        ;
 $A346 LD H,$00      ; }
 $A348 ADD HL,HL     ; {And computes the patial offset to the attribute file
 $A349 ADD HL,HL     ; }
 $A34A LD A,($A095)  ; {Set #REGde to the horizontal position
 $A34D LD E,A        ;
 $A34E LD D,$00      ; }
 $A350 ADD HL,DE     ; And computes the offset to the attribute file
 $A351 LD DE,$5800   ; {Add the offset to the base address of the attribute
 $A354 ADD HL,DE     ; file}
 $A355 LD A,($A093)  ; Pick up the color attribute for the text
 $A358 LD (HL),A     ; And put this color attribute into the attribute file
; Prepares to print the next character until the end of marker (character $00)
*$A359 INC IX        ; Point #REGix to the next character
 $A35B LD HL,$A095   ; {Increment the horizontal position for the next
 $A35E INC (HL)      ; character}
 $A35F LD A,(IX+$00) ; Pick up the next character
 $A362 OR A          ; is an end of marker ($00)?
 $A363 JR Z,$A367    ; Jump if so
 $A365 JR $A31E      ; Jump back and repeat for the next character
*$A367 RET           ;

; Routine not used
s$A368 LD HL,($A0A1)
 $A36B INC HL
 $A36C LD A,H
 $A36D AND $3F
 $A36F LD H,A
 $A370 LD A,(HL)
 $A371 LD ($A0A1),HL
 $A374 RET

; Pseudo-random number generator
;
; Seed from #R$A0A1 , $A0A2 and $A0A3
; .
; Used by the routines at #R$969B, #R$98AF, #R$9AC5, #R$9D71, #R$BA5C, #R$BCDD,
; #R$BD6B, #R$C03A, #R$C05A, #R$C1CA, #R$C531, #R$C540, #R$C54D, #R$C577,
; #R$C9CA, #R$CA13, #R$CA71 and #R$CAA7.
;
; O:A Pseudo-random number
c$A375 PUSH HL       ;
 $A376 LD A,($A0A1)  ;
 $A379 SLA A         ;
 $A37B SLA A         ;
 $A37D LD HL,$A0A1   ;
 $A380 ADD A,(HL)    ;
 $A381 ADD A,$15     ;
 $A383 LD ($A0A1),A  ;
 $A386 POP HL        ;
 $A387 RET           ;
; Used by the routines at #R$9AC5, #R$9E8A, #R$BA5C, #R$C13B and #R$CA49.
*$A388 PUSH HL       ;
 $A389 LD ($A093),BC ;
 $A38D LD B,$08      ;
*$A38F LD A,($A0A1)  ;
 $A392 AND $48       ;
 $A394 ADC A,$38     ;
 $A396 RLA           ;
 $A397 RLA           ;
 $A398 LD HL,$A0A3   ;
 $A39B RL (HL)       ;
 $A39D DEC HL        ;
 $A39E RL (HL)       ;
 $A3A0 DEC HL        ;
 $A3A1 RL (HL)       ;
 $A3A3 DJNZ $A38F    ;
 $A3A5 LD A,($A0A1)  ;
 $A3A8 LD BC,($A093) ;
 $A3AC POP HL        ;
 $A3AD RET           ;

; Reset display and attribute file
;
; Used by the routine at #R$947A.
c$A3AE LD HL,$4000   ; {Reset display file
 $A3B1 LD DE,$4001   ;
 $A3B4 LD BC,$1AFF   ;
 $A3B7 LD (HL),$00   ;
 $A3B9 LDIR          ; }
 $A3BB LD HL,$5800   ; {Reset attribute file
 $A3BE LD DE,$5801   ;
 $A3C1 LD BC,$02FF   ;
 $A3C4 LD (HL),A     ;
 $A3C5 LDIR          ; }
 $A3C7 RET           ;

; Draw the number saved in charcode buffer at #R$A0A4 into display file
;
; Used by the routines at #R$99AB, #R$99BB, #R$99FA and #R$9C76.
;
; E Horizontal position of the unit digit
; L Vertical position of the number to draw
; B Number of digits to draw
c$A3C8 PUSH IX       ; Save #REGix
 $A3CA LD IX,$A0A6   ; Point #REGix to the unit charcode to draw
 $A3CE LD H,$00      ; {Computes offset for vertical position
 $A3D0 ADD HL,HL     ; }
 $A3D1 LD D,$00      ; {Save #REGde
 $A3D3 PUSH DE       ; }
 $A3D4 LD DE,$ABDD   ; {Set #REGhl to point to address of first digit into
 $A3D7 ADD HL,DE     ; display file lookup table}
 $A3D8 LD E,(HL)     ; {Set #REGde to the corresponding address into display
 $A3D9 INC HL        ; file
 $A3DA LD D,(HL)     ; }
 $A3DB POP HL        ; Restore #REGhl
 $A3DC ADD HL,DE     ; Adds horizontal position to address on display file
 $A3DD EX DE,HL      ; Exchange #REGde and #REGhl
*$A3DE PUSH BC       ; Save #REGbc
 $A3DF PUSH DE       ; Save #REGde
 $A3E0 LD L,(IX+$00) ; {Set #REGhl to the charcode digit pointed by #REGix
 $A3E3 LD H,$00      ; }
 $A3E5 ADD HL,HL     ; {Computes offset of the charcode into charset table to
 $A3E6 ADD HL,HL     ; set #REGhl to the graphics data for the digit
 $A3E7 ADD HL,HL     ;
 $A3E8 LD BC,$5FE0   ;
 $A3EB ADD HL,BC     ; }
 $A3EC CALL $A3F9    ; Draw digit into display file
 $A3EF INC IX        ; Point #REGix to the next charcode digit
 $A3F1 POP DE        ; Restore #REGde
 $A3F2 DEC DE        ; Point #REGde to the position of the previous digit into
                     ; displat file
 $A3F3 POP BC        ; Restore #REGbc
 $A3F4 DJNZ $A3DE    ; Jump back until all digits copied
 $A3F6 POP IX        ; Restore #REGix
 $A3F8 RET           ;
; Draw digit into display file
*$A3F9 LD B,$08      ; Set #REGb to the number of bytes to draw
*$A3FB LD A,(HL)     ; {Copy graphics data from #REGhl to display file
 $A3FC LD (DE),A     ; }
 $A3FD INC HL        ; Increment address of graphic data
 $A3FE INC D         ; Increment address of display file (next line)
 $A3FF DJNZ $A3FB    ; Jump back until the digit is draw
 $A401 RET           ;

; Convert a number into a list of digits charcodes
;
; Computes the charcode of the number in #REGhl and puts every digit charcode
; into $A0A6-$A0AA (in reverse order) $A0A6 units, $A0A7 tens, $A0A8 hundreds,
; $A0A9 thousands and $A0AA ten thousands Used by the routines at #R$99AB,
; #R$99BB, #R$99FA, #R$9C76 and #R$A7CE.
;
; HL Number to convert
c$A402 PUSH IX       ; Save #REGix
 $A404 LD ($A0A4),HL ; Save the number in $A0A4
 $A407 XOR A         ; Set #REGa=0
 $A408 LD ($A0AA),A  ; {Init the charcode buffer
 $A40B LD ($A0A9),A  ;
 $A40E LD ($A0A8),A  ;
 $A411 LD ($A0A7),A  ;
 $A414 LD ($A0A6),A  ; }
 $A417 LD DE,$2710   ; Set #REGde=10.000
 $A41A CALL $A447    ; Computes the charcode for the digit in the ten thousands
 $A41D LD ($A0AA),A  ; Set this charcode into $A0AA
 $A420 LD DE,$03E8   ; Set #REGde=1.000
 $A423 CALL $A447    ; Computes the charcode for the digit in the thousands
 $A426 LD ($A0A9),A  ; Set this charcode into $A0A9
 $A429 LD DE,$0064   ; Set #REGde=100
 $A42C CALL $A447    ; Computes the charcode for the digit in the hundreds
 $A42F LD ($A0A8),A  ; Set this charcode into $A0A8
 $A432 LD DE,$000A   ; Set #REGde=10
 $A435 CALL $A447    ; Computes the charcode for the digit in the tens
 $A438 LD ($A0A7),A  ; Set this charcode into $A0A7
 $A43B LD DE,$0001   ; Set #REGde=1
 $A43E CALL $A447    ; Computes the charcode for the digit in the units
 $A441 LD ($A0A6),A  ; Set this charcode into $A0A6
 $A444 POP IX        ; Restore #REGix
 $A446 RET           ;
; Computes the charcode for the digit in the units, tens, hundreds, thousands o
; ten toushands
*$A447 LD HL,($A0A4) ; Set #REGhl to the number to convert
 $A44A LD IX,$0000   ; Set #REGix=0. The part of the number that has been
                     ; converted [ x0.000, x.000, x00, x0 or x }
 $A44E LD B,$00      ; Set #REGb=0. The digit number that we need to convert to
                     ; charcode [x]
*$A450 AND A         ; Reset carry bit
 $A451 SBC HL,DE     ; Substract #REGde [10.000, 1.000, 100, 10 or 1] to #REGhl
 $A453 JR C,$A45A    ; Jump if the result in #REGhl is a negative number
                     ; (#REGde is greater than the number to convert)
 $A455 ADD IX,DE     ; Add #REGde to #REGix
 $A457 INC B         ; Increment the digit number
 $A458 JR $A450      ; Jump back and repeat the process until obtain the digit
                     ; number
*$A45A PUSH IX       ; {Copy in #REGde the value of #REGix
 $A45C POP DE        ; }
 $A45D LD HL,($A0A4) ; Set #REGhl to the number to convert
 $A460 AND A         ; Reset carry bit
 $A461 SBC HL,DE     ; Substract to the number to convert the part just
                     ; converted
 $A463 LD ($A0A4),HL ; Set into $A0A4 the remaining number to convert
 $A466 LD A,B        ; Copy into #REGa the digit number to convert
 $A467 ADD A,$30     ; Set #REGa to the charcode of the digit ($30 is the base
                     ; charcode for digit, i.e. is the 0 digit charcode)
 $A469 RET           ;

; Configure and check key pressed routines for Rex movement
;
; Configure check FIRE key pressed routine. Used by the routines at #R$DE5D and
; #R$DE99.
c$A46A LD HL,($A0AB) ; {Configure port for key read in routine $A477
 $A46D LD ($A478),HL ; }
 $A470 LD A,($A0AD)  ; {Configure operand BIT to check for key press in routine
 $A473 LD ($A481),A  ; $A477}
 $A476 RET           ;
; Check FIRE key pressed. Default key is O. Used by the routines at #R$947A,
; #R$97C3, #R$97EA, #R$A4E7 and #R$A915.
*$A477 LD BC,$DFFE   ; {Read port for FIRE key
 $A47A IN A,(C)      ; }
 $A47C LD HL,$A0AE   ; {Reset input device type
 $A47F XOR (HL)      ; }
 $A480 BIT 1,A       ; Execute specific BIT operand to test if bit of key FIRE
                     ; is set
 $A482 RET           ;
; Configure check LEFT key pressed routine. Used by the routines at #R$DE5D and
; #R$DE99.
*$A483 LD HL,($A0AB) ; {Configure port for key read in routine $A490
 $A486 LD ($A491),HL ; }
 $A489 LD A,($A0AD)  ; {Configure operand BIT to check for key press in routine
 $A48C LD ($A49A),A  ; $A490}
 $A48F RET           ;
; Check LEFT key pressed. Default key is Q. Used by the routines at #R$947A and
; #R$C27E.
*$A490 LD BC,$FBFE   ; {Read port for LEFT key
 $A493 IN A,(C)      ; }
 $A495 LD HL,$A0AE   ; {Reset input device type
 $A498 XOR (HL)      ; }
 $A499 BIT 0,A       ; Execute specific BIT operand to test if bit of key LEFT
                     ; is set
 $A49B RET           ;
; Configure check RIGHT key pressed routine. Used by the routines at #R$DE5D
; and #R$DE99.
*$A49C LD HL,($A0AB) ; {Configure port for key read in routine $A4A9
 $A49F LD ($A4AA),HL ; }
 $A4A2 LD A,($A0AD)  ; {Configure operand BIT to check for key press in routine
 $A4A5 LD ($A4B3),A  ; $A4A9}
 $A4A8 RET           ;
; Check RIGHT key pressed. Default key is W. Used by the routines at #R$947A
; and #R$C27E.
*$A4A9 LD BC,$FBFE   ; {Read port for RIGHT key
 $A4AC IN A,(C)      ; }
 $A4AE LD HL,$A0AE   ; {Reset input device type
 $A4B1 XOR (HL)      ; }
 $A4B2 BIT 1,A       ; Execute specific BIT operand to test if bit of key RIGHT
                     ; is set
 $A4B4 RET           ;
; Configure check UP key pressed routine. Used by the routines at #R$DE5D and
; #R$DE99.
*$A4B5 LD HL,($A0AB) ; {Configure port for key read in routine $A4C2
 $A4B8 LD ($A4C3),HL ; }
 $A4BB LD A,($A0AD)  ; {Configure operand BIT to check for key press in routine
 $A4BE LD ($A4CC),A  ; $A4C2}
 $A4C1 RET           ;
; Check UP key pressed. Default key is I. Used by the routine at #R$947A.
*$A4C2 LD BC,$DFFE   ; {Read port for UP key
 $A4C5 IN A,(C)      ; }
 $A4C7 LD HL,$A0AE   ; {Reset input device type
 $A4CA XOR (HL)      ; }
 $A4CB BIT 2,A       ; Execute specific BIT operand to test if bit of key UP is
                     ; set
 $A4CD RET           ;
; Configure check DOWN key pressed routine. Used by the routines at #R$DE5D and
; #R$DE99.
*$A4CE LD HL,($A0AB) ; {Configure port for key read in routine $A4DB
 $A4D1 LD ($A4DC),HL ; }
 $A4D4 LD A,($A0AD)  ; {Configure operand BIT to check for key press in routine
 $A4D7 LD ($A4E5),A  ; $A4DB}
 $A4DA RET           ;
; Check DOWN key pressed. Default key is J. Used by the routine at #R$947A.
*$A4DB LD BC,$BFFE   ; {Read port for DOWN key
 $A4DE IN A,(C)      ; }
 $A4E0 LD HL,$A0AE   ; {Reset input device type
 $A4E3 XOR (HL)      ; }
 $A4E4 BIT 3,A       ; Execute specific BIT operand to test if bit of key DOWN
                     ; is set
 $A4E6 RET           ;

; Pause game
;
; Used by the routine at #R$947A.
c$A4E7 CALL $D5D7    ; Reset sound volume chanels
 $A4EA CALL $A477    ; Check for FIRE key pressed
 $A4ED JP NZ,$A4E7   ; Jump back if key not pressed
 $A4F0 CALL $D5AE    ; Reset sound data buffer
 $A4F3 RET           ;

; Draw explosion debris
;
; Used by the routine at #R$BF66.
c$A4F4 LD B,$08      ; Set #REGb to the number of bytes to copy
*$A4F6 LD A,(DE)     ; Set #REGb to the graphic data byte
 $A4F7 OR (HL)       ; Blend graphic data of debris with graphic data of room
 $A4F8 LD (HL),A     ; Copy graphic data to room graphic data buffer
 $A4F9 INC DE        ; Increment graphic data address
 $A4FA PUSH DE       ; Save #REGde
 $A4FB LD DE,$0020   ; {Increment address room graphic data to the next line
 $A4FE ADD HL,DE     ; }
 $A4FF POP DE        ; Restore #REGde
 $A500 DJNZ $A4F6    ; Jump back until all bytes copied
 $A502 RET           ;

; Computes address position in tile type buffer based on (x,y) position on
; screen
;
; X-position is stored in #R$A0AF and y-position in #R$A0B0. Used by the
; routines at #R$947A, #R$B64E, #R$C0E0, #R$C2FD, #R$C620, #R$C72B, #R$CAA7,
; #R$CB03 and #R$D14D.
;
; I:A Tile position $00 Previous tile (x,y) - $01 Tile in (x,y)
; O:HL Address position into tile type buffer
c$A503 PUSH AF       ; Save #REGaf
 $A504 LD A,($A0B0)  ; Set #REGa the y-position
 $A507 LD L,A        ; {Computes the offset of the tile based on the y-position
 $A508 LD H,$00      ; y-offset = (y-position / 8) * 32 (32 tiles per row and 8
 $A50A SRL H         ; pixels height per row)
 $A50C RR L          ;
 $A50E SRL H         ;
 $A510 RR L          ;
 $A512 SRL H         ;
 $A514 RR L          ;
 $A516 ADD HL,HL     ;
 $A517 ADD HL,HL     ;
 $A518 ADD HL,HL     ;
 $A519 ADD HL,HL     ;
 $A51A ADD HL,HL     ; }
 $A51B LD A,($A0AF)  ; Set #REGa the x-position
 $A51E SRL A         ; {Computes the offset of the tile based on the x-position
 $A520 SRL A         ; x-offset = x-position / 8
 $A522 SRL A         ; }
 $A524 LD E,A        ; {Adds the two offsets
 $A525 LD D,$00      ;
 $A527 ADD HL,DE     ; }
 $A528 LD DE,$E19F   ; Set #REGde the base address to the tile type buffer
 $A52B POP AF        ; Recover #REGa
 $A52C OR A          ; Is 0?
 $A52D JP NZ,$A533   ; Jump if not
 $A530 LD DE,$E19E   ; If it's 0 then change the base address of tilr type
                     ; buffer to get the previous tile
*$A533 ADD HL,DE     ; Set #REGhl to the base address of the location of the
                     ; tile in tile buffer
 $A534 RET           ;

; Computes address into attribute file based of (x,y)-pixel-position on screen
;
; Used by the routine at #R$CF9B.
;
; I:$A0AF x-pixel-position
; I:$A0B0 y-pixel-position
; O:HL Address into attribute file
c$A535 LD A,($A0B0)  ; {Computes into #REGhl the address offset for the
 $A538 LD L,A        ; y-position
 $A539 LD H,$00      ;
 $A53B SRL H         ;
 $A53D RR L          ;
 $A53F SRL H         ;
 $A541 RR L          ;
 $A543 SRL H         ;
 $A545 RR L          ;
 $A547 ADD HL,HL     ;
 $A548 ADD HL,HL     ;
 $A549 ADD HL,HL     ;
 $A54A ADD HL,HL     ;
 $A54B ADD HL,HL     ; }
 $A54C LD A,($A0AF)  ; {Computes into #REGde the address offset for the
 $A54F SRL A         ; x-position
 $A551 SRL A         ;
 $A553 SRL A         ;
 $A555 LD E,A        ;
 $A556 LD D,$00      ; }
 $A558 ADD HL,DE     ; {Set #REGhl to the address into attribute file
 $A559 LD DE,$5800   ;
 $A55C ADD HL,DE     ; }
 $A55D RET           ;

; Update arrow tiles, shield recharger, respawn indicator, fire and water
; effect
;
; Used by the routines at #R$947A and #R$A915.
c$A55E LD HL,$AE8D     ; Set #REGhl to the offset address for arrows (tilt #0)
 $A561 LD A,($A017)    ; {Jump forward if tilt #0 frame
 $A564 OR A            ;
 $A565 JP Z,$A56B      ; }
 $A568 LD HL,$AEAD     ; Set #REGhl to the base address for the animated arrows
                       ; (tilt #1)
*$A56B LD DE,$6BC0     ; Set #REGde to the base address for the arrows tiles
 $A56E LD BC,$0020     ; Set #REGbc to the number of bytes
*$A571 LDI             ; {Copy graphic data to tile address until all the bytes
 $A573 LDI             ; copied
 $A575 LDI             ;
 $A577 LDI             ;
 $A579 LDI             ;
 $A57B LDI             ;
 $A57D LDI             ;
 $A57F LDI             ;
 $A581 JP PE,$A571     ; }
 $A584 CALL $A5A7      ; Update shield recharger
 $A587 LD IY,$A06B     ; Set #REGiy to the respawn fire index value
 $A58B LD DE,$A60C     ; Set #REGde to the base address for the graphic data
                       ; address table for the respawn fire
 $A58E LD HL,$6600     ; Set #REGhl to the base address for the respawn fire
                       ; tile graphic data
 $A591 LD BC,$0008     ; Set #REGbc to the number of bytes to copy
 $A594 CALL $A5C4      ; Handle respawn fire animation
 $A597 LD IY,$A07C     ; Set #REGiy to the water effect index value
 $A59B LD DE,$A61A     ; Set #REGde to the base address for the graphic data
                       ; address table for the water effect
 $A59E LD HL,$67D8     ; Set #REGhl to the base address for the water tile
                       ; graphic data
 $A5A1 LD BC,$0008     ; Set #REGbc to the number of bytes to copy
 $A5A4 JP $A5C4        ; Jump to handle the water effect
; Update shield recharger
*$A5A7 LD IY,$A06A     ; Set #REGiy to the shield recharger index value
 $A5AB LD DE,$A602     ; Set #REGde to the base address for the graphic data
                       ; address table of shield recharger
 $A5AE LD HL,$6BB0     ; Set #REGhl to the base address for the shield
                       ; recharger tile graphic data
 $A5B1 LD BC,$0010     ; Set #REGbc to the number of bytes to copy
 $A5B4 JP $A5C4        ; Jump to handle shield recharger animation
; Update respawn indicators
*$A5B7 LD IY,$A069     ; Set #REGiy to the respawn indicator index value
 $A5BB LD DE,$A5F4     ; Set #REGde to the base address for the graphic data
                       ; address table of respawn indicator
 $A5BE LD HL,$6BA8     ; Set #REGhl to the base address for the respawn
                       ; indicator tile graphic data
 $A5C1 LD BC,$0008     ; Set #REGbc to the number of bytes to copy
; Animate tile graphic
*$A5C4 LD ($A093),DE   ; Set #R$A093 the base address for the table of graphic
                       ; data address
 $A5C8 LD ($A095),HL   ; Set #R$A095 the base address for the tile graphic data
 $A5CB INC (IY+$00)    ; {Increase loop value
 $A5CE INC (IY+$00)    ; }
*$A5D1 LD L,(IY+$00)   ; {Point into #REGde the address for the corresponent
 $A5D4 LD H,$00        ; index
 $A5D6 LD DE,($A093)   ;
 $A5DA ADD HL,DE       ;
 $A5DB EX DE,HL        ; }
 $A5DC LD A,(DE)       ; {if value is $FF then reset the index
 $A5DD CP $FF          ;
 $A5DF JP NZ,$A5E9     ;
 $A5E2 LD (IY+$00),$00 ; }
 $A5E6 JP $A5D1        ; Jump to handle next address
*$A5E9 LD L,A          ; {Set into #REGhl the base address for the next graphic
 $A5EA INC DE          ; data of the tile animation
 $A5EB LD A,(DE)       ;
 $A5EC LD H,A          ; }
 $A5ED LD DE,($A095)   ; Set #REGde to the base address for the tile graphic
                       ; data
 $A5F1 LDIR            ; Copy all the bytes of the tiles
 $A5F3 RET             ;

; Table of graphic data addresses for tile animation
b$A5F4 DEFB $2A,$8D,$32,$8D,$3A,$8D,$42,$8D ; {Graphic data addresses for
 $A5FC DEFB $4A,$8D,$52,$8D,$FF,$FF         ; respawn indicators}
 $A602 DEFB $5A,$8D,$6A,$8D,$7A,$8D,$6A,$8D ; {Graphic data addresses for
 $A60A DEFB $FF,$FF                         ; recharger animation}
 $A60C DEFB $12,$94,$1A,$94,$22,$94,$2A,$94 ; {Graphic data addresses for
 $A614 DEFB $32,$94,$3A,$94,$FF,$FF         ; respawn fire}
 $A61A DEFB $42,$94,$4A,$94,$52,$94,$5A,$94 ; {Graphic data addresses for water
 $A622 DEFB $62,$94,$6A,$94,$FF,$FF         ; effect}

; Initialise drones configuration data buffer
;
; Used by the routines at #R$947A and #R$B98E.
c$A628 LD HL,$5E50   ; Set #REGhl to point to index byte for drone
                     ; configuration data buffer
 $A62B LD B,$08      ; Set #REGb to the max number of drones to configure
 $A62D LD A,$00      ; Set #REGa to the initial index into offset position
                     ; table for this drone
*$A62F LD (HL),A     ; Copy value of #REGa to address pointed by #REGhl
 $A630 LD DE,$0003   ; {Increment address pointer by 3
 $A633 ADD HL,DE     ; }
 $A634 ADD A,$08     ; Increment by 8 the index into offset position table for
                     ; the next drone
 $A636 DJNZ $A62F    ; Jump back and init data for next drone
 $A638 RET           ;

; Draw drones for multiple weapon
;
; Used by the routine at #R$947A.
c$A639 LD A,($A055)    ; {Return if Rex is dead
 $A63C OR A            ;
 $A63D RET NZ          ; }
 $A63E LD A,($A013)    ; {Return is weapon of Rex isn't multiple
 $A641 CP $03          ;
 $A643 RET NZ          ; }
 $A644 LD A,($A060)    ; {Return if Rex is teleporting
 $A647 OR A            ;
 $A648 RET NZ          ; }
 $A649 LD IY,$5E4E     ; Set #REGiy the base address for drone configuration
 $A64D LD A,($A014)    ; {Set #REGb the number of drones. Number of drones = 3
 $A650 ADD A,$03       ; + multiple weapon energy level
 $A652 LD B,A          ; }
*$A653 PUSH BC         ; Save #REGbc
 $A654 LD A,(IY+$02)   ; Set #REGa to the index into the offset position for
                       ; drones
 $A657 SLA A           ; {Point #REGhl to the address for the offset position
 $A659 LD E,A          ;
 $A65A LD D,$00        ;
 $A65C LD HL,$A6CB     ;
 $A65F ADD HL,DE       ; }
 $A660 LD A,($A0B6)    ; Set #REGa to the x-position of Rex
 $A663 DEC A           ; {Computes x-position of drone based on x-offset and
 $A664 ADD A,(HL)      ; x-position of Rex Drone x-position = Rex x-position +
                       ; x-offset - 1}
 $A665 LD (IY+$00),A   ; Set x-position of drone in table configuration buffer
 $A668 INC HL          ; Increment address into offset position table
 $A669 LD A,($A0B7)    ; Set #REGa to the y-position of Rex
 $A66C ADD A,$02       ; {Computes y-position of drone based on x-offset and
 $A66E ADD A,(HL)      ; y-position of Rex Drone y-position = Rex y-position +
                       ; y-offset + 2}
 $A66F LD (IY+$01),A   ; Set y-position of drone in table configuration buffer
 $A672 LD L,A          ; {Computes in #REGhl the address into room graphic data
 $A673 LD H,$00        ; for the drone position
 $A675 ADD HL,HL       ;
 $A676 ADD HL,HL       ;
 $A677 ADD HL,HL       ;
 $A678 ADD HL,HL       ;
 $A679 ADD HL,HL       ;
 $A67A LD DE,$E7FF     ;
 $A67D ADD HL,DE       ;
 $A67E LD E,(IY+$00)   ;
 $A681 SRL E           ;
 $A683 SRL E           ;
 $A685 SRL E           ;
 $A687 LD D,$00        ;
 $A689 ADD HL,DE       ; }
 $A68A PUSH HL         ; Save #REGhl
 $A68B LD A,(IY+$00)   ; {Computes in #REGde the graphic data of drone based on
 $A68E AND $07         ; his x-position (x-position & 0x7) * 8 = index into
 $A690 SLA A           ; graphic data table
 $A692 SLA A           ;
 $A694 SLA A           ;
 $A696 LD E,A          ;
 $A697 LD D,$00        ;
 $A699 LD HL,$A74B     ;
 $A69C ADD HL,DE       ;
 $A69D EX DE,HL        ; }
 $A69E POP HL          ; Restore #REGhl
 $A69F LD B,$04        ; Set #REGb to the height of the drone sprite
*$A6A1 PUSH BC         ; Save #REGbc
 $A6A2 LD A,(DE)       ; {Copy into room graphic data the drone graphic data
 $A6A3 OR (HL)         ;
 $A6A4 LD (HL),A       ; }
 $A6A5 INC DE          ; {Increase address for graphic data of drone and room
 $A6A6 INC HL          ; graphic data}
 $A6A7 LD A,(DE)       ; {Copy into room graphic data the drone graphic data
 $A6A8 OR (HL)         ;
 $A6A9 LD (HL),A       ; }
 $A6AA INC DE          ; Increment address for graphic data of drone
 $A6AB LD BC,$001F     ; {Point #REGhl to the next row in room graphic data
 $A6AE ADD HL,BC       ; }
 $A6AF POP BC          ; Restore #REGbc
 $A6B0 DJNZ $A6A1      ; Jump until drone is drawn
 $A6B2 LD A,(IY+$02)   ; {Increment index into the offset position table for
 $A6B5 INC A           ; the drone
 $A6B6 LD (IY+$02),A   ; }
 $A6B9 CP $40          ; {Reset the index position if has reached to the end
 $A6BB JP NZ,$A6C2     ;
 $A6BE LD (IY+$02),$00 ; }
*$A6C2 LD DE,$0003     ; {Point #REGiy to the next drone configuration
 $A6C5 ADD IY,DE       ; }
 $A6C7 POP BC          ; Restore #REGbc
 $A6C8 DJNZ $A653      ; Jump back and process next drone
 $A6CA RET             ;

; Offset position table for drones
;
; 64 positions circling Rex (x-offset, y-offset)
b$A6CB DEFB $05,$00,$06,$00,$07,$00,$08,$00
 $A6D3 DEFB $09,$00,$0A,$00,$0B,$01,$0C,$01
 $A6DB DEFB $0D,$02,$0E,$02,$0F,$03,$10,$04
 $A6E3 DEFB $11,$05,$11,$06,$12,$07,$12,$08
 $A6EB DEFB $13,$09,$13,$0A,$13,$0B,$13,$0C
 $A6F3 DEFB $13,$0D,$13,$0E,$12,$0F,$12,$10
 $A6FB DEFB $11,$11,$11,$12,$10,$13,$0F,$14
 $A703 DEFB $0E,$15,$0D,$15,$0C,$16,$0B,$16
 $A70B DEFB $0A,$17,$09,$17,$08,$17,$07,$17
 $A713 DEFB $06,$17,$05,$17,$04,$16,$03,$16
 $A71B DEFB $02,$15,$01,$15,$00,$14,$FF,$13
 $A723 DEFB $FE,$12,$FE,$11,$FD,$10,$FD,$0F
 $A72B DEFB $FC,$0E,$FC,$0D,$FC,$0C,$FC,$0B
 $A733 DEFB $FC,$0A,$FC,$09,$FD,$08,$FD,$07
 $A73B DEFB $FE,$06,$FE,$05,$FF,$04,$00,$03
 $A743 DEFB $01,$02,$02,$02,$03,$01,$04,$01

; Graphic data for drones
;
; Drones are 16x4 pixels. 8 frames animation
b$A74B DEFB $60,$00,$C0,$00,$10,$00,$20,$00 ; {#UDGARRAY2,$47,,2;$A74B-$A78A-1-16(drone)
 $A753 DEFB $20,$00,$68,$00,$48,$00,$20,$00 ;
 $A75B DEFB $08,$00,$24,$00,$34,$00,$10,$00 ;
 $A763 DEFB $0C,$00,$02,$00,$18,$00,$0C,$00 ;
 $A76B DEFB $06,$00,$08,$00,$03,$00,$06,$00 ;
 $A773 DEFB $02,$00,$04,$80,$05,$80,$01,$00 ;
 $A77B DEFB $00,$80,$02,$C0,$02,$40,$01,$00 ;
 $A783 DEFB $00,$C0,$00,$60,$01,$00,$00,$C0 ; }

; Update weapon in inventory (HUD)
;
; Double fire weapon. Used by the routine at #R$9F5F.
c$A78B LD HL,$A050   ; Set #REGhl to the variable address for inventory
                     ; indicator
 $A78E JP $A7A0      ;
; Laser. Used by the routine at #R$9F5F.
*$A791 LD HL,$A051   ; Set #REGhl to the variable address for inventory
                     ; indicator
 $A794 JP $A7A0      ;
; Multiple. Used by the routine at #R$9F5F.
*$A797 LD HL,$A052   ; Set #REGhl to the variable address for inventory
                     ; indicator
 $A79A JP $A7A0      ;
; Spray. Used by the routine at #R$9F5F.
*$A79D LD HL,$A053   ; Set #REGhl to the variable address for inventory
                     ; indicator
; This entry point is used by the routines at #R$A78B, #R$A791 and #R$A797.
*$A7A0 LD (HL),$01   ; Set weapon available
 $A7A2 CALL $A212    ; Draw weapon icon in HUD
 $A7A5 CALL $B9D7    ; Change the current weapon of Rex
 $A7A8 RET           ;

; Simulate conveyor belt going up
;
; Used by the routines at #R$947A and #R$A915.
;
; HL Address pointer for tile graphic data
c$A7A9 PUSH HL       ; Save #REGhl
 $A7AA LD C,(HL)     ; Set #REGc to the first byte value
 $A7AB LD E,L        ; {Copy #REGhl to #REGde
 $A7AC LD D,H        ; }
 $A7AD INC HL        ; Increment #REGhl
 $A7AE LD B,$07      ; Set #REGb to loop 7 times
*$A7B0 LD A,(HL)     ; {Copy byte from #REGhl to #REGde
 $A7B1 LD (DE),A     ; }
 $A7B2 INC DE        ; {Increment #REGde and #REGhl
 $A7B3 INC HL        ; }
 $A7B4 DJNZ $A7B0    ; Jump until all 7 bytes copied
 $A7B6 LD A,C        ; {Put the first byte into the last position
 $A7B7 LD (DE),A     ; }
 $A7B8 POP HL        ; Restore #REGhl
 $A7B9 RET           ;

; Simulate conveyor belt going down
;
; Used by the routines at #R$947A and #R$A915.
;
; HL Address pointer for tile graphic data
c$A7BA PUSH HL       ; Save #REGhl
 $A7BB LD DE,$0007   ; {Point #REGhl to the last byte of the tile
 $A7BE ADD HL,DE     ; }
 $A7BF LD C,(HL)     ; Set #REGc to the last byte value
 $A7C0 LD E,L        ; {Copy #REGhl to #REGde
 $A7C1 LD D,H        ; }
 $A7C2 DEC HL        ; Decrement #REGhl
 $A7C3 LD B,$07      ; Set #REGb to loop 7 times
*$A7C5 LD A,(HL)     ; {Copy byte from #REGhl to #REGde
 $A7C6 LD (DE),A     ; }
 $A7C7 DEC DE        ; {Decrement #REGde and #REGhl
 $A7C8 DEC HL        ; }
 $A7C9 DJNZ $A7C5    ; Jump until all 7 bytes copied
 $A7CB POP HL        ; Restore #REGhl
 $A7CC LD (HL),C     ; Put the last byte into the first position
 $A7CD RET           ;

; Computes and show password code for Rex 2
;
; Used by the routine at #R$C95A.
c$A7CE LD HL,($A03E) ; Set #REGhl to the score
 $A7D1 CALL $A402    ; Convert score number to list of charcodes
 $A7D4 LD A,($A0AA)  ; {Set charcode ten thousands of score into 13th position
 $A7D7 LD ($A898),A  ; of password}
 $A7DA LD A,($A0A9)  ; {Set charcode thousands of score into 2nd position of
 $A7DD LD ($A88D),A  ; password}
 $A7E0 LD A,($A0A8)  ; {Set charcode of hundreds of score into 6th position of
 $A7E3 LD ($A891),A  ; password}
 $A7E6 LD A,($A0A7)  ; {Set charcode of tens of score into 10th position of
 $A7E9 LD ($A895),A  ; password}
 $A7EC LD A,($A0A6)  ; {Set charcode of units of score into 8th position of
 $A7EF LD ($A893),A  ; password}
 $A7F2 LD A,($A063)  ; {Convert number of lives to list of charcodes
 $A7F5 LD L,A        ;
 $A7F6 LD H,$00      ;
 $A7F8 CALL $A402    ; }
 $A7FB LD A,($A0A6)  ; {Set charcode of units of lives into 4th position of
 $A7FE LD ($A88F),A  ; password}
 $A801 LD A,($A050)  ; {Set charcode $30 + double fire weapon available into
 $A804 ADD A,$30     ; 1st position of password
 $A806 LD ($A88C),A  ; }
 $A809 LD A,($A051)  ; {Set charcode $30 + laser weapon available into 5th
 $A80C ADD A,$30     ; position of password
 $A80E LD ($A890),A  ; }
 $A811 LD A,($A052)  ; {Set charcode $30 + multiple weapon available into 7th
 $A814 ADD A,$30     ; position of password
 $A816 LD ($A892),A  ; }
 $A819 LD A,($A053)  ; {Set charcode $30 + spray weapon available into 3th
 $A81C ADD A,$30     ; position of password
 $A81E LD ($A88E),A  ; }
 $A821 LD A,($A04D)  ; {Convert shield power to list of charcodes
 $A824 LD L,A        ;
 $A825 LD H,$00      ;
 $A827 CALL $A402    ; }
 $A82A LD A,($A0A7)  ; {Set charcode of tens of shield power into 12th position
 $A82D LD ($A897),A  ; of password}
 $A830 LD A,($A0A6)  ; {Set charcode of units of shield power into 9th position
 $A833 LD ($A894),A  ; of password}
 $A836 LD A,($A06C)  ; {Convert number of smartbomb to list of charcodes
 $A839 LD L,A        ;
 $A83A LD H,$00      ;
 $A83C CALL $A402    ; }
 $A83F LD A,($A0A6)  ; {Set charcode of units of smartbombs into 11th position
 $A842 LD ($A896),A  ; of password}
 $A845 LD B,$0D      ; {For every charcode in the password substract the
 $A847 LD E,$00      ; current number to 9. So 0 => 9 1 => 8 2 => 7 ...
 $A849 LD ($A093),HL ;
 $A84C LD HL,$A88C   ;
*$A84F LD C,(HL)     ;
 $A850 LD A,$39      ;
 $A852 SUB C         ;
 $A853 ADD A,$30     ;
 $A855 LD (HL),A     ; }
 $A856 SUB $30       ; {Set into #REGe the protection code (checksum) Checksum
 $A858 ADD A,E       ; will be the sum of all the digits of the code
 $A859 LD E,A        ; }
 $A85A INC HL        ; Increment address for the next charcode
 $A85B DJNZ $A84F    ; Jump until all charcodes processed
 $A85D LD L,E        ; {Convet checksum to list of charcodes
 $A85E LD H,$00      ;
 $A860 CALL $A402    ; }
 $A863 LD A,($A0A8)  ; {Set the hundreds of checksum into 15th position of
 $A866 LD ($A89A),A  ; password}
 $A869 LD A,($A0A7)  ; {Set the tens of checksum into 16th position of password
 $A86C LD ($A89B),A  ; }
 $A86F LD A,($A0A6)  ; {Set the units of checksum into 14th position of
 $A872 LD ($A899),A  ; password}
 $A875 LD IX,$A884   ; Set #REGix the address for the text definition of
                     ; password
 $A879 LD B,$01      ; Set #REGb the number of lines to draw
 $A87B CALL $A13E    ; Draw windows with password
 $A87E CALL $97EA    ; Reset sound data and wait for FIRE key press
 $A881 JP $9498      ; Jump to init game

; Text definition data for end level code
;
; CODE
b$A884 DEFB $06,$06,$50             ; Color attribute and position of text
 $A887 DEFM "CODE:                " ; #MESSAGE($A887,$A89B)(code)
 $A89C DEFB $00                     ; End marker

; Configure current room
;
; Used by the routines at #R$947A and #R$A915.
c$A89D LD A,$03      ; {Reset channel 3 for explosion sound (modified in Rex
 $A89F LD ($D790),A  ; explosion at routine #R$981F)}
 $A8A2 CALL $A133    ; Initialise time bar loops counter
 $A8A5 LD HL,$E9FF   ; Set #R$A039 to the base address of attribute buffer for
                     ; score points
 $A8A8 LD ($A039),HL ;
 $A8AB CALL $C8EF    ; Configure room connections and enemies of the room
 $A8AE LD HL,$5B60   ; {Reset projectiles configuration data buffer
 $A8B1 LD DE,$5B61   ;
 $A8B4 LD BC,$02ED   ;
 $A8B7 LD (HL),$00   ;
 $A8B9 LDIR          ; }
 $A8BB CALL $C745    ; Initialize graphic and attribute data buffers for
                     ; current room
 $A8BE LD HL,$5860   ; {Reset attribute file for room
 $A8C1 LD DE,$5861   ;
 $A8C4 LD BC,$029F   ;
 $A8C7 LD (HL),$00   ;
 $A8C9 LDIR          ; }
 $A8CB CALL $B205    ; Reset room graphic buffer
 $A8CE CALL $B33E    ; Copy tile graphic into room graphic data
 $A8D1 CALL $A28A    ; Copy room graphic buffer to display file
 $A8D4 CALL $C8BF    ; Copy room color attribute buffer to attribute file
 $A8D7 CALL $CB52    ; Configure static enemies for the current room
 $A8DA XOR A         ; Set #REGa=0
 $A8DB LD ($A017),A  ; Set tilt #0 for arrow keys in room
 $A8DE LD ($A045),A  ; No train generating on room
 $A8E1 LD A,($A0B8)  ; Set #REGa to the current room number
 $A8E4 CP $02        ; {If number of room is $02, $03, $04, $06 or $14 jump to
 $A8E6 JR Z,$A8FD    ; initialize train variables
 $A8E8 CP $03        ;
 $A8EA JR Z,$A8FD    ;
 $A8EC CP $04        ;
 $A8EE JR Z,$A8FD    ;
 $A8F0 CP $06        ;
 $A8F2 JP Z,$A8FD    ;
 $A8F5 CP $14        ;
 $A8F7 JP Z,$A8FD    ; }
 $A8FA JP $A903      ; Jump forward if not
*$A8FD LD HL,$A9F4   ; Set #REGhl to data definition for train
 $A900 CALL $C965    ; Initilaize train in current room
*$A903 CALL $99FA    ; Draw shield power
 $A906 LD A,$01      ; {Set current room configured
 $A908 LD ($A05C),A  ; }
 $A90B RET           ;

; List of rooms in attract-mode
b$A90C DEFB $06,$11,$01,$14,$0A,$17,$1D,$20
 $A914 DEFB $FF

; Main loop for attract-mode
;
; Until a key is pressed, show the list of rooms defined at #R$A90C Used by the
; routine at #R$947A.
c$A915 LD A,$C8      ; {Set #R$A0C3 the loop counter for the showed room = 200
 $A917 LD ($A0C3),A  ; }
*$A91A LD A,($A0C2)  ; Pick up the list number for the next room to show
 $A91D LD E,A        ; {Set #REGa the room number to show
 $A91E LD D,$00      ;
 $A920 LD HL,$A90C   ;
 $A923 ADD HL,DE     ;
 $A924 LD A,(HL)     ; }
 $A925 CP $FF        ; the room number is $FF?
 $A927 JP NZ,$A931   ; Jump if it isn't
 $A92A XOR A         ; {Reset the list number at R$A0C2
 $A92B LD ($A0C2),A  ; }
 $A92E JP $A91A      ; Jump back
*$A931 LD ($A0B8),A  ; Set #R$A0B8 to the room number to display
 $A934 LD A,($A0C2)  ; {Point $A0C2 to the next room on the list
 $A937 INC A         ;
 $A938 LD ($A0C2),A  ; }
 $A93B CALL $A89D    ; Configure current room
*$A93E LD A,($A0C3)  ; Pick up loop counter
 $A941 DEC A         ; Decrement loop counter
 $A942 OR A          ; is zero?
 $A943 JP Z,$A915    ; Jump back if so and show next room
 $A946 LD ($A0C3),A  ; Save loop counter at #R$A0C3
 $A949 CALL $B645    ; Draw enemy projectiles
 $A94C CALL $BA5C    ; Draw enemies
 $A94F CALL $D68C    ; Play sound channels
 $A952 CALL $B33E    ; Copy tile graphic into room graphic data
 $A955 CALL $A28A    ; Copy room graphic buffer to display file
 $A958 CALL $B205    ; Reset room graphic buffer
 $A95B CALL $D68C    ; Play sound channels
 $A95E CALL $D1B9    ; Handle enemy projectile collision with Rex
 $A961 CALL $B96B    ; Update color attribute for weapon icon on HUD
 $A964 CALL $C978    ; Generate train parts: front, middle or rear wagon
 $A967 CALL $C9CA    ; Creates a new mobile enemy on room
 $A96A CALL $9992    ; Update attribute color for score points in HUD
 $A96D CALL $9A4C    ; HUD flash
 $A970 CALL $A0C4    ; Update timer bar in HUD
 $A973 CALL $A477    ; Check fire pressed
 $A976 JP Z,$9498    ; Jump to init game if pressed
 $A979 LD HL,$6758   ; {Rotate left tile $6F. Not used in game
 $A97C LD B,$08      ;
*$A97E RRC (HL)      ;
 $A980 INC HL        ;
 $A981 DJNZ $A97E    ; }
 $A983 LD HL,$6858   ; {Rotate right two times tile $8F. Simulate horizontal
 $A986 LD B,$08      ; conveyor belt
*$A988 RLC (HL)      ;
 $A98A RLC (HL)      ;
 $A98C INC HL        ;
 $A98D DJNZ $A988    ; }
 $A98F LD HL,$64C0   ; Set #REGhl to point to tile $1C graphic data (vertical
                     ; conveyor belt)
 $A992 CALL $A7BA    ; Simulate conveyor belt going down
 $A995 LD HL,$6438   ; Set #REGhl to point to tile $0B graphic data (vertical
                     ; conveyor belt)
 $A998 CALL $A7A9    ; Simulate conveyor belt going up
 $A99B LD HL,$64B0   ; Set #REGhl to point to tile $1A graphic data (vertical
                     ; conveyor belt)
 $A99E CALL $A7BA    ; Simulate conveyor belt going down
 $A9A1 CALL $A55E    ; Update arrow tiles, shield recharger, respawn indicator,
                     ; fire and water effect
 $A9A4 LD A,($A017)  ; {Change tilt arrow tiles
 $A9A7 XOR $01       ;
 $A9A9 LD ($A017),A  ; }
 $A9AC JP $A93E      ; Jump back to the main loop

; Table of position and graphic offset for missile trajectory
;
; Every pair of bytes contains the y-offset and graphic offset to compute the
; missile trajectory and the graphic of the missile. The byte $1E is an end
; marker Byte $0C of projectile configuration buffer contains the index to this
; table
b$A9AF DEFB $FB,$00,$FC,$00,$FD,$04,$FE,$04
 $A9B7 DEFB $FF,$04,$00,$08,$01,$08,$02,$0C
 $A9BF DEFB $03,$0C,$04,$10,$05,$10,$06,$14
 $A9C7 DEFB $07,$14,$08,$14,$1E

; Charset for the corresponding key pressed
;
; The list is ordered based on the port and bit reading to detect the key
; pressed, in the following order:
; .
; Port $FEFE - Port $FDFE - Port $FBFE - Port $DFFE - Port $BFFE - Port $7FFE -
; Port $EFFE - Port $F7FE
t$A9CC DEFM "-ZXCVASDFGQWERTPOIUY+LKJH .MNB-987612345"

; Data definition for train in room
;
; 4 bytes for every sprite that forms the train (one front train, 4 wagons and
; one rear train ) Byte $00: time counter to show sprite $01 type of train $02
; x-position $03 y-position
b$A9F4 DEFB $1E,$85,$E8,$12,$08,$83,$E8,$12
 $A9FC DEFB $08,$83,$E8,$12,$08,$83,$E8,$12
 $AA04 DEFB $08,$83,$E8,$12,$08,$84,$E8,$12
 $AA0C DEFB $08,$FF

; Position offsets for explosion debris
;
; Two pair (x-byte-position, y-pixel-position) offset position for 8 frames
; explosion
b$AA0E DEFB $0A,$1C,$0B,$18,$0C,$16,$0D,$14 ; {Offsets for debris 1
 $AA16 DEFB $0E,$15,$0F,$16,$10,$17,$11,$18 ; }
 $AA1E DEFB $06,$1C,$05,$1A,$04,$18,$03,$16 ; {Offsets for debris 2
 $AA26 DEFB $02,$17,$01,$18,$00,$19,$FF,$1A ; }
 $AA2E DEFB $0A,$2C,$0B,$30,$0C,$34,$0D,$38 ; {Offsets for debris 3
 $AA36 DEFB $0E,$40,$0F,$48,$10,$50,$11,$58 ; }
 $AA3E DEFB $06,$2C,$05,$30,$04,$34,$03,$38 ; {Offsets for debris 4
 $AA46 DEFB $02,$40,$01,$48,$00,$50,$FF,$58 ; }
 $AA4E DEFB $08,$20,$08,$1A,$08,$14,$08,$10 ; {Offsets for debris 5
 $AA56 DEFB $08,$0C,$08,$0A,$08,$08,$08,$07 ; }
 $AA5E DEFB $09,$3A,$09,$3C,$09,$40,$09,$46 ; {Offsets for debris 6
 $AA66 DEFB $09,$4E,$09,$56,$09,$5E,$09,$64 ; }

; Graphic data for explosion debris
b$AA6E DEFB $00,$00,$28,$7C,$38,$7C,$28,$00 ; #UDG$AA6E,$47,2
 $AA76 DEFB $00,$00,$38,$6C,$44,$6C,$38,$00 ; #UDG$AA76,$47,2
 $AA7E DEFB $00,$00,$28,$44,$00,$44,$28,$00 ; #UDG$AA7E,$47,2
 $AA86 DEFB $00,$24,$42,$00,$00,$42,$24,$00 ; #UDG$AA86,$47,2
 $AA8E DEFB $42,$81,$00,$00,$00,$00,$81,$42 ; #UDG$AA8E,$47,2
 $AA96 DEFB $81,$00,$00,$00,$00,$00,$00,$81 ; #UDG$AA96,$47,2
 $AA9E DEFB $00,$01,$80,$00,$00,$00,$00,$00 ; #UDG$AA9E,$47,2
 $AAA6 DEFB $00,$00,$00,$00,$40,$00,$00,$00 ; #UDG$AAA6,$47,2

; Text Definition Data - Start game, game over and in-game windows
;
; The Text Definition Data format is as follows
; .
; #TABLE(default)
; { =h Byte  | =h Content }
; {     $01  | Color attribute of text }
; { =r2 $02  | Bits 7-5: not used }
; {            Bits 4-0: hotizontal position (0-31) }
; { =r2 $03  | Bits 7-3: vertical position (0-24) }
; {            Bits 2-0: not used }
; TABLE#
; .
; PHASE ONE:PROCEED ON FOOT THROUGH UNDERGROUND COMPLEX
b$AAAE DEFB $46,$07,$50           ; Color attribute and position of text
 $AAB1 DEFM "PHASE ONE:PROCEED"   ; #MESSAGE($AAB1,$AAC1)(phase_one)
 $AAC2 DEFB $00                   ; End marker
 $AAC3 DEFB $46,$07,$58           ; Color attribute and position of text
 $AAC6 DEFM "ON FOOT THROUGH"     ; #MESSAGE($AAC6,$AAD4)(on_foot)
 $AAD5 DEFB $00                   ; End marker
 $AAD6 DEFB $46,$07,$60           ; Color attribute and position of text
 $AAD9 DEFM "UNDERGROUND COMPLEX" ; #MESSAGE($AAD9,$AAEB)(underground)
 $AAEC DEFB $00                   ; End marker
; GAME OVER
 $AAED DEFB $43,$05,$40           ; Color attribute and position of text
 $AAF0 DEFM "GAME OVER"           ; #MESSAGE($AAF0,$AAF8)(game_over)
 $AAF9 DEFB $00                   ; End marker
; HI:SCORE
 $AAFA DEFB $45,$07,$60           ; Color attribute and position of text
 $AAFD DEFM "HI:SCORE 0000000"    ; #MESSAGE($AAFD,$AB0C)(hi_score)
 $AB0D DEFB $00                   ; End marker
; HUMANS KILLED
 $AB0E DEFB $45,$09,$80           ; Color attribute and position of text
 $AB11 DEFM "HUMANS KILLED:00000" ; #MESSAGE($AB11,$AB23)(humans_killed)
 $AB24 DEFB $00                   ; End marker
; PRESS FIRE TO BEGIN
 $AB25 DEFB $44,$04,$70           ; Color attribute and position of text
 $AB28 DEFM "PRESS FIRE"          ; #MESSAGE($AB28,$AB31)(press_fire)
 $AB32 DEFB $00                   ; End marker
 $AB33 DEFB $44,$04,$78           ; Color attribute and position of text
 $AB36 DEFM "TO BEGIN  "          ; #MESSAGE($AB36,$AB3F)(to_begin)
 $AB40 DEFB $00                   ; End marker
; SPEED UP
 $AB41 DEFB $46,$03,$28           ; Color attribute and position of text
 $AB44 DEFM "    SPEED UP   "     ; #MESSAGE($AB44,$AB52)(speed_up)
 $AB53 DEFB $00                   ; End marker
; SHIELD LOSS
 $AB54 DEFB $42,$03,$28           ; Color attribute and position of text
 $AB57 DEFM "  SHIELD LOSS  "     ; #MESSAGE($AB57,$AB65)(shield_loss)
 $AB66 DEFB $00                   ; End marker
; 1000 BONUS
 $AB67 DEFB $46,$03,$28           ; Color attribute and position of text
 $AB6A DEFM "   1000 BONUS  "     ; #MESSAGE($AB6A,$AB78)(1000_bonus)
 $AB79 DEFB $00                   ; End marker
; ENERGY LOSS
 $AB7A DEFB $42,$03,$28           ; Color attribute and position of text
 $AB7D DEFM "  ENERGY LOSS  "     ; #MESSAGE($AB7D,$AB8B)(energy_loss)
 $AB8C DEFB $00                   ; End marker
; 100 RAPID SHOTS
 $AB8D DEFB $46,$03,$28           ; Color attribute and position of text
 $AB90 DEFM "100 RAPID SHOTS"     ; #MESSAGE($AB90,$AB9E)(100_rapid_shots)
 $AB9F DEFB $00                   ; End marker
; DOUBLE FIRE
 $ABA0 DEFB $00                   ; Weapon on inventory: $FF Available $00 Not
                                  ; available
 $ABA1 DEFB $01                   ; Number of lines
 $ABA2 DEFB $45,$12,$28           ; Color attribute and position of text
 $ABA5 DEFM "DOUBLE FIRE"         ; #MESSAGE($ABA5,$ABAF)(double_fire)
 $ABB0 DEFB $00                   ; End marker
; LASER
 $ABB1 DEFB $00                   ; Weapon on inventory: $FF Available $00 Not
                                  ; available
 $ABB2 DEFB $01                   ; Number of lines
 $ABB3 DEFB $45,$03,$28           ; Color attribute and position of text
 $ABB6 DEFM "LASER"               ; #MESSAGE($ABB6,$ABBA)(laser)
 $ABBB DEFB $00                   ; End marker
; MULTIPLE
 $ABBC DEFB $00                   ; Weapon on inventory: $FF Available $00 Not
                                  ; available
 $ABBD DEFB $01                   ; Number of lines
 $ABBE DEFB $45,$14,$28           ; Color attribute and position of text
 $ABC1 DEFM "MULTIPLE"            ; #MESSAGE($ABC1,$ABC8)(multiple)
 $ABC9 DEFB $00                   ; End marker
; SPRAY
 $ABCA DEFB $00                   ; Weapon on inventory: $FF Available $00 Not
                                  ; available
 $ABCB DEFB $01                   ; Number of lines
 $ABCC DEFB $45,$12,$28           ; Color attribute and position of text
 $ABCF DEFM "SPRAY"               ; #MESSAGE($ABCF,$ABD3)(spray)
 $ABD4 DEFB $00                   ; End marker

; Not used
s$ABD5 DEFB $80,$40,$20,$10,$08,$04,$02,$01

; Display file lookup table
;
; The value of the Nth entry (0<=N<=191) in this lookup table is the screen
; buffer address for the point with pixel coordinates (x,y)=(0,N), with the
; origin (0,0) at the top-left corner.
b$ABDD DEFB $00,$40,$00,$41,$00,$42,$00,$43
 $ABE5 DEFB $00,$44,$00,$45,$00,$46,$00,$47
 $ABED DEFB $20,$40,$20,$41,$20,$42,$20,$43
 $ABF5 DEFB $20,$44,$20,$45,$20,$46,$20,$47
 $ABFD DEFB $40,$40,$40,$41,$40,$42,$40,$43
 $AC05 DEFB $40,$44,$40,$45,$40,$46,$40,$47
 $AC0D DEFB $60,$40,$60,$41,$60,$42,$60,$43
 $AC15 DEFB $60,$44,$60,$45,$60,$46,$60,$47
 $AC1D DEFB $80,$40,$80,$41,$80,$42,$80,$43
 $AC25 DEFB $80,$44,$80,$45,$80,$46,$80,$47
 $AC2D DEFB $A0,$40,$A0,$41,$A0,$42,$A0,$43
 $AC35 DEFB $A0,$44,$A0,$45,$A0,$46,$A0,$47
 $AC3D DEFB $C0,$40,$C0,$41,$C0,$42,$C0,$43
 $AC45 DEFB $C0,$44,$C0,$45,$C0,$46,$C0,$47
 $AC4D DEFB $E0,$40,$E0,$41,$E0,$42,$E0,$43
 $AC55 DEFB $E0,$44,$E0,$45,$E0,$46,$E0,$47
 $AC5D DEFB $00,$48,$00,$49,$00,$4A,$00,$4B
 $AC65 DEFB $00,$4C,$00,$4D,$00,$4E,$00,$4F
 $AC6D DEFB $20,$48,$20,$49,$20,$4A,$20,$4B
 $AC75 DEFB $20,$4C,$20,$4D,$20,$4E,$20,$4F
 $AC7D DEFB $40,$48,$40,$49,$40,$4A,$40,$4B
 $AC85 DEFB $40,$4C,$40,$4D,$40,$4E,$40,$4F
 $AC8D DEFB $60,$48,$60,$49,$60,$4A,$60,$4B
 $AC95 DEFB $60,$4C,$60,$4D,$60,$4E,$60,$4F
 $AC9D DEFB $80,$48,$80,$49,$80,$4A,$80,$4B
 $ACA5 DEFB $80,$4C,$80,$4D,$80,$4E,$80,$4F
 $ACAD DEFB $A0,$48,$A0,$49,$A0,$4A,$A0,$4B
 $ACB5 DEFB $A0,$4C,$A0,$4D,$A0,$4E,$A0,$4F
 $ACBD DEFB $C0,$48,$C0,$49,$C0,$4A,$C0,$4B
 $ACC5 DEFB $C0,$4C,$C0,$4D,$C0,$4E,$C0,$4F
 $ACCD DEFB $E0,$48,$E0,$49,$E0,$4A,$E0,$4B
 $ACD5 DEFB $E0,$4C,$E0,$4D,$E0,$4E,$E0,$4F
 $ACDD DEFB $00,$50,$00,$51,$00,$52,$00,$53
 $ACE5 DEFB $00,$54,$00,$55,$00,$56,$00,$57
 $ACED DEFB $20,$50,$20,$51,$20,$52,$20,$53
 $ACF5 DEFB $20,$54,$20,$55,$20,$56,$20,$57
 $ACFD DEFB $40,$50,$40,$51,$40,$52,$40,$53
 $AD05 DEFB $40,$54,$40,$55,$40,$56,$40,$57
 $AD0D DEFB $60,$50,$60,$51,$60,$52,$60,$53
 $AD15 DEFB $60,$54,$60,$55,$60,$56,$60,$57
 $AD1D DEFB $80,$50,$80,$51,$80,$52,$80,$53
 $AD25 DEFB $80,$54,$80,$55,$80,$56,$80,$57
 $AD2D DEFB $A0,$50,$A0,$51,$A0,$52,$A0,$53
 $AD35 DEFB $A0,$54,$A0,$55,$A0,$56,$A0,$57
 $AD3D DEFB $C0,$50,$C0,$51,$C0,$52,$C0,$53
 $AD45 DEFB $C0,$54,$C0,$55,$C0,$56,$C0,$57
 $AD4D DEFB $E0,$50,$E0,$51,$E0,$52,$E0,$53
 $AD55 DEFB $E0,$54,$E0,$55,$E0,$56,$E0,$57

; Invert byte lookup table
b$AD5D DEFB $00,$80,$40,$C0,$20,$A0,$60,$E0
 $AD65 DEFB $10,$90,$50,$D0,$30,$B0,$70,$F0
 $AD6D DEFB $08,$88,$48,$C8,$28,$A8,$68,$E8
 $AD75 DEFB $18,$98,$58,$D8,$38,$B8,$78,$F8
 $AD7D DEFB $04,$84,$44,$C4,$24,$A4,$64,$E4
 $AD85 DEFB $14,$94,$54,$D4,$34,$B4,$74,$F4
 $AD8D DEFB $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC
 $AD95 DEFB $1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
 $AD9D DEFB $02,$82,$42,$C2,$22,$A2,$62,$E2
 $ADA5 DEFB $12,$92,$52,$D2,$32,$B2,$72,$F2
 $ADAD DEFB $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA
 $ADB5 DEFB $1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
 $ADBD DEFB $06,$86,$46,$C6,$26,$A6,$66,$E6
 $ADC5 DEFB $16,$96,$56,$D6,$36,$B6,$76,$F6
 $ADCD DEFB $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE
 $ADD5 DEFB $1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
 $ADDD DEFB $01,$81,$41,$C1,$21,$A1,$61,$E1
 $ADE5 DEFB $11,$91,$51,$D1,$31,$B1,$71,$F1
 $ADED DEFB $09,$89,$49,$C9,$29,$A9,$69,$E9
 $ADF5 DEFB $19,$99,$59,$D9,$39,$B9,$79,$F9
 $ADFD DEFB $05,$85,$45,$C5,$25,$A5,$65,$E5
 $AE05 DEFB $15,$95,$55,$D5,$35,$B5,$75,$F5
 $AE0D DEFB $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED
 $AE15 DEFB $1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
 $AE1D DEFB $03,$83,$43,$C3,$23,$A3,$63,$E3
 $AE25 DEFB $13,$93,$53,$D3,$33,$B3,$73,$F3
 $AE2D DEFB $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB
 $AE35 DEFB $1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
 $AE3D DEFB $07,$87,$47,$C7,$27,$A7,$67,$E7
 $AE45 DEFB $17,$97,$57,$D7,$37,$B7,$77,$F7
 $AE4D DEFB $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF
 $AE55 DEFB $1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF

; Offsets table for animated sprites
;
; This offset are added to the graphic data base address of the sprite based on
; x-position bits 2-0
b$AE5D DEFB $00,$00,$30,$30,$60,$60,$90,$90 ; Offsets for Rex, Foot Man,
                                            ; Stomper, Wagon, Pod, rear and
                                            ; front train
 $AE65 DEFB $00,$00,$54,$54,$A8,$A8,$FC,$FC ; Offset for shield
 $AE6D DEFB $00,$00,$24,$24,$48,$48,$6C,$6C ; Offsets for Mine layer
 $AE75 DEFB $00,$10,$20,$30,$40,$50,$60,$70 ; Offsets for Mine and Blob
 $AE7D DEFB $00,$16,$2C,$42,$58,$6E,$84,$9A ; Offsets for Scanner
 $AE85 DEFB $00,$00,$00,$00,$30,$30,$30,$30 ; Offsets for dying Foot Man

; Graphic data for arrows tiles
;
; Tilt #0 graphic data (used in even frames)
b$AE8D DEFB $3E,$3E,$3E,$7F,$3E,$1C,$08,$00 ; #UDG$AE8D,$46,2
 $AE95 DEFB $00,$08,$1C,$3E,$7F,$3E,$3E,$3E ; #UDG$AE95,$46,2
 $AE9D DEFB $08,$1F,$3F,$7F,$3F,$1F,$08,$00 ; #UDG$AE9D,$46,2
 $AEA5 DEFB $10,$F8,$FC,$FE,$FC,$F8,$10,$00 ; #UDG$AEA5,$46,2
; Tilt #1 graphic data (used in odd frames)
 $AEAD DEFB $00,$3E,$3E,$3E,$7F,$3E,$1C,$08 ; #UDG$AEAD,$46,2
 $AEB5 DEFB $08,$1C,$3E,$7F,$3E,$3E,$3E,$00 ; #UDG$AEB5,$46,2
 $AEBD DEFB $10,$3E,$7E,$FE,$7E,$3E,$10,$00 ; #UDG$AEBD,$46,2
 $AEC5 DEFB $08,$7C,$7E,$7F,$7E,$7C,$08,$00 ; #UDG$AEC5,$46,2

; Enemy configuration for every room
;
; Every room spans 3 + 3*n + 1 ($FF) byte. The first 3 bytes defines the mobile
; enemies. The next block of 3 bytes repeats for every static enemy in the
; room.
; #TABLE(default)
; { =h Byte  | =h Content }
; { =r5 $00  | Data for the mobile enemy }
; {            Bit 7: the enemy enters the room from the top }
; {            Bit 6: the enemy enters the room from the right }
; {            Bit 5: the enemy enters the room from the left }
; {            Bits 4-0: max number of enemies on room }
; {     $01  | Enemy enter counter }
; { =r2 $02  | Bits 7: if set, FOOT MAN enters randomly }
; {            Bits 6-0: type of enemy who enters room }
; { =r3 $03  | Bit 7: reverse sprite if set }
; {            Bit 6-0: type of static enemy }
; {            If the value of this byte is $FF there is no more static enemies
; on this room }
; {     $04  | Bits 7-3: horizontal position of sprite in tiles(bytes) }
; {     $05  | Bits 3-0: vertical position of sprote in tiles(bytes) }
; TABLE#
b$AECD DEFB $06,$32,$0C,$0B,$58,$0D,$FF
 $AED4 DEFB $47,$1E,$00,$8B,$98,$0F,$13,$78,$04,$12,$E8,$0B,$14,$08,$08,$FF
 $AEE4 DEFB $C9,$19,$8C,$0A,$40,$0D,$11,$E8,$08,$FF
 $AEEE DEFB $6C,$1E,$00,$01,$A0,$0D,$01,$28,$09,$0F,$C8,$0B,$0F,$C8,$0B,$0F,$C8,$0B,$0F,$C8,$0B,$FF
 $AF04 DEFB $2D,$1E,$00,$01,$C0,$0E,$0F,$E0,$06,$0F,$D8,$06,$0F,$E0,$05,$0F,$D8,$05,$0F,$E0,$07,$0F,$D8,$07,$FF
 $AF1D DEFB $10,$50,$8C,$0F,$A8,$07,$0F,$A0,$09,$0F,$A0,$08,$0F,$90,$07,$0F,$A0,$07,$0F,$88,$07,$12,$50,$0E,$12,$A0,$10,$14,$A0,$10,$FF
 $AF3C DEFB $CA,$46,$8C,$0A,$80,$06,$12,$50,$0E,$8B,$D0,$0C,$FF
 $AF49 DEFB $89,$64,$0C,$8B,$98,$0B,$8B,$C8,$07,$8B,$90,$04,$01,$48,$12,$01,$60,$12,$01,$78,$12,$FF
 $AF5F DEFB $8A,$14,$00,$0A,$B8,$11,$0A,$38,$11,$FF
 $AF69 DEFB $4A,$1E,$8C,$88,$C0,$0A,$0F,$18,$0A,$0F,$10,$0C,$0F,$10,$0D,$0F,$10,$0F,$0F,$18,$0C,$0F,$18,$10,$FF
 $AF82 DEFB $0A,$14,$8C,$10,$28,$1E,$FF
 $AF89 DEFB $EA,$32,$00,$06,$30,$06,$06,$80,$0C,$FF
 $AF93 DEFB $CA,$3C,$0C,$86,$88,$06,$81,$98,$00,$01,$88,$00,$09,$A0,$0A,$12,$D0,$0A,$11,$D0,$0A,$01,$B8,$0D,$FF
 $AFAC DEFB $CA,$64,$0C,$0D,$50,$0C,$11,$A0,$0A,$86,$C8,$06,$86,$B0,$0A,$01,$88,$11,$FF
 $AFBF DEFB $CB,$28,$00,$0B,$50,$0E,$0A,$58,$0A,$06,$98,$07,$0F,$40,$0B,$0F,$48,$0C,$0F,$38,$0D,$0F,$40,$0B,$0F,$48,$0C,$0F,$38,$0D,$FF
 $AFDE DEFB $6A,$28,$8C,$12,$B0,$08,$86,$C8,$0C,$0A,$58,$0A,$8B,$A8,$12,$FF
 $AFEE DEFB $2A,$14,$88,$8B,$A8,$0E,$FF
 $AFF5 DEFB $CF,$14,$00,$0A,$28,$07,$06,$A0,$09,$86,$C0,$0D,$FF
 $B002 DEFB $EC,$1E,$00,$09,$58,$10,$11,$E8,$10,$0A,$70,$04,$09,$98,$0A,$8B,$90,$06,$FF
 $B015 DEFB $AD,$14,$00,$0B,$48,$0C,$0A,$C0,$05,$0A,$B8,$09,$0A,$B8,$0A,$0A,$B8,$0B,$0A,$B8,$0C,$FD,$48,$0F,$FF
 $B02E DEFB $AA,$1E,$00,$09,$90,$06,$13,$30,$07,$FF
 $B038 DEFB $A8,$14,$00,$0A,$D0,$0D,$01,$20,$0A,$0F,$50,$02,$0F,$A8,$06,$0F,$A8,$07,$01,$B8,$12,$FF
 $B04E DEFB $8C,$14,$8C,$01,$48,$0C,$01,$A0,$07,$0B,$38,$0A,$0B,$48,$0D,$FF
 $B05E DEFB $2E,$0E,$00,$01,$38,$0C,$86,$D8,$12,$FF
 $B068 DEFB $8A,$1E,$0C,$8B,$90,$06,$0A,$58,$0E,$FF
 $B072 DEFB $4F,$0A,$8D,$08,$60,$0A,$FF
 $B079 DEFB $6C,$14,$00,$09,$70,$10,$11,$58,$05,$12,$58,$05,$13,$58,$05,$14,$58,$05,$09,$A0,$05,$06,$38,$12,$FF
 $B092 DEFB $6A,$14,$00,$13,$70,$05,$14,$70,$05,$12,$E8,$05,$FF
 $B09F DEFB $6A,$14,$00,$09,$28,$05,$06,$50,$0C,$86,$68,$09,$08,$D8,$11,$FF
 $B0AF DEFB $EC,$08,$00,$0A,$10,$07,$86,$50,$06,$01,$50,$12,$01,$B8,$12,$09,$B8,$0D,$09,$D0,$0D,$FF
 $B0C5 DEFB $4A,$14,$0D,$01,$40,$08,$06,$20,$0C,$11,$70,$06,$13,$70,$06,$12,$D0,$0A,$FF
 $B0D8 DEFB $6A,$14,$8D,$09,$70,$10,$0A,$28,$0B,$86,$90,$0A,$86,$C8,$0D,$08,$40,$0A,$08,$78,$11,$FF
 $B0EE DEFB $6C,$0F,$00,$0A,$28,$08,$09,$58,$06,$14,$70,$06,$11,$70,$06,$11,$A0,$09,$12,$B8,$09,$14,$D0,$09,$FF
 $B107 DEFB $6A,$14,$88,$09,$28,$09,$09,$58,$0F,$09,$D0,$09,$01,$28,$12,$01,$10,$12,$FF
 $B11A DEFB $6A,$0A,$00,$01,$40,$0D,$01,$78,$0A,$01,$A0,$08,$14,$88,$09,$12,$88,$09,$11,$70,$09,$13,$70,$09,$FF

; Room directions and enemy pointers
;
; Every room spans 6 bytes. The first four bytes indicates the connections of
; the room (top, left, bottom and right). A value of $00 indicates no room
; connection
; #TABLE(default)
; { =h Byte  | =h Content }
; {  $00  | Top room }
; {  $01  | Right room }
; {  $02  | Bottom room }
; {  $03  | Left room }
; {  $04 - $05 | Address pointer for enemy configuration on this room }
; TABLE#
b$B133 DEFB $00,$01,$00,$00
 $B137 DEFW $AECD
 $B139 DEFB $00,$0F,$02,$00
 $B13D DEFW $AED4
 $B13F DEFB $00,$03,$00,$00
 $B143 DEFW $AEE4
 $B145 DEFB $00,$04,$00,$00
 $B149 DEFW $AEEE
 $B14B DEFB $00,$05,$00,$00
 $B14F DEFW $AF04
 $B151 DEFB $00,$06,$00,$00
 $B155 DEFW $AF1D
 $B157 DEFB $00,$07,$00,$00
 $B15B DEFW $AF3C
 $B15D DEFB $08,$14,$00,$00
 $B161 DEFW $AF49
 $B163 DEFB $09,$00,$00,$00
 $B167 DEFW $AF5F
 $B169 DEFB $00,$00,$00,$0A
 $B16D DEFW $AF69
 $B16F DEFB $00,$00,$00,$0B
 $B173 DEFW $AF82
 $B175 DEFB $00,$00,$00,$0C
 $B179 DEFW $AF89
 $B17B DEFB $00,$00,$00,$0D
 $B17F DEFW $AF93
 $B181 DEFB $11,$00,$00,$00
 $B185 DEFW $AFAC
 $B187 DEFB $1E,$00,$00,$00
 $B18B DEFW $AFBF
 $B18D DEFB $00,$10,$00,$00
 $B191 DEFW $AFDE
 $B193 DEFB $00,$00,$04,$00
 $B197 DEFW $AFEE
 $B199 DEFB $00,$12,$00,$00
 $B19D DEFW $AFF5
 $B19F DEFB $00,$13,$00,$00
 $B1A3 DEFW $B002
 $B1A5 DEFB $1C,$00,$00,$00
 $B1A9 DEFW $B015
 $B1AB DEFB $18,$15,$00,$00
 $B1AF DEFW $B02E
 $B1B1 DEFB $16,$00,$00,$00
 $B1B5 DEFW $B038
 $B1B7 DEFB $17,$00,$00,$00
 $B1BB DEFW $B04E
 $B1BD DEFB $00,$00,$00,$19
 $B1C1 DEFW $B05E
 $B1C3 DEFB $19,$00,$00,$00
 $B1C7 DEFW $B068
 $B1C9 DEFB $00,$00,$00,$09
 $B1CD DEFW $B072
 $B1CF DEFB $00,$00,$00,$0E
 $B1D3 DEFW $B079
 $B1D5 DEFB $00,$00,$00,$1A
 $B1D9 DEFW $B092
 $B1DB DEFB $00,$1D,$00,$1B
 $B1DF DEFW $B09F
 $B1E1 DEFB $22,$00,$00,$00
 $B1E5 DEFW $B0AF
 $B1E7 DEFB $00,$1F,$00,$00
 $B1EB DEFW $B0C5
 $B1ED DEFB $63,$00,$00,$00
 $B1F1 DEFW $B0D8
 $B1F3 DEFB $00,$00,$00,$1F
 $B1F7 DEFW $B0EE
 $B1F9 DEFB $00,$00,$00,$20
 $B1FD DEFW $B107
 $B1FF DEFB $00,$00,$00,$21
 $B203 DEFW $B11A

; Reset room graphic buffer
;
; Used by the routines at #R$947A, #R$A89D and #R$A915.
c$B205 LD ($A093),SP ;
 $B209 LD SP,$FFFF   ;
 $B20C LD B,$2A      ;
 $B20E LD HL,$0000   ;
*$B211 PUSH HL       ;
 $B212 PUSH HL       ;
 $B213 PUSH HL       ;
 $B214 PUSH HL       ;
 $B215 PUSH HL       ;
 $B216 PUSH HL       ;
 $B217 PUSH HL       ;
 $B218 PUSH HL       ;
 $B219 PUSH HL       ;
 $B21A PUSH HL       ;
 $B21B PUSH HL       ;
 $B21C PUSH HL       ;
 $B21D PUSH HL       ;
 $B21E PUSH HL       ;
 $B21F PUSH HL       ;
 $B220 PUSH HL       ;
 $B221 PUSH HL       ;
 $B222 PUSH HL       ;
 $B223 PUSH HL       ;
 $B224 PUSH HL       ;
 $B225 PUSH HL       ;
 $B226 PUSH HL       ;
 $B227 PUSH HL       ;
 $B228 PUSH HL       ;
 $B229 PUSH HL       ;
 $B22A PUSH HL       ;
 $B22B PUSH HL       ;
 $B22C PUSH HL       ;
 $B22D PUSH HL       ;
 $B22E PUSH HL       ;
 $B22F PUSH HL       ;
 $B230 PUSH HL       ;
 $B231 PUSH HL       ;
 $B232 PUSH HL       ;
 $B233 PUSH HL       ;
 $B234 PUSH HL       ;
 $B235 PUSH HL       ;
 $B236 PUSH HL       ;
 $B237 PUSH HL       ;
 $B238 PUSH HL       ;
 $B239 PUSH HL       ;
 $B23A PUSH HL       ;
 $B23B PUSH HL       ;
 $B23C PUSH HL       ;
 $B23D PUSH HL       ;
 $B23E PUSH HL       ;
 $B23F PUSH HL       ;
 $B240 PUSH HL       ;
 $B241 PUSH HL       ;
 $B242 PUSH HL       ;
 $B243 PUSH HL       ;
 $B244 PUSH HL       ;
 $B245 PUSH HL       ;
 $B246 PUSH HL       ;
 $B247 PUSH HL       ;
 $B248 PUSH HL       ;
 $B249 PUSH HL       ;
 $B24A PUSH HL       ;
 $B24B PUSH HL       ;
 $B24C PUSH HL       ;
 $B24D PUSH HL       ;
 $B24E PUSH HL       ;
 $B24F PUSH HL       ;
 $B250 PUSH HL       ;
 $B251 DJNZ $B211    ;
 $B253 LD SP,($A093) ;
 $B257 RET           ;

; Draw an entity (enemy, object or player)
;
; Used by the routines at #R$969B, #R$9AC5 and #R$BA5C.
c$B258 PUSH DE       ; Save #REGde
 $B259 OR A          ; is entity facing left?
 $B25A JP NZ,$B2C1   ; Jump if so
; Entity facing right. Computes address of graphic data for entity and address
; destination on room buffer
 $B25D LD A,($A0AF)  ; Set #REGa to the x-position of entity
 $B260 AND $07       ; Set #REGa to the bit position of the entity (bits2-0)
 $B262 LD E,A        ; {Set #REGhl to the address pointer of offset for sprite
 $B263 LD D,$00      ; movement
 $B265 ADD HL,DE     ; }
 $B266 LD E,(HL)     ; {Set #REGde to the corresponding offset based on the
 $B267 LD D,$00      ; position of the sprite}
 $B269 POP HL        ; Recover #REGhl (graphics data of the sprite)
 $B26A ADD HL,DE     ; Set #REGhl to the address of the corresponding sprite
                     ; based on the offset
 $B26B LD A,($A0AF)  ; {Computes at #REGhl the address into room graphic data
 $B26E SRL A         ; buffer for the entity
 $B270 SRL A         ;
 $B272 SRL A         ;
 $B274 LD ($A0AF),A  ;
 $B277 PUSH HL       ;
 $B278 LD A,($A0B0)  ;
 $B27B LD L,A        ;
 $B27C LD H,$00      ;
 $B27E ADD HL,HL     ;
 $B27F ADD HL,HL     ;
 $B280 ADD HL,HL     ;
 $B281 ADD HL,HL     ;
 $B282 ADD HL,HL     ;
 $B283 LD DE,$E8FF   ;
 $B286 ADD HL,DE     ;
 $B287 LD A,($A0AF)  ;
 $B28A LD E,A        ;
 $B28B LD D,$00      ;
 $B28D ADD HL,DE     ; }
 $B28E EX DE,HL      ; Exchange #REGde and #REGhl
 $B28F POP HL        ; Recover #REGhl (the address of the corresponding sprite
                     ; based on the offset)
 $B290 PUSH DE       ; Save #REGde
 $B291 LD A,($A0B1)  ; Set #REGa to the width of the sprite (in bytes)
 $B294 LD ($B2B0),A  ; Configure LD opcode at B2AB to set #REGb register to the
                     ; width of the sprite
 $B297 LD A,($A0B2)  ; Set #REGa to the height of the sprite (in pixels)
 $B29A LD ($B2AC),A  ; Configure LD opcode at B2AF to set #REGb register to the
                     ; height of the sprite
 $B29D EX DE,HL      ; Exchange #REGde and #REGhl
 $B29E LD A,($A033)  ; {Check bit for Graphic Data Select
 $B2A1 BIT 7,A       ; }
 $B2A3 JP Z,$B2AA    ; Jump if graphic data is based in animation offsets
 $B2A6 LD DE,($A034) ; Set #REGde to the graphic data for static (non animated)
                     ; sprite
; Entity facing right. Draw entity (enemy, object or Rex)
*$B2AA POP HL        ; Restore #REGhl
 $B2AB LD B,$00      ; Set #REGb to the width of the sprite
*$B2AD PUSH BC       ; {Save #REGbc and #REGhl
 $B2AE PUSH HL       ; }
 $B2AF LD B,$00      ; Set #REGb to the height of the sprite
*$B2B1 LD A,(DE)     ; Set #REGa to the graphic data to copy
 $B2B2 OR (HL)       ; Blend the graphic data with the graphic data on the room
 $B2B3 LD (HL),A     ; Copy graphics data to the room buffer
 $B2B4 INC DE        ; {Increment sprite graphic data and room graphic data
 $B2B5 INC HL        ; destination}
 $B2B6 DJNZ $B2B1    ; Jump back if the are more sprite rows o draw
 $B2B8 POP HL        ; Restore #REGhl
 $B2B9 LD BC,$0020   ; {Increment one row for the room graphic data
 $B2BC ADD HL,BC     ; }
 $B2BD POP BC        ; Restore #REGbc
 $B2BE DJNZ $B2AD    ; Jump back until all rows drawn
 $B2C0 RET           ;
; Entity facing left. Computes address of graphic data for entity and address
; destination on room buffer
*$B2C1 LD A,($A0AF)  ; Set #REGa to the x-position
 $B2C4 LD DE,$0007   ; {Set #REGhl to point to the last byte of the offset
 $B2C7 ADD HL,DE     ; animation}
 $B2C8 AND $07       ; {And substract the position bit2-0 for the sprite
 $B2CA LD E,A        ; x-position to point to the correspondent offset
 $B2CB LD D,$00      ;
 $B2CD AND A         ;
 $B2CE SBC HL,DE     ; }
 $B2D0 LD E,(HL)     ; {Set #REGde to the offset animation value
 $B2D1 LD D,$00      ; }
 $B2D3 POP HL        ; Recover #REGhl (address pointer for graphic data of
                     ; sprite)
 $B2D4 ADD HL,DE     ; And adds the offset
 $B2D5 LD A,($A0AF)  ; {Computes at #REGhl the address into room graphic data
 $B2D8 SRL A         ; buffer for the entity
 $B2DA SRL A         ;
 $B2DC SRL A         ;
 $B2DE LD ($A0AF),A  ;
 $B2E1 PUSH HL       ;
 $B2E2 LD A,($A0B0)  ;
 $B2E5 LD L,A        ;
 $B2E6 LD H,$00      ;
 $B2E8 ADD HL,HL     ;
 $B2E9 ADD HL,HL     ;
 $B2EA ADD HL,HL     ;
 $B2EB ADD HL,HL     ;
 $B2EC ADD HL,HL     ;
 $B2ED LD DE,$E8FF   ;
 $B2F0 ADD HL,DE     ;
 $B2F1 LD A,($A0AF)  ;
 $B2F4 LD E,A        ;
 $B2F5 LD D,$00      ;
 $B2F7 ADD HL,DE     ; }
 $B2F8 EX DE,HL      ; Exchange #REGde an #REGhl
 $B2F9 POP HL        ; Restore #REGhl
 $B2FA PUSH DE       ; Save #REGde
 $B2FB LD A,($A0B1)  ; Set #REGa to the width of the sprite (in bytes)
 $B2FE LD ($B31C),A  ; Configure LD opcode at B317 to set #REGb register to the
                     ; width of the sprite
 $B301 LD A,($A0B2)  ; Set #REGa to the height of the sprite (in pixels)
 $B304 LD ($B318),A  ; Configure LD opcode at B31B to set #REGb register to the
                     ; height of the sprite
 $B307 EX DE,HL      ; Exchange #REGde and #REGhl
 $B308 LD A,($A033)  ; {Check bit for Graphic Data Select
 $B30B BIT 7,A       ; }
 $B30D JP Z,$B314    ; Jump if graphic data is based in animation offsets
 $B310 LD DE,($A034) ; Set #REGde to the graphic data for static (non animated)
                     ; sprite
; Entity facing left. Draw entity (enemy, object or Rex)
*$B314 POP HL        ; Restore #REGhl (address pointer to room graphic buffer)
 $B315 INC HL        ; {Increment address pointer to draw backwards from here
 $B316 INC HL        ; }
 $B317 LD B,$00      ; Set #REGb to the width of the sprite
*$B319 PUSH BC       ; {Save #REGbc and REGhl
 $B31A PUSH HL       ; }
 $B31B LD B,$00      ; Set #REGb to the height of the sprite
*$B31D LD A,(DE)     ; Set #REGa to the byte of the graphic data
 $B31E PUSH DE       ; {Save #REGde and #REGhl
 $B31F PUSH HL       ; }
 $B320 LD E,A        ; {Point graphic value into Invert byte lookup table
 $B321 LD D,$00      ;
 $B323 LD HL,$AD5D   ;
 $B326 ADD HL,DE     ; }
 $B327 LD A,(HL)     ; Set #REGa to the corresponent inverted byte
 $B328 POP HL        ; {Restore #REGhl and #REGde
 $B329 POP DE        ; }
 $B32A OR (HL)       ; Blend byte with graphic data of room
 $B32B LD (HL),A     ; Set graphic data into room
 $B32C INC DE        ; Increment address to graphic data
 $B32D DEC HL        ; Decrement address to room graphic buffer
 $B32E DJNZ $B31D    ; Jump back until the row is completed
 $B330 POP HL        ; Restore #REGhl
 $B331 LD BC,$0020   ; {Add one row to the address pointer for the room graphic
 $B334 ADD HL,BC     ; data}
 $B335 POP BC        ; Restore #REGbc
 $B336 DJNZ $B319    ; Jump back until all the rows has been draw
 $B338 RET           ;

; Copy tile graphic into room graphic data
;
; Used by the routine at #R$B33E.
c$B339 LD SP,($A095) ; Recover #REGsp
 $B33D RET           ;
; Copy tile graphic into room graphic data
; .
; Used by the routines at #R$947A, #R$A89D and #R$A915.
*$B33E LD ($A095),SP ; Save #REGsp to temporal variable #R$A095
 $B342 LD SP,$D962   ; Set #REGsp to point to base address for mapping table of
                     ; tile graphics and room graphic buffer
*$B345 POP HL        ; Point #REGhl to the address in the room graphic buffer
                     ; for the tile
 $B346 POP DE        ; Point #REGde to the tile graphics address
 $B347 LD A,L        ; {Jump back and return from routine if LSB of HL is $FF
 $B348 INC A         ; (end marker)
 $B349 JP Z,$B339    ; }
 $B34C LD BC,$0020   ; Set #REGbc to the increment in room graphics buffer of
                     ; every byte copied Copy the eight bytes of the tile
                     ; graphics data to the corresponent room graphic buffer
                     ; location
 $B34F LD A,(DE)     ; {Copy byte 1, increment tile graphics address and room
 $B350 LD (HL),A     ; graphics address
 $B351 INC DE        ;
 $B352 ADD HL,BC     ; }
 $B353 LD A,(DE)     ; {Copy byte 2, increment tile graphics address and room
 $B354 LD (HL),A     ; graphics address
 $B355 INC DE        ;
 $B356 ADD HL,BC     ; }
 $B357 LD A,(DE)     ; {Copy byte 3, increment tile graphics address and room
 $B358 LD (HL),A     ; graphics address
 $B359 INC DE        ;
 $B35A ADD HL,BC     ; }
 $B35B LD A,(DE)     ; {Copy byte 4, increment tile graphics address and room
 $B35C LD (HL),A     ; graphics address
 $B35D INC DE        ;
 $B35E ADD HL,BC     ; }
 $B35F LD A,(DE)     ; {Copy byte 5, increment tile graphics address and room
 $B360 LD (HL),A     ; graphics address
 $B361 INC DE        ;
 $B362 ADD HL,BC     ; }
 $B363 LD A,(DE)     ; {Copy byte 6, increment tile graphics address and room
 $B364 LD (HL),A     ; graphics address
 $B365 INC DE        ;
 $B366 ADD HL,BC     ; }
 $B367 LD A,(DE)     ; {Copy byte 7, increment tile graphics address and room
 $B368 LD (HL),A     ; graphics address
 $B369 INC DE        ;
 $B36A ADD HL,BC     ; }
 $B36B LD A,(DE)     ; {Copy byte 8, increment tile graphics address and room
 $B36C LD (HL),A     ; graphics address
 $B36D INC DE        ;
 $B36E ADD HL,BC     ; }
 $B36F JP $B345      ; Jump back and copy the next tile

; Rex fires weapon
;
; Used by the routine at #R$947A.
c$B372 LD A,($A012)    ; {Return if FIRE key is hold down
 $B375 OR A            ;
 $B376 RET NZ          ; }
 $B377 LD A,($A05D)    ; {Return if Rex not visible
 $B37A OR A            ;
 $B37B RET Z           ; }
 $B37C LD A,$01        ; {Set FIRE key hold down active
 $B37E LD ($A012),A    ; }
 $B381 CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B384 LD A,($A013)    ; Check Rex weapon type
 $B387 OR A            ; is basic laser?
 $B388 JP Z,$B38D      ; Jump forward if so (no energy loss on fire)
 $B38B LD A,$01        ; Set energy loss quantity to 1
*$B38D CALL $B9EF      ; Handle weapon energy loss
 $B390 LD A,($A040)    ; {Jump forward if not rapid shot active
 $B393 OR A            ;
 $B394 JP Z,$B3A6      ; }
; rapid shot active
 $B397 LD A,($A041)    ; {Decrement rapid shots quantity
 $B39A DEC A           ;
 $B39B LD ($A041),A    ; }
 $B39E OR A            ; {Jump forward if rapid shot not depleted
 $B39F JP NZ,$B3A6     ; }
 $B3A2 XOR A           ; {Rapid shots depleted, inactive rapid shots
 $B3A3 LD ($A040),A    ; }
; check type of weapon
*$B3A6 LD A,($A013)    ; Set #REGa the type of weapon
 $B3A9 CP $04          ; is spray?
 $B3AB JP Z,$B456      ; Jump to handle spray weapon fire
 $B3AE CP $02          ; is laser?
 $B3B0 JP Z,$B41D      ; Jump to handle laser fire
; create projectile for basic laser, double fire and multiple
 $B3B3 CALL $B5A5      ; Create a new projectile for basic laser
 $B3B6 LD (IY+$05),$00 ; Set projectile y-delta to 0
 $B3BA LD A,($A013)    ; Check weapon type
 $B3BD CP $01          ; is double fire?
 $B3BF JP Z,$B40C      ; Jump to handle double fire weapon
 $B3C2 CP $03          ; {Return if weapon type is not multiple
 $B3C4 RET NZ          ; }
 $B3C5 LD A,($A060)    ; {Return if Rex is teleporting
 $B3C8 OR A            ;
 $B3C9 RET NZ          ; }
; handle fire for multiple
 $B3CA LD A,($A014)    ; {Set #REGb the number of drones based on weapon energy
 $B3CD ADD A,$03       ; level
 $B3CF LD B,A          ; }
 $B3D0 LD HL,$5E4E     ; Set #REGhl the address for the drone configuration
                       ; data table
*$B3D3 PUSH BC         ; Save #REGbc
 $B3D4 CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B3D7 LD A,(HL)       ; {Set #R$A093 the x-position of the drone
 $B3D8 LD ($A093),A    ; }
 $B3DB LD A,($A0BB)    ;
 $B3DE LD A,$01        ; {Set #R$A097 direction of projectile left
 $B3E0 LD ($A097),A    ; }
 $B3E3 LD A,($A0B6)    ; {If x-position of drone is greater than x-position of
 $B3E6 CP (HL)         ; Rex then set projectile to move right
 $B3E7 JP NC,$B3EE     ;
 $B3EA XOR A           ;
 $B3EB LD ($A097),A    ; }
*$B3EE LD A,(HL)       ; {if x-position of drone is greater than 240 or less
 $B3EF INC HL          ; than 16 then jump to process the next drone
 $B3F0 CP $F0          ;
 $B3F2 JP NC,$B404     ; }
 $B3F5 LD A,(HL)       ; {Set #R$A095 the y-position of drone
 $B3F6 LD ($A095),A    ; }
 $B3F9 LD A,$03        ; {Set the y-position increment at #R$A099
 $B3FB LD ($A099),A    ; }
 $B3FE XOR A           ; Set #REGa the projectile type to 0
 $B3FF PUSH HL         ; Save #REGhl
 $B400 CALL $B5C1      ; Create a new projectile
 $B403 POP HL          ; Restore #REGhl
*$B404 LD DE,$0002     ; {Point #REGhl to the next drone
 $B407 ADD HL,DE       ; }
 $B408 POP BC          ; Restore #REGbc
 $B409 DJNZ $B3D3      ; Jump back and process next drone
 $B40B RET             ;
; Handle double fire weapon
*$B40C CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B40F LD A,$13        ; {Set into #R$A099 the increment (19) in y-position for
 $B411 LD ($A099),A    ; the new projectile}
 $B414 LD A,($A013)    ; {Reset weapon projectile subtype
 $B417 RES 7,A         ; }
 $B419 CALL $B5C1      ; Create a new projectile
 $B41C RET             ;
; Configure laser projectile
*$B41D CALL $B5A5      ; Create a new projectile
 $B420 LD (IY+$05),$00 ; Set y-delta to 0
 $B424 LD (IY+$0C),$08 ; Set laser counter to create laser #6
 $B428 LD A,(IY+$00)   ; {Set x-position for laser #6
 $B42B LD (IY+$0D),A   ; }
 $B42E LD A,($A068)    ; {Set the laser duration counter
 $B431 DEC A           ;
 $B432 LD (IY+$0E),A   ; }
 $B435 RET             ;

; Configuration data for SCANNER projectiles and REX spray weapon
;
; 4 bytes for every bullet (8 bullets) Bytes $00-$01: offset of the address
; pointer into room buffer data Byte $03: x-delta of projectile Bute $04:
; y-delta of projectile
b$B436 DEFB $01,$00,$08,$00,$FF,$FF,$F8,$00
 $B43E DEFB $00,$00,$00,$08,$00,$00,$00,$F8
 $B446 DEFB $01,$00,$08,$08,$01,$00,$08,$F8
 $B44E DEFB $FF,$FF,$F8,$08,$FF,$FF,$F8,$F8

; Handle spray weapon fire
;
; Used by the routine at #R$B372.
c$B456 LD A,($A014)    ; Set #REGa the energy level of the weapon
 $B459 CP $04          ; {Jump forward if energy level less than 4
 $B45B JP C,$B47D      ; }
 $B45E LD B,$04        ; Set #REGb the number of spray bullets
 $B460 LD HL,$B436     ; Set #REGhl to the address point for data configuration
                       ; of spray projectiles
 $B463 LD A,($A014)    ; {Jump forward if energy level is 4
 $B466 CP $04          ;
 $B468 JP Z,$B46D      ; }
 $B46B LD B,$08        ; If energy level is 5 then the number of bullets to
                       ; fire is 8
*$B46D PUSH BC         ; {Save #REGbc and #REGhl
 $B46E PUSH HL         ; }
 $B46F CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B472 CALL $B5A5      ; Create a new projectile for spray
 $B475 POP HL          ; Restore #REGhl
 $B476 CALL $B4D3      ; Configure spray weapon projectile based on #REGhl data
                       ; pointer
 $B479 POP BC          ; Restore #REGbc
 $B47A DJNZ $B46D      ; Jump until all the spray projectiles configured
 $B47C RET             ;
; create spray projectiles based on energy level
*$B47D CALL $B5A5      ; Create a new projectile for spray
 $B480 LD (IY+$05),$00 ; Set y-delta to 0
 $B484 CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B487 CALL $B5A5      ; Create a new projectile for spray
 $B48A LD A,$01        ; Set #REGa y-delta for projectile
 $B48C CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B48F CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B492 CALL $B5A5      ; Create a new projectile for spray
 $B495 LD A,$FF        ; Set #REGa y-delta for projectile
 $B497 CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B49A LD A,($A014)    ; {Return if weapon energy level is 1
 $B49D CP $01          ;
 $B49F RET Z           ; }
 $B4A0 CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B4A3 CALL $B5A5      ; Create a new projectile for spray
 $B4A6 LD A,$02        ; Set #REGa y-delta for projectile
 $B4A8 CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4AB CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B4AE CALL $B5A5      ; Create a new projectile for spray
 $B4B1 LD A,$FE        ; Set #REGa y-delta for projectile
 $B4B3 CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4B6 LD A,($A014)    ; {Return if weapon energy level is 2
 $B4B9 CP $02          ;
 $B4BB RET Z           ; }
 $B4BC CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B4BF CALL $B5A5      ; Create a new projectile for spray
 $B4C2 LD A,$03        ; Set #REGa y-delta for projectile
 $B4C4 CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4C7 CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B4CA CALL $B5A5      ; Create a new projectile for spray
 $B4CD LD A,$FD        ; Set #REGa y-delta for projectile
 $B4CF CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4D2 RET             ;

; Configure scanner bullet projectile and Rex spray weapon projectile
;
; Used by the routines at #R$B456 and #R$C03A.
;
; HL Address pointer to the configuration data for projectiles
c$B4D3 LD E,(HL)     ; {Set into projectile configuration the offset for the
 $B4D4 INC HL        ; address pointer of the room graphic data
 $B4D5 LD D,(HL)     ;
 $B4D6 LD (IY+$07),E ;
 $B4D9 LD (IY+$08),D ; }
 $B4DC INC HL        ; {Set into projectile configuration the x-delta
 $B4DD LD A,(HL)     ;
 $B4DE LD (IY+$04),A ; }
 $B4E1 INC HL        ; {Set into #REGa the y-delta
 $B4E2 LD A,(HL)     ; }
 $B4E3 INC HL        ; Increment #REGhl
 $B4E4 PUSH HL       ; Save #REGhl
 $B4E5 CALL $B4EA    ; Computes offset into room graphic data based on
                     ; projectile y-delta
 $B4E8 POP HL        ; Restore #REGhl
 $B4E9 RET           ;

; Computes offset into the room graphic data based on projectile y-delta
;
; Used by the routines at #R$B456, #R$B4D3 and #R$BE75.
;
; A Projectile y-delta
c$B4EA LD (IY+$05),A ; Set y-delta
 $B4ED LD E,A        ; {Set offset into #REGhl based on y-delta
 $B4EE LD L,E        ;
 $B4EF RL E          ;
 $B4F1 SBC A,A       ;
 $B4F2 LD H,A        ;
 $B4F3 ADD HL,HL     ;
 $B4F4 ADD HL,HL     ;
 $B4F5 ADD HL,HL     ;
 $B4F6 ADD HL,HL     ;
 $B4F7 ADD HL,HL     ; }
 $B4F8 LD E,(IY+$07) ; {Set #REGde to the base offset $FFFF left $0001 right
 $B4FB LD D,(IY+$08) ; }
 $B4FE ADD HL,DE     ; Adds base offset to #REGhl
 $B4FF LD (IY+$07),L ; {Set computed offset into enemy configuration
 $B502 LD (IY+$08),H ; }
 $B505 RET           ;

; Configure weapon sound and check for weapon free slot
;
; Configure Rex weapon sound. Used by the routines at #R$B372, #R$B456 and
; #R$B64E.
;
; O:IY Address pointer into projectile configuration for new projectile
c$B506 XOR A         ; {Set #R$A07B to playing sound for Rex weapon
 $B507 LD ($A07B),A  ; }
 $B50A LD IY,$5B60   ; Set #REGiy to the address for the rex projectile
                     ; configuration
 $B50E LD E,$1E      ; Set #REGe to the max number of projectiles
 $B510 LD A,($A013)  ; Set #REGa to the in use Rex weapon
 $B513 OR A          ; is basic laser?
 $B514 JP Z,$B51F    ; Jump forward if so
 $B517 CP $01        ; is double fire?
 $B519 JP Z,$B51F    ; Jump forward if so
 $B51C JP $B528      ; Jump to play sound
*$B51F LD A,($A014)  ; {Set #REGe to max number of Rex projectile based on
 $B522 SLA A         ; weapon energy level max num. projectiles = weapon energy
 $B524 SLA A         ; level * 4
 $B526 INC A         ;
 $B527 LD E,A        ; }
; Check if there is a free slot for projectile and configure sound
*$B528 DEC E         ; {Set #REGb to the number of projectiles to check for
 $B529 LD B,E        ; sound play}
*$B52A LD A,(IY+$06) ; Set #REGa to the projectile state
 $B52D OR A          ; is projectile slot free?
 $B52E JP Z,$B53D    ; Jump to play sound
 $B531 LD DE,$000F   ; {Point #REGiy to the next projectile
 $B534 ADD IY,DE     ; }
 $B536 DJNZ $B52A    ; Jump until all projectiles handled
 $B538 LD IY,$03E8   ; No slot available, point #REGiy to rom address
 $B53C RET           ;
; Configure sound
*$B53D PUSH HL       ; Save #REGhl
 $B53E LD A,($A07B)  ; {playing sound for enemy weapon?
 $B541 OR A          ; }
 $B542 JP NZ,$B562   ; Jump if so
 $B545 LD DE,$D763   ; Set #REGde to the address sound data for basic laser,
                     ; double fire and multiple
 $B548 LD A,($A013)  ; {weapon in use is laser?
 $B54B CP $02        ; }
 $B54D CALL Z,$B55A  ; Configure address for his sound data
 $B550 CP $04        ; weapon in use is spray?
 $B552 CALL Z,$B55E  ; Configure address for his sound data
 $B555 CALL $D5E7    ; Configure sound channel and mixer register
 $B558 POP HL        ; Restore #REGhl
 $B559 RET           ;
; Configure address for laser sound data
*$B55A LD DE,$D775   ;
 $B55D RET           ;
; Configure address for spray sound data
*$B55E LD DE,$D77E   ;
 $B561 RET           ;
; Configure address for enemy sound data
*$B562 POP HL        ; Restore #REGhl
 $B563 LD A,($D842)  ; {sound channel 3 in use?
 $B566 CP $FF        ; }
 $B568 RET NZ        ; Return if so
 $B569 LD DE,$D76C   ; Configure address for enemy sound data
 $B56C CALL $D5E7    ; Configure sound channel and mixer register
 $B56F RET           ;
; Check for slot to create a new projectile and play weapon sound if so Used by
; the routines at #R$BA5C, #R$BCDD and #R$C03A.
*$B570 LD A,$01      ; {Set #R$A07B to playing enemy sound data
 $B572 LD ($A07B),A  ; }
 $B575 LD IY,$5D22   ; Set #REGiy to the address for the enemy projectile
                     ; configuration
 $B579 LD E,$14      ; Set #REGe to the max number of projectiles
 $B57B JP $B528      ; Jump back and check if sound need to be played

; Create a new projectile
;
; Used by the routine at #R$C03A.
;
; I:IY Address pointer in the projectile configuration buffer
; I:IX Address pointer in the enemy configuration buffer
c$B57E LD A,(IX+$00)   ; {Set #REGa to the x-position for the laser
 $B581 SUB $10         ; }
 $B583 JP $B589        ; Jump forward
 $B586 LD A,(IX+$00)   ; Set #REGa to the enemy x-position
; This entry point is used by the routine at #R$B57E.
*$B589 LD ($A093),A    ; Set #R$A093 the enemy x-position
 $B58C LD A,$0F        ; Set #REGa to the increment for the y-position
; Creates a new projectile for enemy. Used by the routines at #R$BA5C, #R$BE5B,
; #R$BE75, #R$BE9B and #R$BEB3.
*$B58E LD ($A099),A    ; Set #R$A099 to the increment for the y-position
 $B591 LD A,(IX+$01)   ; {Set #R$A095 to enemy y-position
 $B594 LD ($A095),A    ; }
 $B597 LD A,(IX+$02)   ; {Set #R$A0BB to enemy face direction
 $B59A LD ($A097),A    ; }
 $B59D LD A,($A054)    ; {Set the projectile type to #REGa
 $B5A0 SET 7,A         ; }
 $B5A2 JP $B5C1        ; Jump to create this projectile
; Create a new projectile fired for Rex. Used by the routines at #R$B372 and
; #R$B456.
*$B5A5 LD A,($A0B6)    ; {Set #R$A093 to Rex x-position
 $B5A8 LD ($A093),A    ; }
 $B5AB LD A,($A0B7)    ; {Set #R$A095 to Rex y-position
 $B5AE LD ($A095),A    ; }
 $B5B1 LD A,($A0BB)    ; {Set #R$A0BB to Rex face direction
 $B5B4 LD ($A097),A    ; }
 $B5B7 LD A,$11        ; {Set #R$A099 to the increment for the y-position
 $B5B9 LD ($A099),A    ; }
 $B5BC LD A,($A013)    ; {Set #REGa to Rex weapon number
 $B5BF RES 7,A         ; }
; Create a new projectile in the projectile configuration buffer based on
; predefined values This entry point is used by the routines at #R$B372,
; #R$B589, #R$B64E and #R$BCC6.
*$B5C1 LD (IY+$06),$01 ; Set projectile status to flying
 $B5C5 LD (IY+$0B),A   ; Set the projectile type
 $B5C8 LD A,($A095)    ; Set #REGa to the y-position
 $B5CB LD HL,$A099     ; {Increment y-position
 $B5CE ADD A,(HL)      ; }
 $B5CF LD (IY+$01),A   ; Save y-position of laser to projectile configuration
                       ; buffer
 $B5D2 LD L,A          ; {Computes offset on room buffer for y-position. NOT
 $B5D3 LD H,$00        ; NEEDED HERE!
 $B5D5 ADD HL,HL       ;
 $B5D6 ADD HL,HL       ;
 $B5D7 ADD HL,HL       ;
 $B5D8 ADD HL,HL       ;
 $B5D9 ADD HL,HL       ; }
 $B5DA LD A,($A093)    ; {Increment x-position and save it at projectile
 $B5DD ADD A,$10       ; configuration buffer
 $B5DF LD (IY+$00),A   ; }
 $B5E2 LD A,($A07B)    ; {is Rex firing the wepaon?
 $B5E5 OR A            ; }
 $B5E6 JP NZ,$B5FA     ; Jump if not
 $B5E9 LD A,($A093)    ; {Check bits 2-0 of x-position
 $B5EC AND $07         ; }
 $B5EE CP $06          ; {Decrement y-position of laser when Rex is moving Bits
 $B5F0 JP Z,$B5F7      ; 2-0: $06 and $00 decrement y-position
 $B5F3 OR A            ;
 $B5F4 JP NZ,$B5FA     ;
*$B5F7 DEC (IY+$01)    ; }
*$B5FA LD (IY+$04),$08 ; Set x-delta of laser
 $B5FE LD HL,$0001     ; {Set offset of 1
 $B601 LD (IY+$07),L   ;
 $B604 LD (IY+$08),H   ; }
 $B607 LD A,($A097)    ; {is Rex direction facing right
 $B60A OR A            ; }
 $B60B JP Z,$B623      ; Jump if so
 $B60E LD A,(IY+$00)   ; {Recompute x-position for facing left
 $B611 SUB $10         ;
 $B613 LD (IY+$00),A   ; }
 $B616 LD HL,$FFFF     ; {Recompute x-offset for facing left (-1)
 $B619 LD (IY+$07),L   ;
 $B61C LD (IY+$08),H   ; }
 $B61F LD (IY+$04),$F8 ; Recompute x-delta for facing left
*$B623 LD L,(IY+$01)   ; {Computes offset on room buffer for y-position
 $B626 LD H,$00        ;
 $B628 ADD HL,HL       ;
 $B629 ADD HL,HL       ;
 $B62A ADD HL,HL       ;
 $B62B ADD HL,HL       ;
 $B62C ADD HL,HL       ; }
 $B62D LD A,(IY+$00)   ; {Computes offset on room buffer for x-position
 $B630 SRL A           ;
 $B632 SRL A           ;
 $B634 SRL A           ; }
 $B636 LD E,A          ; {Computes address into room buffer for draw the
 $B637 LD D,$00        ; projectile and save this address into projectile
 $B639 ADD HL,DE       ; configuration buffer
 $B63A LD DE,$E7FF     ;
 $B63D ADD HL,DE       ;
 $B63E LD (IY+$02),L   ;
 $B641 LD (IY+$03),H   ; }
 $B644 RET             ;

; Draw projectiles
;
; Draw Enemy projectiles. Used by the routines at #R$947A and #R$A915.
c$B645 LD IX,$5D22     ; Set #REGix to the base address for enemy projectile
                       ; configuration
 $B649 LD B,$14        ; Set #REGb to the max number of enemy projectiles on
                       ; screen
 $B64B JP $B654        ; Jump forward to read projectile data and draw
; Draw Rex projectiles. Used by the routine at #R$947A.
*$B64E LD IX,$5B60     ; Set #REGix to the base addres for enemy projectile
                       ; configuration
 $B652 LD B,$1E        ; Set #REGb to the max number of Rex projectiles
; Read configuration data and draw projectiles
*$B654 LD A,(IX+$06)   ; Set #REGa the projectile status
 $B657 OR A            ; is destroyed?
 $B658 JP Z,$B6F6      ; Jump if so
 $B65B CP $02          ; just hit?
 $B65D JP Z,$B7BD      ; Jump if so
 $B660 CP $03          ; exploding?
 $B662 JP Z,$B7D8      ; Jump is so The projectile is flying
 $B665 LD L,(IX+$02)   ; {Set #REGhl to the addres location in room graphic
 $B668 LD H,(IX+$03)   ; buffer}
 $B66B LD A,(IX+$0B)   ; Set REG#a the projectile type
 $B66E AND $7F         ;
 $B670 OR A            ; is a basic laser?
 $B671 JP Z,$B893      ; draw basic laser sprite
 $B674 CP $01          ; is a basic laser?
 $B676 JP Z,$B893      ; draw basic laser sprite
 $B679 CP $04          ; is a spray?
 $B67B JP Z,$B867      ; draw spray sprite
 $B67E CP $02          ; is a laser?
 $B680 JP Z,$B8BC      ; draw laser sprite $02
 $B683 CP $03          ; is a multiple?
 $B685 JP Z,$B893      ; draw basic laser sprite
 $B688 CP $06          ; is a laser?
 $B68A JP Z,$B920      ; draw laser sprite $06
 $B68D CP $07          ; is a missile?
 $B68F JP Z,$B7FC      ; draw missile
*$B692 LD A,(IX+$00)   ; Set #REGa the projectile x-position
 $B695 ADC A,(IX+$04)  ; Adds the projectile x-speed
 $B698 LD (IX+$00),A   ; Set the new x-position
 $B69B LD ($A0AF),A    ; Save the x-position at #R$A0AF
 $B69E CP $F8          ; Projectile left room from the right?
 $B6A0 JP NC,$B700     ; Jump if so
 $B6A3 CP $09          ; Projectile left room from the left?
 $B6A5 JP C,$B700      ; Jump if so
 $B6A8 LD A,(IX+$01)   ; Set #REGa the proejctile y-position
 $B6AB ADC A,(IX+$05)  ; Add the projectile y-speed
 $B6AE LD (IX+$01),A   ; Save the new y-position
 $B6B1 LD ($A0B0),A    ; Save the  y-position at #R$A0B0
 $B6B4 CP $C0          ; Projectile left room from the bottom?
 $B6B6 JP NC,$B700     ; Jump if so
 $B6B9 CP $18          ; Projectil left the room from the top?
 $B6BB JP C,$B700      ; Jump if so
 $B6BE LD A,$01        ; {Computes address into the tile type buffer based on
 $B6C0 CALL $A503      ; the computed position of the projectile}
 $B6C3 LD A,(HL)       ; Set #REGa to the tile type impacted by the projectile
 $B6C4 CP $04          ; Is a destructible tile (needs 3 impacts to destroy)?
 $B6C6 JP Z,$B707      ; Jump forward to handle impact
 $B6C9 CP $05          ; Is a destructible tile (needs 2 impascts to destry)?
 $B6CB JP Z,$B707      ; Jump forward to handle impact
 $B6CE CP $06          ; Is a destructible tile (needs 1 impact to destroy)?
 $B6D0 JP Z,$B707      ; Jump forward to handle impact
 $B6D3 CALL $D08B      ; Check if #REGa is a 'background' type tile
 $B6D6 JP NZ,$B794     ; Jump if is not a background tile
; the projectile continue flying
*$B6D9 LD A,(IX+$0B)   ; {the projectile is a missile?
 $B6DC AND $7F         ;
 $B6DE CP $07          ; }
 $B6E0 JP Z,$B6F6      ; Jump and check the next projectile if so
 $B6E3 LD L,(IX+$02)   ; {Computes into #REGhl the addres pointer into room
 $B6E6 LD H,(IX+$03)   ; graphics buffer for the new position of projectile
 $B6E9 LD E,(IX+$07)   ;
 $B6EC LD D,(IX+$08)   ;
 $B6EF ADD HL,DE       ; }
 $B6F0 LD (IX+$02),L   ; {Set into projectile configuration buffer the new
 $B6F3 LD (IX+$03),H   ; address}
; this projectile has been handled, go the next one
*$B6F6 LD DE,$000F     ; Set #REGde to the length of projectile configuration
                       ; buffer
 $B6F9 ADD IX,DE       ; Adds to the previous base address into #REGix
 $B6FB DEC B           ; Decrement #REGb
 $B6FC JP NZ,$B654     ; Jump back if there are projectiles to handle
 $B6FF RET             ;
; the projectile has been destroyed
*$B700 LD (IX+$06),$00 ; Set the projectile status to destroyed
 $B704 JP $B6F6        ; Jump back and check for the next one
; handle destructible tiles
*$B707 BIT 7,(IX+$0B)  ; Check if projectile goes through objects
 $B70B JP NZ,$B6D9     ; Jump back if so and the projectile continue flying
 $B70E LD ($A093),A    ; Set #R$A093 to the destructible tile type
 $B711 INC A           ; Increasee the tile type number (one more impact
                       ; receive)
 $B712 LD (HL),A       ; And set the new tile type into tile type buffer
 $B713 LD DE,$E19F     ; {Computes into #REGhl the offset of the tile to the
 $B716 AND A           ; tile type buffer base address
 $B717 SBC HL,DE       ; }
 $B719 PUSH HL         ; Save #REGhl
 $B71A LD DE,$DE9F     ; {Set #REGa to the tile number into tile counter buffer
 $B71D ADD HL,DE       ; based on the offset previously compted
 $B71E LD A,(HL)       ; }
 $B71F DEC A           ; Decrement #REGa, as tile count begins by 1.
 $B720 LD L,A          ; {Computes into #REGhl the address of the tile into the
 $B721 LD H,$00        ; mapping table of tile graphics and room graphic
 $B723 ADD HL,HL       ; buffer. (every tile mapping spans two words)
 $B724 ADD HL,HL       ;
 $B725 LD DE,$D962     ;
 $B728 ADD HL,DE       ; }
 $B729 LD ($A095),HL   ; Set into #R$A095 this address
 $B72C INC HL          ; {Set #REGde the address for the tile graphic data
 $B72D INC HL          ;
 $B72E LD E,(HL)       ;
 $B72F INC HL          ;
 $B730 LD D,(HL)       ; }
 $B731 PUSH HL         ; Save #REGhl
 $B732 LD HL,$0008     ; {Increment tile graphic data address to point to the
 $B735 ADD HL,DE       ; next tile
 $B736 EX DE,HL        ; }
 $B737 POP HL          ; Restore #REGhl
 $B738 DEC HL          ; {Puts the new addres into the mapping table of tile
 $B739 LD (HL),E       ; graphics and room graphics data
 $B73A INC HL          ;
 $B73B LD (HL),D       ; }
 $B73C EX DE,HL        ; Exchange #REGde and #REGhl
 $B73D LD DE,$63E0     ; {Computes into #REGhl the tile number based on the
 $B740 AND A           ; tile graphic data offset of the tile
 $B741 SBC HL,DE       ;
 $B743 SRL H           ;
 $B745 RR L            ;
 $B747 SRL H           ;
 $B749 RR L            ;
 $B74B SRL H           ;
 $B74D RR L            ; }
 $B74F LD DE,$6BE0     ; {Set into #REGa the color attribute for the tile
 $B752 ADD HL,DE       ;
 $B753 LD A,(HL)       ; }
 $B754 LD ($A097),A    ; Set #R$A097 to the color attribute
 $B757 LD A,($A093)    ; Set #REGa to destructible tile type
 $B75A CP $06          ; is tile type $06?
 $B75C JP NZ,$B764     ; Jump forward if not
 $B75F LD A,$47        ; {Set color attribute to $47 (background color
 $B761 LD ($A097),A    ; attribute)}
*$B764 POP HL          ; Restore #REGhl
 $B765 PUSH HL         ; Save #REGhl
 $B766 LD DE,$5800     ; Set #REGde to attribute file base address
 $B769 ADD HL,DE       ; Adds offset of the tile
 $B76A LD A,($A097)    ; {Set color attribute for the tile in attribute file
 $B76D LD (HL),A       ; }
 $B76E POP HL          ; {Save and restore #REGhl
 $B76F PUSH HL         ; }
 $B770 LD DE,$E4FF     ; {Set color attribute for the tile in attribute buffer
 $B773 ADD HL,DE       ;
 $B774 LD A,($A097)    ;
 $B777 LD (HL),A       ; }
 $B778 POP HL          ; Restore #REGhl
 $B779 LD A,($A093)    ; {If tile type is destructible type $04 or $05 jump
 $B77C CP $04          ; forward
 $B77E JP Z,$B794      ;
 $B781 CP $05          ;
 $B783 JP Z,$B794      ; }
 $B786 LD DE,$E19F     ; {Set tile type to $00 (background) at tile type buffer
 $B789 ADD HL,DE       ;
 $B78A LD (HL),$00     ; }
 $B78C LD DE,($A095)   ; {Reset room graphic address into mapping table
 $B790 XOR A           ;
 $B791 LD (DE),A       ;
 $B792 INC DE          ;
 $B793 LD (DE),A       ; }
; the projectile has just impacted 1
*$B794 LD L,(IX+$02)   ; {Draw impact 1 projectile
 $B797 LD H,(IX+$03)   ;
 $B79A LD (HL),$10     ; }
 $B79C LD (IX+$06),$00 ; Set state of projectile to destroyed
 $B7A0 LD A,($A013)    ; {Check if weapon used is $02
 $B7A3 CP $02          ; }
 $B7A5 JP Z,$B6F6      ; Jump to handle the next projectile
 $B7A8 LD (IX+$06),$02 ; Set impact 1 state for projectile
 $B7AC LD A,($D842)    ; {Sound channel 3 is in use?
 $B7AF CP $FF          ; }
 $B7B1 JP NZ,$B6F6     ; Jump to the next projectile if in use
 $B7B4 LD DE,$D787     ; Set #REGde to impact sound data
 $B7B7 CALL $D5E7      ; Configure sound channel and mixer register
 $B7BA JP $B6F6        ; Jump back to handle next projectile
; the projectile has just impacted 2
*$B7BD LD L,(IX+$02)   ; {Draw impact 2 projectile
 $B7C0 LD H,(IX+$03)   ;
 $B7C3 LD DE,$0020     ;
 $B7C6 AND A           ;
 $B7C7 SBC HL,DE       ;
 $B7C9 LD (HL),$10     ;
 $B7CB ADD HL,DE       ;
 $B7CC LD (HL),$38     ;
 $B7CE ADD HL,DE       ;
 $B7CF LD (HL),$10     ; }
 $B7D1 LD (IX+$06),$03 ; Set projectile status to impact 2
 $B7D5 JP $B6F6        ; Jump back to handle next projectile
; the projectile is exploding
*$B7D8 LD L,(IX+$02)   ; {Draw projectile exploding
 $B7DB LD H,(IX+$03)   ;
 $B7DE LD DE,$0040     ;
 $B7E1 AND A           ;
 $B7E2 SBC HL,DE       ;
 $B7E4 LD DE,$0020     ;
 $B7E7 LD (HL),$10     ;
 $B7E9 ADD HL,DE       ;
 $B7EA LD (HL),$00     ;
 $B7EC ADD HL,DE       ;
 $B7ED LD (HL),$44     ;
 $B7EF ADD HL,DE       ;
 $B7F0 LD (HL),$00     ;
 $B7F2 ADD HL,DE       ;
 $B7F3 LD (HL),$10     ; }
 $B7F5 LD (IX+$06),$00 ; Set projectile status to destroyed
 $B7F9 JP $B6F6        ; Jump back to handle next projectile
; Draw missile projectile
*$B7FC LD L,(IX+$01)   ; {Computes address into room graphic buffer based on x
 $B7FF LD H,$00        ; and y position of projectile
 $B801 ADD HL,HL       ;
 $B802 ADD HL,HL       ;
 $B803 ADD HL,HL       ;
 $B804 ADD HL,HL       ;
 $B805 ADD HL,HL       ;
 $B806 LD E,(IX+$00)   ;
 $B809 SRL E           ;
 $B80B SRL E           ;
 $B80D SRL E           ;
 $B80F LD D,$00        ;
 $B811 ADD HL,DE       ;
 $B812 LD DE,$E7FF     ;
 $B815 ADD HL,DE       ; }
 $B816 LD (IX+$02),L   ; {Puts this address into the projectile configuration
 $B819 LD (IX+$03),H   ; buffer}
 $B81C PUSH HL         ; Save #REGhl
 $B81D LD A,(IX+$0C)   ; Set #REGa to the missile trajectory index
 $B820 LD E,A          ; {Computes the address into the missile trajectory
 $B821 LD D,$00        ; position offset based on the missile trajectory index
 $B823 LD HL,$A9AF     ;
 $B826 ADD HL,DE       ; }
 $B827 LD A,(HL)       ; Set #REGa to the offset y-position of the missile
 $B828 CP $1E          ; is an end marker?
 $B82A JP NZ,$B838     ; Jump if not
 $B82D DEC (IX+$0C)    ; {Point the missile trajectory index to the last offset
 $B830 DEC (IX+$0C)    ; value}
 $B833 LD HL,$A9C9     ; Point #REGhl to the last address into the missile
                       ; trajectory position offset table
 $B836 LD A,$08        ; Set #REGa to the y-offset of $08
*$B838 LD (IX+$05),A   ; Set the y-offset into the projectile configuration
                       ; buffer
 $B83B INC HL          ; Increment the address into the missile trajectory
                       ; position offset
 $B83C LD E,(HL)       ; {Set #REGde to the offset for the missile graphic data
 $B83D LD D,$00        ; }
 $B83F LD HL,$8F4A     ; Set #REGhl to the address for the missile graphic data
                       ; heading right
 $B842 BIT 7,(IX+$04)  ; {Is x-offset is negative then set #REGhl to the
 $B846 JP Z,$B84C      ; address for the missile graphic data heading left
 $B849 LD HL,$8A42     ; }
*$B84C ADD HL,DE       ; {Adds the offset of the missile graphics data and
 $B84D EX DE,HL        ; exchange registers}
 $B84E POP HL          ; Restore #REGhl
 $B84F PUSH BC         ; Save #REGbc
 $B850 LD B,$04        ; {Copy into room graphics data the graphic data of the
*$B852 LD A,(DE)       ; missile
 $B853 LD (HL),A       ;
 $B854 INC DE          ;
 $B855 PUSH DE         ;
 $B856 LD DE,$0020     ;
 $B859 ADD HL,DE       ;
 $B85A POP DE          ;
 $B85B DJNZ $B852      ; }
 $B85D POP BC          ; Restore #REGbc
 $B85E INC (IX+$0C)    ; {Increment the missile trajectory index to the next
 $B861 INC (IX+$0C)    ; pair of offsets}
 $B864 JP $B692        ; Jump back and handle next projectile
; draw spray bullet
*$B867 LD DE,$0040     ; {Init offset to draw
 $B86A AND A           ;
 $B86B SBC HL,DE       ;
 $B86D LD DE,$0020     ; }
 $B870 BIT 7,(IX+$0B)  ; Check subtype of spray bullet
 $B874 JP NZ,$B885     ; Jump if subtype is 1
; draw spray bullet 0
 $B877 LD (HL),$10     ; {Draw spray bullet 0
 $B879 ADD HL,DE       ;
 $B87A LD (HL),$1C     ;
 $B87C ADD HL,DE       ;
 $B87D LD (HL),$38     ;
 $B87F ADD HL,DE       ;
 $B880 LD (HL),$08     ; }
 $B882 JP $B692        ; Jump back
; draw spray bullet 1
*$B885 LD (HL),$00     ; {Draw spray bullet 1
 $B887 ADD HL,DE       ;
 $B888 LD (HL),$10     ;
 $B88A ADD HL,DE       ;
 $B88B LD (HL),$28     ;
 $B88D ADD HL,DE       ;
 $B88E LD (HL),$10     ; }
 $B890 JP $B692        ; Jump back
; draw basic laser-type projectile
*$B893 BIT 7,(IX+$0B)  ; Check laser-type projectile
 $B897 JP NZ,$B8AB     ; Jump to draw basic laser-type 1
; draw basic laser-type 0
 $B89A LD A,(IX+$04)   ; {Set #REGa direction of projectile
 $B89D DEC A           ; }
 $B89E JP M,$B8A6      ; Jump if lase direction is left
 $B8A1 LD (HL),$B7     ; Draw laser sprite
 $B8A3 JP $B692        ; Jump back
*$B8A6 LD (HL),$ED     ; Draw laser sprite
 $B8A8 JP $B692        ; Jump back
; draw basic laser-type 1
*$B8AB LD A,(IX+$04)   ; {Set #REGa direction of projectile
 $B8AE DEC A           ; }
 $B8AF JP M,$B8B7      ; Jump if laser direction is left
 $B8B2 LD (HL),$97     ; Draw laser sprite
 $B8B4 JP $B692        ; Jump back
*$B8B7 LD (HL),$E9     ; Draw laser sprite
 $B8B9 JP $B692        ; Jump back
; draw laser
*$B8BC LD A,(IX+$0E)   ; {Decrement laser duration counter
 $B8BF DEC A           ;
 $B8C0 LD (IX+$0E),A   ; }
 $B8C3 OR A            ; is 0 ?
 $B8C4 JP NZ,$B8CE     ; Jump if not
 $B8C7 LD (IX+$06),$00 ; Destroy laser
 $B8CB JP $B692        ; Jump back for next projectile
*$B8CE LD A,(IX+$0C)   ; Set #REGa to number of laser type $06 extensions
 $B8D1 DEC A           ; {if no need to create more laser type $06 jump back
 $B8D2 OR A            ; and handle next projectile
 $B8D3 JP Z,$B692      ; }
 $B8D6 LD (IX+$0C),A   ; Decrement the laser type $06 counter on projectile
                       ; configuration buffer
 $B8D9 LD A,(IX+$0D)   ; {Set #R$A093 to laser type $06 x-position + 1
 $B8DC INC A           ;
 $B8DD LD ($A093),A    ; }
 $B8E0 LD A,(IX+$01)   ; {Set #R$A095 to laser y-position
 $B8E3 LD ($A095),A    ; }
 $B8E6 LD A,$01        ; {Set laser direction to left at #R$A097
 $B8E8 LD ($A097),A    ; }
 $B8EB BIT 7,(IX+$04)  ; laser x-delta is negative (moving left)?
 $B8EF JP NZ,$B8FE     ; Jump if so
 $B8F2 XOR A           ; {Set laser diretion to right at #R$A097
 $B8F3 LD ($A097),A    ; }
 $B8F6 LD A,($A093)    ; {Substract two byte to x-position of laser
 $B8F9 SUB $10         ;
 $B8FB LD ($A093),A    ; }
*$B8FE XOR A           ; {Set 0 for y-position increment at #R$A099
 $B8FF LD ($A099),A    ; }
 $B902 PUSH IX         ; {Save #REGix and #REGbc
 $B904 PUSH BC         ; }
 $B905 CALL $B506      ; Configure weapon sound and check for weapon free slot
 $B908 XOR A           ; Set #REGa = 0 (used as laser type in nex routine)
 $B909 CALL $B5C1      ; Create a new laser type $06
 $B90C LD A,($A068)    ; {Set laser duration/graphic index from #R$A068
 $B90F LD (IY+$0E),A   ; }
 $B912 LD (IY+$05),$00 ; Set y-delta to 0
 $B916 LD (IY+$0B),$06 ; Set laser type to $06
 $B91A POP BC          ; {Restore #REGbc and #REGix
 $B91B POP IX          ; }
 $B91D JP $B692        ; Jump back and configure next projectile
*$B920 EX DE,HL        ; Exchange #REGde and #REGhl
 $B921 PUSH DE         ; Save #REGde
 $B922 LD A,(IX+$0E)   ; {Point #REGhl to the graphic of laser at #R$B943 base
 $B925 LD E,A          ; on laser graphic index
 $B926 LD D,$00        ;
 $B928 LD HL,$B943     ;
 $B92B ADD HL,DE       ; }
 $B92C LD A,R          ; Set #REGa to semi-random number (R: memory refresh
                       ; register)
 $B92E AND (HL)        ; Apply AND operator to laser graphics
 $B92F POP DE          ; {Puts this random graphics to room graphics buffer
 $B930 LD (DE),A       ; }
 $B931 LD A,(IX+$0E)   ; {Decrement laser graphic index
 $B934 DEC A           ;
 $B935 LD (IX+$0E),A   ; }
 $B938 OR A            ; {if graphic index=0 then set projectile status to
 $B939 JP NZ,$B692     ; destroyed. Then jump back and configure next
 $B93C LD (IX+$06),$00 ; projectile
 $B940 JP $B692        ; }

; Laser graphics
;
; Every byte is a graphic template for the laser
b$B943 DEFB $00,$04,$44,$54,$55,$D5,$DD,$DF
 $B94B DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B953 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B95B DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B963 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

; Update color attribute for weapon icon on HUD
;
; Used by the routines at #R$947A and #R$A915.
c$B96B LD A,($A042)  ; {Return if HDU flash active
 $B96E CP $FF        ;
 $B970 RET NZ        ; }
 $B971 LD HL,($A015) ; Set #REGhl to the pointer into attribute file for the
                     ; weapon icon
 $B974 CALL $B97E    ; Handle icon weapon color change
 $B977 LD HL,($A015) ; {Set #REGhl to the pointer into attribute buffer for the
 $B97A LD DE,$8CFF   ; weapon icon
 $B97D ADD HL,DE     ; }
*$B97E LD A,($A014)  ; {Set #REGa the color attribute based on weapon energy
 $B981 INC A         ; level
 $B982 INC A         ; }
; Set weapon icon in HUD the color attribute at #REGa
*$B983 LD (HL),A     ; {Set color attribute for first row
 $B984 INC HL        ;
 $B985 LD (HL),A     ; }
 $B986 LD DE,$001F   ; {Point #REGhl to the next row
 $B989 ADD HL,DE     ; }
 $B98A LD (HL),A     ; {Set color attribute for the second row
 $B98B INC HL        ;
 $B98C LD (HL),A     ; }
 $B98D RET           ;

; Handle weapon energy increase
;
; Used by the routine at #R$D46C.
;
; I:A The quantity of energy to increase
c$B98E LD HL,$A093   ; {Set #R$A093 to the energy to increase
 $B991 LD (HL),A     ; }
 $B992 LD A,($A014)  ; {Return if weapon energy level equals to 6
 $B995 CP $06        ;
 $B997 RET Z         ; }
 $B998 LD A,($A018)  ; {Increment accumulated weapon energy
 $B99B ADD A,(HL)    ;
 $B99C LD ($A018),A  ; }
 $B99F CP $78        ; {Return if accumulated energy less than 120
 $B9A1 RET C         ; }
 $B9A2 SUB $78       ; {Substract 120 to the accumulated energy
 $B9A4 LD ($A018),A  ; }
 $B9A7 LD A,($A014)  ; {Increment weapon energy level
 $B9AA INC A         ; }
 $B9AB CP $06        ; {If weapon energy level is equal to 6 jump to increase
 $B9AD JP Z,$B9C0    ; the number of weapon that has energy}
 $B9B0 LD ($A014),A  ; Set the new weapon energy level
 $B9B3 SLA A         ; {Set new laser duration based on energy level duration =
 $B9B5 SLA A         ; energy level * 5
 $B9B7 ADD A,$04     ;
 $B9B9 LD ($A068),A  ; }
 $B9BC CALL $A628    ; Initialise drones configuration data buffer
 $B9BF RET           ;
; increase the number of weapons that has energy
*$B9C0 LD A,($A06E)  ; {Increase number of weapons that has energy
 $B9C3 INC A         ; }
 $B9C4 CP $05        ; {Return if number is 5
 $B9C6 RET Z         ; }
 $B9C7 LD ($A06E),A  ; Set the new number into #R$A06E
 $B9CA LD HL,($A015) ; {Increment address into attribute file to point to the
 $B9CD INC HL        ; next weapon icon in HUD
 $B9CE INC HL        ;
 $B9CF LD ($A015),HL ; }
 $B9D2 LD A,$01      ; {Set the new weapon energy level to 1
 $B9D4 LD ($A014),A  ; }
; Change the current weapon for Rex based on accumulated energy. This entry
; point is used by the routines at #R$A79D and #R$B9EF.
*$B9D7 LD HL,$A04F   ; Set #REGhl to point to data buffer for weapons inventory
 $B9DA LD A,($A06E)  ; Set #REGa the accumulated energy weapon
 $B9DD INC A         ; {Set #REGb to the number of weapons that permits the
 $B9DE LD B,A        ; accumulated energy}
 $B9DF LD E,$00      ; Set #REGe the current possible weapon
*$B9E1 LD A,(HL)     ; {Rex has this weapon in inventory?
 $B9E2 OR A          ; }
 $B9E3 JP Z,$B9EA    ; Jump forward if not
 $B9E6 LD A,E        ; {Set this weapon for the current weapon of Rex
 $B9E7 LD ($A013),A  ; }
*$B9EA INC E         ; Increase the weapon number
 $B9EB INC HL        ; Increase the addres to point to the next weapon in
                     ; inventory
 $B9EC DJNZ $B9E1    ; Jump back until looped all the permited weapons for the
                     ; accumulated energy
 $B9EE RET           ;

; Handle weapon energy loss
;
; Used by the routines at #R$B372 and #R$BA3D.
;
; I:A The quantity of energy to loss
c$B9EF LD HL,$A093   ; {Set #R$A093 to the energy to loss
 $B9F2 LD (HL),A     ; }
 $B9F3 LD A,($A014)  ; {Return if weapon energy level equals zero
 $B9F6 OR A          ;
 $B9F7 RET Z         ; }
 $B9F8 LD A,($A018)  ; {Decrement weapon energy
 $B9FB SUB (HL)      ;
 $B9FC LD ($A018),A  ; }
 $B9FF RET P         ; Return if energy still a positive value
; Weapon energy quantity has been depleated
 $BA00 ADD A,$32     ; {Increment weapon energy by 50
 $BA02 LD ($A018),A  ; }
 $BA05 LD A,($A014)  ; {Decrement weapon energy level
 $BA08 DEC A         ; }
 $BA09 OR A          ; {if weapon energy level reaches zero jump forward
 $BA0A JP Z,$BA11    ; }
 $BA0D LD ($A014),A  ; Set the new weapon energy level
 $BA10 RET           ;
; weapon energy level is zero
*$BA11 LD A,($A06E)  ; {Decrement the accumulated energy for weapons
 $BA14 DEC A         ; }
 $BA15 CP $FF        ; {Return if the accumulated energy is alredy zero
 $BA17 RET Z         ; }
 $BA18 LD ($A06E),A  ; Set the new number of accumulated energy for weapon
 $BA1B LD A,$01      ; Set color attribute blue for weapon icon
 $BA1D LD HL,($A015) ; Set #REGhl to point to the current weapon icon HUD in
                     ; attribute file
 $BA20 CALL $B983    ; Set weapon icon in HUD to the color at #REGa (aatribute
                     ; file)
 $BA23 LD HL,($A015) ; {Point #REGhl to the weapon icon into the attribute
 $BA26 LD DE,$8CFF   ; buffer
 $BA29 ADD HL,DE     ; }
 $BA2A CALL $B983    ; Set weapon icon in HUD to the color at #REGa (attribute
                     ; buffer)
 $BA2D LD HL,($A015) ; {Set #R$A015 to point to the previous weapon icon
 $BA30 DEC HL        ;
 $BA31 DEC HL        ;
 $BA32 LD ($A015),HL ; }
 $BA35 LD A,$05      ; {Set weapon energy level to max
 $BA37 LD ($A014),A  ; }
 $BA3A JP $B9D7      ; Jump to change the current weapon for Rex

; Handle double energy loss
;
; Used by the routine at #R$9BDA.
c$BA3D LD B,$02      ; Set loop counter to 2
*$BA3F PUSH BC       ; Save #REGbc
 $BA40 LD A,$32      ; Set #REGa to the energy to loss (50)
 $BA42 CALL $B9EF    ; Handle weapon energy loss
 $BA45 POP BC        ; Restore #REGbc
 $BA46 DJNZ $BA3F    ; Jump back and handle next energy loss
 $BA48 RET           ;

; Initialise weapon data
;
; Used by the routine at #R$947A.
c$BA49 XOR A         ;
 $BA4A LD ($A06E),A  ; Set 0 to the number of weapons that has energy
 $BA4D LD ($A013),A  ; Set the actual weapon of Rex (normal laser)
 $BA50 LD A,$01      ; {Set the current energy level for the windows
 $BA52 LD ($A014),A  ; }
 $BA55 LD HL,$5801   ; {Point to the current weapon icon into attribute file
 $BA58 LD ($A015),HL ; }
 $BA5B RET           ;

; Draw enemies
;
; Used by the routines at #R$947A and #R$A915.
c$BA5C LD IX,$5E66     ; Set #REGix to the base address for enemy configuration
 $BA60 LD A,($A092)    ; {Set #REGb to the max number of enemies in the current
 $BA63 LD B,A          ; room}
*$BA64 PUSH BC         ; Save #REGbc
 $BA65 LD A,(IX+$0C)   ; Check enemy status
 $BA68 OR A            ; Enemy is dead?
 $BA69 JP Z,$BB69      ; Jump if so
 $BA6C LD A,(IX+$09)   ; check enemy type
 $BA6F AND $7F         ;
 $BA71 OR A            ; Enemy is FOOT MAN?
 $BA72 JP NZ,$BAD0     ; Jump forward if not
; Enemy is FOOT MAN
 $BA75 LD HL,$7F72     ; Set #REGhl to address pointer for FOOT MAN graphic
                       ; data
 $BA78 LD A,(IX+$03)   ; Check jumping state for FOOT MAN
 $BA7B OR A            ; is jumping?
 $BA7C JP NZ,$BA86     ; Jump if so?
 $BA7F LD A,(IX+$06)   ; Check falling state for FOOT MAN
 $BA82 OR A            ; is falling?
 $BA83 JP Z,$BA89      ; Jump if not
*$BA86 LD HL,$6018     ; Point #REGhl to address pointer to graphic data for
                       ; FOOTMAN falling or jumping
*$BA89 LD (IX+$16),L   ; {Set address for enemy graphic data
 $BA8C LD (IX+$17),H   ; }
 $BA8F LD A,(IX+$12)   ; {FOOTMAN walker is crouched?
 $BA92 CP $02          ; }
 $BA94 JP Z,$BAD0      ; Jump forward and no fire?
 $BA97 BIT 7,(IX+$09)  ; Check type of FOOT MAN
 $BA9B JP Z,$BAA9      ; Jump if FOOT MAN Walking
; FOOT MAN is crouched and check if will fire the weapon
 $BA9E CALL $A375      ; Computes random number on #REGa
 $BAA1 CP $F0          ; {no fire weapon if random number is < $F0
 $BAA3 JP C,$BAD0      ; }
 $BAA6 JP $BAB1        ; Jump to fire weapon
; FOOT MAN is walking and check if will fire the weapon
*$BAA9 CALL $A375      ; Computes random number on #REGa
 $BAAC CP $FE          ; {no fire weapon if random number is < $FE
 $BAAE JP C,$BAD0      ; }
; FOOT MAN fire the weapon
*$BAB1 CALL $B570      ; Play enemy weapon sound
 $BAB4 LD A,(IX+$00)   ; {Set x-position of enemy in #R$A093
 $BAB7 LD ($A093),A    ; }
 $BABA XOR A           ; {Set #R$A054 to the type of projectile for the enemy
 $BABB LD ($A054),A    ; }
 $BABE LD A,$0E        ; Set #REGa to the increment of y-position for the
                       ; projectile of FOOT MAN walking
 $BAC0 BIT 7,(IX+$09)  ; is FOOT MAN walking?
 $BAC4 JP Z,$BAC9      ; Jump if so
 $BAC7 LD A,$11        ; Set #REGa to the increment of y-position for the
                       ; projectile of FOOT MAN crouched
*$BAC9 CALL $B58E      ; Create a new laser projectile for FOOT MAN
 $BACC LD (IY+$05),$00 ; Set y-delta of projectile to $00
; Prepares to draw the enemy
*$BAD0 LD A,(IX+$00)   ; {Set #R$A0AF to the x-position of the enemy
 $BAD3 LD ($A0AF),A    ; }
 $BAD6 LD A,(IX+$01)   ; {Set #R$A0B0 to the y-position of the enemy
 $BAD9 LD ($A0B0),A    ; }
 $BADC LD A,(IX+$0E)   ; {Set #R$A0B1 to the width (in bytes) of the enemy
 $BADF LD ($A0B1),A    ; sprite}
 $BAE2 LD A,(IX+$0F)   ; {Set #R$A0B2 to the height (in pixels) of the enemy
 $BAE5 LD ($A0B2),A    ; sprite}
 $BAE8 LD A,(IX+$09)   ; {Set #R$A033 to the enemy type
 $BAEB LD ($A033),A    ; }
 $BAEE LD L,(IX+$04)   ; {Set #$A034 to the graphic data address for the enemy
 $BAF1 LD H,(IX+$05)   ; (static - not animated)
 $BAF4 LD ($A034),HL   ; }
 $BAF7 LD L,(IX+$0A)   ; {Set #REGhl to address pointer of base address for
 $BAFA LD H,(IX+$0B)   ; animated sprite}
 $BAFD LD E,(IX+$16)   ; {Set #REGde to address pointer for animation offset
 $BB00 LD D,(IX+$17)   ; based on previous address}
 $BB03 LD A,(IX+$09)   ; Set #REGa to enemy type
 $BB06 AND $7F         ; {is enemy type $01 - STOMPER or $08 - SCANNER set
 $BB08 CP $01          ; #REGa to enemy direction to $00 (right) and jump to
 $BB0A JP Z,$BB12      ; draw the enemy
 $BB0D CP $08          ;
 $BB0F JP NZ,$BB16     ;
*$BB12 XOR A           ;
 $BB13 JP $BB19        ; }
*$BB16 LD A,(IX+$02)   ; Set #REGa to enemy direction
*$BB19 CALL $B258      ; Draw enemy
 $BB1C CALL $C5B6      ; Handle FOOT MAN walking/crouch state change
 $BB1F CALL $C577      ; Handle FOOT MAN walking/stand-by state change
 $BB22 LD A,(IX+$09)   ; {Enemy destroyed?
 $BB25 CP $FF          ; }
 $BB27 JP Z,$BD6B      ; Handle explosion
 $BB2A CP $06          ; Foot Man is dying?
 $BB2C JP Z,$BD44      ; Handle dying Foot Man 6
 $BB2F CP $05          ; is front train?
 $BB31 JP Z,$BC0F      ; check rear train for shot
 $BB34 CP $04          ; is rear train?
 $BB36 JP Z,$BC30      ; check front train for shot
; This entry point is used by the routine at #R$BD44.
*$BB39 LD A,(IX+$09)   ; {Object type is bubble?
 $BB3C CP $FE          ; }
 $BB3E CALL Z,$BED3    ; Handle bubble bouncing and burst
 $BB41 LD A,(IX+$09)   ; {Check object type
 $BB44 AND $7F         ; }
 $BB46 CP $09          ; is swing gun?
 $BB48 JP Z,$BCDD      ; Handle swing gun
 $BB4B CP $0A          ; is shooter?
 $BB4D JP Z,$BC92      ; Handle shooter
 $BB50 CP $0B          ; is launcher?
 $BB52 JP Z,$BC65      ; Handle launcher
 $BB55 CP $10          ; is boss?
 $BB57 JP Z,$BB74      ; Handle boss
 $BB5A CALL $C620      ; Handler for enemies going up: SCANNER, POD, MINE LAYER
                       ; and FOOTMAN Jumping
 $BB5D CALL $C6C2      ; Handler for enemies going down: SCANNER and FOOTMAN
                       ; falling
 $BB60 CALL $C72B      ; Obtain the tile type address pointer under the entity
 $BB63 CALL $BFEF      ; Handle lateral movement for FOOTMAN, STOMPER, MINE,
                       ; SCANNER, POD, MINE LAYER and BLOB
; This entry point is used by the routine at #R$BCDD.
*$BB66 CALL $D215      ; Handle collision detection of enemy with Rex and
                       ; projectiles
; Prepare to process the next enemy
*$BB69 LD DE,$0018     ; {Point #REGix to the next enemy configuration
 $BB6C ADD IX,DE       ; }
 $BB6E POP BC          ; Restore #REGbc
 $BB6F DEC B           ; Decrement enemy counter
 $BB70 JP NZ,$BA64     ; If there are enemies on the room go back and draw them
 $BB73 RET             ; Return if not
; Handle boss
*$BB74 LD A,(IX+$01)   ; Set #REGa to y-pixel-position
 $BB77 CP $90          ; is y-pixel-position greater than $90?
 $BB79 JP NC,$BBDB     ; Jump if so
 $BB7C LD A,(IX+$11)   ; Set #REGa to Boss direction
 $BB7F OR A            ; is boss moving down?
 $BB80 JP NZ,$BBA5     ; Jump if so and try to shot lasers
 $BB83 LD A,(IX+$13)   ; Set #REGa to boss prepared to release a mine
 $BB86 OR A            ; is boss prepared to release a mine?
 $BB87 JP NZ,$BBA5     ; Jump if not and try to shot lasers
; try to release a mine
 $BB8A CALL $A375      ; Set #REGa a pseudo-random number
 $BB8D CP $F0          ; is pseudo-random number less than $F0?
 $BB8F JP C,$BBA5      ; Jump if so
 $BB92 LD A,(IX+$00)   ; {Set into #R$A093 the x-pixel-position of the mine
 $BB95 ADD A,$08       ;
 $BB97 LD ($A093),A    ; }
 $BB9A LD A,(IX+$01)   ; {Set into #R$A095 the y-pixel-poistion of the mine
 $BB9D ADD A,$30       ;
 $BB9F LD ($A095),A    ; }
 $BBA2 CALL $C1F4      ; Configure a mine
; try to shot lasers
*$BBA5 LD A,R          ; {Set #REGa a pseudo-random number from 0 to F
 $BBA7 AND $0F         ; }
 $BBA9 OR A            ; is random number 0?
 $BBAA JP NZ,$BBDB     ; Jump if not
 $BBAD LD HL,$BE53     ; Set #REGhl to the base address for y-pixel-offset of
                       ; laser positions for boss healed
 $BBB0 LD A,(IX+$12)   ; Set #REGa to the boss state
 $BBB3 CP $01          ; is boss wounded?
 $BBB5 JP NZ,$BBBB     ; Jump if not?
 $BBB8 LD HL,$BE56     ; Set #REGhl to the base address for y-pixel-offset of
                       ; laser positions for boss wounded
; create new laser
*$BBBB PUSH HL         ; Save #REGhl
 $BBBC CALL $B570      ; Play weapon sound
 $BBBF POP HL          ; Restore #REGhl
 $BBC0 LD A,(IX+$00)   ; {Set #R$A093 the x-pixel-position of the laser
 $BBC3 ADD A,$20       ;
 $BBC5 LD ($A093),A    ; }
 $BBC8 LD A,(HL)       ; Set #REGa to the y-pixel-offset of the laser
 $BBC9 CP $FF          ; is end marker?
 $BBCB JP Z,$BBDB      ; Jump is so
 $BBCE PUSH HL         ; Save #REGhl
 $BBCF CALL $B58E      ; Draw/create projectile
 $BBD2 POP HL          ; Restore #REGhl
 $BBD3 INC HL          ; Increment address for laser y-pixel-offset
 $BBD4 LD (IY+$0B),$00 ; Set the weapon type to projectile configuration buffer
 $BBD8 JP $BBBB        ; Jump back and create new laser
; move boss
*$BBDB LD A,(IX+$11)   ; {is Boss moving up?
 $BBDE OR A            ; }
 $BBDF JP Z,$BBE5      ; Jump to move up
 $BBE2 JP $BBFA        ; Jump to move down
; move boss up
*$BBE5 LD A,(IX+$01)   ; {Set the new y-pixel-position of Boss based on Boss
 $BBE8 SUB (IX+$12)    ; speed
 $BBEB LD (IX+$01),A   ; }
 $BBEE CP $40          ; is y-pixel-position greater than $40?
 $BBF0 JP NC,$BB66     ; Jump back and handle another enemy
 $BBF3 LD (IX+$11),$01 ; Set boss to move down
 $BBF7 JP $BB66        ; Jump back and handle another enemy
; move boss down
*$BBFA LD A,(IX+$01)   ; {Set the new y-pixel-position of Boss based on Boss
 $BBFD ADD A,(IX+$12)  ; speed
 $BC00 LD (IX+$01),A   ; }
 $BC03 CP $78          ; is y-pixel-position less than $78?
 $BC05 JP C,$BB66      ; Jump back and handle another enemy
 $BC08 LD (IX+$11),$00 ; Set boss to move up
 $BC0C JP $BB66        ; Jump back and handle another enemy
; check front train for shot
*$BC0F CALL $A375      ; Set #REGa to pseudo random number
 $BC12 CP $F0          ; is random number less than $F0?
 $BC14 JP C,$BB39      ; Jump back and continue to process another enemy if it
                       ; is
 $BC17 CALL $B570      ; Play laser sound
 $BC1A LD A,(IX+$00)   ; {Set #R$A093 to x-position of enemy
 $BC1D LD ($A093),A    ; }
 $BC20 XOR A           ; {Set projectile type to $0
 $BC21 LD ($A054),A    ; }
 $BC24 LD A,$0F        ; Set y-position-increment
 $BC26 CALL $B58E      ; Create a new laser
 $BC29 LD (IY+$05),$00 ; Set y-delta for projectile to 0
 $BC2D JP $BB39        ; Jump back and continue to process another enemy
; check rear train for shot
*$BC30 CALL $A375      ; Set #REGa to pseudo random number
 $BC33 CP $F0          ; is random number less than $F0?
 $BC35 JP C,$BB39      ; Jump back and continue to process another enemy if it
                       ; is
 $BC38 CALL $B570      ; Play laser sound
 $BC3B LD (IX+$02),$00 ; Set sprite to no reverse temp.
 $BC3F LD A,(IX+$00)   ; {Set #R$A093 to x-position of enemy
 $BC42 LD ($A093),A    ; }
 $BC45 XOR A           ; {Set projectile type to $0
 $BC46 LD ($A054),A    ; }
 $BC49 LD A,$0E        ; Set y-position-increment
 $BC4B CALL $B58E      ; Create a new laser
 $BC4E LD (IY+$05),$00 ; Set y-delta for projectile to 0
 $BC52 CALL $B570      ; Play laser sound
 $BC55 LD A,$10        ; Set y-position-increment
 $BC57 CALL $B58E      ; Create a new laser
 $BC5A LD (IY+$05),$00 ; Set y-delta for projectile to 0
 $BC5E LD (IX+$02),$01 ; Set normal reverse for rear train
 $BC62 JP $BB39        ; Jump back and continue to process another enemy
; handle launcher
*$BC65 CALL $A388      ; Set #REGa a pseudo random number
 $BC68 CP $64          ; is random number less than $64?
 $BC6A JP C,$BB66      ; Jump back and process another enemy
 $BC6D DEC (IX+$11)    ; Decrement launch counter
 $BC70 JP NZ,$BB66     ; Jump back and process another enemy if counter ahs not
                       ; reached 0
 $BC73 LD A,(IX+$12)   ; {Reset launch counter
 $BC76 LD (IX+$11),A   ; }
 $BC79 CALL $B570      ; Play weapon sound
 $BC7C LD A,(IX+$00)   ; {Set #R$A093 the x-pixel-position of projectile
 $BC7F LD ($A093),A    ; }
 $BC82 LD A,$08        ; Set #REGa to the y-pixel-position increment
 $BC84 CALL $B58E      ; Draw/create projectile
 $BC87 LD (IY+$0B),$87 ; Set type of projectile
 $BC8B LD (IY+$0C),$00 ; Set projectile trajectory counter
 $BC8F JP $BB66        ; Jump back and process another enemy
; handle shooter
*$BC92 CALL $A375      ; Set #REGa a pseudo random number
 $BC95 CP $64          ; is random number less than $64?
 $BC97 JP C,$BB66      ; Jump back and process another enemy
 $BC9A DEC (IX+$11)    ; Decrement shot counter
 $BC9D JP NZ,$BB66     ; Jump back and process another enemy if counter ahs not
                       ; reached 0
 $BCA0 LD A,(IX+$12)   ; {Reset shot counter
 $BCA3 LD (IX+$11),A   ; }
 $BCA6 CALL $B570      ; Play weapon sound
 $BCA9 XOR A           ; {Shot laser right direction
 $BCAA LD ($A097),A    ; }
 $BCAD LD A,(IX+$00)   ; Set #REGa the x-pixel-position for laser
 $BCB0 CALL $BCC6      ; Configure laser in right direction
 $BCB3 CALL $B570      ; Play weapon sound
 $BCB6 LD A,$01        ; {Shot laser left direction
 $BCB8 LD ($A097),A    ; }
 $BCBB LD A,(IX+$00)   ; {Set #REGa the x-pixel-position for laser
 $BCBE SUB $08         ; }
 $BCC0 CALL $BCC6      ; Configure laser in left direction
 $BCC3 JP $BB66        ; Jump back and process another enemy
; Configure laser for SHOOTER
*$BCC6 LD ($A093),A    ; Set #R$A093 the x-pixel-position for laser
 $BCC9 LD A,$0F        ; {Set #R$A099 the increment y-pixel-position
 $BCCB LD ($A099),A    ; }
 $BCCE LD A,(IX+$01)   ; {Set #R$A095 the y-pixel-position for laser
 $BCD1 LD ($A095),A    ; }
 $BCD4 XOR A           ; Set wepaon type to 0 (laser)
 $BCD5 CALL $B5C1      ; Draw/Create laser
 $BCD8 LD (IY+$05),$00 ; Set y-delta of laser to 0
 $BCDC RET             ;
; Handle swing gun
*$BCDD LD E,(IX+$11)   ; {Set #REGde swing gun orientation
 $BCE0 LD D,$00        ; }
 $BCE2 LD HL,$BECB     ; {Set #REGhl to graphic data address based on swing gun
 $BCE5 ADD HL,DE       ; orientation
 $BCE6 LD E,(HL)       ;
 $BCE7 LD D,$00        ;
 $BCE9 LD HL,$8EAA     ;
 $BCEC ADD HL,DE       ; }
 $BCED LD (IX+$04),L   ; {Save this address to enemy configuration
 $BCF0 LD (IX+$05),H   ; }
 $BCF3 LD A,(IX+$12)   ; Set #REGa to the type of swing gun
 $BCF6 OR A            ; is mobile gun?
 $BCF7 JP Z,$BD02      ; Jump if so
 $BCFA CALL $A375      ; Set #REGa a pseudo random number
 $BCFD CP $14          ; is number less than $14
 $BCFF JP NC,$BD2A     ; Jump if not
; fire gun
*$BD02 LD A,$04        ; {Set #R$A054 the type of shot
 $BD04 LD ($A054),A    ; }
 $BD07 CALL $B570      ; Play weapon sound
 $BD0A LD A,(IX+$11)   ; Check swing gun orientation
 $BD0D OR A            ; is 0?
 $BD0E CALL Z,$BE5B    ; Configure projectile for swing gun left orientation.
 $BD11 CP $01          ; is 1?
 $BD13 CALL Z,$BE75    ; Configure projectile for swing gun left bottom
                       ; orientation.
 $BD16 CP $03          ; is 3?
 $BD18 CALL Z,$BE9B    ; Configure projectile for swing gun right bottom
                       ; orientation.
 $BD1B CP $04          ; is 4?
 $BD1D CALL Z,$BEB3    ; Configure projectile for swing gun right orientation.
 $BD20 CP $05          ; is 5?
 $BD22 CALL Z,$BE9B    ; Configure projectile for swing gun right bottom
                       ; orientation.
 $BD25 CP $07          ; is 7?
 $BD27 CALL Z,$BE75    ; Configure projectile for swing gun left bottom
                       ; orientation.
; check gun orientation
*$BD2A LD A,(IX+$12)   ; Set #REGa to the type of swing gun
 $BD2D OR A            ; is mobile gun?
 $BD2E JP NZ,$BB66     ; Jump back and process next enemy if fixed gun
 $BD31 LD A,(IX+$11)   ; {Increment orientation of gun
 $BD34 INC A           ;
 $BD35 LD (IX+$11),A   ; }
 $BD38 CP $08          ; orientation is 8?
 $BD3A JP NZ,$BB66     ; Jump back and process next enemy if not
 $BD3D LD (IX+$11),$00 ; Reset orientation
 $BD41 JP $BB66        ; Jump back and process next enemy
; Handle Foot Man dying 6
*$BD44 LD A,(IX+$11)   ; Set #REGa to state change counter
 $BD47 CP $04          ; counter is 4?
 $BD49 JP NZ,$BD5E     ; Jump if not
 $BD4C LD HL,$AE85     ; {Set address for animation offsets of dying foot man
 $BD4F LD (IX+$0A),L   ;
 $BD52 LD (IX+$0B),H   ; }
 $BD55 LD HL,$8692     ; {Set graphic data for dying Foot man 7
 $BD58 LD (IX+$16),L   ;
 $BD5B LD (IX+$17),H   ; }
*$BD5E DEC (IX+$11)    ; Decrement state change counter
 $BD61 JP NZ,$BB39     ; If not zero jump back and continue to process other
                       ; enemies
 $BD64 LD (IX+$09),$07 ; Set enemy type to FOOT MAN dying 7
 $BD68 JP $BB39        ; Jump back and continue to process other enemies
; Handle explosion and configure gift: bubble, smartbomb or question
; .
; Handle debris expansion
*$BD6B LD HL,$AA0E     ; Set #REGhl to the offset of positions for debris 1
 $BD6E CALL $BF66      ; Handle debris movement and draw it
 $BD71 LD HL,$AA1E     ; Set #REGhl to the offset of positions for debris 2
 $BD74 CALL $BF66      ; Handle debris movement and draw it
 $BD77 LD HL,$AA2E     ; Set #REGhl to the offset of positions for debris 3
 $BD7A CALL $BF66      ; Handle debris movement and draw it
 $BD7D LD HL,$AA3E     ; Set #REGhl to the offset of positions for debris 4
 $BD80 CALL $BF66      ; Handle debris movement and draw it
 $BD83 LD HL,$AA4E     ; Set #REGhl to the offset of positions for debris 5
 $BD86 CALL $BF66      ; Handle debris movement and draw it
 $BD89 LD HL,$AA5E     ; Set #REGhl to the offset of positions for debris 6
 $BD8C CALL $BF66      ; Handle debris movement and draw it
 $BD8F INC (IX+$03)    ; Increment explosion debris counter
; Draw central explosion
 $BD92 LD A,(IX+$00)   ; {Set #R$A0AF the x-pixel-position of the explosion
 $BD95 LD ($A0AF),A    ; }
 $BD98 LD A,(IX+$01)   ; {Set #R$A0AF the x-pixel-position of the explosion
 $BD9B LD ($A0B0),A    ; }
 $BD9E CALL $CF9B      ; Draw random attribute color for explosion
 $BDA1 LD L,(IX+$04)   ; {Increment the graphic data address for the explosion
 $BDA4 LD H,(IX+$05)   ;
 $BDA7 LD DE,$0048     ;
 $BDAA ADD HL,DE       ;
 $BDAB LD (IX+$04),L   ;
 $BDAE LD (IX+$05),H   ; }
 $BDB1 DEC (IX+$0D)    ; Decrement explosion counter
 $BDB4 JP NZ,$BB69     ; Jump to the next enemy configuration if not zero
                       ; Explosion has ended, configure gift: bubble, smartbomb
                       ; or question
 $BDB7 LD HL,($A093)   ; Set #REGhl to the address into the attribute file for
                       ; the explosion
 $BDBA LD DE,($A095)   ; Set #REGde to the address into the attribute buffer
                       ; for the explosion
 $BDBE CALL $CF6E      ; Reset attribute color when explosion ended
 $BDC1 LD A,(IX+$00)   ; {x-pixel-position of sprite is less than 24?
 $BDC4 CP $18          ; }
 $BDC6 JP C,$BE2E      ; Jump if so
 $BDC9 LD (IX+$09),$FE ; Set Enemy configuration to energy bubble
 $BDCD LD (IX+$0F),$10 ; Set sprite height
 $BDD1 LD (IX+$0E),$02 ; Set sprite width
 $BDD5 LD A,(IX+$01)   ; {Add 8 pixels to y-pixel-position
 $BDD8 ADD A,$08       ;
 $BDDA LD (IX+$01),A   ; }
; configure big bubble
 $BDDD LD (IX+$03),$00 ; Reset configuration
 $BDE1 LD (IX+$06),$00 ; Reset configuration
 $BDE5 LD (IX+$11),$64 ; Set bubble counter to $64
 $BDE9 LD (IX+$10),$00 ; Reset configuration
 $BDED LD HL,$86F2     ; Set #REGhl to graphic data address for big bubble
 $BDF0 LD (IX+$12),L   ; {Set graphic data address for bubble
 $BDF3 LD (IX+$13),H   ;
 $BDF6 LD (IX+$04),L   ;
 $BDF9 LD (IX+$05),H   ; }
 $BDFC LD A,(IX+$15)   ; Check bubble type
 $BDFF CP $FF          ; No bubble?
 $BE01 JP Z,$BE2E      ; Jump if so
 $BE04 CALL $A375      ; Set #REGa to a pseudo-random number
 $BE07 CP $03          ; is less than 3?
 $BE09 JP C,$BE35      ; you are lucky, you got an smartbomb
 $BE0C CP $06          ; is less than 6?
 $BE0E JP C,$BE3F      ; you are lucky, you got a question mark (random gift)
 $BE11 LD A,(IX+$15)   ; {is bubble type big?
 $BE14 OR A            ; }
 $BE15 JP NZ,$BB69     ; Jump if so and process next obejct
; configure small bubble
 $BE18 LD HL,$87B2     ; Set #REGhl to graphic data for small bubble
 $BE1B LD (IX+$12),L   ; {Set graphic data for the bubble
 $BE1E LD (IX+$13),H   ; }
 $BE21 LD (IX+$11),$8C ; {Set bubble counter to $8C {Set graphic data for the
 $BE25 LD (IX+$04),L   ; bubble } Jump to the next enemy configuration
 $BE28 LD (IX+$05),H   ;
 $BE2B JP $BB69        ; }
; configure no bubble
*$BE2E LD (IX+$0C),$00 ; Set object live/visibility to dead/not visible
 $BE32 JP $BB69        ; Jump to the next enemy configuration
; configure smartbomb
*$BE35 LD (IX+$09),$FD ; Set object type to smartbomb
 $BE39 LD HL,$8CEA     ; Set graphic data for smartbomb
 $BE3C JP $BE46        ; Jump forward
; configure question
*$BE3F LD (IX+$09),$FC ; Set object type to question
 $BE43 LD HL,$8D0A     ; Set graphic data for question
*$BE46 LD (IX+$04),L   ; {Copy address to object configuration
 $BE49 LD (IX+$05),H   ; }
 $BE4C LD (IX+$02),$01 ; Set sprite to reverse
 $BE50 JP $BB69        ; Jump to the next enemy configuration

; Y-pixel-offsets for Boss lasers shots
b$BE53 DEFB $10,$20,$22,$19,$1D,$31,$34,$FF

; Configure projectile for swing gun
;
; Configure projectile for swing gun left orientation. Used by the routine at
; #R$BCDD.
c$BE5B PUSH AF         ; Save #REGaf
 $BE5C LD A,(IX+$00)   ; {Set #R$A093 x-pixel-position for projectile
 $BE5F SUB $18         ;
 $BE61 LD ($A093),A    ; }
 $BE64 LD A,$14        ; Set increment for y-pixel-position
 $BE66 CALL $B58E      ; Draw projectile
 $BE69 LD HL,$FFFF     ; Base offset into room graphic data for every frame
                       ; (left)
 $BE6C LD (IY+$04),$F8 ; Set the x-delta for the projectile
 $BE70 LD A,$05        ; Set #REGa the y-delta for the projectile
 $BE72 JP $BE8C        ; Jump to finish projectile configuration
; Configure projectile for swing gun left orientation. Used by the routine at
; #R$BCDD.
*$BE75 PUSH AF         ; Save #REGaf
 $BE76 LD A,(IX+$00)   ; {Set #R$A093 x-pixel-position for projectile
 $BE79 SUB $18         ;
 $BE7B LD ($A093),A    ; }
 $BE7E LD A,$19        ; Set increment for y-pixel-position
 $BE80 CALL $B58E      ; Draw projectile
 $BE83 LD HL,$FFFF     ; Base offset into room graphic data for every frame
                       ; (left)
 $BE86 LD (IY+$04),$F8 ; Set the x-delta for the projectile
 $BE8A LD A,$08        ; Set #REGa the y-delta for the projectile
; This entry point is used by the routines at #R$BE5B, #R$BE9B and #R$BEB3.
; Finish projectile configuration
*$BE8C LD (IY+$07),L   ; {Save offset into projectile configuration
 $BE8F LD (IY+$08),H   ; }
 $BE92 LD (IY+$05),$00 ; Reset y-delta for the projectile
 $BE96 CALL $B4EA      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $BE99 POP AF          ; Restore #REGaf
 $BE9A RET             ;
; Configure projectile for swing gun right bottom orientation. Used by the
; routine at #R$BCDD.
*$BE9B PUSH AF         ; Save #REGaf
 $BE9C LD A,(IX+$00)   ; {Set #R$A093 x-pixel-position for projectile
 $BE9F LD ($A093),A    ; }
 $BEA2 LD A,$19        ; Set increment for y-pixel-position
 $BEA4 CALL $B58E      ; Draw projectile
 $BEA7 LD HL,$0001     ; Base offset into room graphic data for every frame
                       ; (right)
 $BEAA LD (IY+$04),$08 ; Set the x-delta for the projectile
 $BEAE LD A,$08        ; Set #REGa the y-delta for the projectile
 $BEB0 JP $BE8C        ; Jump to finish projectile configuration
; Configure projectile for swing gun right orientation. Used by the routine at
; #R$BCDD.
*$BEB3 PUSH AF         ; Save #REGaf
 $BEB4 LD A,(IX+$00)   ; {Set #R$A093 x-pixel-position for projectile
 $BEB7 LD ($A093),A    ; }
 $BEBA LD A,$14        ; Set increment for y-pixel-position
 $BEBC CALL $B58E      ; Draw projectile
 $BEBF LD HL,$0001     ; Base Offset into room graphic data for every frame
                       ; (right)
 $BEC2 LD (IY+$04),$08 ; Set the x-delta for the projectile
 $BEC6 LD A,$05        ; Set #REGa the y-delta for the projectile
 $BEC8 JP $BE8C        ; Jump to finish projectile configuration

; Swing gun graphic data offsets
b$BECB DEFB $00,$20,$40,$60,$80,$60,$40,$20

; Handle bubble bouncing and burst
;
; Used by the routine at #R$BA5C.
c$BED3 LD A,(IX+$10)   ; {Increment graphic data counter for bubble
 $BED6 INC A           ;
 $BED7 LD (IX+$10),A   ; }
 $BEDA LD E,A          ; {Set #REGhl to the corresponding poisition in graphic
 $BEDB LD D,$00        ; data offset table for bubble
 $BEDD LD HL,$BF5B     ;
 $BEE0 ADD HL,DE       ; }
 $BEE1 LD A,(HL)       ; Set #REGa to the graphic data offset
 $BEE2 CP $FF          ; is $FF (end marker)?
 $BEE4 JP NZ,$BEEC     ; Jump forward if not
 $BEE7 LD (IX+$10),$01 ; Set graphic data offset counter to 1. Reinit counter
 $BEEB XOR A           ; Set #REGa=0
*$BEEC LD E,A          ; {Set #REGhl to the graphic data of the bubble
 $BEED LD D,$00        ;
 $BEEF LD L,(IX+$12)   ;
 $BEF2 LD H,(IX+$13)   ;
 $BEF5 ADD HL,DE       ; }
 $BEF6 LD A,(IX+$06)   ; {is bubble falling?
 $BEF9 OR A            ; }
 $BEFA JP NZ,$BF2A     ; Jump if so
 $BEFD LD A,(IX+$11)   ; Check bubble counter
 $BF00 CP $14          ; is bubble counter < 20?
 $BF02 JP C,$BF08      ; Jump forward if so
 $BF05 JP $BF34        ; Jump to finish bubble handler
; check bubble for burst
*$BF08 LD A,(IX+$11)   ; check bubble counter
 $BF0B CP $02          ; is 2?
 $BF0D JP Z,$BF55      ; Jump to set graphic data for bubble final burst (2)
 $BF10 CP $03          ; is 3?
 $BF12 JP Z,$BF4F      ; Jump to set graphic data for bubble burst (3)
 $BF15 CP $04          ; is 4?
 $BF17 JP Z,$BF49      ; Jump to set graphic data for bubble burst (4)
 $BF1A CP $05          ; is 5?
 $BF1C JP Z,$BF43      ; Jump to set graphic data for bubble burst (5)
 $BF1F LD A,(IX+$10)   ; check graphic data counter of bubble
 $BF22 CP $02          ; is 2?
 $BF24 JP NZ,$BF34     ; Jump forward if not
; Bubble stop bouncing
 $BF27 DEC (IX+$10)    ; Decrement graphic data counter
*$BF2A LD L,(IX+$12)   ; {Increment graphic data to sprite bubble non-bouncing
 $BF2D LD H,(IX+$13)   ; (falling or stopped in floor)
 $BF30 LD DE,$0040     ;
 $BF33 ADD HL,DE       ; }
; Finish configuring bubble
*$BF34 LD (IX+$04),L   ; {Set corresponding graphic data of bubble
 $BF37 LD (IX+$05),H   ; }
 $BF3A DEC (IX+$11)    ; Decrement bubble counter
 $BF3D RET NZ          ; Return if not zero
 $BF3E LD (IX+$0C),$00 ; Set dead/non-visible bubble
 $BF42 RET             ;
*$BF43 LD HL,$8872     ; Set #REGhl to graphics data for bubble burst (5)
 $BF46 JP $BF34        ; Jump back and finish configuring bubble
*$BF49 LD HL,$8892     ; Set #REGhl to graphics data for bubble burst (4)
 $BF4C JP $BF34        ; Jump back and finish configuring bubble
*$BF4F LD HL,$88B2     ; Set #REGhl to graphics data for bubble burst (3)
 $BF52 JP $BF34        ; Jump back and finish configuring bubble
*$BF55 LD HL,$88D2     ; Set #REGhl to graphics data for bubble final burst (2)
 $BF58 JP $BF34        ; Jump back and finish configuring bubble

; Bubble graphic data offsets
b$BF5B DEFB $00,$20,$40,$60,$80,$A0,$80,$60
 $BF63 DEFB $40,$20,$FF

; Handle explosion debris movement and draw it
;
; Used by the routine at #R$BD6B.
c$BF66 LD A,R         ; {Border color to black?
 $BF68 SLA A          ;
 $BF6A AND $F8        ;
 $BF6C OUT ($FE),A    ; }
 $BF6E LD A,(IX+$03)  ; Set #REGa to the explosion counter
 $BF71 SLA A          ; {Save at #R$A093 the position of the offset for the
 $BF73 LD ($A093),A   ; current explosion counter}
 $BF76 LD E,A         ; {Point #REGhl to the corresponent address into offset
 $BF77 LD D,$00       ; of debris position
 $BF79 ADD HL,DE      ; }
 $BF7A LD A,(IX+$00)  ; {Computes the x-byte-position in room of the debris
 $BF7D SRL A          ;
 $BF7F SRL A          ;
 $BF81 SRL A          ;
 $BF83 ADD A,(HL)     ;
 $BF84 SUB $07        ; }
 $BF86 CP $01         ; Position is out of bounds of the screen-left border?
 $BF88 JP C,$BFCF     ; Jump forward is so
 $BF8B CP $1E         ; Position is out of bounds of the screen-right border?
 $BF8D JP NC,$BFCF    ; Jump forward if so
*$BF90 LD ($A0AF),A   ; Set #R$A0AF the x-byte-position of the debris
 $BF93 INC HL         ; {Computes the y-pixel-position in room of the debris
 $BF94 LD A,(HL)      ;
 $BF95 ADD A,(IX+$01) ;
 $BF98 SUB $30        ; }
 $BF9A CP $08         ; Position is out of bounds of the screen-top border?
 $BF9C JP C,$BFDB     ; Jump forward is so
 $BF9F CP $A0         ; Position is out of bounds of the screen-bottom border?
 $BFA1 JP NC,$BFDB    ; Jump forward is so
*$BFA4 LD ($A0B0),A   ; Set #R$A0B0 the y-pixel-position of the debris
 $BFA7 LD L,A         ; {Compute into #REGhl the address of the debris into the
 $BFA8 LD H,$00       ; room graphic data
 $BFAA ADD HL,HL      ;
 $BFAB ADD HL,HL      ;
 $BFAC ADD HL,HL      ;
 $BFAD ADD HL,HL      ;
 $BFAE ADD HL,HL      ;
 $BFAF LD A,($A0AF)   ;
 $BFB2 LD E,A         ;
 $BFB3 LD D,$00       ;
 $BFB5 ADD HL,DE      ;
 $BFB6 LD DE,$EAFF    ;
 $BFB9 ADD HL,DE      ; }
 $BFBA PUSH HL        ; Save #REGhl
 $BFBB LD A,($A093)   ; {Compute into #REGde the address for the graphic data
 $BFBE SLA A          ; of the debris
 $BFC0 SLA A          ;
 $BFC2 LD E,A         ;
 $BFC3 LD D,$00       ;
 $BFC5 LD HL,$AA6E    ;
 $BFC8 ADD HL,DE      ;
 $BFC9 EX DE,HL       ; }
 $BFCA POP HL         ; Restore #REGhl
 $BFCB CALL $A4F4     ; Draw the debris
 $BFCE RET            ;
*$BFCF XOR A          ; Set #REGa=0
 $BFD0 LD ($A0AF),A   ; Set x-byte-position of the debris to 0
 $BFD3 LD A,$20       ; {Set y-pixel-position of the debris to $20
 $BFD5 LD ($A0B0),A   ; }
 $BFD8 JP $BF90       ; Jump back
*$BFDB LD A,$20       ; {Set y-pixel-position of the debris to $20
 $BFDD LD ($A0B0),A   ; }
 $BFE0 XOR A          ; Set #REGa=0
 $BFE1 LD ($A0AF),A   ; Set x-byte-position of the debris to 0
 $BFE4 JP $BFA4       ; Jump back

; List of 'random' attribute colors for explosion
b$BFE7 DEFB $02,$03,$06,$42,$43,$46,$06,$02

; Handle lateral movement for FOOTMAN, STOMPER, MINE, SCANNER, POD, MINE LAYER
; and BLOB
;
; Used by the routine at #R$BA5C.
c$BFEF LD A,(IX+$09) ; Check enemy type
 $BFF2 CP $FE        ; {Return if bubble
 $BFF4 RET Z         ; }
 $BFF5 CP $FD        ; {Return if smartbomb
 $BFF7 RET Z         ; }
 $BFF8 CP $FC        ; {Return if question
 $BFFA RET Z         ; }
 $BFFB AND $7F       ;
 $BFFD CP $08        ; is SCANNER?
 $BFFF JP Z,$C27E    ; Jump to handle shot and lateral collision detection
 $C002 CP $0C        ; is POD?
 $C004 JP Z,$C1CA    ; Handle lateral collision detection for POD
 $C007 CP $0D        ; is MINE LAYER?
 $C009 JP Z,$C1CA    ; Handle lateral collision detection and fire for MINE
                     ; LAYER
 $C00C CP $0E        ; is MINE?
 $C00E JP Z,$C150    ; Handle MINE movement
 $C011 CP $0F        ; is BLOB?
 $C013 JP Z,$C14D    ; Handle BLOB movement
 $C016 CP $02        ; Enemy type $02? Not exist!!!
 $C018 JP Z,$C029    ;
 $C01B OR A          ;
 $C01C JP NZ,$C01F   ;
; for the rest of enemies handle coliision detection and set direction to chase
; Rex
*$C01F LD A,(IX+$02) ; {jump to handle right collision detection if enemy moves
 $C022 OR A          ; right
 $C023 JP Z,$C3E0    ; }
 $C026 JP $C4A6      ; Jump to handle left collision detection
*$C029 XOR A         ; {Set face direction right
 $C02A LD (IX+$02),A ; }
 $C02D LD A,($A0B6)  ; {if Rex x-position id greater then enemy x-position
 $C030 CP (IX+$00)   ; return
 $C033 RET NC        ; }
 $C034 LD A,$01      ; {Change face direction to left
 $C036 LD (IX+$02),A ; }
 $C039 RET           ;

; Scanner fire weapon
;
; Used by the routine at #R$C27E.
c$C03A CALL $A375    ; Set #REGa to pseudo-random number
 $C03D CP $23        ; {Return if number greater than $23
 $C03F RET NC        ; }
 $C040 LD A,$04      ; {Set projectile type $04 (bullet)
 $C042 LD ($A054),A  ; }
 $C045 LD HL,$B436   ;
 $C048 LD B,$08      ; Set #REGa to the number of projectiles to shot
*$C04A PUSH BC       ; {Save #REGbc and #REGhl
 $C04B PUSH HL       ; }
 $C04C CALL $B570    ; Check for free projectile slot and play weapon sound
 $C04F CALL $B57E    ; Creates a new projectile
 $C052 POP HL        ; Restore #REGhl
 $C053 CALL $B4D3    ; Configure position and x/y-delta for projectile
 $C056 POP BC        ; Restore #REGbc
 $C057 DJNZ $C04A    ; Jump back until all projectiles created
 $C059 RET           ;

; Handle POD and MINE LAYER
;
; Used by the routine at #R$C620.
c$C05A LD A,(IX+$11)   ; {Jump forward if emeny is not moving up
 $C05D OR A            ;
 $C05E JP NZ,$C0C4     ; }
 $C061 LD A,(IX+$01)   ; {Decrement y-position based on speed
 $C064 SUB (IX+$12)    ;
 $C067 LD (IX+$01),A   ; }
 $C06A CALL $C72B      ; Obtain into #REGhl the tile type address pointer under
                       ; the entity
 $C06D LD DE,$0040     ; {Point #REGhl to the top of the entity
 $C070 AND A           ;
 $C071 SBC HL,DE       ; }
 $C073 CALL $D06C      ; Check is tile type is wall
 $C076 JP Z,$C0BB      ; Jump if it's a wall
 $C079 INC HL          ; Increment #REGhl
 $C07A CALL $D06C      ; Check is tile type is wall
 $C07D JP Z,$C0BB      ; Jump if it's a wall
; check enemy moving beyond bounds
*$C080 JP Z,$C0C4      ; never jump!
 $C083 LD A,(IX+$01)   ; {is y-position less than $18
 $C086 CP $18          ; }
 $C088 JP C,$C0BB      ; Jump if so and change enemy state to move down
 $C08B CP $A8          ; is y-position greather than $A8
 $C08D JP NC,$C0B2     ; Jump if so and change enemy state to move up
 $C090 CALL $A375      ; Set #REGa a pseudo-random number
 $C093 CP $07          ; random number is less than $07
 $C095 JP C,$C0A9      ; Jump to change direction
 $C098 LD A,(IX+$09)   ; {return if enemy is a MINE LAYER
 $C09B CP $0D          ;
 $C09D RET Z           ; }
; increment speed for POD
 $C09E LD A,(IX+$12)   ; {increment speed for POD
 $C0A1 INC A           ; }
 $C0A2 CP $05          ; {if speed is $05 don't increment a return
 $C0A4 RET Z           ; }
 $C0A5 LD (IX+$12),A   ; Set the new speed for the enemy
 $C0A8 RET             ;
; change enemy horizontal direction
*$C0A9 LD A,(IX+$02)   ; {change enemy horizontal direction
 $C0AC XOR $01         ;
 $C0AE LD (IX+$02),A   ; }
 $C0B1 RET             ;
; enemy change direction to moves up
*$C0B2 LD (IX+$11),$00 ; Set enemy direction up
 $C0B6 LD (IX+$12),$01 ; Set enemy speed
 $C0BA RET             ;
; enemy change direction to moves down
*$C0BB LD (IX+$11),$01 ; Set enemy direction down
 $C0BF LD (IX+$12),$01 ; Set enemy speed
 $C0C3 RET             ;
; enemy moves down
*$C0C4 LD A,(IX+$01)   ; {Increment y-position based on speed
 $C0C7 ADD A,(IX+$12)  ;
 $C0CA LD (IX+$01),A   ; }
 $C0CD CALL $C72B      ; Obtain into #REGhl the tile type address pointer under
                       ; the entity
 $C0D0 CALL $D06C      ; Check is tile type is wall
 $C0D3 JP Z,$C0B2      ; Jump back if it's a wall
 $C0D6 INC HL          ; Increment #REGhl
 $C0D7 CALL $D06C      ; Check is tile type is wall
 $C0DA JP Z,$C0B2      ; Jump back if it's a wall
 $C0DD JP $C080        ; Jump back and check enemy moving beyond screen
                       ; boundary

; Handle collision detection for BLOB
;
; Used by the routine at #R$C14D.
c$C0E0 LD A,(IX+$01)   ; {if y-position for BLOB greater than $A0 and less than
 $C0E3 CP $A0          ; $10 then jump to change movement
 $C0E5 JP NC,$C119     ;
 $C0E8 CP $10          ;
 $C0EA JP C,$C119      ; }
 $C0ED LD A,(IX+$00)   ; {if x-position for BLOB greater then $F0 and less than
 $C0F0 CP $F0          ; $10 then jump to change movement
 $C0F2 JP NC,$C119     ;
 $C0F5 CP $10          ;
 $C0F7 JP C,$C119      ; }
 $C0FA LD A,(IX+$00)   ; {Set #R$A0AF the new x-position based on x-delta
 $C0FD ADD A,(IX+$04)  ;
 $C100 LD ($A0AF),A    ; }
 $C103 LD A,(IX+$01)   ; {Set #R$A0B0 the new y-position based on y-delta
 $C106 ADD A,(IX+$05)  ;
 $C109 LD ($A0B0),A    ; }
 $C10C LD A,(IX+$02)   ; Set #REGa to the direction of BLOB
 $C10F CALL $A503      ; {Computes into #REGhl address of tile buffer for the
 $C112 LD DE,$0021     ; tile under BLOB
 $C115 ADD HL,DE       ; }
 $C116 LD A,(HL)       ; Check tile type
 $C117 OR A            ; {Return if tile is background
 $C118 RET Z           ; }
*$C119 LD A,(IX+$04)   ; {Invert x-delta
 $C11C NEG             ;
 $C11E LD (IX+$04),A   ; }
 $C121 LD A,(IX+$05)   ; {Invert y-delta
 $C124 NEG             ;
 $C126 LD (IX+$05),A   ; }
 $C129 LD (IX+$11),$04 ; Reset state change counter
 $C12D RET             ;

; Change x/y-delta for BLOB
;
; Used by the routine at #R$C14D.
c$C12E CALL $C13B    ; Obtain random x-delta (0 or -1)
 $C131 LD (IX+$04),A ; Set new x-delta to BLOB
 $C134 CALL $C13B    ; Obtain random y-delta (0 or -1)
 $C137 LD (IX+$05),A ; Set new y-delta to BLOB
 $C13A RET           ;
*$C13B CALL $A388    ; {Set #REGa a pseudo random number between 0-1
 $C13E AND $01       ; }
 $C140 LD E,A        ; {Obtain delta for the data buffer of BLOB deltas
 $C141 LD D,$00      ;
 $C143 LD HL,$C149   ;
 $C146 ADD HL,DE     ;
 $C147 LD A,(HL)     ; }
 $C148 RET           ;

; Data buffer of x-delta and y-delta for BLOB
b$C149 DEFB $FF,$01,$FF,$01

; Handle BLOB and MINE movement
;
; Used by the routine at #R$BFEF.
c$C14D CALL $C0E0      ; Handle collision detection for BLOB
; Handle for BLOB and MINE movement. This entry point is used by the routine at
; #R$BFEF.
*$C150 LD A,(IX+$00)   ; {Set new x-position based on x-delta
 $C153 ADD A,(IX+$04)  ;
 $C156 LD (IX+$00),A   ; }
 $C159 LD A,(IX+$01)   ; {Set new y-position based on y-delta
 $C15C ADD A,(IX+$05)  ;
 $C15F LD (IX+$01),A   ; }
 $C162 LD A,(IX+$09)   ; Check enemy type
 $C165 CP $0F          ; {Jump forward if BLOB
 $C167 JP Z,$C179      ; }
 $C16A LD HL,($A01B)   ; {Set #REGhl to the address into tile buffer for MINE
 $C16D LD DE,$0020     ;
 $C170 AND A           ;
 $C171 SBC HL,DE       ; }
 $C173 CALL $D06C      ; is a wall tile type?
 $C176 JP Z,$981F      ; Jump to destroy MINE if so
*$C179 DEC (IX+$11)    ; Decrement state change counter
 $C17C RET NZ          ; Return if no zero
 $C17D LD A,R          ; {Set #REGa a random number between 2-5
 $C17F AND $03         ;
 $C181 ADD A,$02       ; }
 $C183 LD (IX+$11),A   ; Reset state change counter
 $C186 LD A,(IX+$09)   ; Check enemy type
 $C189 CP $0F          ; {Jump forward if BLOB
 $C18B JP Z,$C198      ; }
 $C18E LD A,(IX+$12)   ; {Change state for MINE
 $C191 XOR $01         ;
 $C193 LD (IX+$12),A   ; }
 $C196 OR A            ; {Return if MINE continue fixed movement
 $C197 RET Z           ; }
*$C198 LD A,R          ; {Set #REGa a random number between 8 and 15
 $C19A AND $07         ;
 $C19C ADD A,$08       ; }
 $C19E LD (IX+$11),A   ; Reset state change counter with this number
 $C1A1 LD A,(IX+$09)   ; {Jump to define x/y-delta for BLOB
 $C1A4 CP $0F          ;
 $C1A6 JP Z,$C12E      ; }
; Set x/y-delta for MINE
 $C1A9 LD (IX+$04),$01 ; Set x-delta to 1 for MINE
 $C1AD LD A,($A0B6)    ; {if x-position of Rex is less than x-position of MINE
 $C1B0 CP (IX+$00)     ; then set x-delta to -1
 $C1B3 JP NC,$C1BA     ;
 $C1B6 LD (IX+$04),$FF ; }
*$C1BA LD (IX+$05),$01 ; Set y-delta to 1 for MINE
 $C1BE LD A,($A0B7)    ; {if y-position of Rex is less than y-position of MINE
 $C1C1 CP (IX+$01)     ; then set y-delta to -1
 $C1C4 RET NC          ;
 $C1C5 LD (IX+$05),$FF ; }
 $C1C9 RET             ;

; Handle lateral collision detection for POD and MINE LAYER and shot for MINE
; LAYER
;
; Used by the routine at #R$BFEF.
c$C1CA LD A,(IX+$02)   ; {Jump to handle right collision detection if enemy
 $C1CD OR A            ; moves right
 $C1CE CALL Z,$C3E0    ; }
 $C1D1 LD A,(IX+$02)   ; {Jump ot handle left collision detection if enemy
 $C1D4 OR A            ; moves left
 $C1D5 CALL NZ,$C4A6   ; }
 $C1D8 LD A,(IX+$09)   ; {Return if enemy is not a MINE LAYER
 $C1DB CP $0D          ;
 $C1DD RET NZ          ; }
 $C1DE CALL $A375      ; Set #REGa to a pseudo random number
 $C1E1 CP $F0          ; {Return if number less than $F0
 $C1E3 RET C           ; }
; release a Mine
 $C1E4 LD A,(IX+$00)   ; {Set #R$A093 to the x-position for the MINE
 $C1E7 ADD A,$08       ;
 $C1E9 LD ($A093),A    ; }
 $C1EC LD A,(IX+$01)   ; {Set #R$A095 to the y-position for the MINE
 $C1EF ADD A,$04       ;
 $C1F1 LD ($A095),A    ; }
; Create a new Mine
*$C1F4 PUSH IX         ; Save #REGix
 $C1F6 CALL $D858      ; Check for an avaliable slot into Enemy configuration
                       ; buffer to configure the mine
 $C1F9 CALL $CDD8      ; Configure a mine
 $C1FC LD (IX+$09),$0E ; Set enemy type to MINE
 $C200 LD (IX+$0C),$01 ; Set mine alive/visible
 $C204 LD A,($A093)    ; {Set mine x-position
 $C207 LD (IX+$00),A   ; }
 $C20A LD A,($A095)    ; {Set mine y-position
 $C20D LD (IX+$01),A   ; }
 $C210 POP IX          ; Restore #REGix
 $C212 RET             ;

; Handle SCANNER - moves up
;
; Used by the routine at #R$C620.
c$C213 LD A,(IX+$11) ; {Return if scanner is not moving up
 $C216 CP $02        ;
 $C218 RET NZ        ; }
 $C219 DEC (IX+$12)  ; Decrement state change counter for scanner
 $C21C JP Z,$C313    ; Jump to handle state change if counter is 0
 $C21F LD A,(IX+$01) ; {Decrement y-position based on scanner speed
 $C222 SUB (IX+$10)  ;
 $C225 LD (IX+$01),A ; }
 $C228 LD L,(IX+$04) ; {Point to the address of the next graphic data for
 $C22B LD H,(IX+$05) ; scanner
 $C22E LD DE,$0020   ;
 $C231 ADD HL,DE     ;
 $C232 LD (IX+$04),L ;
 $C235 LD (IX+$05),H ; }
 $C238 RET           ;

; Handler for Scanner bumping animation
;
; Used by the routine at #R$C27E.
c$C239 DEC (IX+$12)  ; Decrement scanner state change
 $C23C JP Z,$C313    ; Jump to handle state change if zero
 $C23F LD A,(IX+$13) ; Set #REGa to the scanner bumping counter
 $C242 AND $0F       ; {Set #REGhl to the address pointer into the graphic data
 $C244 SLA A         ; list for bumping animation
 $C246 LD E,A        ;
 $C247 LD D,$00      ;
 $C249 LD HL,$C25A   ;
 $C24C ADD HL,DE     ; }
 $C24D LD E,(HL)     ; {Set graphic data of bump animation into enemy
 $C24E INC HL        ; configuration
 $C24F LD D,(HL)     ;
 $C250 LD (IX+$04),E ;
 $C253 LD (IX+$05),D ; }
 $C256 INC (IX+$13)  ; Increase bumping counter for scanner
 $C259 RET           ;

; List of graphic data pointers to scanner bumping animation
b$C25A DEFB $5A,$8A,$1A,$8B,$3A,$8B,$5A,$8A
 $C262 DEFB $1A,$8B,$3A,$8B,$5A,$8A,$1A,$8B
 $C26A DEFB $3A,$8B,$5A,$8A,$1A,$8B,$3A,$8B
 $C272 DEFB $5A,$8A,$1A,$8B,$3A,$8B,$5A,$8A
 $C27A DEFB $1A,$8B,$3A,$8B

; Handle scanner shot and collision detection horizontally
;
; Used by the routine at #R$BFEF.
c$C27E LD A,(IX+$00)   ; {Check x-position of SCANNER
 $C281 AND $07         ;
 $C283 OR A            ; }
 $C284 JP NZ,$C2DE     ; Jump forward if scanner is not grid fixed
; Scanner shot if rex is moving and on sight
 $C287 LD A,($A0BD)    ; {Jump forward if Rex is jumping
 $C28A OR A            ;
 $C28B JP NZ,$C2A4     ; }
 $C28E LD A,($A0BC)    ; {Jump forward if Rex is falling
 $C291 OR A            ;
 $C292 JP NZ,$C2A4     ; }
 $C295 CALL $A4A9      ; Check if right key is pressed
 $C298 JP Z,$C2A4      ; Jump forward if so
 $C29B CALL $A490      ; Check if left key is pressed
 $C29E JP Z,$C2A4      ; Jump if so
 $C2A1 JP $C2DE        ; Jump to handle scanner movement
; Rex is moving, check if is on sight
*$C2A4 LD A,($A0B7)    ; {Check if scanner y-position is the range of rex
 $C2A7 ADD A,$04       ; y-position (y-position - 12 , y-position + 4)
 $C2A9 CP (IX+$01)     ;
 $C2AC JP C,$C2C1      ;
 $C2AF SUB $10         ;
 $C2B1 CP (IX+$01)     ;
 $C2B4 JP NC,$C2C1     ; }
 $C2B7 CALL $C3BE      ; Configure scanner to fire
 $C2BA LD (IX+$12),$14 ; Reset state change counter
 $C2BE CALL $C03A      ;
*$C2C1 LD A,($A0B6)    ; {Check if scanner x-position is in the range of rex
 $C2C4 ADD A,$04       ; x-position (x-position -12 , x-position + 4)
 $C2C6 CP (IX+$00)     ;
 $C2C9 JP C,$C2DE      ;
 $C2CC SUB $10         ;
 $C2CE CP (IX+$00)     ;
 $C2D1 JP NC,$C2DE     ; }
 $C2D4 CALL $C3BE      ; Configure scanner to fire
 $C2D7 LD (IX+$12),$14 ; Reset state change counter
 $C2DB CALL $C03A      ; Scanner fires weapon
; check scanner movement and state change
*$C2DE LD A,(IX+$11)   ; Check scanner state
 $C2E1 CP $03          ; {Jump if scanner is bumping
 $C2E3 JP Z,$C239      ; }
 $C2E6 OR A            ; {Return if scanner is moving up and down
 $C2E7 RET NZ          ; }
 $C2E8 LD A,(IX+$02)   ; Set #REGa to scanner direction
 $C2EB OR A            ; {Jump to handle collision detection in right direction
 $C2EC CALL Z,$C3E0    ; }
 $C2EF LD A,(IX+$02)   ; {Jump to handle collision detection in left direction
 $C2F2 OR A            ;
 $C2F3 CALL NZ,$C4A6   ; }
 $C2F6 DEC (IX+$12)    ; Decrement state change counter
 $C2F9 JP Z,$C313      ; If counter = 0 jump to handle state change
 $C2FC RET             ;

; Handle SCANNER - Moves down
;
; Used by the routine at #R$C6C2.
c$C2FD LD A,(IX+$11)   ; {If scanner is not moving down return
 $C300 CP $01          ;
 $C302 RET NZ          ; }
 $C303 DEC (IX+$12)    ; Decrement state change counter
 $C306 JP Z,$C313      ; Jump to chenge state if counter is 0
 $C309 LD A,(IX+$01)   ; {Increment y-position of scanner based on speed
 $C30C ADD A,(IX+$10)  ;
 $C30F LD (IX+$01),A   ; }
 $C312 RET             ;
; Handle state change for SCANNER. This entry point is used by the routines at
; #R$C213, #R$C239 and #R$C27E.
*$C313 LD (IX+$12),$07 ; Reset state change counter
 $C317 LD A,(IX+$00)   ; {Return if x-position bits2-0 is not 0
 $C31A AND $07         ;
 $C31C OR A            ;
 $C31D RET NZ          ; }
 $C31E RES 7,(IX+$09)  ; Set graphic data bit to select animated graphic data
 $C322 LD (IX+$0F),$0B ; Set height of sprite
 $C326 LD A,(IX+$00)   ; {Set #R$A0AF to the x-position
 $C329 LD ($A0AF),A    ; }
 $C32C LD A,(IX+$01)   ; {is y-position of scanner less than $18?
 $C32F CP $18          ; }
 $C331 JP C,$C397      ; Jump if so
 $C334 CP $A0          ; is y-position of scanner greater then $A0?
 $C336 JP NC,$C3A0     ; Jump if so
 $C339 LD ($A0B0),A    ; Set #R$A0B0 the y-position of scanner
 $C33C LD A,(IX+$02)   ; Set #REGa the direction of scanner
 $C33F CALL $A503      ; Computes into #REGhl address position of scanner in
                       ; tile type buffer
 $C342 INC HL          ; Increment #REGhl
 $C343 CALL $D06C      ; Check if tile is wall
 $C346 JP Z,$C397      ; Jump if is a wall
 $C349 INC HL          ; Increment #REGhl
 $C34A CALL $D06C      ; Check if tile is wall
 $C34D JP Z,$C397      ; Jump if is a wall
 $C350 LD DE,$0060     ; {Point #REGhl to the tile under the scanner
 $C353 ADD HL,DE       ; }
 $C354 CALL $D06C      ; Check if tile is wall
 $C357 JP Z,$C3A0      ; Jump if is a wall
 $C35A DEC HL          ; Decrement #REGhl
 $C35B CALL $D06C      ; Check if tile is wall
 $C35E JP Z,$C3A0      ; Jump if is a wall
 $C361 LD A,R          ; {Set #REGa a pseudo random number between 0-3
 $C363 AND $03         ; }
 $C365 CP $00          ; is 0?
 $C367 JP Z,$C397      ; Jump to configure scanner to move down
 $C36A CP $01          ; is 1?
 $C36C JP Z,$C387      ; Jump to configure scanner to move left
 $C36F CP $02          ; is 2?
 $C371 JP Z,$C377      ; Jump to configure scanner to move right
 $C374 JP $C3A0        ; is 3? Jump to configure scanner to bump animation
; scanner will move right
*$C377 LD (IX+$12),$08 ; Reset state change counter
 $C37B LD A,(IX+$11)   ;
 $C37E LD (IX+$11),$00 ; Set moves horizontal
 $C382 LD (IX+$02),$01 ; Set direction right
 $C386 RET             ;
; scanner will move left
*$C387 LD (IX+$12),$08 ; Reset state change counter
 $C38B LD A,(IX+$11)   ;
 $C38E LD (IX+$11),$00 ; Set moves horizontal
 $C392 LD (IX+$02),$00 ; Set direction left
 $C396 RET             ;
; scanner will move down
*$C397 LD (IX+$12),$07 ; Reset state change counter
 $C39B LD (IX+$11),$01 ; Scanner moves down
 $C39F RET             ;
; scanner will bump (animation)
*$C3A0 LD (IX+$02),$00 ; scanner direction to left
 $C3A4 LD (IX+$12),$06 ; Reset state change counter
 $C3A8 LD (IX+$0F),$10 ; Set height of sprite
 $C3AC LD (IX+$11),$02 ; Set scanner moving up
 $C3B0 LD HL,$8A5A     ; {Set address for scanner bump animation
 $C3B3 LD (IX+$04),L   ;
 $C3B6 LD (IX+$05),H   ; }
 $C3B9 SET 7,(IX+$09)  ; Set enemy configuration to get static graphic data
 $C3BD RET             ;

; Configure scanner for bump/fire state
;
; Used by the routine at #R$C27E.
c$C3BE LD (IX+$02),$00 ; Reset scanner direction
 $C3C2 LD (IX+$12),$11 ; Reset scanner state counter
 $C3C6 LD (IX+$0F),$10 ; Set sprite height
 $C3CA LD (IX+$11),$03 ; Set scanner state bump/fire
 $C3CE LD (IX+$13),$00 ; Reset scanner bumping counter
 $C3D2 LD HL,$8A5A     ; {Set graphic data for scanner bump/fire
 $C3D5 LD (IX+$04),L   ;
 $C3D8 LD (IX+$05),H   ; }
 $C3DB SET 7,(IX+$09)  ; Set bit for graphic data for fixed sprite
 $C3DF RET             ;

; Handle collision detection for entity moving right
;
; Used by the routines at #R$BFEF, #R$C1CA and #R$C27E.
c$C3E0 LD HL,($A01B)   ; Set #REGhl to the tile address under entity
 $C3E3 LD DE,$0040     ; {Set #REGhl point to tile in front-upper of entity
 $C3E6 AND A           ;
 $C3E7 SBC HL,DE       ;
 $C3E9 INC HL          ;
 $C3EA INC HL          ; }
 $C3EB CALL $D06C      ; Check if tile is wall
 $C3EE JP Z,$C469      ; Jump if tile is wall and change direction
 $C3F1 LD DE,$0020     ; {Set #rEGhl point to tile in front-lower of entity
 $C3F4 ADD HL,DE       ; }
 $C3F5 CALL $D06C      ; Check if tile is wall
 $C3F8 JP Z,$C469      ; Jump if tile is wall and change direction
 $C3FB LD A,(IX+$09)   ; {Jump forward if enemy is FOOT MAN
 $C3FE OR A            ;
 $C3FF JP Z,$C410      ; }
 $C402 LD A,(IX+$00)   ; {Computes new x-position based on speed
 $C405 ADD A,(IX+$10)  ; }
 $C408 CP $E8          ; {Jump to handle collision with right border if
 $C40A JP NC,$C49C     ; x-position greater than $E8}
 $C40D JP $C41B        ; Jump to continue the movement
; check collision with border for FOOT MAN
*$C410 LD A,(IX+$00)   ; {Computes new x-position based on speed
 $C413 ADD A,(IX+$10)  ; }
 $C416 CP $F8          ; {Jump to handle collision with right border if
 $C418 JP NC,$C49C     ; x-position greater than $F8}
; continue movement
*$C41B LD (IX+$00),A   ; Set the new x-position
 $C41E LD (IX+$02),$00 ; Set direction to right
 $C422 LD A,(IX+$03)   ; {Return if FOOT MAN jumping
 $C425 OR A            ;
 $C426 RET NZ          ; }
 $C427 LD A,(IX+$06)   ; {Return if FOOT MAN falling
 $C42A OR A            ;
 $C42B RET NZ          ; }
 $C42C LD A,(IX+$09)   ; {Jump forward if enemy is not FOOT MAN
 $C42F OR A            ;
 $C430 JP NZ,$C451     ; }
 $C433 LD HL,($A01B)   ; {Set #REGhl to the address of the tile buffer in front
 $C436 LD DE,$001F     ; of FOOT MAN
 $C439 AND A           ;
 $C43A SBC HL,DE       ; }
 $C43C LD A,(HL)       ; {if tile type is $0F then jump to handle force jump of
 $C43D CP $0F          ; FOOT MAN
 $C43F JP Z,$C602      ; }
 $C442 CP $0E          ; {if tile type is $0E then jump to handle force crouch
 $C444 JP Z,$C54E      ; of FOOT MAN}
 $C447 CP $10          ; {if tile type is $10 then jump to handle possible
 $C449 CALL Z,$C531    ; crouch of FOOT MAN}
 $C44C CP $11          ; {if tile type is $10 then jump to handle possible jump
 $C44E CALL Z,$C540    ; of FOOT MAN}
; check the next tile under the foots of enemy
*$C451 LD HL,($A01B)   ; {Set #REGhl to the next tile under foots
 $C454 INC HL          ;
 $C455 INC HL          ; }
 $C456 LD A,(HL)       ; {Return if tile is not background
 $C457 OR A            ;
 $C458 RET NZ          ; }
 $C459 LD A,(IX+$09)   ; {Return if enemy is FOOT MAN
 $C45C AND $7F         ;
 $C45E OR A            ;
 $C45F RET Z           ; }
 $C460 CP $08          ; {Return is enemy is SCANNER
 $C462 RET Z           ; }
 $C463 CP $0C          ; {Return is enemy is POD
 $C465 RET Z           ; }
 $C466 CP $0D          ; {Return is enemy is MINE LAYER
 $C468 RET Z           ; }
; Special case for FOOT MAN dying
*$C469 LD A,(IX+$09)   ; {Return if FOOT MAN dying
 $C46C CP $07          ;
 $C46E RET Z           ;
 $C46F CP $06          ;
 $C471 RET Z           ; }
; change direction of enemy
*$C472 LD A,(IX+$02)   ; {change enemy direction
 $C475 XOR $01         ;
 $C477 LD (IX+$02),A   ; }
; Special case for FOOT MAN dying and train wagons. This entry point is used by
; the routine at #R$C4A6.
*$C47A LD A,(IX+$09)   ; {if FOOT MAN dying then explode it
 $C47D CP $07          ;
 $C47F JP Z,$981F      ;
 $C482 CP $06          ;
 $C484 JP Z,$981F      ; }
 $C487 CP $03          ; {if train wagon then set wagon invisible
 $C489 JP Z,$C497      ;
 $C48C CP $04          ;
 $C48E JP Z,$C497      ;
 $C491 CP $05          ;
 $C493 JP Z,$C497      ; }
 $C496 RET             ;
; Set enemy to not visible
*$C497 LD (IX+$0C),$00 ; Enemy not visible
 $C49B RET             ;
; Handle collision with room border
*$C49C LD A,(IX+$09)   ; {if enemy type is FOOT MAN then jump to make FOOT MAN
 $C49F OR A            ; invisible
 $C4A0 JP Z,$C497      ; }
 $C4A3 JP $C472        ; if not change enemy direction

; Handle collision detection for entity moving left
;
; Used by the routines at #R$BFEF, #R$C1CA and #R$C27E.
c$C4A6 LD HL,($A01B)   ; Set #REGhl to the tile address under entity
 $C4A9 LD DE,$0040     ; {Set #REGhl to the tile address in front-upper of
 $C4AC AND A           ; enemy
 $C4AD SBC HL,DE       ;
 $C4AF DEC HL          ; }
 $C4B0 CALL $D06C      ; Check if tile type is wall
 $C4B3 JP Z,$C521      ; Jump if it's a wall
 $C4B6 LD DE,$0020     ; {Increment address to tile in front-lower of enemy
 $C4B9 ADD HL,DE       ; }
 $C4BA CALL $D06C      ; Check if tile type is wall
 $C4BD JP Z,$C521      ; Jump if it's a wall and change direction
 $C4C0 LD A,(IX+$00)   ; {Computes new x-position based on speed
 $C4C3 SUB (IX+$10)    ; }
 $C4C6 CP $E8          ; {if x-position is less than $18 then jump and handle
 $C4C8 JP NC,$C49C     ; left collision with room border}
; no collision, continue moving
 $C4CB LD (IX+$00),A   ; Set the new x-position
 $C4CE LD (IX+$02),$01 ; Continue in the same direction
 $C4D2 LD A,(IX+$03)   ; {Return if jumping
 $C4D5 OR A            ;
 $C4D6 RET NZ          ; }
 $C4D7 LD A,(IX+$06)   ; {Return if falling
 $C4DA OR A            ;
 $C4DB RET NZ          ; }
 $C4DC LD A,(IX+$09)   ; Check enemy type
 $C4DF OR A            ; {Jump if enemy type is not FOOT MAN
 $C4E0 JP NZ,$C501     ; }
; handle special behavior of FOOT MAN
 $C4E3 LD HL,($A01B)   ; Set #REGhl to the tile address under FOOT MAN
 $C4E6 LD DE,$0020     ; {Check tile type where is FOOT MAN
 $C4E9 AND A           ;
 $C4EA SBC HL,DE       ;
 $C4EC LD A,(HL)       ; }
 $C4ED CP $0F          ; tile type is $0F?
 $C4EF JP Z,$C5FD      ; Jump to handle a forced jump for FOOT MAN
 $C4F2 CP $0E          ; tile type is $0E?
 $C4F4 JP Z,$C54E      ; Jump to handle a forced crouch for FOOT MAN
 $C4F7 CP $10          ; tile type is $10?
 $C4F9 CALL Z,$C531    ; Jump to handle a possible crouch for FOOT MAN
 $C4FC CP $11          ; tile type is $11?
 $C4FE CALL Z,$C540    ; Jump to handle a possible jump for FOOT MAN
; check for space under the feet in next tile
*$C501 LD HL,($A01B)   ; {Return if next tile under a feet is not space
 $C504 DEC HL          ;
 $C505 LD A,(HL)       ;
 $C506 OR A            ;
 $C507 RET NZ          ; }
 $C508 LD A,(IX+$09)   ; Check enemy type
 $C50B AND $7F         ; {Return if FOOT MAN
 $C50D OR A            ;
 $C50E RET Z           ; }
 $C50F CP $03          ; {Return if train wagon
 $C511 RET Z           ;
 $C512 CP $04          ;
 $C514 RET Z           ;
 $C515 CP $05          ;
 $C517 RET Z           ; }
 $C518 CP $08          ; {Return if SCANNER
 $C51A RET Z           ; }
 $C51B CP $0C          ; {Return if POD
 $C51D RET Z           ; }
 $C51E CP $0D          ; {Return if MINE LAYER
 $C520 RET Z           ; }
; change direction
*$C521 LD A,(IX+$09)   ; {Return if FOOT MAN dying
 $C524 CP $06          ;
 $C526 RET Z           ;
 $C527 CP $07          ;
 $C529 RET Z           ; }
 $C52A LD (IX+$02),$00 ; Change enemy direction
 $C52E JP $C47A        ; Special case for train wagons (no change direction,
                       ; simple dissapear if wall hit)

; Handle possible crouch for FOOT MAN
;
; Used by the routines at #R$C3E0 and #R$C4A6.
c$C531 PUSH AF         ; Save #REGaf
 $C532 CALL $A375      ; Set #REGa a pseudo random nummber
 $C535 CP $80          ; is less than $80?
 $C537 JP C,$C54D      ; Jump to crouch FOOT MAN if so
 $C53A LD (IX+$11),$04 ; Reset state change counter
 $C53E POP AF          ; Restore #REGaf
 $C53F RET             ;

; Handle possible jump for FOOT MAN
;
; Used by the routines at #R$C3E0 and #R$C4A6.
c$C540 CALL $A375      ; Set #REGa a pseudo random nummber
 $C543 CP $80          ; is less than $80?
 $C545 JP C,$C5FD      ; Jump to make FOOT MAN jump
 $C548 LD (IX+$11),$04 ; Reset state change counter
 $C54C RET             ;

; Enemy configuration for FOOTMAN crouched or stand-by
;
; Used by the routine at #R$C531.
c$C54D POP DE          ;
; Set enemy configuration for FOOT MAN crouched
*$C54E LD A,(IX+$11)   ; {Return if state change counter is not zero
 $C551 OR A            ;
 $C552 RET NZ          ; }
 $C553 LD HL,$8E8A     ; Set #REGhl to the address for the graphic data of
                       ; crouched FOOT MAN
; Set enemy configuration for FOOT MAN. Used to set the type: crouched or
; stand-by
*$C556 LD (IX+$10),$00 ; Stop FOOT MAN
 $C55A LD (IX+$04),L   ; {Set the address for the static sprite graphic data
 $C55D LD (IX+$05),H   ; }
 $C560 LD (IX+$0E),$02 ; Set width of sprite
 $C564 LD (IX+$12),$01 ; Set FOOT MAN type to crouched
 $C568 CALL $A375      ; Set #REGa a pseudo-random number
 $C56B AND $0F         ; {Set the pseudo-rendom number to be between $1F and
 $C56D ADD A,$10       ; $10}
 $C56F LD (IX+$11),A   ; Set this number to the state change counter
 $C572 SET 7,(IX+$09)  ; Set the enemy type to select the address for the
                       ; static graphic data
 $C576 RET             ;

; Handle FOOT MAN walking/stand-by state change
;
; Used by the routine at #R$BA5C.
c$C577 LD A,(IX+$09)   ; {Return if enemy type is not FOOT MAN
 $C57A OR A            ;
 $C57B RET NZ          ; }
 $C57C LD A,(IX+$02)   ; {Jump forward if FOOT MAN is facing left
 $C57F OR A            ;
 $C580 JP NZ,$C58E     ; }
 $C583 LD A,(IX+$00)   ; {FOOT MAN is facing right. Return if x-position of
 $C586 AND $07         ; bits2-0 of FOOTMAN is not $02
 $C588 CP $02          ;
 $C58A RET NZ          ; }
 $C58B JP $C596        ; Jump to check for change state
*$C58E LD A,(IX+$00)   ; {FOOT MAN is facing left. Return if x-position of
 $C591 AND $07         ; bits2-0 of FOOTMAN is not $04
 $C593 CP $04          ;
 $C595 RET NZ          ; }
*$C596 CALL $A375      ; Set #REGa a pseudo-random number
 $C599 CP $FA          ; {Return if pseudo-random number if smaller than $FA
 $C59B RET C           ; }
 $C59C LD A,(IX+$06)   ; {Return if FOOT MAN is falling
 $C59F OR A            ;
 $C5A0 RET NZ          ; }
 $C5A1 LD A,(IX+$03)   ; {Return if FOOT MAN is jumping
 $C5A4 OR A            ;
 $C5A5 RET NZ          ; }
 $C5A6 LD A,(IX+$11)   ; {Retunr if state change counter is not zero
 $C5A9 OR A            ;
 $C5AA RET NZ          ; }
 $C5AB LD HL,$91B2     ; Set #REGhl to the address pointer for the graphic data
                       ; of FOOT MAN stand-by
 $C5AE CALL $C556      ; Set enemy configuration for FOOT MAN stand-by
 $C5B1 LD (IX+$12),$02 ; Set FOOT MAN to type Stand-by
 $C5B5 RET             ;

; Handle FOOT MAN walking/crouching state change
;
; Used by the routine at #R$BA5C.
c$C5B6 LD A,(IX+$09)   ; {Entity type is FOOT MAN?
 $C5B9 AND $7F         ;
 $C5BB OR A            ; }
 $C5BC RET NZ          ; Return if it isn't
 $C5BD LD A,(IX+$12)   ; {FOOT MAN is walking?
 $C5C0 OR A            ; }
 $C5C1 JP Z,$C5EF      ; Jump to decrement state counter
 $C5C4 LD A,(IX+$11)   ; SEt #REGa to state counter
 $C5C7 CP $C8          ; is for fixed crouch foot man?
 $C5C9 RET Z           ; Return if so
 $C5CA DEC (IX+$11)    ; Decrement state counter
 $C5CD RET NZ          ; Return if no 0
; State counter reached 0: change state to walking
 $C5CE LD (IX+$10),$02 ; Set footman speed
 $C5D2 RES 7,(IX+$09)  ; Set footman walking type
 $C5D6 LD (IX+$0E),$03 ; Set width of sprite (in bytes)
 $C5DA LD (IX+$11),$09 ; Set state counter
 $C5DE LD A,(IX+$12)   ; {is footman stand-by?
 $C5E1 CP $02          ; }
 $C5E3 JP NZ,$C5EA     ; Jump if walking or crouched
 $C5E6 LD (IX+$11),$01 ; Set state counter
*$C5EA LD (IX+$12),$00 ; Set footman walking
 $C5EE RET             ;
*$C5EF LD A,(IX+$11)   ; {Decrement counter if counter > 0
 $C5F2 DEC A           ;
 $C5F3 CP $FF          ;
 $C5F5 RET Z           ;
 $C5F6 LD (IX+$11),A   ;
 $C5F9 RET             ; }

; Routine not used
s$C5FA RET
 $C5FB RET
 $C5FC RET

; Enemy configuration for FOOT MAN jumping
;
; Used by the routines at #R$C4A6 and #R$C540.
c$C5FD LD A,(IX+$11)   ; {Return if state change counter is not zero
 $C600 OR A            ;
 $C601 RET NZ          ; }
; Configure FOOT MAN to jump. This entry point is used by the routines at
; #R$C3E0 and #R$D3C2.
*$C602 LD A,(IX+$06)   ; {Return if FOOT MAN falling
 $C605 OR A            ;
 $C606 RET NZ          ; }
 $C607 LD A,(IX+$01)   ; {Return if y-position less than $18
 $C60A CP $18          ;
 $C60C RET C           ; }
 $C60D LD A,(IX+$03)   ; {Return if FOOT MAN is jumping
 $C610 OR A            ;
 $C611 RET NZ          ; }
 $C612 LD (IX+$03),$01 ; Set FOOT MAN jumping
 $C616 LD HL,$D0D8     ; {Set y-offset for FOOT MAN jumping
 $C619 LD (IX+$04),L   ;
 $C61C LD (IX+$05),H   ; }
 $C61F RET             ;

; Handler for enemies going up: SCANNER, POD, MINE LAYER and FOOTMAN Jumping
;
; Used by the routine at #R$BA5C.
c$C620 LD A,(IX+$09)   ; Check enemy type
 $C623 CP $FE          ; {Return if bubble
 $C625 RET Z           ; }
 $C626 CP $FD          ; {Return if smartbomb
 $C628 RET Z           ; }
 $C629 CP $FC          ; {Return if question
 $C62B RET Z           ; }
 $C62C AND $7F         ;
 $C62E CP $08          ; is SCANNER?
 $C630 JP Z,$C213      ; Jump to handle SCANNER - moves up
 $C633 CP $0C          ; is POD?
 $C635 JP Z,$C05A      ; Jump to handle POD
 $C638 CP $0D          ; is MINE LAYER?
 $C63A JP Z,$C05A      ; Jump to handle MINE LAYER
 $C63D CP $0E          ; {Return if MINE
 $C63F RET Z           ; }
 $C640 CP $0F          ; {Return if BLOB
 $C642 RET Z           ; }
 $C643 LD A,(IX+$03)   ; {return if enemy is not FOOT MAN jumping
 $C646 OR A            ;
 $C647 RET Z           ; }
 $C648 LD A,(IX+$00)   ; {Set #R$A0AF to the x-position of enemy
 $C64B LD ($A0AF),A    ; }
 $C64E LD A,(IX+$01)   ; {Set #R$A0B0 to the y-position of enemy
 $C651 LD ($A0B0),A    ; }
 $C654 LD A,(IX+$02)   ; Set #REGa to the direction of enemy
 $C657 CALL $A503      ; Set into #REGhl the address into tile type buffer of
                       ; enemy position
 $C65A INC HL          ; Increment #REGhl
 $C65B CALL $D06C      ; Check if tile type is a wall
 $C65E JP Z,$C6A1      ; Jump if it's a wall
 $C661 INC HL          ; Increment #REGhl
 $C662 CALL $D06C      ; Check if tile type is a wall
 $C665 JP Z,$C6A1      ; Jump if it's a wall
 $C668 LD A,(IX+$01)   ; Set #REGa to the y-position
 $C66B LD L,(IX+$04)   ; {Set #REGhl to the address for jumping y-offset
 $C66E LD H,(IX+$05)   ; }
 $C671 LD E,(HL)       ; {Computes the new y-position
 $C672 SUB E           ; }
 $C673 CP $08          ; {if y-position is less than 8 then start falling
 $C675 JP C,$C68B      ; }
 $C678 LD (IX+$01),A   ; Set the new y-position
 $C67B INC HL          ; {Increment y-offset address
 $C67C LD (IX+$04),L   ;
 $C67F LD (IX+$05),H   ; }
 $C682 LD A,(HL)       ; {if no end marker for y-offet then return
 $C683 CP $FF          ;
 $C685 RET NZ          ; }
 $C686 LD (IX+$03),$00 ; Finish jumping
 $C68A RET             ;
; FOOT MAN start falling
*$C68B LD (IX+$03),$00 ; Set FOOT MAN not jumping
 $C68F LD (IX+$06),$02 ; Set FOOT MAN falling (speed 2)
 $C693 LD A,(IX+$09)   ; {if FOOT MAN is dying jump back and destroy it
 $C696 CP $07          ;
 $C698 JP Z,$981F      ;
 $C69B CP $06          ;
 $C69D JP Z,$981F      ; }
 $C6A0 RET             ;
; FOOT MAN start falling
*$C6A1 LD A,(IX+$09)   ; {if FOOT MAN is dying jump back and destroy it
 $C6A4 CP $07          ;
 $C6A6 JP Z,$981F      ;
 $C6A9 CP $06          ;
 $C6AB JP Z,$981F      ; }
 $C6AE LD (IX+$06),$02 ; Set FOOT MAN falling (speed 2)
 $C6B2 LD (IX+$03),$00 ; Set FOOT MAN not jumping
 $C6B6 LD A,(IX+$01)   ; {if bits2-0 of y-position are 0 then stop falling
 $C6B9 AND $07         ;
 $C6BB OR A            ;
 $C6BC RET NZ          ;
 $C6BD LD (IX+$06),$00 ; }
 $C6C1 RET             ;

; Handler for enemies going down: SCANNER, POD, MINE LAYER and FOOTMAN falling
;
; Used by the routine at #R$BA5C.
c$C6C2 LD A,(IX+$09)   ; {Check enemy type
 $C6C5 AND $7F         ; }
 $C6C7 CP $08          ; is SCANNER?
 $C6C9 JP Z,$C2FD      ; Jump to handle scanner moving down
 $C6CC CP $0C          ; {Return if POD
 $C6CE RET Z           ; }
 $C6CF CP $0D          ; {Return if MINE LAYER
 $C6D1 RET Z           ; }
 $C6D2 CP $0E          ; {Return if MINE
 $C6D4 RET Z           ; }
 $C6D5 CP $0F          ; {Return if BLOB
 $C6D7 RET Z           ; }
 $C6D8 LD A,(IX+$03)   ; {Return if FOOT MAN jumping
 $C6DB OR A            ;
 $C6DC RET NZ          ; }
 $C6DD LD A,(IX+$01)   ; {Add to y-position the falling speed
 $C6E0 ADD A,(IX+$06)  ; }
 $C6E3 CP $B8          ; y-position is greater than $B8?
 $C6E5 JP NC,$C71A     ; Jump to make FOOTMAN invisible
 $C6E8 LD (IX+$01),A   ; Set the new y-position
 $C6EB AND $07         ; {Return if y-position is not grid fixed
 $C6ED OR A            ;
 $C6EE RET NZ          ; }
 $C6EF CALL $C72B      ; Obtain into #REGhl the tile type address pointer under
                       ; FOOT MAN
 $C6F2 LD A,(HL)       ; Set #REGa the tile type under FOOT MAN
 $C6F3 CALL $D08B      ; Check if tile type is 'background' tile
 $C6F6 JP NZ,$C70D     ; Jump if wall tile type
 $C6F9 INC HL          ; Increment #REGhl
 $C6FA LD A,(HL)       ; Set #REGa the tile type under FOOT MAN
 $C6FB CALL $D08B      ; Check if tile type is 'background' tile
 $C6FE JP NZ,$C70D     ; Jump if wall tile type
; continue falling
 $C701 LD A,(IX+$06)   ; {Increment falling speed by 2 if speed less than $04
 $C704 ADD A,$02       ;
 $C706 CP $06          ;
 $C708 RET Z           ;
 $C709 LD (IX+$06),A   ; }
 $C70C RET             ;
; stop falling
*$C70D LD (IX+$06),$00 ; Reset falling
 $C711 LD A,(IX+$09)   ; {if enemy is FOOT MAN dying then destroy it
 $C714 CP $07          ;
 $C716 JP Z,$981F      ; }
 $C719 RET             ;
; enemy falling from screen
*$C71A LD (IX+$0C),$00 ; Set entity invisble
 $C71E LD HL,$E9FF     ; {Set base address into attribute buffer for score
 $C721 LD ($A039),HL   ; points}
 $C724 LD HL,$0000     ; {Set score point to zero
 $C727 LD ($A03C),HL   ; }
 $C72A RET             ;

; Obtain the tile type address pointer under the entity
;
; Used by the routines at #R$BA5C, #R$C05A and #R$C6C2.
c$C72B LD A,(IX+$00) ; {Set #R$A0AF the x-position of entity
 $C72E LD ($A0AF),A  ; }
 $C731 LD A,(IX+$01) ; {Set #R$A0B0 the y-position of entity
 $C734 LD ($A0B0),A  ; }
 $C737 LD A,(IX+$02) ; Set #REGa the direction of entity
 $C73A CALL $A503    ; {Point #REGhl to the address into tile buffer of the
 $C73D LD DE,$0061   ; tile under the entity
 $C740 ADD HL,DE     ; }
 $C741 LD ($A01B),HL ; Save at #R$A01B to the address into tile buffer of the
                     ; tile under the entity
 $C744 RET           ;

; Initialize graphic and attribute data buffers for current room
;
; Used by the routine at #R$A89D.
c$C745 LD A,($A05F)    ; {If atoms of Rex ar not flushing on teleporting reset
 $C748 OR A            ; sound volume
 $C749 CALL Z,$D5D7    ; }
 $C74C LD HL,$DE9F     ; {Reset tile type and tile counter buffer
 $C74F LD DE,$DEA0     ;
 $C752 LD BC,$065F     ;
 $C755 LD (HL),$00     ;
 $C757 LDIR            ; }
 $C759 LD A,$01        ; {Initialize counter for tile drawn on room grahics
 $C75B LD ($A01D),A    ; buffer}
 $C75E LD IX,$EB00     ; Set #REGix to the base address of room graphic buffer
 $C762 LD HL,$D962     ; Set #REGhl to the base address of mapping table for
                       ; tile grahic data and room graphic buffer
 $C765 LD ($A0B9),HL   ; Copy at #R$A0B9 this base address
 $C768 LD A,($A0B8)    ; {Set #REGde to the current room number
 $C76B LD E,A          ;
 $C76C LD D,$00        ; }
 $C76E LD B,$46        ; Set #REGb to the number of supertiles in the room
 $C770 CALL $C8E8      ; Computes the offset in the room layout table for the
                       ; current room (70 x number of room)
 $C773 LD DE,$75E0     ; {Set #REGhl to the base address in the room layout
 $C776 ADD HL,DE       ; table for the current room}
 $C777 PUSH HL         ; {Copy the base address into #REGiy
 $C778 POP IY          ; }
 $C77A LD B,$07        ; Set #REGb to the number of supertiles row for a room
                       ; (10x7)
*$C77C PUSH BC         ; {Save REGbc and REGix
 $C77D PUSH IX         ; }
 $C77F LD B,$0A        ; Set #REGb to the number of supertiles columns for a
                       ; room (10x7)
*$C781 PUSH BC         ; Save #REGbc
 $C782 LD A,(IY+$00)   ; {Pickup into #REGde the number of supertile pointed by
 $C785 LD E,A          ; #REGiy
 $C786 LD D,$00        ; }
 $C788 LD B,$09        ; Set #REGb to the number of tiles for each supertile
                       ; (3x3)
 $C78A CALL $C8E8      ; {Computes the base addres for the supertile layout
 $C78D LD DE,$6CE0     ;
 $C790 ADD HL,DE       ; }
 $C791 CALL $C7C5      ; Initialize the supertile
 $C794 LD DE,$0003     ; {Point #REGix to the next supertile location in the
 $C797 ADD IX,DE       ; room graphic buffer}
 $C799 INC IY          ; Point #REGiy to the next supertile
 $C79B POP BC          ; Restore #REGbc
 $C79C DJNZ $C781      ; Jump back until all supertiles in a row are drawn
 $C79E POP IX          ; Restore #REGix
 $C7A0 LD DE,$0300     ; {Point #REGix to the first supertile of the next row
 $C7A3 ADD IX,DE       ; in the room graphics buffer}
 $C7A5 POP BC          ; Restore #REGbc
 $C7A6 DJNZ $C77C      ; Jump back until all the seven rows of supertiles are
                       ; drawn
 $C7A8 LD HL,$5860     ; {Fill the attribute file with color attribute $47 if
 $C7AB LD BC,$02A0     ; the current color attribute is $00
*$C7AE LD A,(HL)       ;
 $C7AF OR A            ;
 $C7B0 JP NZ,$C7B5     ;
 $C7B3 LD (HL),$47     ;
*$C7B5 DEC BC          ;
 $C7B6 INC HL          ;
 $C7B7 LD A,B          ;
 $C7B8 OR C            ;
 $C7B9 JP NZ,$C7AE     ; }
 $C7BC LD A,($A05F)    ; {Is #R$A05F = 0 ?
 $C7BF OR A            ; }
 $C7C0 RET NZ          ; Return if it isn't
 $C7C1 CALL $D5AE      ; Reset sound data buffer
 $C7C4 RET             ;
; Initialize a supertile
*$C7C5 PUSH IX         ; Save #REGix
 $C7C7 LD B,$03        ; Set #REGb to the number of rows per supertile (3x3)
*$C7C9 PUSH BC         ; Save #REGbc
 $C7CA LD B,$03        ; Set #REGb to the number of columns per supertile (3x3)
*$C7CC PUSH BC         ; Save #REGbc
 $C7CD LD A,(HL)       ; Set #REGa to the value of the tile
 $C7CE CALL $C7E2      ; Copy color attribute, type and graphic data of the
                       ; tile into corresponding buffers and drawn tile
 $C7D1 INC HL          ; Point #REGhl to the next tile in the supertile layout
 $C7D2 INC IX          ; Point #REGix to the next address into room graphic
                       ; buffer
 $C7D4 POP BC          ; Restore #REGbc
 $C7D5 DJNZ $C7CC      ; Jump back until all the tiles in a row are drawn
 $C7D7 LD DE,$00FD     ; {Point #REGix to the addres into room graphics buffer
 $C7DA ADD IX,DE       ; for the next row of tiles}
 $C7DC POP BC          ; Restore #REGbc
 $C7DD DJNZ $C7C9      ; Jump back until all three rows of tiles are drawn
 $C7DF POP IX          ; Restore #REGix
 $C7E1 RET             ;
; Copy the color attribute of the file to the attribute buffer, the tile type
; into the tile type buffer, the mapping of the address for the graphic data
; and the address of the location of the tile into graphics data buffer and
; drawn the tile into the room graphics buffer
*$C7E2 PUSH HL         ; {Save #REGhl and #REGaf
 $C7E3 PUSH AF         ; }
 $C7E4 LD ($A095),A    ; Save the tile value into temporal variable #R$A095
 $C7E7 LD E,A          ; {Computes the address into the tile attributes table
 $C7E8 LD D,$00        ; for the corresponent tile
 $C7EA LD HL,$6BE0     ;
 $C7ED ADD HL,DE       ; }
 $C7EE LD A,(HL)       ; Set #REGa to the color attribute for the tile
 $C7EF PUSH IX         ; {Copy #REGix into #REGhl
 $C7F1 POP HL          ; }
 $C7F2 CALL $C893      ; Computes into #REGhl the position of the tile in the
                       ; attribute buffer
 $C7F5 LD (HL),A       ; Save the color attribute for the tile into attribute
                       ; buffer
 $C7F6 LD DE,$E55F     ; {Computes into #REGhl the offset of the tile into the
 $C7F9 AND A           ; attribute buffer
 $C7FA SBC HL,DE       ; }
 $C7FC LD DE,$E1FF     ; {And add this offset to the base address of the tile
 $C7FF ADD HL,DE       ; type buffer}
 $C800 PUSH HL         ; Save #REGhl
 $C801 LD ($A01E),HL   ; Save the address into tile type buffer of the tile at
                       ; #R$A01E
 $C804 LD A,($A095)    ; Pick up the tile value from #R$A095
 $C807 LD E,A          ; {Set #REGhl to the address of the tile type table for
 $C808 LD D,$00        ; the tile
 $C80A LD HL,$62E0     ;
 $C80D ADD HL,DE       ; }
 $C80E LD A,(HL)       ; Set #REGa to the tile type value of the tile
 $C80F POP HL          ; Restore into #REGhl the address of the tile type
                       ; buffer
 $C810 LD (HL),A       ; Copy the value of the tile type into the tile type
                       ; buffer
 $C811 POP AF          ; Restore #REGaf
 $C812 LD L,A          ; {Computes address for the graphics data of the tile
 $C813 LD H,$00        ; into #REGhl
 $C815 ADD HL,HL       ;
 $C816 ADD HL,HL       ;
 $C817 ADD HL,HL       ;
 $C818 LD DE,$63E0     ;
 $C81B ADD HL,DE       ; }
 $C81C EX DE,HL        ; Exchange #REGde and #REGhl
 $C81D LD B,$08        ; Set #REGb to the number of bytes to copy into graphics
                       ; buffer
 $C81F PUSH IX         ; {Copy #REGix into #REGhl
 $C821 POP HL          ; }
; Check if the tile is visible
 $C822 LD A,($A095)    ; Set #REGa to the tile value
 $C825 OR A            ; is a background (blank) tile?
 $C826 JP Z,$C87F      ; Jump forward (this will not be drawn in display file)
 $C829 CP $01          ; ia an S (space) tile?
 $C82B JP Z,$C87F      ; Jump forward (this will not be drawn in display file)
 $C82E CP $10          ; is an RJ (random jump) tile?
 $C830 JP Z,$C87F      ; Jump forward (this will not be drawn in display file)
 $C833 CP $71          ; is a D (always crouch) tile?
 $C835 JP Z,$C87F      ; Jump forward (this will not be drawn in display file)
 $C838 CP $81          ; is a J (always jump) tile?
 $C83A JP Z,$C87F      ; Jump forward (this will not be drawn in display file)
 $C83D CP $91          ; is a RD (random crouch) tile?
 $C83F JP Z,$C87F      ; Jump forward
; Establish mapping between tile graphic data and room graphics buffer
 $C842 PUSH IY         ; Save #REGiy
 $C844 LD IY,($A0B9)   ; Set #REGiy to the address pointer into the mapping
                       ; table of tile graphics and room graphics buffer
 $C848 LD (IY+$00),L   ; {Save into the first word the address of the room
 $C84B LD (IY+$01),H   ; graphics buffer where tile will be draw}
 $C84E LD (IY+$02),E   ; {Save into the second word the address of the tile
 $C851 LD (IY+$03),D   ; graphics data for the tile drawn}
 $C854 LD (IY+$04),$FF ; Set in the fifth byte the end marker
 $C858 PUSH HL         ; {Save #REGhl and #REGde
 $C859 PUSH DE         ; }
 $C85A LD HL,($A01E)   ; Set #REGhl to the address pointer into the tile type
                       ; buffer
 $C85D LD DE,$E19F     ; {Computes the offset of the current tile into the tile
 $C860 AND A           ; type buffer
 $C861 SBC HL,DE       ; }
 $C863 LD DE,$DE9F     ; {Add the offset to the base address of the tile count
 $C866 ADD HL,DE       ; buffer to obtain the address for the current tile}
 $C867 LD A,($A01D)    ; {Save the current count tile into this address
 $C86A LD (HL),A       ; }
 $C86B INC A           ; {Increment the tile count number
 $C86C LD ($A01D),A    ; }
 $C86F POP DE          ; {Restore #REGde and #REGhl
 $C870 POP HL          ; }
 $C871 INC IY          ; {Point to the next address into the mapping table of
 $C873 INC IY          ; tile graphics and room graphics buffer
 $C875 INC IY          ;
 $C877 INC IY          ; }
 $C879 LD ($A0B9),IY   ; Point #R$A0B9 to the new address
 $C87D POP IY          ; Restore #REGiy
; Copy tile graphics into room graphics buffer
*$C87F LD A,(DE)       ; {Copy the tile graphic data into room graphic buffer
 $C880 LD (HL),A       ;
 $C881 INC DE          ;
 $C882 PUSH DE         ;
 $C883 LD DE,$0020     ;
 $C886 ADD HL,DE       ;
 $C887 POP DE          ;
 $C888 DJNZ $C87F      ; }
 $C88A LD HL,($A01E)   ; {Increment the tile type address at #R$A01E
 $C88D INC HL          ;
 $C88E LD ($A01E),HL   ; }
 $C891 POP HL          ; Restore #REGhl
 $C892 RET             ;
; Computes into #REGhl the position of the tile in the attribute buffer
*$C893 PUSH AF         ; {Save #REGaf and #REGde
 $C894 PUSH DE         ; }
 $C895 LD DE,$EAFF     ; Set #REGde to the address of the room graphics buffer
 $C898 AND A           ; Reset carry bit
 $C899 SBC HL,DE       ; Set #REGhl to the offset of the current tile into
                       ; graphic buffer
 $C89B LD A,L          ; {Computes into #REGa the horizontal position of the
 $C89C AND $1F         ; tile}
 $C89E LD ($A093),A    ; Save this into #R$A093
 $C8A1 LD A,L          ; {Computes into #REGhl the offset for the vertical
 $C8A2 AND $E0         ; position of the tile
 $C8A4 LD L,A          ;
 $C8A5 SRL H           ;
 $C8A7 RR L            ;
 $C8A9 SRL H           ;
 $C8AB RR L            ;
 $C8AD SRL H           ;
 $C8AF RR L            ; }
 $C8B1 LD A,($A093)    ; Restore horizontal position into #REGa
 $C8B4 LD E,A          ; {And add the horizontal position to the computed
 $C8B5 LD D,$00        ; offset for the vertical position
 $C8B7 ADD HL,DE       ; }
 $C8B8 LD DE,$E55F     ; {Set #REGhl to the address of the tile into the
 $C8BB ADD HL,DE       ; attribute buffer}
 $C8BC POP DE          ; {Restore #REGde and #REGaf
 $C8BD POP AF          ; }
 $C8BE RET             ;

; Copy room color attribute buffer to attribute file
;
; Used by the routines at #R$9786, #R$A89D and #R$D871.
c$C8BF LD DE,$5860   ; {Copy attribute buffer for room intro attribute file
 $C8C2 LD HL,$E55F   ;
 $C8C5 LD BC,$02A0   ;
 $C8C8 LDIR          ; }
 $C8CA LD HL,$5860   ; {Set color attribute $47 for the first and last column
 $C8CD LD B,$15      ; of the room
*$C8CF LD (HL),$47   ;
 $C8D1 LD DE,$001F   ;
 $C8D4 ADD HL,DE     ;
 $C8D5 LD (HL),$47   ;
 $C8D7 INC HL        ;
 $C8D8 DJNZ $C8CF    ; }
 $C8DA RET           ;

; Utilities routine - Wait some time
;
; Wait 182 t-states for every value on #REGbc. Used by the routines at #R$D871
; and #R$DAC0.
;
; BC Number of times to wait 182 t-states
c$C8DB PUSH BC       ; Save #REGbc
 $C8DC LD B,$0A      ; {Loop ten times
*$C8DE DJNZ $C8DE    ; }
 $C8E0 POP BC        ; Restore #REGbc
 $C8E1 DEC BC        ; Decrement #REGbc
 $C8E2 LD A,B        ; {Is #REGbc == 0?
 $C8E3 OR C          ; }
 $C8E4 JP NZ,$C8DB   ; Jump back if not
 $C8E7 RET           ;

; Utilities routine - Multiply two values
;
; Used by the routines at #R$9AC5, #R$C745, #R$C8EF and #R$CE67.
;
; I:DE Operand
; I:B Operand
; O:HL Result
c$C8E8 LD HL,$0000   ;
*$C8EB ADD HL,DE     ;
 $C8EC DJNZ $C8EB    ;
 $C8EE RET           ;

; Configure room connection and enemies of the room
;
; Copy the values of room connection and enemy entry from #R$B133 and
; corresponent enemy configuration data to the status variables. Used by the
; routine at #R$A89D.
c$C8EF LD A,($A0B8)  ; {Set #REGde to the room number to diplay
 $C8F2 LD E,A        ;
 $C8F3 LD D,$00      ; }
 $C8F5 LD B,$06      ; Set #REGb to the length in bytes of the room connections
                     ; data for every room at #R$B133
 $C8F7 CALL $C8E8    ; Multiple room number by length of byte of the room
                     ; connections
 $C8FA LD DE,$B133   ; {Set #REGhl to the point to the first byte into the room
 $C8FD ADD HL,DE     ; connection data for the corresponent room number}
 $C8FE LD A,(HL)     ; {Set #$A08E to the number of the top room
 $C8FF LD ($A08E),A  ; }
 $C902 INC HL        ; Point to the next byte
 $C903 LD A,(HL)     ; {Set #$A08D to the number of the right room
 $C904 LD ($A08D),A  ; }
 $C907 INC HL        ; Point to the next byte
 $C908 LD A,(HL)     ; {Set #$A08F to the number of the bottom room
 $C909 LD ($A08F),A  ; }
 $C90C INC HL        ; Point to the next byte
 $C90D LD A,(HL)     ; {Set #$A08F to the number of the left room
 $C90E LD ($A090),A  ; }
 $C911 INC HL        ; Point to the next byte
 $C912 LD E,(HL)     ; {Copy to #REGde the address pointer for the enemy
 $C913 INC HL        ; configuration of this room
 $C914 LD D,(HL)     ; }
 $C915 LD A,(DE)     ; {Set #R$A092 to the max number of enemies in the room
 $C916 AND $1F       ;
 $C918 LD ($A092),A  ; }
 $C91B XOR A         ; Set #REGa=0
 $C91C LD ($A02E),A  ; {Initialise Enemy Entry From indicator, so by default no
 $C91F LD ($A02D),A  ; enemy enters the room
 $C922 LD ($A02C),A  ; }
 $C925 LD A,(DE)     ; {Reads bit 7 of first byte of the enemy configuration
 $C926 BIT 7,A       ; data}
 $C928 CALL NZ,$C948 ; If bit set, configure that enemy enters from the top
 $C92B BIT 6,A       ; Reads bit 6 of first byte of the enemy configuration
                     ; data
 $C92D CALL NZ,$C94E ; If bit set, configure that enemy enters from the right
 $C930 BIT 5,A       ; Reads bit 5 of first byte of the enemy configuration
                     ; data
 $C932 CALL NZ,$C954 ; If bit set, configure that enemy enters from the left
 $C935 INC DE        ; Point to the next byte
 $C936 LD A,(DE)     ; {Set #R$A043 and #R$A044 to the counter for enemy enters
 $C937 LD ($A043),A  ; the room
 $C93A LD ($A044),A  ; }
 $C93D INC DE        ; Point to the next byte
 $C93E LD A,(DE)     ; {Set #R$A088 to the type of enemy
 $C93F LD ($A088),A  ; }
 $C942 INC DE        ; Point to the next byte
 $C943 LD ($A020),DE ; Point #R$A020 to the address where begins the
                     ; configuration for static enemies
 $C947 RET           ;
; Enemy enters the room from the top
*$C948 LD HL,$A02E   ;
 $C94B LD (HL),$FF   ;
 $C94D RET           ;
; Enemy enters the room from the right
*$C94E LD HL,$A02D   ;
 $C951 LD (HL),$FF   ;
 $C953 RET           ;
; Enemy enters room from the left
*$C954 LD HL,$A02C   ;
 $C957 LD (HL),$FF   ;
 $C959 RET           ;

; Check for end game room
;
; Used by the routines at #R$D0A0, #R$D0B1, #R$D0E4 and #R$D14D.
c$C95A LD A,($A0B8)  ; {If current room is $63 then jump to show password code
 $C95D CP $63        ; for Rex 2
 $C95F JP Z,$A7CE    ; }
 $C962 JP $9583      ; Jump back to the main loop game

; Initialize train for the current room
;
; Used by the routine at #R$A89D.
c$C965 LD A,($A045)  ; {Return if generating train in current room
 $C968 OR A          ;
 $C969 RET NZ        ; }
 $C96A LD A,(HL)     ; {Set #R$A048 to the timer value for train to appears
 $C96B LD ($A048),A  ; }
 $C96E INC HL        ; Increment address to train data definition
 $C96F LD ($A046),HL ; Set #R$A046 to the new address
 $C972 LD A,$01      ; {Set variable to train is generating in current room
 $C974 LD ($A045),A  ; }
 $C977 RET           ;

; Generate train parts: front, middle or rear wagon
;
; Used by the routines at #R$947A and #R$A915.
c$C978 LD A,($A045)  ; {Return if not generating train in current room
 $C97B OR A          ;
 $C97C RET Z         ; }
 $C97D LD A,($A048)  ; {Decrement train appareance counter
 $C980 DEC A         ;
 $C981 LD ($A048),A  ; }
 $C984 OR A          ; {Return if counter is not zero
 $C985 RET NZ        ; }
 $C986 LD HL,$5E72   ; Set #REGhl to the base address for entity definition -
                     ; visibility of entity
 $C989 LD A,($A092)  ; {Set #REGb to the max number of entities on screen
 $C98C LD B,A        ; }
*$C98D LD A,(HL)     ; {if entity not visible jump configure the new train-part
 $C98E OR A          ; (front, rear or wagon)
 $C98F JP Z,$C99D    ; }
 $C992 LD DE,$0018   ; {Increment to the next slot for entity definition and
 $C995 ADD HL,DE     ; jump back
 $C996 DJNZ $C98D    ; }
 $C998 XOR A         ; {Stop generating the train if no slots available
 $C999 LD ($A045),A  ; }
 $C99C RET           ;
; Generate a new train part
*$C99D LD DE,$000C   ; {Point #REGhl to the base address of the corresponent
 $C9A0 AND A         ; entity configuration
 $C9A1 SBC HL,DE     ; }
 $C9A3 PUSH HL       ; Save #REGhl
 $C9A4 POP IX        ; Restore #REGix
 $C9A6 LD IY,($A046) ; {Set #REGa to the entity type for the wagon
 $C9AA LD A,(IY+$00) ; }
 $C9AD CP $FF        ; {if end of train jump forward and stop generating train
 $C9AF JP Z,$C9C5    ; parts}
 $C9B2 CALL $CB88    ; Configure entity type wagon
 $C9B5 LD A,(IY+$03) ; {Set #R$A048 to the next train appearance counter
 $C9B8 LD ($A048),A  ; }
 $C9BB LD DE,$0004   ; {Point #R$A046 to the address for the next train wagon
 $C9BE ADD IY,DE     ;
 $C9C0 LD ($A046),IY ; }
 $C9C4 RET           ;
*$C9C5 XOR A         ; {Stop generating the train - no more wagons left
 $C9C6 LD ($A045),A  ; }
 $C9C9 RET           ;

; Creates a new mobile enemy on room
;
; Used by the routines at #R$947A and #R$A915.
c$C9CA LD A,($A045)    ; {Return if generating train in current room
 $C9CD OR A            ;
 $C9CE RET NZ          ; }
 $C9CF LD A,($A043)    ; {Decrement enemy room enter counter
 $C9D2 DEC A           ;
 $C9D3 LD ($A043),A    ; }
 $C9D6 OR A            ; {Return if coutner has not reached zero
 $C9D7 RET NZ          ; }
 $C9D8 LD A,($A044)    ; {Reset counter with the original value
 $C9DB LD ($A043),A    ; }
 $C9DE LD HL,$5E72     ; Set #REGhl to the base address for enemy status into
                       ; the enemy configuration table
 $C9E1 LD A,($A092)    ; {Set #REGb to the max number of enemies for the room
 $C9E4 LD B,A          ; }
*$C9E5 LD A,(HL)       ; Check enemy status
 $C9E6 OR A            ; {Jump forward if enemy dead/not visible
 $C9E7 JP Z,$C9F1      ; }
 $C9EA LD DE,$0018     ; {Point to the next enemy configuration
 $C9ED ADD HL,DE       ; }
 $C9EE DJNZ $C9E5      ; Jump back until all the enemies slots checked
 $C9F0 RET             ;
; try to create a new enemy
*$C9F1 LD DE,$000C     ; {Point #REGhl to the base address for the current slot
 $C9F4 AND A           ; of enemy configuration
 $C9F5 SBC HL,DE       ; }
 $C9F7 PUSH HL         ; {Set #REGix to this base address
 $C9F8 POP IX          ; }
 $C9FA CALL $A375      ; Set #REGa a pseudo random number
 $C9FD CP $55          ; is #REGa less than 85?
 $C9FF JP C,$CA0F      ; Jump to handle enemy enters from the left
 $CA02 CP $AA          ; is #REGa less than 170?
 $CA04 JP C,$CA0B      ; Jump to handle enemy enters from the right
 $CA07 CALL $CAA7      ; Handle enemy enters from the top
 $CA0A RET             ;
*$CA0B CALL $CA71      ; Handle enemy enters from the right
 $CA0E RET             ;
*$CA0F CALL $CA13      ; Handle enemy enters from the left
 $CA12 RET             ;
; Handle enemy enters from the left
*$CA13 LD A,($A02C)    ; {Return if no enemies enters from the left
 $CA16 OR A            ;
 $CA17 RET Z           ; }
 $CA18 LD A,($A0B6)    ; {Return if x-position of Rex less than 48
 $CA1B CP $30          ;
 $CA1D RET C           ; }
 $CA1E LD A,$00        ; {Set x-pixel-position of enemy
 $CA20 LD ($A0AF),A    ; }
*$CA23 CALL $A375      ; Set #REGa a pseudo random number
 $CA26 CP $20          ; {Jump back until number generated is between 32 and
 $CA28 JP C,$CA23      ; 168
 $CA2B CP $A8          ;
 $CA2D JP NC,$CA23     ; }
 $CA30 AND $F8         ; Change number to be grid 8x8 fixed
 $CA32 LD ($A0B0),A    ; Set this number to the y-pixel-position for the enemy
 $CA35 CALL $CB03      ; Check if enemy can be generated
 $CA38 OR A            ; {Jump back if enemy cannot be generated
 $CA39 JP Z,$CA23      ; }
 $CA3C LD A,$0F        ; {Set x-pixel-position of enemy to 15
 $CA3E LD ($A0AF),A    ; }
 $CA41 CALL $CA49      ; Configure new enemy
 $CA44 LD (IX+$02),$00 ; Set enemy to face right
 $CA48 RET             ;
; Configure new enemy. Used by the routines at #R$CA13, #R$CA71 and #R$CAA7.
*$CA49 LD A,($A088)    ; {Set #REGa and #REGl the type of enemy to generate
 $CA4C LD L,A          ; }
 $CA4D BIT 7,A         ; {Jump forward if generate random FOOT MAN bit is not
 $CA4F JP Z,$CA60      ; set}
; try to generate random FOOT MAN
 $CA52 AND $7F         ; {Set #REGl the type of enemy to generate
 $CA54 LD L,A          ; }
 $CA55 CALL $A388      ; {Set #REGa a pseudo random number between 0 an 1
 $CA58 AND $01         ; }
 $CA5A OR A            ; {if random number is 1 then generate FOOT MAN
 $CA5B JP Z,$CA60      ; }
 $CA5E LD L,$00        ; Generate FOOT MAN
*$CA60 LD A,L          ; Set #REGa the new enemy type to create
 $CA61 CALL $CB8B      ; Configure the new enemy
 $CA64 LD A,($A0AF)    ; {Set x-pixel-position for enemy
 $CA67 LD (IX+$00),A   ; }
 $CA6A LD A,($A0B0)    ; {Set y-pixel-position for enemy
 $CA6D LD (IX+$01),A   ; }
 $CA70 RET             ;
; Handle enemy enters from the right
*$CA71 LD A,($A02D)    ; {Return if enemies doesn't enters from the right
 $CA74 OR A            ;
 $CA75 RET Z           ; }
 $CA76 LD A,($A0B6)    ; {Return if x-position of Rex greater than 200
 $CA79 CP $C8          ;
 $CA7B RET NC          ; }
 $CA7C LD A,$E0        ; {Set x-position of enemy at #R$A0AF
 $CA7E LD ($A0AF),A    ; }
*$CA81 CALL $A375      ; Set #REGa a pseudo random number
 $CA84 CP $20          ; {Jump back until number generated is between 32 and
 $CA86 JP C,$CA81      ; 168
 $CA89 CP $A8          ;
 $CA8B JP NC,$CA81     ; }
 $CA8E AND $F8         ; Change number to be grid 8x8 fixed
 $CA90 LD ($A0B0),A    ; Set this number to the y-pixel-position for the enemy
 $CA93 CALL $CB03      ; Check if enemy can be generated
 $CA96 OR A            ; {Jump back if enemy cannot be generated
 $CA97 JP Z,$CA81      ; }
 $CA9A LD A,$E8        ; {Set x-position of enemy at #R$A0AF
 $CA9C LD ($A0AF),A    ; }
 $CA9F CALL $CA49      ; Configure the new enemy
 $CAA2 LD (IX+$02),$01 ; Set enemy to face left
 $CAA6 RET             ;
; Handle enemy enters from the top
*$CAA7 LD A,($A02E)    ; {Return if enemies doesn't enters from the top
 $CAAA OR A            ;
 $CAAB RET Z           ; }
 $CAAC LD A,($A0B7)    ; {Return if y-position of Rex is less than 56
 $CAAF CP $38          ;
 $CAB1 RET C           ; }
 $CAB2 LD A,$18        ; {Set y-position of enemy
 $CAB4 LD ($A0B0),A    ; }
*$CAB7 CALL $A375      ; Set #REGa a pseudo random number
 $CABA CP $20          ; {Jump back until number generated is between 32 and
 $CABC JP C,$CAB7      ; 224
 $CABF CP $E0          ;
 $CAC1 JP NC,$CAB7     ; }
 $CAC4 AND $F8         ; Change number to be grid 8x8 fixed
 $CAC6 LD ($A0AF),A    ; Set this number to the x-pixel-position for the enemy
 $CAC9 CALL $A503      ; Computes into #REGhl the address into tile type buffer
                       ; for the enemy position
 $CACC LD A,(HL)       ; Set #REGa to the tile type
 $CACD OR A            ; {Jump back and computes another position if tile type
 $CACE JP NZ,$CAB7     ; is not background}
 $CAD1 INC HL          ; Increase address into tile type buffer
 $CAD2 LD A,(HL)       ; Set #REGa to the tile type
 $CAD3 OR A            ; {Jump back and computes another position if tile type
 $CAD4 JP NZ,$CAB7     ; is not background}
 $CAD7 INC HL          ; Increase address into tile type buffer
 $CAD8 LD A,(HL)       ; Set #REGa to the tile type
 $CAD9 OR A            ; {Jump back and computes another position if tile type
 $CADA JP NZ,$CAB7     ; is not background}
 $CADD LD DE,$001E     ; {Point #REGhl to the next row
 $CAE0 ADD HL,DE       ; }
 $CAE1 LD A,(HL)       ; Set #REGa to the tile type
 $CAE2 OR A            ; {Jump back and computes another position if tile type
 $CAE3 JP NZ,$CAB7     ; is not background}
 $CAE6 INC HL          ; Increase address into tile type buffer
 $CAE7 LD A,(HL)       ; Set #REGa to the tile type
 $CAE8 OR A            ; {Jump back and computes another position if tile type
 $CAE9 JP NZ,$CAB7     ; is not background}
 $CAEC LD A,($A0AF)    ; {Set the new x-position for enemy
 $CAEF ADD A,$10       ;
 $CAF1 LD ($A0AF),A    ; }
 $CAF4 XOR A           ; {Set y-position to 0
 $CAF5 LD ($A0B0),A    ; }
 $CAF8 CALL $CA49      ; Configure the enemy
 $CAFB LD A,R          ; {Set random facing direction for enemy
 $CAFD AND $FF         ;
 $CAFF LD (IX+$02),A   ; }
 $CB02 RET             ;

; Check if enemy can be generated in a position
;
; Used by the routines at #R$CA13 and #R$CA71.
;
; O:A Enemy can be generated if #REGa <> 0
c$CB03 CALL $A503    ; Computes into #REGhl address position in tile type
                     ; buffer based on (x,y) position on screen
 $CB06 LD DE,$0061   ; {Set #REGhl to point in front-under the feet of the
 $CB09 ADD HL,DE     ; enemy
 $CB0A LD ($A093),HL ; }
 $CB0D LD A,(HL)     ; Set #REGa the tile type
 $CB0E CALL $D08B    ; Check if tile type is background
 $CB11 JP Z,$CB50    ; Jump if not a background tile
 $CB14 LD DE,$0020   ; {Set #REGhl to point in front the feet of the enemy
 $CB17 AND A         ;
 $CB18 SBC HL,DE     ; }
 $CB1A LD A,(HL)     ; Set #REGa the tile type
 $CB1B CALL $D08B    ; Check if tile type is background
 $CB1E JP NZ,$CB50   ; Jump if not a background tile
 $CB21 AND A         ; {Set #REGhl to point in front the head of the enemy
 $CB22 SBC HL,DE     ; }
 $CB24 LD A,(HL)     ; Set #REGa the tile type
 $CB25 CALL $D08B    ; Check if tile type is background
 $CB28 JP NZ,$CB50   ; Jump if not a background tile
 $CB2B LD HL,($A093) ; {Recover base address in front-under of the feet of
 $CB2E INC HL        ; enemy and increase pointer}
 $CB2F LD A,(HL)     ; Set #REGa the tile type
 $CB30 CALL $D08B    ; Check if tile type is background
 $CB33 JP Z,$CB50    ; Jump if not a background tile
 $CB36 LD DE,$0020   ; {Set #REGhl to point in front the feet of the enemy
 $CB39 AND A         ;
 $CB3A SBC HL,DE     ; }
 $CB3C LD A,(HL)     ; Set #REGa the tile type
 $CB3D CALL $D08B    ; Check if tile type is background
 $CB40 JP NZ,$CB50   ; Jump if not a background tile
 $CB43 AND A         ; {Set #REGhl to point in front the head of the enemy
 $CB44 SBC HL,DE     ; }
 $CB46 LD A,(HL)     ; Set #REGa the tile type
 $CB47 CALL $D08B    ; Check if tile type is background
 $CB4A JP NZ,$CB50   ; Jump if not a background tile
 $CB4D LD A,$FF      ; Return #REGa = $FF so the enemy can be generated
 $CB4F RET           ;
*$CB50 XOR A         ; Return #REGa = 0 so the enemy cannot be generated
 $CB51 RET           ;

; Configure static enemies for the current room
;
; Used by the routine at #R$A89D.
c$CB52 LD HL,$5E66   ; {Reset enemy configuration buffer for the room
 $CB55 LD DE,$5E67   ;
 $CB58 LD BC,$017F   ;
 $CB5B LD (HL),$00   ;
 $CB5D LDIR          ; }
 $CB5F LD B,$10      ; Set #REGb to the max. number of static enemies per room
 $CB61 LD IX,$5E66   ; Set #REGix to the base addres for the enemy
                     ; configuration buffer
 $CB65 LD IY,($A020) ; Set #REGiy to the address for the static enemy
                     ; definition of the current room
*$CB69 PUSH BC       ; Save #REGbc
 $CB6A LD A,(IY+$00) ; Pick up the first byte of the static enemy defintion
 $CB6D CP $FF        ; is end of marker - no more enemies?
 $CB6F JP Z,$CB86    ; Jump forward and return
 $CB72 CALL $CB88    ; Configure the current enemy
 $CB75 INC IY        ; {Point #REGiy to the next enemy defintion
 $CB77 INC IY        ;
 $CB79 INC IY        ; }
 $CB7B LD DE,$0018   ; {Point #REGix to the next address for the enemy
 $CB7E ADD IX,DE     ; configuration buffer}
 $CB80 POP BC        ; {Recover and decrement counter at #REGbc
 $CB81 DEC B         ; }
 $CB82 JP NZ,$CB69   ; Jump while there are static enemies to configure
 $CB85 RET           ;
*$CB86 POP BC        ; Recover #REGbc
 $CB87 RET           ;

; Configure entity for the current room
;
; Used by the routines at #R$C978 and #R$CB52.
;
; IY Address for the object definition of the current room
; IX Address for the enemy/object configuration buffer
c$CB88 LD A,(IY+$00)   ; Set #REGa to the type of static enemy (with reverse
                       ; bit)
; This entry point is used by the routine at #R$CA49.
*$CB8B LD (IX+$0E),$03 ; Initialize the width of the sprite (in bytes) to $03
 $CB8F LD (IX+$0F),$10 ; Initialize the height of the sprite (in pixels) to $10
 $CB93 LD (IX+$10),$02 ; Initialize speed to $02
 $CB97 LD (IX+$15),$00 ; Initialize bubble energy to $00
 $CB9B AND $7F         ; Set to 0 the reverse bit of the type of enemy
 $CB9D LD (IX+$09),A   ; Initialize the enemy type
 $CBA0 OR A            ; enemy type = $00?
 $CBA1 CALL Z,$CC48    ; Configure FOOT MAN
 $CBA4 CP $01          ; enemy type = $01?
 $CBA6 CALL Z,$CC83    ; Configure STOMPER
 $CBA9 CP $03          ; enemy type = $03?
 $CBAB CALL Z,$CC96    ; Configure WAGON
 $CBAE CP $04          ; enemy type = $04?
 $CBB0 CALL Z,$CCA1    ; Configure REAR TRAIN
 $CBB3 CP $05          ; enemy type = $05?
 $CBB5 CALL Z,$CCB0    ; Configure FRONT TRAIN
 $CBB8 CP $08          ; enemy type = $08?
 $CBBA CALL Z,$CCBF    ; Configure SCANNER
 $CBBD CP $09          ; enemy type = $09?
 $CBBF CALL Z,$CCF8    ; Configure SWING GUN
 $CBC2 CP $0A          ; enemy type = $0A?
 $CBC4 CALL Z,$CD5A    ; Configure SHOOTER
 $CBC7 CP $0B          ; enemy type = $0B?
 $CBC9 CALL Z,$CD7C    ; Configure LAUNCHER
 $CBCC CP $0C          ; enemy type = $0C?
 $CBCE CALL Z,$CDA2    ; Configue POD
 $CBD1 CP $0D          ; enemy type = $0D?
 $CBD3 CALL Z,$CDB9    ; Configure MINE LAYER
 $CBD6 CP $0E          ; enemy type = $0E?
 $CBD8 CALL Z,$CDD8    ; Configure MINE
 $CBDB CP $0F          ; enemy type = $0F?
 $CBDD CALL Z,$CE13    ; Configure BLOB
 $CBE0 CP $10          ; enemy type = $10?
 $CBE2 CALL Z,$CE3E    ; Configure BOSS
 $CBE5 CP $11          ; enemy type = $11?
 $CBE7 CALL Z,$CD1A    ; Configure fixed SWING GUN LEFT
 $CBEA CP $12          ; enemy type = $12?
 $CBEC CALL Z,$CD2A    ; Configure fixed SWING GUN LEFT-BOTTOM
 $CBEF CP $13          ; enemy type = $13?
 $CBF1 CALL Z,$CD3A    ; Configure fixed SWING GUN RIGHT
 $CBF4 CP $14          ; enemy type = $14?
 $CBF6 CALL Z,$CD4A    ; Configure fixed SWING GUN RIGHT-BOTTOM
 $CBF9 CP $06          ; enemy type = $06?
 $CBFB CALL Z,$CC5B    ; Configure FOOT MAN CROUCHED
 $CBFE CP $7D          ; enemy type = $7D?
 $CC00 CALL Z,$CCE6    ; Configure SMARTBOMB
 $CC03 LD (IX+$16),E   ; {Save address for graphic data of animated sprite
 $CC06 LD (IX+$17),D   ; }
 $CC09 LD (IX+$0A),L   ; {Save address for animation offset
 $CC0C LD (IX+$0B),H   ; }
 $CC0F LD A,(IY+$01)   ; Set #REGa to the x-position of sprite
 $CC12 LD (IX+$00),A   ; Save x-position into enemy configuration buffer
 $CC15 LD A,(IY+$02)   ; Set #REGa to the y-position of sprite
 $CC18 SLA A           ; {Copy bits 7-3 to the y-position for the enemy
 $CC1A SLA A           ; configuration buffer
 $CC1C SLA A           ;
 $CC1E LD (IX+$01),A   ; }
 $CC21 LD A,(IY+$00)   ; {If bit 7 of enemy type is set then set the reverse
 $CC24 AND $80         ; sprite indicator in enemy configuration buffer
 $CC26 SRL A           ;
 $CC28 SRL A           ;
 $CC2A SRL A           ;
 $CC2C SRL A           ;
 $CC2E SRL A           ;
 $CC30 SRL A           ;
 $CC32 SRL A           ;
 $CC34 LD (IX+$02),A   ; }
 $CC37 LD (IX+$03),$00 ;
 $CC3B LD (IX+$06),$00 ;
 $CC3F LD (IX+$0C),$01 ; Set sprite active (alive)
 $CC43 LD (IX+$0D),$00 ;
 $CC47 RET             ;
; Configure FOOT MAN
*$CC48 LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CC4B LD (IX+$11),$00 ; Set state counter to $00
 $CC4F LD (IX+$12),$00 ; Set FOOT MAN walking
 $CC53 LD (IX+$14),$02 ; Set health to $02
 $CC57 LD DE,$7F72     ; Set #REGde to the graphics data for the enemy
 $CC5A RET             ;
; Configure FOOT MAN CROUCHED
*$CC5B LD HL,$8E8A     ; {Set address of graphic data for crouched FOOT MAN
 $CC5E LD (IX+$04),L   ;
 $CC61 LD (IX+$05),H   ; }
 $CC64 LD (IX+$11),$C8 ; Set state counter to fixed FOOT MAN crouched
 $CC68 LD (IX+$12),$01 ; Set FOOT MAN crouched
 $CC6C LD (IX+$10),$00 ; Set enemy stopped
 $CC70 LD (IX+$0E),$02 ; Set width of the sprite (in bytes)
 $CC74 LD (IX+$09),$80 ; Set graphic data from static sprite & enmey type FOOT
                       ; MAN
 $CC78 LD (IX+$14),$02 ; Set health
 $CC7C LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CC7F LD DE,$7F72     ; Set #REGde to the graphics data for the enemy
 $CC82 RET             ;
; Configure STOMPER
*$CC83 LD (IX+$10),$02 ; Set enemy speed
 $CC87 LD (IX+$14),$08 ; Set health to $08
 $CC8B LD (IX+$15),$01 ; Set big energy bubble
 $CC8F LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CC92 LD DE,$8032     ; Set #REGde to the graphics data for the enemy
 $CC95 RET             ;
; Configure WAGON
*$CC96 LD (IX+$14),$0F ; Set health to $0F
 $CC9A LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CC9D LD DE,$84B2     ; Set #REGde to the graphics data for the enemy
 $CCA0 RET             ;
; Configure REAR TRAIN
*$CCA1 LD (IX+$14),$05 ; Set health to $05
 $CCA5 LD (IX+$15),$01 ; Set big energy bubble
 $CCA9 LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CCAC LD DE,$8572     ; Set #REGde to the graphics data for the enemy
 $CCAF RET             ;
; Configure FRONT TRAIN
*$CCB0 LD (IX+$14),$0F ; Set health to $0F
 $CCB4 LD (IX+$15),$01 ; Set big energy bubble
 $CCB8 LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CCBB LD DE,$83F2     ; Set #REGde to the graphics data for the enemy
 $CCBE RET             ;
; Configure SCANNER
*$CCBF LD (IX+$14),$10 ; Set health to $10
 $CCC3 LD (IX+$15),$01 ; Set big energy bubble
 $CCC7 LD (IX+$10),$01 ; Set speed
 $CCCB LD (IX+$0E),$02 ; Set width of sprite
 $CCCF LD (IX+$0F),$0B ; Set height of sprite
 $CCD3 LD (IX+$12),$10 ; Set shot frequency?
 $CCD7 LD (IX+$11),$00 ;
 $CCDB LD (IX+$06),$00 ;
 $CCDF LD HL,$AE7D     ; Set #REGhl to the offset animation table
 $CCE2 LD DE,$8B5A     ; Set #REGde to the graphics data for the enemy
 $CCE5 RET             ;
; Configure SMARTBOMB
*$CCE6 LD HL,$8CEA     ; {Set graphic data address for sprite
 $CCE9 LD (IX+$04),L   ;
 $CCEC LD (IX+$05),H   ; }
 $CCEF LD (IX+$0E),$02 ; Set width of sprite
 $CCF3 SET 7,(IX+$09)  ; Set graphics data from static sprite
 $CCF7 RET             ;
; Configure SWING GUN
*$CCF8 LD HL,$8EAA     ; {Set graphic data address for sprite
 $CCFB LD (IX+$04),L   ;
 $CCFE LD (IX+$05),H   ; }
 $CD01 LD (IX+$0E),$02 ; Set width of sprite
 $CD05 LD (IX+$14),$0A ; Set health to $0A
 $CD09 LD (IX+$11),$00 ;
 $CD0D LD (IX+$15),$01 ; Set big energy bubble
 $CD11 LD (IX+$12),$00 ; Set mobile SWING GUN
 $CD15 SET 7,(IX+$09)  ; Set graphic data from static sprite
 $CD19 RET             ;
; Configure fixed SWING GUN LEFT
*$CD1A LD (IX+$09),$09 ; Set enemy type
 $CD1E CALL $CCF8      ; Configure SWING GUN
 $CD21 LD (IX+$11),$00 ; Set left orientation
 $CD25 LD (IX+$12),$01 ; Set fixed SWING GUN
 $CD29 RET             ;
; Configure fixed SWING GUN LEFT-BOTTOM
*$CD2A LD (IX+$09),$09 ; Set enemy type
 $CD2E CALL $CCF8      ; Configure SWING GUN
 $CD31 LD (IX+$11),$01 ; Set left-bottom orientation
 $CD35 LD (IX+$12),$01 ; Set fixed SWING GUN
 $CD39 RET             ;
; Configure fixed SWING GUN RIGHT
*$CD3A LD (IX+$09),$09 ; Set enemy type
 $CD3E CALL $CCF8      ; Configure SWING GUN
 $CD41 LD (IX+$11),$04 ; Set right orientation
 $CD45 LD (IX+$12),$01 ; Set fixed SWING GUN
 $CD49 RET             ;
; Configure fixed SWING GUN RIGHT-BOTTOM
*$CD4A LD (IX+$09),$09 ; Set enemy type
 $CD4E CALL $CCF8      ; Configure SWING GUN
 $CD51 LD (IX+$11),$03 ; Set right-bottom orientation
 $CD55 LD (IX+$12),$01 ; Set fixed SWING GUN
 $CD59 RET             ;
; Configure SHOOTER
*$CD5A LD HL,$8E6A     ; {Set graphic data address for the sprite
 $CD5D LD (IX+$04),L   ;
 $CD60 LD (IX+$05),H   ; }
 $CD63 LD (IX+$0E),$02 ; Set width of sprite
 $CD67 LD (IX+$14),$0A ; Set health to $0A
 $CD6B LD (IX+$15),$01 ; Set big energy bubble
 $CD6F LD (IX+$11),$14 ; Set shot counter
 $CD73 LD (IX+$12),$11 ; Set shot frequency
 $CD77 SET 7,(IX+$09)  ; Set graphic data from static sprite
 $CD7B RET             ;
; Configure LAUNCHER
*$CD7C LD HL,$8E4A     ; {Set graphic data address for the sprite
 $CD7F LD (IX+$04),L   ;
 $CD82 LD (IX+$05),H   ; }
 $CD85 LD (IX+$0E),$02 ; Set width of sprite
 $CD89 LD (IX+$14),$08 ; Set health to $08
 $CD8D LD (IX+$11),$00 ;
 $CD91 LD (IX+$15),$01 ; Set big energy bubble
 $CD95 LD (IX+$11),$0A ; Set shot counter
 $CD99 LD (IX+$12),$06 ; Set shot frequency
 $CD9D SET 7,(IX+$09)  ; Set graphic data from static sprite
 $CDA1 RET             ;
; Configure POD
*$CDA2 LD (IX+$14),$02 ; Set health to $02
 $CDA6 LD (IX+$06),$00 ;
 $CDAA LD (IX+$11),$00 ; Set direction up
 $CDAE LD (IX+$12),$00 ; Set speed 0
 $CDB2 LD HL,$AE5D     ; Set #REGhl to the offset animation table
 $CDB5 LD DE,$8D8A     ; Set graphic data from static sprite
 $CDB8 RET             ;
; Configure MINE LAYER
*$CDB9 LD (IX+$14),$0F ; Set health to $02
 $CDBD LD (IX+$06),$00 ;
 $CDC1 LD (IX+$0F),$0C ; Set height in pixels
 $CDC5 LD (IX+$11),$01 ; Set direction down
 $CDC9 LD (IX+$12),$01 ; Set speed 1
 $CDCD LD (IX+$15),$01 ; Set big energy bubble
 $CDD1 LD HL,$AE6D     ; Set #REGhl to the offset animation table
 $CDD4 LD DE,$90A2     ; et graphic data from static sprite
 $CDD7 RET             ;
; Configure MINE
*$CDD8 LD (IX+$14),$02 ; Set health to $02
 $CDDC LD (IX+$06),$00 ;
 $CDE0 LD (IX+$0E),$02 ; Set width in bytes
 $CDE4 LD (IX+$0F),$08 ; Set height in pixels
 $CDE8 LD (IX+$10),$01 ; Set speed
 $CDEC LD (IX+$04),$00 ;
 $CDF0 LD (IX+$05),$00 ;
 $CDF4 LD (IX+$11),$10 ;
 $CDF8 LD (IX+$12),$00 ;
 $CDFC LD (IX+$15),$FF ; Set no energy bubble
 $CE00 LD HL,$AE75     ; {Set animation offset table
 $CE03 LD (IX+$0A),L   ;
 $CE06 LD (IX+$0B),H   ; }
 $CE09 LD DE,$9132     ; {Set graphic data for mine
 $CE0C LD (IX+$16),E   ;
 $CE0F LD (IX+$17),D   ; }
 $CE12 RET             ;
; Configure BLOB
*$CE13 LD (IX+$14),$04 ; Set health to $04
 $CE17 LD (IX+$06),$00 ;
 $CE1B LD (IX+$0E),$02 ; Set width in bytes
 $CE1F LD (IX+$0F),$08 ; Set height in pixels
 $CE23 LD (IX+$10),$01 ; Set speed
 $CE27 LD (IX+$04),$00 ;
 $CE2B LD (IX+$05),$00 ;
 $CE2F LD (IX+$11),$02 ;
 $CE33 LD (IX+$15),$FF ; Set no energy bubble
 $CE37 LD HL,$AE75     ; Set animation offset table
 $CE3A LD DE,$9022     ; Set graphic data for blob
 $CE3D RET             ;
; Configure BOSS
*$CE3E LD HL,$91D2     ; {Set graphic data address
 $CE41 LD (IX+$04),L   ;
 $CE44 LD (IX+$05),H   ; }
 $CE47 LD (IX+$0E),$06 ; Set width in bytes
 $CE4B LD (IX+$0F),$30 ; Set height in pixels
 $CE4F CALL $CE67      ; Set health
 $CE52 LD (IX+$15),$FF ; Set no energy bubble
 $CE56 LD (IX+$11),$00 ; Set boos direction up
 $CE5A LD (IX+$13),$00 ; Set Boss status
 $CE5E SET 7,(IX+$09)  ; Set graphic data from static enemy
 $CE62 LD (IX+$12),$02 ; Set Boss speed
 $CE66 RET             ;
; Computes health for BOSS enemy
*$CE67 LD A,($A013)    ; {Multiply $32 by the value of #R$A013
 $CE6A LD B,A          ;
 $CE6B LD DE,$0032     ;
 $CE6E CALL $C8E8      ; }
 $CE71 LD A,L          ; {Adds $10 to the result
 $CE72 ADD A,$10       ; }
 $CE74 LD (IX+$14),A   ; Set the health for the BOSS
 $CE77 LD ($A022),A    ; Save the health at #R$A022
 $CE7A RET             ;

; Draw the windows borders in the display file
;
; Used by the routine at #R$A13E.
;
; IX Address of the text definition data
; A Color attribute for the windows border
; C Color attribute for the windows body
; H Horizontal position
; L Vertical position
; D Length of the longest line
; E Number of lines
c$CE7B PUSH IX       ; Save #REGix
 $CE7D LD ($A093),A  ; Save color attribute for the windows border at #R$A093
 $CE80 LD A,D        ; {Save the length of the longest line at #R$A02A
 $CE81 LD ($A02A),A  ; }
 $CE84 LD A,E        ; {Save number of lines at #R$A02B
 $CE85 LD ($A02B),A  ; }
 $CE88 LD A,H        ; {Save horizontal position at #R$A028
 $CE89 LD ($A028),A  ; }
 $CE8C LD A,L        ; {Save vertical position at #R$A029
 $CE8D LD ($A029),A  ; }
 $CE90 LD A,C        ; {Save color attribute for the windows body at #R$A09F
 $CE91 LD ($A09F),A  ; }
 $CE94 LD A,($A029)  ; {Set #REGhl to the vertical position of the windows
 $CE97 LD L,A        ;
 $CE98 LD H,$00      ; }
 $CE9A ADD HL,HL     ; {Computes the offset of the horizontal position into the
 $CE9B ADD HL,HL     ; attribute file
 $CE9C ADD HL,HL     ;
 $CE9D ADD HL,HL     ;
 $CE9E ADD HL,HL     ; }
 $CE9F LD A,($A028)  ; {Set #REGde to the horizontal position of the windows
 $CEA2 LD E,A        ;
 $CEA3 LD D,$00      ; }
 $CEA5 ADD HL,DE     ; Add the vertical position to the offset previously
                     ; computed
 $CEA6 LD DE,$5802   ; {Point #REGhl to the address of the windows location
 $CEA9 ADD HL,DE     ; into the attribute file}
 $CEAA PUSH HL       ; Save #REGhl
 $CEAB LD A,($A02B)  ; Pick up the number of lines
 $CEAE ADD A,$02     ; Adds two to the number of lines (border top and bottom)
                     ; to obtain the height of the windows
 $CEB0 LD B,A        ; Set #REGb to the height of the windows
 $CEB1 LD A,($A02A)  ; Pick up the length of the longest line
 $CEB4 ADD A,$02     ; Adds two to the height of the longest line (border left
                     ; and right) to obtain the height of the windows
 $CEB6 LD E,A        ; Set #REGe to the width of the windows
 $CEB7 LD A,($A093)  ; Pick up the color attribute for the windows border
 $CEBA CALL $D909    ; Fill the windows (border included) with the color
                     ; attribute of the borders
 $CEBD POP HL        ; Restore #REGhl
 $CEBE LD DE,$0021   ; {Point #REGhl to the address of the first line of the
 $CEC1 ADD HL,DE     ; windows into the attribute file}
 $CEC2 LD A,($A02B)  ; {Set #REGb to the number of lines
 $CEC5 LD B,A        ; }
 $CEC6 LD A,($A02A)  ; {Set #REGe to the length of the longest line
 $CEC9 LD E,A        ; }
 $CECA LD A,($A09F)  ; Pick up the color attribute for the windows body
 $CECD CALL $D909    ; Fill the windows (only body) with the color attribute of
                     ; the body
 $CED0 LD A,($A029)  ; {Set #REGhl to the vertical position
 $CED3 LD L,A        ;
 $CED4 LD H,$00      ; }
 $CED6 ADD HL,HL     ; {Computes the pixel of the vertical position (x8)
 $CED7 ADD HL,HL     ;
 $CED8 ADD HL,HL     ;
 $CED9 ADD HL,HL     ; }
 $CEDA LD DE,$ABDD   ; {Point #REGhl to the display file lookup table
 $CEDD ADD HL,DE     ; corresponding to this vertical pixel}
 $CEDE LD IX,$6120   ; Point #REGix to the graphics data of the top-left border
                     ; windows tile
 $CEE2 LD IY,$6140   ; Point #REGiy to the graphics data of the top-middle
                     ; border windows tile
 $CEE6 CALL $CF0A    ; Draw the top border of the windows
 $CEE9 LD A,($A02B)  ; {Set #REGb to the number of lines
 $CEEC LD B,A        ; }
*$CEED PUSH BC       ; Save #REGbc
 $CEEE LD IX,$61B8   ; Point #REGix to the graphics data of the left border
                     ; windows tile
 $CEF2 LD IY,$61C8   ; Point #REGiy to the graphics data of the middle border
                     ; windows tile (black tile)
 $CEF6 CALL $CF0A    ; Draw the middle border of the windows
 $CEF9 POP BC        ; Restore #REGbc
 $CEFA DJNZ $CEED    ; Jump back while there are lines to draw
 $CEFC LD IX,$6130   ; Point #REGix to the graphics data of the bottom-left
                     ; border windows tile
 $CF00 LD IY,$6158   ; Point #REGiy to the graphics data of the bottom-middle
                     ; border windows tile
 $CF04 CALL $CF0A    ; Draw the bottom border of the windows
 $CF07 POP IX        ; Restore #REGix
 $CF09 RET           ;

; Draw a row of borders for the windows
;
; Computes the pointer on display file and draw a row of borders for the
; windows
;
; IX Point to the address of the graphics data for the left border tile
; IY point to the address of the graphics data for the middle border tile
; HL Point to the addres into the display file look up table corresponding to
; .  the row of pixels to draw
c$CF0A LD B,$08      ; Set #REGb=8
*$CF0C LD E,(HL)     ; {Set #REGde to point to the address on the display file
 $CF0D INC HL        ; to draw the corner
 $CF0E LD D,(HL)     ; }
 $CF0F INC DE        ; {Increment the pointer by 2. All the windows has a
 $CF10 INC DE        ; margin of 2 bytes}
 $CF11 PUSH HL       ; Save #REGhl briefly
 $CF12 LD A,($A028)  ; {Set #REGhl to the horizontal position of the windows
 $CF15 LD L,A        ;
 $CF16 LD H,$00      ; }
 $CF18 ADD HL,DE     ; Point #REGhl to the address of this location in display
                     ; file
 $CF19 EX DE,HL      ; Exchange #REGde with #REGhl
 $CF1A POP HL        ; Restore #REGhl
 $CF1B CALL $CF21    ; Draw one row of pixels for this border
 $CF1E DJNZ $CF0C    ; Jump back while there are remaining pixels to draw
 $CF20 RET           ;
; This routine draws the corresponding pixels of the tiles borders into display
; file
*$CF21 PUSH BC       ; Save #REGbc
 $CF22 LD A,(IX+$00) ; {Put the byte of the left border tile into display file
 $CF25 LD (DE),A     ; }
 $CF26 INC DE        ; Increment the pointer to the display file
 $CF27 LD A,($A02A)  ; {Set #REGb to the length of the longest line
 $CF2A LD B,A        ; }
*$CF2B LD A,(IY+$00) ; {Put the byte of the middle border tile into display
 $CF2E LD (DE),A     ; file}
 $CF2F INC DE        ; Increment the pointer to the display files
 $CF30 DJNZ $CF2B    ; Jump back while there are middle borders to show
 $CF32 LD A,(IX+$08) ; {Put the byte of the right border tile into display file
 $CF35 LD (DE),A     ; }
 $CF36 INC IY        ; Point to the next byte of the middle border tile
 $CF38 INC IX        ; Point to the next byte of the left border tile
 $CF3A INC HL        ; Point to the next address into the display file lookup
                     ; table
 $CF3B POP BC        ; Recover #REGbc
 $CF3C RET           ;

; Draw a 3x3 grid attribute color into attribute file if tile is background
;
; Used by the routine at #R$CF9B.
;
; I:C Attribute color
; I:HL Address into the attribute file
; I:DE Address into the attribute buffer
c$CF3D CALL $CF47    ; Draw a row of attribute color to attribute file
 $CF40 CALL $CF47    ; Draw a row of attribute color to attribute file
 $CF43 CALL $CF47    ; Draw a row of attribute color to attribute file
 $CF46 RET           ;
; Draw a row of attribute color into attribute file
*$CF47 LD A,(DE)     ; {Is attribute byte from attribute buffer a 'background'
 $CF48 CP $47        ; tile?}
 $CF4A JP NZ,$CF4E   ; Jump and not draw
 $CF4D LD (HL),C     ; Save attribute color into attribute file
*$CF4E INC HL        ; {Increment address into attribute file and buffer
 $CF4F INC DE        ; }
 $CF50 LD A,(DE)     ; {Is attribute byte from attribute buffer a 'background'
 $CF51 CP $47        ; tile?}
 $CF53 JP NZ,$CF57   ; Jump and not draw
 $CF56 LD (HL),C     ; Save attribute color into attribute file
*$CF57 INC HL        ; {Increment address into attribute file and buffer
 $CF58 INC DE        ; }
 $CF59 LD A,(DE)     ; {Is attribute byte from attribute buffer a 'background'
 $CF5A CP $47        ; tile?}
 $CF5C JP NZ,$CF60   ; Jump and not draw
 $CF5F LD (HL),C     ; Save attribute color into attribute file
*$CF60 PUSH DE       ; Save #REGde
 $CF61 LD DE,$001E   ; {Point address into attribute file and buffer to the
 $CF64 ADD HL,DE     ; next row
 $CF65 POP DE        ;
 $CF66 PUSH HL       ;
 $CF67 LD HL,$001E   ;
 $CF6A ADD HL,DE     ;
 $CF6B EX DE,HL      ;
 $CF6C POP HL        ; }
 $CF6D RET           ;

; Copy a 3x3 grid of attribute color from attribute buffer to attribute file
;
; Used by the routines at #R$9AC5 and #R$BD6B.
;
; HL Address into attribute file
; DE Address into attribute buffer
c$CF6E CALL $CF7D    ; Copy a row of 3 attribute colors
 $CF71 LD BC,$001E   ; {Increment address into attribute file to the next row
 $CF74 ADD HL,BC     ; }
 $CF75 CALL $CF7D    ; Copy a row of 3 attribute colors
 $CF78 ADD HL,BC     ; Increment address into attribute file to the next row
 $CF79 CALL $CF7D    ; Copy a row of 3 attribute colors
 $CF7C RET           ;
; Copy a row of attribute colors
*$CF7D LD A,(DE)     ; {Copy an attribute color from attribute buffer to
 $CF7E LD (HL),A     ; attribute file}
 $CF7F INC HL        ; {Increment address into attribute file and buffer
 $CF80 INC DE        ; }
 $CF81 LD A,(DE)     ; {Copy an attribute color from attribute buffer to
 $CF82 LD (HL),A     ; attribute file}
 $CF83 INC HL        ; {Increment address into attribute file and buffer
 $CF84 INC DE        ; }
 $CF85 LD A,(DE)     ; {Copy an attribute color from attribute buffer to
 $CF86 LD (HL),A     ; attribute file}
 $CF87 PUSH HL       ; Save #REGhl
 $CF88 LD HL,$001E   ; {Increment address into attribute buffer to the next row
 $CF8B ADD HL,DE     ;
 $CF8C EX DE,HL      ;
 $CF8D POP HL        ; }
 $CF8E RET           ;

; Copy the attribute file of the HUD (3 first rows) to the attribute buffer of
; the HUD
;
; Used by the routine at #R$947A.
c$CF8F LD DE,$E4FF   ;
 $CF92 LD HL,$5800   ;
 $CF95 LD BC,$0060   ;
 $CF98 LDIR          ;
 $CF9A RET           ;

; Draw random attribute color for explosion
;
; Used by the routines at #R$9AC5 and #R$BD6B.
c$CF9B CALL $A535    ; Computes into #REGhl the address into the attribute file
                     ; for the explosion position
 $CF9E LD DE,$0020   ; {Set this address to the next row
 $CFA1 ADD HL,DE     ; }
 $CFA2 LD ($A093),HL ; Save at #R$A093 the address into the attribute file
 $CFA5 LD DE,$5800   ; Set #REGde the base address for the attribute file
 $CFA8 AND A         ; Reset carry flag
 $CFA9 SBC HL,DE     ; {Computes the equivalent address of the attribute file
 $CFAB LD DE,$E4FF   ; into the attribute buffer
 $CFAE ADD HL,DE     ; }
 $CFAF EX DE,HL      ; {Point #R$A095 to the address into the attribute buffer
 $CFB0 LD ($A095),DE ; }
 $CFB4 LD A,R        ; {Set into #REGde a pseudo-random number from 0 to 7
 $CFB6 AND $07       ;
 $CFB8 LD E,A        ;
 $CFB9 LD D,$00      ; }
 $CFBB LD HL,$BFE7   ; {Set #REGhl to the address into attribute color for
 $CFBE ADD HL,DE     ; explosion}
 $CFBF LD A,(HL)     ; {Set #REGc to the attribute color
 $CFC0 LD C,A        ; }
 $CFC1 LD HL,($A093) ; Set #REGhl to the address into the attribute file
 $CFC4 LD DE,($A095) ; Set #REGde to the address into the attribute buffer
 $CFC8 CALL $CF3D    ; Draw attribte color for explosion
 $CFCB RET           ;

; Handle speed up duration
;
; Used by the routines at #R$CFDA and #R$CFF6.
c$CFCC LD A,($A073)  ; {Decrement speed up counter
 $CFCF DEC A         ;
 $CFD0 LD ($A073),A  ; }
 $CFD3 OR A          ; {Return if not zero
 $CFD4 RET NZ        ; }
 $CFD5 XOR A         ; {Reset speed mode to normal if counter is zero
 $CFD6 LD ($A072),A  ; }
 $CFD9 RET           ;

; Configure Rex to move right
;
; Used by the routine at #R$947A.
c$CFDA LD A,($A072)  ; {Jump if Rex speed mode is normal
 $CFDD OR A          ;
 $CFDE JP Z,$CFEC    ; }
 $CFE1 LD A,$04      ; {Set Rex speed to fast (4)
 $CFE3 LD ($A091),A  ; }
 $CFE6 CALL $CFCC    ; Handle speed up duration
 $CFE9 JP $CFF1      ; Jump to set face direction
*$CFEC LD A,$02      ; {Set Rex speed to normal (2)
 $CFEE LD ($A091),A  ; }
*$CFF1 XOR A         ; {Set face direction to right
 $CFF2 LD ($A0BB),A  ; }
 $CFF5 RET           ;

; Configure Rex to move left
;
; Used by the routine at #R$947A.
c$CFF6 LD A,($A072)  ; {Jump if Rex speed mode is normal
 $CFF9 OR A          ;
 $CFFA JP Z,$D008    ; }
 $CFFD LD A,$FC      ; {Set Rex speed to fast (-4)
 $CFFF LD ($A091),A  ; }
 $D002 CALL $CFCC    ; Handle speed up duration
 $D005 JP $D00D      ; Jump to set face direction
*$D008 LD A,$FE      ; {Set Rex speed to normal (-2)
 $D00A LD ($A091),A  ; }
*$D00D LD A,$01      ; {Set face direction to left
 $D00F LD ($A0BB),A  ; }
 $D012 RET           ;

; Handle Rex lateral movement
;
; Used by the routine at #R$947A.
c$D013 LD A,($A0BB)  ; {Jump if Rex is facing right
 $D016 OR A          ;
 $D017 JP Z,$D040    ; }
 $D01A JP $D056      ; Jump if Rex is facing left

; Move Rex left or right
;
; Used by the routines at #R$D040 and #R$D056.
c$D01D LD A,($A0B6)  ; {Add speed to x-position of Rex
 $D020 LD HL,$A091   ;
 $D023 ADD A,(HL)    ; }
 $D024 CP $F0        ; {If x-position of Rex is greater than 240 then check for
 $D026 JP NC,$D0B1   ; next room on the right}
 $D029 CP $03        ; {If x-position of Rex is less than 3 then check for next
 $D02B JP C,$D0A0    ; room on the left}
 $D02E LD ($A0B6),A  ; Set the new x-position
 $D031 LD A,($A0BD)  ; {Return if Rex is jumping
 $D034 OR A          ;
 $D035 RET NZ        ; }
 $D036 LD A,($A0BC)  ; {Return if Rex is falling
 $D039 OR A          ;
 $D03A RET NZ        ; }
 $D03B XOR A         ; {Set speed to 0
 $D03C LD ($A091),A  ; }
 $D03F RET           ;

; Handle Rex collision detection moving right
;
; Used by the routine at #R$D013.
c$D040 LD HL,($A019) ; {Set #REGhl the address into tile type buffer in
 $D043 LD DE,$0023   ; front-up of Rex
 $D046 ADD HL,DE     ; }
 $D047 CALL $D06C    ; {Return if tile is wall
 $D04A RET Z         ; }
 $D04B LD DE,$0020   ; {Set #REGhl the address into tile type buffer in
 $D04E ADD HL,DE     ; front-bottom of Rex}
 $D04F CALL $D06C    ; {Return if tile is wall
 $D052 RET Z         ; }
 $D053 JP $D01D      ; Move Rex to the right

; Handle Rex collision detection moving left
;
; Used by the routine at #R$D013.
c$D056 LD HL,($A019) ; {Set #REGhl the address into tile type buffer in
 $D059 LD DE,$0020   ; front-up of Rex
 $D05C ADD HL,DE     ; }
 $D05D CALL $D06C    ; {Return if tile is wall
 $D060 RET Z         ; }
 $D061 LD DE,$0020   ; {Set #REGhl the address into tile type buffer in
 $D064 ADD HL,DE     ; front-bottom of Rex}
 $D065 CALL $D06C    ; {Return if tile is wall
 $D068 RET Z         ; }
 $D069 JP $D01D      ; Move Rex to the left

; Check if a tile is a wall or a background
;
; Check ia a tile is a wall. Used by the routines at #R$C05A, #R$C14D, #R$C2FD,
; #R$C3E0, #R$C4A6, #R$C620, #R$D040, #R$D056 and #R$D0E4.
;
; I:HL Address pointer of tile in the tile type buffer
; O:F Return Z:1 if tile type is in the list  Z:0 if tile type is not in the
; .   list
; O:A Return A=<tile type> if found ; A=0 if not found
c$D06C PUSH HL       ; {Save #REGhl and #REGbc
 $D06D PUSH BC       ; }
 $D06E LD A,(HL)     ; Set #REGa to the tile type pointed by #REGhl
 $D06F LD B,$04      ; Set #REGb to the number of tiles of type 'wall'
 $D071 LD HL,$D096   ; Set #REGhl to the address pointer of the list of tiles
                     ; 'wall'
; Check if the tile type in #REGa is in the list of #REGb elements pointed by
; #REGhl
*$D074 LD C,$FF      ; {Check if #REGa is equal to (#REGhl)
*$D076 CPI           ; }
 $D078 JP Z,$D085    ; Jump if so
 $D07B DJNZ $D076    ; Jump back and check next element
; is not in the list
 $D07D POP BC        ; Restore #REGbc
 $D07E POP HL        ; Restore #REGhl
 $D07F LD A,$01      ; {Set flag Z=0
 $D081 OR A          ; }
 $D082 LD A,$00      ; Set #REGa = $00
 $D084 RET           ;
; is in the list
*$D085 XOR A         ; Set flag Z=1
 $D086 DEC HL        ; {Set #REGa to the tile type found
 $D087 LD A,(HL)     ; }
 $D088 POP BC        ; {Restore #REGbc and #REGhl
 $D089 POP HL        ; }
 $D08A RET           ;
; Check into the list of background tiles Used by the routines at #R$B64E,
; #R$C6C2, #R$CB03 and #R$D14D.
*$D08B PUSH HL       ; {Save #REGhl and #REGbc
 $D08C PUSH BC       ; }
 $D08D LD A,(HL)     ; Set #REGa to the tile type pointed by #REGhl
 $D08E LD B,$06      ; Set #REGb to the number of tiles of type 'background'
 $D090 LD HL,$D09A   ; Set #REGhl to the address pointer of the list of tiles
                     ; 'background'
 $D093 JP $D074      ;

; List of 'wall' type tiles
b$D096 DEFB $02,$04,$05,$06

; List of 'background' type tiles
b$D09A DEFB $00,$0E,$0F,$10,$11,$12

; Check room connection to the left
;
; Used by the routine at #R$D01D.
c$D0A0 LD A,($A090)  ; {Return if no room connection on the left
 $D0A3 OR A          ;
 $D0A4 RET Z         ; }
 $D0A5 LD ($A0B8),A  ; Set the new room
 $D0A8 LD A,$E8      ; {Set the new x-position (232)
 $D0AA LD ($A0B6),A  ; }
 $D0AD POP BC        ; Restore #REGbc
 $D0AE JP $C95A      ; Check for end game room

; Check room connection to the right
;
; Used by the routine at #R$D01D.
c$D0B1 LD A,($A08D)  ; {Return if no room connection on the right
 $D0B4 OR A          ;
 $D0B5 RET Z         ; }
 $D0B6 LD ($A0B8),A  ; Set the new room
 $D0B9 LD A,$08      ; {Set the new x-position (8)
 $D0BB LD ($A0B6),A  ; }
 $D0BE POP BC        ; Restore #REGbc
 $D0BF JP $C95A      ; Check for end game room

; Configure Rex for jump
;
; Used by the routines at #R$947A and #R$9F5F.
c$D0C2 LD A,($A0BC)  ; {Return if Rex is falling
 $D0C5 OR A          ;
 $D0C6 RET NZ        ; }
 $D0C7 LD A,($A0BD)  ; {Return if Rex is jumping
 $D0CA OR A          ;
 $D0CB RET NZ        ; }
 $D0CC LD A,$01      ; {Set Rex jump active
 $D0CE LD ($A0BD),A  ; }
 $D0D1 LD HL,$D0D8   ; {Set #R$A0C0 the address pointer for the table of
 $D0D4 LD ($A0C0),HL ; y-offsets increments for jumping}
 $D0D7 RET           ;

; FOOT MAN and Rex jumping y-offsets increments
b$D0D8 DEFB $06,$06,$04,$04,$02,$02,$00,$00
 $D0E0 DEFB $00,$00,$FF

; Not used
s$D0E3 DEFB $08

; Handle Rex jumping
;
; Used by the routine at #R$947A.
c$D0E4 LD A,($A0BD)  ; {Return if Rex not jumping
 $D0E7 OR A          ;
 $D0E8 RET Z         ; }
 $D0E9 LD HL,($A019) ; {Set #REGhl the address into tile type buffer pointing
 $D0EC LD DE,$0021   ; over Rex
 $D0EF ADD HL,DE     ; }
 $D0F0 CALL $D06C    ; Check if tile type is wall
 $D0F3 JP Z,$D11A    ; Jump to start falling if tile is wall
 $D0F6 INC HL        ; Increment address
 $D0F7 CALL $D06C    ; Check if tile type is wall
 $D0FA JP Z,$D11A    ; Jump to start falling if tile is wall
 $D0FD LD A,($A0B7)  ; {Substract to y-position of Rex the corresponding
 $D100 LD HL,($A0C0) ; y-offset pointed by #R$A0C0
 $D103 LD E,(HL)     ;
 $D104 SUB E         ; }
 $D105 CP $08        ; {If y-position of Rex is less then jump forward to stop
 $D107 JP C,$D12F    ; jumping}
 $D10A LD ($A0B7),A  ; Set the new y-position of Rex
 $D10D INC HL        ; {Increment address pointer into the y-offset table for
 $D10E LD ($A0C0),HL ; jumping}
 $D111 LD A,(HL)     ; {Return if not arrived to the end of the y-offset table
 $D112 CP $FF        ;
 $D114 RET NZ        ; }
 $D115 XOR A         ; {Set Rex not jumping
 $D116 LD ($A0BD),A  ; }
 $D119 RET           ;
; Rex start falling after wall collision
*$D11A LD A,$02      ; {Set falling speed
 $D11C LD ($A0BC),A  ; }
 $D11F XOR A         ; {Set not jumping
 $D120 LD ($A0BD),A  ; }
 $D123 LD A,($A0B7)  ; {Return if Rex y-position is not grid fixed
 $D126 AND $07       ;
 $D128 OR A          ;
 $D129 RET NZ        ; }
 $D12A XOR A         ; {Set Rex not falling
 $D12B LD ($A0BC),A  ; }
 $D12E RET           ;
; Rex start falling after collision with top border room
*$D12F XOR A         ; {Set not jumping
 $D130 LD ($A0BD),A  ; }
 $D133 LD A,$02      ; {Set falling speed
 $D135 LD ($A0BC),A  ; }
 $D138 LD A,($A08E)  ; {Return if no top room connection
 $D13B OR A          ;
 $D13C RET Z         ; }
 $D13D LD ($A0B8),A  ; Set the top room to be the current room
 $D140 LD A,$A0      ; {Set y-position of Rex to be 160
 $D142 LD ($A0B7),A  ; }
 $D145 XOR A         ; {Set Rex to not falling
 $D146 LD ($A0BC),A  ; }
 $D149 POP BC        ; Restore #REGbc
 $D14A JP $C95A      ; Check for end game room

; Handle Rex falling
;
; Used by the routine at #R$947A.
c$D14D LD A,($A0BD)  ; {Return if Rex is jumping
 $D150 OR A          ;
 $D151 RET NZ        ; }
 $D152 LD A,($A0B7)  ; {Add falling speed to y-position of Rex
 $D155 LD HL,$A0BC   ;
 $D158 ADD A,(HL)    ; }
 $D159 CP $BA        ; {if y-position is greater then 186 jump to check bottom
 $D15B JP NC,$D19B   ; room}
 $D15E LD ($A0B7),A  ; Set the new y-position
 $D161 AND $07       ; {Return if y-position is not grid fixed
 $D163 OR A          ;
 $D164 RET NZ        ; }
 $D165 LD A,($A0B6)  ; {Set #R$A0AF the x-position of Rex
 $D168 LD ($A0AF),A  ; }
 $D16B LD A,($A0B7)  ; {Set #R$A0B7 the y-position of Rex
 $D16E LD ($A0B0),A  ; }
 $D171 LD A,($A0BB)  ; Set #REGa the face direction
 $D174 CALL $A503    ; Computes address position in tile type buffer based on
                     ; (x,y) position on screen
 $D177 LD DE,$0061   ; {Set #REGhl to point into tile type buffer under Rex
 $D17A ADD HL,DE     ; feet}
 $D17B LD A,(HL)     ; Set #REGa the tile type
 $D17C CALL $D08B    ; Check if tile type is 'background'
 $D17F JP NZ,$D196   ; Jump to stop falling if not background
 $D182 INC HL        ; Increment address
 $D183 LD A,(HL)     ; Set #REGa the tile type
 $D184 CALL $D08B    ; Check if tile type is 'background'
 $D187 JP NZ,$D196   ; Jump to stop falling if not background
 $D18A LD A,($A0BC)  ; {Increase falling speed by 2
 $D18D ADD A,$02     ; }
 $D18F CP $06        ; {Return if falling speed greater than 4
 $D191 RET Z         ; }
 $D192 LD ($A0BC),A  ; Set the new falling speed
 $D195 RET           ;
; Rex has finished falling
*$D196 XOR A         ; {Set falling speed to 0
 $D197 LD ($A0BC),A  ; }
 $D19A RET           ;
; Rex has fallen through bottom room
*$D19B LD A,($A08F)  ; {If no bottom room connection then jump to kill Rex
 $D19E OR A          ;
 $D19F JP Z,$D1AE    ; }
 $D1A2 LD ($A0B8),A  ; Set the new room
 $D1A5 LD A,$08      ; {Set the new y-position of Rex as 8
 $D1A7 LD ($A0B7),A  ; }
 $D1AA POP BC        ; Restore #REGbc
 $D1AB JP $C95A      ; Check for end game room
; No room connection, kill Rex
*$D1AE XOR A         ; {Set Rex to not jumping nor falling
 $D1AF LD ($A0BC),A  ;
 $D1B2 LD ($A0BD),A  ; }
 $D1B5 CALL $9BDA    ; Handle Rex dead
 $D1B8 RET           ;

; Handle enemy projectile collision with Rex
;
; Used by the routines at #R$947A and #R$A915.
c$D1B9 LD A,($A055)    ; {Return if Rex is dead
 $D1BC OR A            ;
 $D1BD RET NZ          ; }
 $D1BE LD A,($A060)    ; {Return if Rex is teleporting
 $D1C1 OR A            ;
 $D1C2 RET NZ          ; }
 $D1C3 LD IY,$5D22     ; Set #REGiy to base address for enemy projectiles
 $D1C7 LD B,$14        ; Set #REGb to the number of projectiles to check
*$D1C9 LD A,(IY+$06)   ; check projectile status
 $D1CC CP $01          ; is flying?
 $D1CE JP NZ,$D20B     ; Jump forward and check next projectile if not flying
 $D1D1 LD A,($A0B7)    ; {Check if projectile y-position is in range of
 $D1D4 ADD A,$05       ; collision based on Rex y-position
 $D1D6 CP (IY+$01)     ;
 $D1D9 JP NC,$D20B     ;
 $D1DC ADD A,$11       ;
 $D1DE CP (IY+$01)     ;
 $D1E1 JP C,$D20B      ; }
 $D1E4 LD A,($A0B6)    ; {Check if projectile x-position is in range of
 $D1E7 CP (IY+$00)     ; collision based on Rex x-position
 $D1EA JP NC,$D20B     ;
 $D1ED ADD A,$10       ;
 $D1EF CP (IY+$00)     ;
 $D1F2 JP C,$D20B      ; }
; Impact with Rex
 $D1F5 LD (IY+$06),$02 ; Set projectile status to impact #1
 $D1F9 LD A,($A049)    ; Check if Rex has the shield activated
 $D1FC OR A            ; {Jump to kill Rex if shield not active
 $D1FD JP Z,$D208      ; }
; Shield activated
 $D200 LD L,$05        ; Set #REGl to the shield loss quantity
 $D202 CALL $99CE      ; Handle shield loss
 $D205 JP $D20B        ; Jump to handle next projectile
; Shield not activated
*$D208 CALL $9BDA      ; Kill Rex
*$D20B LD DE,$000F     ; {Point #REGiy to the next projectile data
 $D20E ADD IY,DE       ; }
 $D210 DEC B           ; Decrement projectile counter
 $D211 JP NZ,$D1C9     ; Jump back and check next projectile
 $D214 RET             ;

; Handle collision detection of enemy with Rex and projectiles
;
; Used by the routine at #R$BA5C.
c$D215 LD A,($A055)    ; {Return if Rex is dead
 $D218 OR A            ;
 $D219 RET NZ          ; }
; Configure opcodes for collision box according to enemy type
 $D21A LD A,$1E        ; {Configure opcode ADD A at $D28D to add $1E
 $D21C LD ($D28E),A    ; (y-position height range)}
 $D21F LD A,$16        ; {Configure opcode ADD A at $D29D to add $1E
 $D221 LD ($D29E),A    ; (x-position width range)}
 $D224 LD A,$10        ; {Configure opcode ADD A at $D30F and $D320 to add $10
 $D226 LD ($D310),A    ;
 $D229 LD ($D321),A    ; }
 $D22C LD A,$10        ; {Configure opcode SUB at $D298 to substract $10
 $D22E LD ($D299),A    ; (x-position width range)}
 $D231 LD A,(IX+$02)   ; {Jump forward if enemy moving left
 $D234 OR A            ;
 $D235 JP Z,$D23D      ; }
 $D238 LD A,$08        ; {Enemy moving right, configure opcode SUB at $D298 to
 $D23A LD ($D299),A    ; substract $08 (x-position width range)}
*$D23D LD A,(IX+$09)   ; Check enemy type
 $D240 AND $7F         ;
 $D242 CP $10          ; is BOSS?
 $D244 JP Z,$D254      ; Jump to reconfigure opcodes
 $D247 CP $0E          ; is a MINE?
 $D249 JP Z,$D269      ; Jump to reconfigure opcodes
 $D24C CP $0F          ; is a BLOB?
 $D24E JP Z,$D269      ; Jump to reconfigure opcodes
 $D251 JP $D27B        ; Jump forward and check for collision
; Configure opcodes for BOSS
*$D254 LD A,$3E        ; {Configure opcode ADD A at $D28D to add $3E
 $D256 LD ($D28E),A    ; (y-position height range)}
 $D259 LD A,$36        ; {Configure opcode ADD A at $D29D to add $36
 $D25B LD ($D29E),A    ; (x-position width range)}
 $D25E LD A,$30        ; {Configure opcode ADD A at $D30F and $D320 to add $30
 $D260 LD ($D310),A    ;
 $D263 LD ($D321),A    ; }
 $D266 JP $D27B        ; Jump forward and check for collision
; Configure opcodes for MINE and BLOB
*$D269 LD A,$16        ; {Configure opcode ADD A at $D28D to add $16
 $D26B LD ($D28E),A    ; (y-position height range)}
 $D26E LD A,$0E        ; {Configure opcode ADD A at $D29D to add $0E
 $D270 LD ($D29E),A    ; (x-position width range)}
 $D273 LD A,$08        ; {Configure opcode ADD A at $D30F and $D320 to add $08
 $D275 LD ($D310),A    ;
 $D278 LD ($D321),A    ; }
*$D27B LD A,($A060)    ;
 $D27E OR A            ;
 $D27F JP NZ,$D2F6     ;
 $D282 LD HL,$A0B7     ; Set #REGhl the y-position of Rex
 $D285 LD A,(IX+$01)   ; {Check if y-position of enemy is in the range of
 $D288 SUB $10         ; collision with Rex and jump forward if not
 $D28A CP (HL)         ;
 $D28B JR NC,$D2F6     ;
 $D28D ADD A,$1E       ;
 $D28F CP (HL)         ;
 $D290 JR C,$D2F6      ; }
 $D292 LD HL,$A0B6     ; Set #REGhl the x-position of Rex
 $D295 LD A,(IX+$00)   ; {Check if x-position of enemy is in the range of
 $D298 SUB $10         ; collision with Rex
 $D29A CP (HL)         ;
 $D29B JR NC,$D2F6     ;
 $D29D ADD A,$16       ;
 $D29F CP (HL)         ;
 $D2A0 JR C,$D2F6      ; }
; collision with Rex detected and shield activated
 $D2A2 LD A,($A049)    ; {Jump forward if shield not activated
 $D2A5 OR A            ;
 $D2A6 JP Z,$D2CC      ; }
 $D2A9 LD A,(IX+$09)   ; {Jump forward if entity is bubble, smartbomb or
 $D2AC CP $FE          ; question
 $D2AE JP Z,$D2CC      ;
 $D2B1 CP $FD          ;
 $D2B3 JP Z,$D2CC      ;
 $D2B6 CP $FC          ;
 $D2B8 JP Z,$D2CC      ; }
 $D2BB CALL $981F      ; Destroy enemy
 $D2BE LD A,(IX+$14)   ; {Computes shield loss into #REGl shield loss = enemy
 $D2C1 SLA A           ; health * 4
 $D2C3 SLA A           ;
 $D2C5 LD L,A          ; }
 $D2C6 CALL $99CE      ; Handle shield loss
 $D2C9 JP $D2E1        ; Jump forward
; collision with Rex detected and shield not activated
*$D2CC LD A,(IX+$09)   ; {Jump forward if entity is bubble, smartbomb or
 $D2CF CP $FE          ; question
 $D2D1 JP Z,$D2E1      ;
 $D2D4 CP $FD          ;
 $D2D6 JP Z,$D2E1      ;
 $D2D9 CP $FC          ;
 $D2DB JP Z,$D2E1      ; }
 $D2DE CALL $9BDA      ; Handle Rex dead
; Rex takes bubble, smartbombs or question
*$D2E1 LD A,(IX+$09)   ; check enemy?
 $D2E4 CP $FE          ; is bubble?
 $D2E6 CALL Z,$D46C    ; Jump to handles Rex takes bubble
 $D2E9 CP $FD          ; is smartbomb?
 $D2EB CALL Z,$D494    ; Jump to handle Rex takes smartbomb
 $D2EE LD A,(IX+$09)   ;
 $D2F1 CP $FC          ; is question?
 $D2F3 CALL Z,$D4B6    ; Jump to handle question
; check collision with Rex projectiles
*$D2F6 LD IY,$5B60     ; Set #REGiy to the base address for Rex projectiles
                       ; configuration
 $D2FA LD B,$1E        ; Set #REGb to the number of projectiles to check
*$D2FC LD A,(IY+$06)   ; Set #REGa to the projectile status
 $D2FF CP $01          ; is flying?
 $D301 JP NZ,$D3A7     ; Jump to check another projectile if not flying
 $D304 LD A,(IX+$01)   ; {Jump to check another projectile if y-position of
 $D307 ADD A,$05       ; projectile is not in range of collision with the enemy
 $D309 CP (IY+$01)     ; y-position
 $D30C JP NC,$D3A7     ;
 $D30F ADD A,$10       ;
 $D311 CP (IY+$01)     ;
 $D314 JP C,$D3A7      ; }
 $D317 LD A,(IX+$00)   ; {Jump to check another projectile if x-position of
 $D31A CP (IY+$00)     ; projectile is not in range collision with then enemy
 $D31D JP NC,$D3A7     ; x-position
 $D320 ADD A,$10       ;
 $D322 CP (IY+$00)     ;
 $D325 JP C,$D3A7      ; }
; handle projectile collision with entity
 $D328 LD A,(IX+$09)   ; Check for entity type
 $D32B CP $FE          ; {Jump to check another projectile if entity is bubble
 $D32D JP Z,$D3A7      ; }
 $D330 CP $FD          ; {Jump to check another projectile if entity is
 $D332 JP Z,$D3A7      ; smartbomb}
 $D335 CP $FC          ; {Jump to handle another projectile if entity is
 $D337 JP Z,$D3A7      ; question}
 $D33A LD A,($A013)    ; {Jump forward if weapon type is laser
 $D33D CP $02          ;
 $D33F JP NZ,$D349     ; }
 $D342 LD (IY+$06),$00 ; Destroy laser projectile
 $D346 JP $D35B        ; Jump forward
; non laser impact
*$D349 LD (IY+$06),$02 ; Set projectile status to impact #1
 $D34D LD A,($D842)    ; Check channel 3
 $D350 CP $FF          ; {Jump forward if channel in use
 $D352 JP NZ,$D35B     ; }
 $D355 LD DE,$D787     ; Set #REGde to base address for projectile impact sound
 $D358 CALL $D5E7      ; Configure sound channel and mixer register
; handle enemy behaviour on projectile impact
*$D35B LD A,(IX+$09)   ; Check enemy type
 $D35E CP $06          ; {Handle collision if enemy type FOOT MAN DYING 6
 $D360 CALL Z,$D41F    ; }
 $D363 LD A,(IX+$09)   ; Check enemy type
 $D366 CP $06          ; {Jump to handle next projectile if enemy type is FOOT
 $D368 JP Z,$D3A7      ; MAN DYING 6}
 $D36B LD A,(IX+$14)   ; {Jump forward to handle next projectile if enemy
 $D36E OR A            ; health is zero
 $D36F JP Z,$D3A7      ; }
 $D372 DEC A           ; {Decrement enemy health
 $D373 LD (IX+$14),A   ; }
 $D376 CP $01          ; {Jump forward if enemy health <> 1
 $D378 JP NZ,$D3B1     ; }
; enemy health is equal to 1
 $D37B LD A,(IX+$09)   ; {Jump forward and destroy enemy if enemy type is not
 $D37E AND $7F         ; FOOT MAN
 $D380 OR A            ;
 $D381 JP NZ,$D3A4     ; }
 $D384 LD A,(IX+$02)   ; {Jump forward to check projectile direction if FOOT
 $D387 OR A            ; MAN is facing left
 $D388 JP NZ,$D396     ; }
 $D38B LD A,(IY+$04)   ; {check projectile direction
 $D38E BIT 7,A         ; }
 $D390 JP NZ,$D39E     ; Jump forward and FOOT MAN dying #6 animation
 $D393 JP $D3A4        ; Jump to destroy enemy
*$D396 LD A,(IY+$04)   ; {check projectile direction
 $D399 BIT 7,A         ; }
 $D39B JP NZ,$D3A4     ; Jump to destroy enemy if projectile is facing left
*$D39E CALL $D3C2      ; Handle FOOT MAN dying #6
 $D3A1 JP $D3A7        ; Jump to handle next projectile
*$D3A4 CALL $981F      ; Destroy enemy
; check for the next projectile if any
*$D3A7 LD DE,$000F     ; {Set #REGiy point to the next projectile configuration
 $D3AA ADD IY,DE       ; }
 $D3AC DEC B           ; Decrement projectile counter
 $D3AD JP NZ,$D2FC     ; Jump back and handle next projectil until there are
                       ; projectiles
 $D3B0 RET             ;
; Enemy health is <> 1
*$D3B1 LD A,(IX+$09)   ; {Jump and handle next projectile if enemy type is not
 $D3B4 AND $7F         ; SCANNER
 $D3B6 CP $08          ;
 $D3B8 JP NZ,$D3A7     ; }
 $D3BB LD (IX+$10),$04 ; Reset scanner speed
 $D3BF JP $D3A7        ; Jump back and handle next projectile
; Handle FOOT MAN dying #6
*$D3C2 LD A,($A013)    ; Check weapon type
 $D3C5 CP $02          ; {Jump to destroy enemy if weapon type is laser
 $D3C7 JP Z,$981F      ; }
 $D3CA CP $04          ; {Configure FOOT MAN jumping if weapon type is spray
 $D3CC CALL Z,$C602    ; }
 $D3CF LD A,(IX+$02)   ; {Change direction
 $D3D2 XOR $01         ;
 $D3D4 LD (IX+$02),A   ; }
 $D3D7 LD A,$04        ; {Set speed
 $D3D9 LD (IX+$10),A   ; }
 $D3DC LD HL,$AE85     ; {Set address of table offsets for FOOT MAN dying
 $D3DF LD (IX+$0A),L   ; animation
 $D3E2 LD (IX+$0B),H   ; }
 $D3E5 LD HL,$8632     ; {Set address for graphic data of FOOT MAN dying
 $D3E8 LD (IX+$16),L   ;
 $D3EB LD (IX+$17),H   ; }
 $D3EE LD (IX+$09),$06 ; Set enemy type
 $D3F2 LD (IX+$11),$06 ; Set counter for state change
 $D3F6 LD (IX+$14),$02 ; Set health
 $D3FA LD (IX+$0E),$03 ; Set sprite width
 $D3FE LD A,($A013)    ; {Return if weapon type is spray or laser
 $D401 CP $04          ;
 $D403 RET Z           ;
 $D404 CP $02          ;
 $D406 RET Z           ; }
 $D407 LD HL,$5843     ; {Set base address to attribute file for score points
 $D40A LD ($A039),HL   ; }
 $D40D LD A,$09        ; {Init counter for score points
 $D40F LD ($A03B),A    ; }
 $D412 LD HL,$0002     ; {Set next score points
 $D415 LD ($A03C),HL   ; }
 $D418 LD DE,$0001     ; Set actual score points
 $D41B CALL $9A27      ; Increment score
 $D41E RET             ;
; handle projectile collision with FOOT MAN dying 6
*$D41F LD A,($A013)    ; {Return if projectile type is spray
 $D422 CP $04          ;
 $D424 RET Z           ; }
 $D425 LD A,$04        ; {Set enemy speed
 $D427 LD (IX+$10),A   ; }
 $D42A LD HL,$AE85     ; {Set address pointer for offsets animation
 $D42D LD (IX+$0A),L   ;
 $D430 LD (IX+$0B),H   ; }
 $D433 LD HL,$8632     ; {Set address pointer of graphic data for FOOTMAN dying
 $D436 LD (IX+$16),L   ;
 $D439 LD (IX+$17),H   ; }
 $D43C LD (IX+$09),$06 ; Set entity type
 $D440 LD (IX+$11),$06 ; Set counter for state change
 $D444 LD (IX+$14),$02 ; Set enemy health
 $D448 LD A,($A03B)    ; {Decrement score points counter and return if zero
 $D44B DEC A           ;
 $D44C RET Z           ; }
 $D44D LD ($A03B),A    ; Set the new score point counter value
 $D450 LD DE,($A03C)   ; Set #REGde bonus score points
 $D454 CALL $9A27      ; Increment score
 $D457 LD HL,($A03C)   ; {Increment bonus score points
 $D45A LD DE,$0001     ;
 $D45D ADD HL,DE       ;
 $D45E LD ($A03C),HL   ; }
 $D461 LD HL,($A039)   ; {Increment base address into attribute file pointing
 $D464 LD DE,$0003     ; to bonus points icon in HUD
 $D467 ADD HL,DE       ;
 $D468 LD ($A039),HL   ; }
 $D46B RET             ;
; handle Rex takes bubble
*$D46C PUSH AF         ; Save #REGaf
 $D46D LD DE,$D7DB     ; Set #REGde sound buffer for catching small bubble
 $D470 CALL $D5E7      ; Configure sound channel and mixer register
 $D473 LD (IX+$0C),$00 ; Set bubble not visible
 $D477 LD A,$26        ; Set #REGa the quantity of energy to increase
 $D479 CALL $B98E      ; Handle weapon energy increase
 $D47C XOR A           ; {Active HDU flash
 $D47D LD ($A042),A    ; }
 $D480 LD A,(IX+$15)   ; {Jump forward and return if bubble small
 $D483 OR A            ;
 $D484 JP Z,$D492      ; }
 $D487 LD A,$26        ; Set #REGa the quantity of energy to increase
 $D489 CALL $B98E      ; Handle weapon energy increase
 $D48C LD DE,$D7C6     ; Set #REGde sound buffer for catching big bubble
 $D48F CALL $D5E7      ; Configure sound channel and mixer register
*$D492 POP AF          ; Restore #REGaf
 $D493 RET             ;
; handle Rex takes smartbomb
*$D494 LD (IX+$0C),$00 ; Set smartbomb to not visible
 $D498 LD A,($A06C)    ; {Increase number of smartbombs
 $D49B INC A           ; }
 $D49C CP $04          ; {Return if number of smartbombs is qual to 4
 $D49E RET Z           ; }
 $D49F LD ($A06C),A    ; Set the new number of smartbombs
 $D4A2 CALL $A1C9      ; Draw smartbombs
 $D4A5 LD DE,$D7F0     ; Set #REGde to the address for the smartbomb take sound
 $D4A8 CALL $D5E7      ; Configure sound channel and mixer register
 $D4AB RET             ;

; Address pointers into text definition windows for bonus
;
; (1-speed up 2-shield loss 3-1000 bonus 4-energy loss 5-100 rapid shots)
b$D4AC DEFB $41,$AB,$54,$AB,$67,$AB,$7A,$AB
 $D4B4 DEFB $8D,$AB

; Handle Rex takes question
;
; Used by the routine at #R$D215.
c$D4B6 LD (IX+$0C),$00 ; Set question to not visble
 $D4BA PUSH IX         ; {Save #REGix and #REGbc
 $D4BC PUSH BC         ; }
 $D4BD CALL $D5D7      ; Reset sound volume chanels
 $D4C0 CALL $D8A3      ; Copy screen display file into room graphic data buffer
 $D4C3 LD BC,$4E20     ; SET #REGbc = 20.000
 $D4C6 CALL $C8DB      ; Wait some time ~1s (128 t-states 20.000 times)
 $D4C9 LD IX,$AB41     ; Point #REGix to the text defintion for SPEED UP
 $D4CD LD B,$01        ; Set #REGb to the number of rows to draw
 $D4CF CALL $A13E      ; Draw the windows into the display file
 $D4D2 LD HL,$1CE8     ; {Set #R$A07D the Bonus Windows Loop Counter (7200
 $D4D5 LD ($A07D),HL   ; loops)}
 $D4D8 CALL $A375      ; {Set #REGa a random number between 1-4
 $D4DB AND $03         ;
 $D4DD INC A           ; }
 $D4DE LD ($A06F),A    ; Set #R$A06F to the number of bonus screen to show
                       ; (0-speed up 1-shield loss 2-1000 bonus 3-energy loss
                       ; 4-100 rapid shots)
 $D4E1 SLA A           ; {Set into #REGix the address of the text defintion
 $D4E3 LD E,A          ; corresponding to the number of bonus
 $D4E4 LD D,$00        ;
 $D4E6 LD HL,$D4AC     ;
 $D4E9 ADD HL,DE       ;
 $D4EA LD E,(HL)       ;
 $D4EB INC HL          ;
 $D4EC LD D,(HL)       ;
 $D4ED PUSH DE         ;
 $D4EE POP IX          ; }
*$D4F0 CALL $A307      ; Print the line of text into the windows
 $D4F3 INC IX          ; Increment pointer for the next bonus line
 $D4F5 LD BC,($A07D)   ; Set #REGbc to the Bonus Windows Counter
*$D4F9 PUSH BC         ; Save #REGbc
 $D4FA CALL $A477      ; Check FIRE pressed
 $D4FD POP BC          ; Restore #REGbc
 $D4FE JP Z,$D52F      ; If FIRE key pressed jump to handle the bonus selected
 $D501 DEC BC          ; Decrement counter
 $D502 LD A,B          ; {Jump back and wait for keypressed if counter has not
 $D503 OR C            ; reached zero
 $D504 JP NZ,$D4F9     ; }
 $D507 LD HL,($A07D)   ; {Reset loop counter (substract 200 loops to the
 $D50A LD DE,$00C8     ; previous counter)
 $D50D AND A           ;
 $D50E SBC HL,DE       ;
 $D510 LD ($A07D),HL   ; }
 $D513 LD A,H          ; {If loop counter less than 256 then jump to handle the
 $D514 OR A            ; bonus on screen
 $D515 JP Z,$D52F      ; }
 $D518 LD A,($A06F)    ; {Increment the bonus windows number
 $D51B INC A           ;
 $D51C LD ($A06F),A    ; }
 $D51F CP $05          ; {if bonus number equals 5 then point to the first
 $D521 JP NZ,$D4F0     ; bonus
 $D524 LD IX,$AB41     ;
 $D528 XOR A           ;
 $D529 LD ($A06F),A    ; }
 $D52C JP $D4F0        ; Jump back and show the next bonus
; handle bonus selected
*$D52F LD A,($A06F)    ; Check bonus slected
 $D532 OR A            ; is speed up?
 $D533 JP Z,$D55D      ; Jump to handle speed up bonus
 $D536 CP $01          ; is shield loss?
 $D538 JP Z,$D56D      ; Jump to handle shield loss
 $D53B CP $02          ; is 1000 bouns points?
 $D53D JP Z,$D578      ; Jump to handle bonus points
 $D540 CP $03          ; is energy loss?
 $D542 JP Z,$D584      ; handle energy loss
 $D545 CP $04          ; is rapid shots?
 $D547 JP Z,$D590      ; handle rapid shots
; return to normal game
*$D54A LD BC,$4E20     ; Set #REGbc to 20.000
 $D54D CALL $C8DB      ; Wait some time ~1s (128 t-states 20.000 times)
 $D550 CALL $D5AE      ; Reset sound data buffer
 $D553 POP BC          ; {Restore #REGbc and #REGix
 $D554 POP IX          ; }
 $D556 CALL $A28A      ; Copy room graphic buffer to display file
 $D559 CALL $C8BF      ; Copy room color attribute buffer to attribute file
 $D55C RET             ;
; handle speed up
*$D55D LD A,$01        ; {Set Rex fast speed
 $D55F LD ($A072),A    ; }
 $D562 LD A,$C8        ; {Set speed up duration to 200
 $D564 LD ($A073),A    ; }
 $D567 LD HL,$AB41     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D56A JP $D54A        ; Jump back and return to normal game
; handle shield loss
*$D56D LD L,$14        ; loss quantity to #REGl = 20
 $D56F CALL $99CE      ; Handle shield loss
 $D572 LD HL,$AB54     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D575 JP $D54A        ; Jump back and return to normal game
; handle bonus points
*$D578 LD DE,$000A     ; Set #REGa to the bonus points obtained (*100)
 $D57B CALL $9A27      ; Increment score
 $D57E LD HL,$AB67     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D581 JP $D54A        ; Jump back and return to normal game
; handle energy loss
*$D584 CALL $BA3D      ; Handle double weapon energy loss
 $D587 CALL $A1A5      ; Draw HUD
 $D58A LD HL,$AB7A     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D58D JP $D54A        ; Jump back and return to normal game
; handle rapid shots
*$D590 LD A,$01        ; {Set rapid shots
 $D592 LD ($A040),A    ; }
 $D595 LD A,$64        ; {Set number of rapid shots
 $D597 LD ($A041),A    ; }
 $D59A LD HL,$AB8D     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D59D JP $D54A        ; Jump back and return to normal game

; Increment lives
;
; Used by the routine at #R$9A27.
c$D5A0 LD A,($A063)  ; {Increment lives by 1
 $D5A3 INC A         ; }
 $D5A4 CP $0A        ; {Return if live equals to $0A
 $D5A6 RET Z         ; }
 $D5A7 LD ($A063),A  ; Set incremented lives
 $D5AA CALL $99BB    ; Draw lives in HUD
 $D5AD RET           ;

; Reset sound data channels
;
; Used by the routines at #R$947A, #R$97C3, #R$97EA, #R$A4E7, #R$C745 and
; #R$D871.
c$D5AE LD A,$38        ; {Set sound data buffer to disable noise and tone
 $D5B0 LD ($D855),A    ; }
 $D5B3 CALL $D682      ; Send command to the mixer (disable noise and tone)
 $D5B6 LD HL,$D832     ; {Reset channels data
 $D5B9 LD DE,$D833     ;
 $D5BC LD BC,$001D     ;
 $D5BF LD (HL),$00     ;
 $D5C1 LDIR            ; }
 $D5C3 LD IX,$D832     ; {Initialise channels at #R$D832
 $D5C7 LD (IX+$00),$FF ;
 $D5CB LD (IX+$08),$FF ;
 $D5CF LD (IX+$10),$FF ; }
 $D5D3 CALL $D5D7      ; Reset sound volume channels
 $D5D6 RET             ;

; Reset the 3 channel volumes of the AY-3-8912
;
; Used by the routines at #R$97C3, #R$97EA, #R$A4E7, #R$C745, #R$D5AE and
; #R$D871.
c$D5D7 LD E,$00      ; Set #REGe to the volume value
 $D5D9 LD D,$08      ; Set #REGd to the sound register for channel 1
 $D5DB CALL $D759    ; Reset volume of channel 1
 $D5DE INC D         ; Set #REGd to the sound register for channel 2
 $D5DF CALL $D759    ; Reset volume of channel 2
 $D5E2 INC D         ; Set #REGd to the sound register for channel 3
 $D5E3 CALL $D759    ; Reset volume of channel 3
 $D5E6 RET           ;

; Configure sound channel and mixer register
;
; Used by the routines at #R$969B, #R$981F, #R$9AC5, #R$9C3B, #R$9D1F, #R$9D47,
; #R$9F5F, #R$B506, #R$B562, #R$B64E, #R$D215, #R$D46C and #R$D494.
;
; DE Sound data address
c$D5E7 PUSH IY       ; {Save #REGiy, #REGix and #REGbc
 $D5E9 PUSH IX       ;
 $D5EB PUSH BC       ; }
 $D5EC PUSH DE       ; {Copy #REGde into #REGiy
 $D5ED POP IY        ; }
 $D5EF CALL $D5F8    ; Configure sound channel and mixer register
 $D5F2 POP BC        ; {Restore #REGiy, #REGix and #REGbc
 $D5F3 POP IX        ;
 $D5F5 POP IY        ; }
 $D5F7 RET           ;
; Configure sound channel and mixer register
*$D5F8 LD A,(IY+$00) ; {Set #REGix to the base address for the channel to
 $D5FB DEC A         ; configure
 $D5FC SLA A         ;
 $D5FE SLA A         ;
 $D600 SLA A         ;
 $D602 LD C,A        ;
 $D603 LD B,$00      ;
 $D605 LD IX,$D832   ;
 $D609 ADD IX,BC     ; }
 $D60B LD A,(IY+$02) ; {Set number of tones
 $D60E LD (IX+$00),A ; }
 $D611 LD A,(IY+$06) ; {Set variation counter
 $D614 LD (IX+$01),A ; }
 $D617 PUSH IY       ; {Set address for sound data
 $D619 POP HL        ;
 $D61A LD BC,$0006   ;
 $D61D ADD HL,BC     ;
 $D61E LD (IX+$02),L ;
 $D621 LD (IX+$03),H ; }
 $D624 LD A,(IY+$04) ; {Set base fine and coarse pitch
 $D627 LD (IX+$04),A ;
 $D62A LD A,(IY+$05) ;
 $D62D LD (IX+$05),A ; }
 $D630 LD A,(IY+$03) ; {Set channel volume
 $D633 LD (IX+$07),A ; }
 $D636 LD A,(IY+$01) ; Set #REGa to the data mixer
 $D639 CP $00        ; {Jump forward if not zero
 $D63B JP NZ,$D651   ; }
 $D63E LD B,(IY+$00) ; {Disable noise for selected channel
 $D641 LD C,$04      ;
*$D643 SLA C         ;
 $D645 DJNZ $D643    ; }
 $D647 LD A,($D855)  ; {Disable noise for the selected channel into the current
 $D64A OR C          ; data mixer
 $D64B LD ($D855),A  ; }
 $D64E JP $D682      ; Send this data to the mixer register
*$D651 LD A,($D855)  ; {Set #REGb the current data mixer
 $D654 LD B,A        ; }
 $D655 LD A,(IY+$00) ; {if channel 1 then disable tone in channel 1 and enable
 $D658 CP $01        ; noise in channel 1
 $D65A JP NZ,$D664   ;
 $D65D RES 3,B       ;
 $D65F SET 0,B       ; }
 $D661 JP $D674      ; Jump to update data mixer
*$D664 CP $02        ; {if channel 2 then disable tone in channel 2 and enable
 $D666 JP NZ,$D670   ; noise in channel 2
 $D669 RES 4,B       ;
 $D66B SET 1,B       ; }
 $D66D JP $D674      ; Jump to update data mixer
*$D670 RES 5,B       ; {if channel 3 then disable tone in channel 3 and enable
 $D672 SET 2,B       ; noise in channel 3}
*$D674 LD A,B        ; {Update data mixer
 $D675 LD ($D855),A  ; }
 $D678 CALL $D682    ; Send this data to the mixer register
 $D67B LD A,(IY+$01) ; {Copy noise/tone enable/disable
 $D67E LD (IX+$06),A ; }
 $D681 RET           ;

; Send data to the mixer register of AY-3-8912
;
; Used in the routine at #R$D5AE.
c$D682 LD A,($D855)  ; Set #REGa to the value of the mixer
 $D685 LD D,$07      ; Set #REGd to the mixer register
 $D687 LD E,A        ; Copy value of the mixer to #REGe
 $D688 CALL $D759    ; Send mixer command to sound device
 $D68B RET           ;

; Play sound channels
;
; Used by the routines at #R$947A and #R$A915.
c$D68C LD B,$03      ; Set #REGb the number of channels to play
 $D68E LD IX,$D832   ; Set #REGix to address for channel #1 sound data
 $D692 LD D,$00      ; Set sound register for fine pitch on channel #1
 $D694 LD A,$01      ; {Set channel volume #1
 $D696 LD ($D857),A  ; }
*$D699 PUSH BC       ; {Save #REGbc and #REGde
 $D69A PUSH DE       ; }
 $D69B CALL $D6DB    ; Configure next tone/noise data for current channel
 $D69E POP DE        ;
 $D69F PUSH DE       ;
 $D6A0 LD A,(IX+$00) ; {Jump to next channel if this channel is disabled
 $D6A3 CP $FF        ;
 $D6A5 JP Z,$D6C8    ; }
 $D6A8 LD A,(IX+$06) ; {Jump forward if noise sound
 $D6AB CP $00        ;
 $D6AD JP NZ,$D6C0   ; }
; play note
 $D6B0 LD E,(IX+$04) ; {Send command for fine pitch
 $D6B3 CALL $D759    ; }
 $D6B6 INC D         ; Increase register number
 $D6B7 LD E,(IX+$05) ; {Send command for coarse pitch
 $D6BA CALL $D759    ; }
 $D6BD JP $D6C8      ; Jump forward and play next channel
; play noise
*$D6C0 LD E,(IX+$04) ; {Send command for noise pitch
 $D6C3 LD D,$06      ;
 $D6C5 CALL $D759    ; }
; play next channel
*$D6C8 LD BC,$0008   ; {Point #REGix to the next channel data buffer
 $D6CB ADD IX,BC     ; }
 $D6CD POP DE        ; {Restore #REGde and #REGbc
 $D6CE POP BC        ; }
 $D6CF INC D         ; {Increment register for next channel
 $D6D0 INC D         ; }
 $D6D1 LD A,($D857)  ; {Increment volume channel
 $D6D4 INC A         ;
 $D6D5 LD ($D857),A  ; }
 $D6D8 DJNZ $D699    ; Jump back and play next channel
 $D6DA RET           ;

; Configure note for current channel
;
; Used by the routine at #R$D68C.
;
; IX address pointer to channel data buffer
c$D6DB LD A,(IX+$00)  ; {Return if channel is not active
 $D6DE CP $FF         ;
 $D6E0 RET Z          ; }
 $D6E1 CALL $D744     ; Send channel volume command
 $D6E4 CALL $D759     ; Send channel volume command
 $D6E7 LD L,(IX+$02)  ; {Set #REGiy to the address pointer for the sound data
 $D6EA LD H,(IX+$03)  ;
 $D6ED PUSH HL        ;
 $D6EE POP IY         ; }
 $D6F0 DEC (IX+$01)   ; Decrement variation counter
 $D6F3 JP Z,$D715     ; If counter is 0 jump to configure next note
 $D6F6 LD E,(IY+$01)  ; {Set #REGbc value of pitch and coarse delta
 $D6F9 LD C,E         ;
 $D6FA RL E           ;
 $D6FC SBC A,A        ;
 $D6FD LD B,A         ; }
 $D6FE LD L,(IX+$04)  ; {Increment pitch and coarse data for tone/noise
 $D701 LD H,(IX+$05)  ;
 $D704 ADD HL,BC      ;
 $D705 LD (IX+$04),L  ;
 $D708 LD (IX+$05),H  ; }
 $D70B LD A,(IX+$07)  ; {Increment/decrement volume
 $D70E ADD A,(IY+$02) ;
 $D711 LD (IX+$07),A  ; }
 $D714 RET            ;
; check if there are more tones
*$D715 DEC (IX+$00)   ; Decrement tones number?
 $D718 JP Z,$D733     ; if zero jump to disable channel
 $D71B INC IY         ; {Point #REGiy to the next tone data
 $D71D INC IY         ;
 $D71F INC IY         ; }
 $D721 PUSH IY        ; {Update address pointer to tone data
 $D723 POP HL         ;
 $D724 LD (IX+$02),L  ;
 $D727 LD (IX+$03),H  ; }
 $D72A LD A,(IY+$00)  ; {Set new variation counter
 $D72D LD (IX+$01),A  ; }
 $D730 JP $D6DB       ; Configure next tone
; disable channel
*$D733 LD A,($D857)   ; {Set volume to zero for current channel
 $D736 ADD A,$07      ;
 $D738 LD D,A         ;
 $D739 LD E,$00       ; }
 $D73B CALL $D759     ; Send volume command
 $D73E LD A,$FF       ; {Disable current channel
 $D740 LD (IX+$00),A  ; }
 $D743 RET            ;

; Send channel volume command
;
; Used by the routine at #R$D6DB.
c$D744 LD A,($D857)  ; {Set channel volume register into #REGd
 $D747 ADD A,$07     ;
 $D749 LD D,A        ; }
 $D74A LD E,(IX+$07) ; {Set #REGe the volume value (bits 7-4)
 $D74D SRL E         ;
 $D74F SRL E         ;
 $D751 SRL E         ;
 $D753 SRL E         ; }
 $D755 CALL $D759    ; Send command to AY-3-8912
 $D758 RET           ;

; Send commands to AY-3-8912
;
; Used by the routines at #R$D5D7, #R$D5F8, #R$D68C, #R$D6DB and #R$D744.
;
; D Register to write
; E Data to write
c$D759 LD BC,$FFFD   ;
 $D75C OUT (C),D     ;
 $D75E LD B,$BF      ;
 $D760 OUT (C),E     ;
 $D762 RET           ;

; Sound data
;
; #TABLE(default)
; { =h Byte | =h Meaning }
; { $00 | Channel number (1-3) }
; { $01 | Noise/tone 0 - tone  1 - noise }
; { $02 | number of tones }
; { $03 | Channel Volume (bits 7-4) }
; { $04 | base fine/noise pitch }
; { $05 | base coarse pitch }
; { $06 | variation counter for note #1 }
; { $07 | pitch delta for note #1 (bit 7 - coarse pitch / bits6-0 fine pitch) }
; { $08 | volume delta for note #1 }
; { $09 + | counter, pitch and volume for note #n }
; TABLE#
b$D763 DEFB $01,$01,$01,$AA,$0A,$00 ; {Weapon sound for basic laser, double
 $D769 DEFB $0F,$00,$F4             ; fire and multiple}
 $D76C DEFB $03,$01,$02,$64,$0A,$00 ; {Enemy weapon sound
 $D772 DEFB $03,$05,$14             ; }
 $D775 DEFB $01,$01,$01,$96,$0A,$00 ; {Weapon sound for laser
 $D77B DEFB $64,$0A,$FF             ; }
 $D77E DEFB $01,$01,$01,$B8,$0A,$00 ; {Weapon sound for spray
 $D784 DEFB $03,$00,$9C             ; }
 $D787 DEFB $03,$01,$01,$78,$0A,$00 ; {Projectile impact sound
 $D78D DEFB $02,$00,$F0             ; }
 $D790 DEFB $03,$01,$02,$FF,$0A,$00 ; {Explosion sound
 $D796 DEFB $08,$3C,$00             ;
 $D799 DEFB $26,$00,$F9             ; }
 $D79C DEFB $02,$00,$01,$82,$E8,$03 ; {Shield sound
 $D7A2 DEFB $04,$00,$00             ; }
 $D7A5 DEFB $02,$00,$01,$FF,$20,$4E ; {Sound not used
 $D7AB DEFB $02,$0A,$F6             ; }
 $D7AE DEFB $02,$00,$02,$A6,$40,$9C ; {Rex teleporting
 $D7B4 DEFB $5A,$00,$01             ;
 $D7B7 DEFB $1E,$00,$FA             ; }
 $D7BA DEFB $02,$00,$02,$3C,$40,$9C ; {Rex dead
 $D7C0 DEFB $1E,$00,$06             ;
 $D7C3 DEFB $5A,$00,$FF             ; }
 $D7C6 DEFB $02,$00,$05,$96,$DE,$01 ; {Big Bubble catching sound
 $D7CC DEFB $02,$00,$00             ;
 $D7CF DEFB $02,$CC,$00             ;
 $D7D2 DEFB $02,$00,$00             ;
 $D7D5 DEFB $02,$D1,$00             ;
 $D7D8 DEFB $02,$00,$00             ; }
 $D7DB DEFB $02,$00,$05,$96,$EF,$00 ; {Small Bubble catching sound
 $D7E1 DEFB $02,$00,$00             ;
 $D7E4 DEFB $02,$E6,$00             ;
 $D7E7 DEFB $02,$00,$00             ;
 $D7EA DEFB $02,$E9,$00             ;
 $D7ED DEFB $02,$00,$00             ; }
 $D7F0 DEFB $02,$00,$05,$96,$BC,$03 ; {Smartbomb catching sound
 $D7F6 DEFB $02,$00,$00             ;
 $D7F9 DEFB $02,$CA,$00             ;
 $D7FC DEFB $02,$00,$00             ;
 $D7FF DEFB $02,$CD,$00             ;
 $D802 DEFB $02,$00,$00             ; }
 $D805 DEFB $02,$00,$09,$C8,$20,$4E ; {Respawn sound
 $D80B DEFB $0A,$00,$01             ;
 $D80E DEFB $02,$00,$9C             ;
 $D811 DEFB $02,$00,$00             ;
 $D814 DEFB $0A,$0A,$FF             ;
 $D817 DEFB $0A,$46,$00             ;
 $D81A DEFB $02,$00,$9C             ;
 $D81D DEFB $05,$00,$00             ;
 $D820 DEFB $02,$04,$64             ;
 $D823 DEFB $04,$00,$00             ; }
 $D826 DEFB $02,$00,$02,$A0,$40,$9C ; {Shield recharging sound
 $D82C DEFB $07,$05,$01             ;
 $D82F DEFB $07,$FB,$FF             ; }

; Channel data buffer por playing sound
;
; #TABLE(default)
; { =h Byte | =h Meaning }
; { $00 | number of tones }
; { $01 | variation counter }
; { $02 - $03 | Address pointer to sound data }
; { $04 | fine pitch / noise pitch }
; { $05 | coarse pitch }
; { $06 | Noise/tone 0 - Tone  1 - Noise }
; { $07 | Volume (bits 7-4 ) }
; TABLE#
g$D832 DEFS $08      ; Data channel 1
 $D83A DEFS $08      ; Data channel 2
 $D842 DEFS $08      ; Data channel 3

; Not used
s$D84A DEFS $0B

; Sound data mixer
g$D855 DEFS $01

; Not used
s$D856 DEFS $01

; Channel volumne number (1-3)
g$D857 DEFS $01

; Check for an slot in Enemy configuration buffer to create another enemy
;
; Used by the routines at #R$98AF and #R$C1CA.
;
; O:IX base address into enemy configuration to create the enemy
c$D858 LD IX,$5E66   ; Set #REGix the base address for enemy configuration
 $D85C LD A,($A092)  ; {Set #REGb the number of enemies in the room
 $D85F LD B,A        ; }
*$D860 LD A,(IX+$0C) ; {is enemy dead?
 $D863 OR A          ; }
 $D864 RET Z         ; Return if so
 $D865 LD DE,$0018   ; {Point #REGix to the next slot
 $D868 ADD IX,DE     ; }
 $D86A DJNZ $D860    ; Jump wback until there are enemies
 $D86C LD IX,$03E8   ; No slots availables. Set #REGix to $03E8?
 $D870 RET           ;

; Show weapon bonus windows
;
; Used by the routine at #R$9F5F.
c$D871 LD A,(HL)     ; {Return if weapon has been collected previously
 $D872 OR A          ;
 $D873 RET NZ        ; }
 $D874 LD (HL),$FF   ; Set weapon collected in text definition buffer
 $D876 INC HL        ; {Set #REGhl the number of lines to draw on windows
 $D877 LD A,(HL)     ; }
 $D878 INC HL        ; Point #REGhl to text definition data
 $D879 PUSH IX       ; {Save #REGix, #REGiy and #REGbc
 $D87B PUSH IY       ;
 $D87D PUSH BC       ; }
 $D87E CALL $D5D7    ; Reset channel volumes
 $D881 PUSH HL       ; {Copy #REGhl into #REGix
 $D882 POP IX        ; }
 $D884 CALL $D8A3    ; Copy screen display file into room graphic data buffer
 $D887 LD B,A        ; Set #REGb the number of lines to draw
 $D888 CALL $A13E    ; Draw windows with weapon text
 $D88B LD BC,$2710   ; Set #REGbc = 10.000
 $D88E CALL $C8DB    ; Wait some time ~0.5s (128 t-states 10.000 times)
 $D891 CALL $97C3    ; Reset sound buffer, volume channels and check for FIRE
                     ; key
 $D894 CALL $A28A    ; Copy room graphic buffer to display file
 $D897 CALL $C8BF    ; Copy room color attribute buffer to attribute file
 $D89A CALL $D5AE    ; Reset sound data buffer
 $D89D POP BC        ; {Restore #REGbc, #REGiy and #rEGix
 $D89E POP IY        ;
 $D8A0 POP IX        ; }
 $D8A2 RET           ;

; Copy screen display file into room graphic data buffer
;
; Used by the routine at #R$D871.
c$D8A3 LD IY,$AC0D   ; Set #REGiy to the address into the display lookup table
 $D8A7 LD B,$A8      ; Set #REGb to the number of pixel-rows to copy
 $D8A9 LD DE,$EAFF   ; Set #REGde to the base address for the room graphic
                     ; buffer
*$D8AC PUSH BC       ; Save REGbc
 $D8AD LD L,(IY+$00) ; {Copy a pixel-row from display file to room graphic data
 $D8B0 LD H,(IY+$01) ;
 $D8B3 LD BC,$0020   ;
 $D8B6 LDIR          ; }
 $D8B8 INC IY        ; {Increment address into the display lookup table
 $D8BA INC IY        ; }
 $D8BC POP BC        ; Restore #REGbc
 $D8BD DJNZ $D8AC    ; Jump back until all the screen copied
 $D8BF RET           ;

; Draws an sprite
;
; Draws an sprite with the information defined in the data buffer pointed by
; the address at #REGsp Used by the routines at #R$A1DB, #R$A212 and #R$E00B.
c$D8C0 LD ($A093),IX  ; Save at #R$A093 the current value of #REGix
 $D8C4 LD ($A095),IY  ; Save at #R$A095 the current value of #REGiy
 $D8C8 POP IY         ; Restore the base address of the data buffer for the
                      ; sprite to display
 $D8CA LD L,(IY+$03)  ; {Set #REGhl to the vertical position of the sprite
 $D8CD LD H,$00       ; }
 $D8CF ADD HL,HL      ; {Set #REGhl the address location of the sprite in the
 $D8D0 LD DE,$ABDD    ; display file lookup table
 $D8D3 ADD HL,DE      ; }
 $D8D4 PUSH HL        ; {Copy #REGhl to #REGix
 $D8D5 POP IX         ; }
 $D8D7 LD L,(IY+$00)  ; {Set #REGhl to point to address of the graphic data for
 $D8DA LD H,(IY+$01)  ; the sprite}
 $D8DD LD B,(IY+$05)  ; Set #REGb the height of the sprite
*$D8E0 PUSH BC        ; Save #REGbc
 $D8E1 LD A,(IX+$00)  ; Set #REGa to the lower byte of the address to the
                      ; display file where draw the sprite
 $D8E4 LD D,(IX+$01)  ; Set #REGd to the high byte of the address to the
                      ; display file where draw the sprite
 $D8E7 ADD A,(IY+$02) ; Add the horizontal position to the lowe byte of the
                      ; display file
 $D8EA LD E,A         ; Set #REGde the address point in display file to draw
                      ; the sprite
 $D8EB LD C,(IY+$04)  ; {Set #REGbc to the width of the sprite
 $D8EE LD B,$00       ; }
 $D8F0 LDIR           ; Copy to display file the graphics data of the sprite (a
                      ; row of pixels)
 $D8F2 INC IX         ; {Points to the next address in the display file look up
 $D8F4 INC IX         ; table}
 $D8F6 POP BC         ; Recover #REGbc
 $D8F7 DJNZ $D8E0     ; Jump back if there are partial sprite to draw
 $D8F9 LD DE,$0006    ; {Point #REGiy to the end of the data buffer for the
 $D8FC ADD IY,DE      ; sprite. This will be the next instruction to execute
                      ; when return from this routine}
 $D8FE PUSH IY        ; Save #REGiy
 $D900 LD IY,($A095)  ; {Restore #REGiy and #REGix
 $D904 LD IX,($A093)  ; }
 $D908 RET            ; Return to instruction pointed by #REGiy

; Fill a rectangle with a color attribute in the attribute file
;
; Used by the routines at #R$A1A5, #R$CE7B and #R$DB96.
;
; HL Points to the address in the attributte file for the top-left corner of
; .  the rectangle to fill
; A Fill color attribute
; B Height of the rectangle
; E Width of the rectangle
c$D909 PUSH AF       ; {Save #REGaf, #REGde, #REGbc and #REGhl
 $D90A PUSH DE       ;
 $D90B PUSH BC       ;
 $D90C PUSH HL       ; }
 $D90D LD ($A093),A  ; Save color attribute at #R$A093
 $D910 LD A,E        ; {Save width at #R$A095
 $D911 LD ($A095),A  ; }
*$D914 PUSH BC       ; {Save #REGbc and #REGhl briefly
 $D915 PUSH HL       ; }
 $D916 LD A,($A095)  ; {Save width at #REGb
 $D919 LD B,A        ; }
 $D91A LD A,($A093)  ; {Set color attribute into attribute file
*$D91D LD (HL),A     ; }
 $D91E INC HL        ; Increment pointer to the attribute file
 $D91F DJNZ $D91D    ; Jump back while there are columns to fill
 $D921 POP HL        ; Restore #REGhl
 $D922 LD DE,$0020   ; {Increment pointer to attribute file to the next row
 $D925 ADD HL,DE     ; }
 $D926 POP BC        ; Restore #REGbc
 $D927 DJNZ $D914    ; Jump back while there are rows to fill
 $D929 POP HL        ; {Restore #REGhl, #REGbc, #REGde and #REGaf
 $D92A POP BC        ;
 $D92B POP DE        ;
 $D92C POP AF        ; }
 $D92D RET           ;

; Routine not used
s$D92E POP BC
 $D92F RET

; Unused
s$D930 DEFS $32

; Mapping table for tile graphic and room graphic buffer
;
; Contains two words for every tile drawn on screen. First word: address of the
; tile location into the room graphics buffer Second word: address of the tile
; graphics $FF is an end marker Tiles $00, $10, $71, $81 and $91 are special
; tiles, not drawn The routine #R$C745 fill this table and the data overwrites
; the main loop routine for the title screen (#R$DAC0) and subsequent routines
g$D962 DEFS $015E

; Main loop for the tile screen
;
; Used by the routine at #R$947A.
c$DAC0 LD A,$00      ; {Set screen border color to black
 $DAC2 OUT ($FE),A   ; }
 $DAC4 LD DE,$6018   ; {Copy graphic data of FOOTMAN falling at $E336 into the
 $DAC7 LD HL,$E336   ; buffer at $6018
 $DACA LD BC,$00C0   ;
 $DACD LDIR          ; }
 $DACF LD DE,$4000   ; {Copy the contents of the screen buffer at #R$E4FF to
 $DAD2 LD HL,$E4FF   ; the display and attribute file
 $DAD5 LD BC,$1B00   ;
 $DAD8 LDIR          ; }
 $DADA LD B,$05      ; Set #REGb to the number of lines of text of the select
                     ; control popup
 $DADC LD IX,$DF05   ; Point #REGix at the first byte of the text definition
                     ; data for the select control popup
 $DAE0 CALL $A13E    ; Draws the select control popup on display file
 $DAE3 LD DE,$E4FF   ; {Copy the display and attribute file to the screen
 $DAE6 LD HL,$4000   ; buffer at #R$E4FF
 $DAE9 LD BC,$1B00   ;
 $DAEC LDIR          ; }
; Prepares to display the enemies windows showroom on title screen
*$DAEE LD DE,$4000   ; {Copy the contents of the screen buffer at #R$E4FF to
 $DAF1 LD HL,$E4FF   ; the display and attribute file
 $DAF4 LD BC,$1B00   ;
 $DAF7 LDIR          ; }
 $DAF9 XOR A         ; Set #REGa=0
 $DAFA LD ($A07F),A  ; Initialise the animation frame number for the enemy
                     ; animation on tile screen at #R$A07F
 $DAFD LD ($A085),A  ; Initialise the enemy windows of the tile screen to
                     ; hidden at #R$A085
 $DB00 LD HL,$E05B   ; {Initialise address for the animation definition at
 $DB03 LD ($A083),HL ; #R$A083}
 $DB06 LD A,$32      ; {Initialise loop counter at #R$A065
 $DB08 LD ($A065),A  ; }
 $DB0B LD HL,$DC26   ; {Initialise the pointer to the first byte of the windows
 $DB0E LD ($A086),HL ; definition for the FOOT MAN POINTS popup}
; Draws the windows, the animated enemies and check for keyboard inputs There
; is a routine that waits aprox. 100 ms every loop of the counter (50 times),
; so the windows display duration and the duration between windows is aprox. 5
; seconds.
*$DB11 LD HL,($A083) ; Set #REGhl to the address pointer to the enemy animation
                     ; definition
 $DB14 CALL $E00B    ; Draws the animation frame for the corresponding enemy
 $DB17 LD BC,$07D0   ; Set #REGbc=2000
 $DB1A CALL $C8DB    ; Wait ~ 100ms = 182 t-states 2000 times
 $DB1D LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB20 IN A,(C)      ; }
 $DB22 BIT 3,A       ; Key 4 is pressed?
 $DB24 JP Z,$DE5D    ; Jump if so
 $DB27 LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB2A IN A,(C)      ; }
 $DB2C BIT 2,A       ; Key 3 is pressed?
 $DB2E JP Z,$DE99    ; Jump if so
 $DB31 LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB34 IN A,(C)      ; }
 $DB36 BIT 1,A       ; Key 2 is pressed?
 $DB38 JP Z,$DE20    ; Jump if so
 $DB3B LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB3E IN A,(C)      ; }
 $DB40 BIT 0,A       ; Key 1 is pressed?
 $DB42 JP Z,$DD54    ; Jump if so
 $DB45 LD A,($A065)  ; {Decrease the loop counter at #R$A065
 $DB48 DEC A         ;
 $DB49 LD ($A065),A  ; }
 $DB4C OR A          ; The loop counter is $00?
 $DB4D JP NZ,$DB11   ; Jump back if not
 $DB50 LD A,$32      ; {Reset the loop counter at #R$A065 to $32
 $DB52 LD ($A065),A  ; }
 $DB55 LD A,($A085)  ; {Show/hide the enemy windows in the title screen
 $DB58 XOR $01       ;
 $DB5A LD ($A085),A  ; }
 $DB5D OR A          ; Is the enemy windows hidden?
 $DB5E JP Z,$DB90    ; Jump if so
 $DB61 LD HL,($A083) ; Set #REGhl to the value of the current address of the
                     ; enemy animation defnition
 $DB64 LD DE,$000C   ; {Point #REGhl to the next enemy animation definition
 $DB67 ADD HL,DE     ; }
 $DB68 LD A,(HL)     ; Pick up the first byte of the enemy animation definition
 $DB69 CP $FF        ; Is an end marker?
 $DB6B JP NZ,$DB71   ; Jump if not
 $DB6E LD HL,$E067   ; {Point #R$A083 to the initial enemy animation definition
*$DB71 LD ($A083),HL ; address}
 $DB74 LD IX,($A086) ; Point #REGix to the address of the text definition data
                     ; at #R$A086
 $DB78 LD B,$02      ; Set #REGb to the number of files of the windows
 $DB7A CALL $A13E    ; Draw the corresponding windows in tile screen
 $DB7D LD A,(IX+$00) ; Set #REGa to the first byte of the text definition data
 $DB80 CP $FF        ; Is an end marker?
 $DB82 JP NZ,$DB89   ; Jump if not
 $DB85 LD IX,$DC26   ; Set #REGix to the address of the first windows
                     ; definition (FOOT MAN) at #R$DC26
*$DB89 LD ($A086),IX ; Save to #R$A086 this windows defintion address
 $DB8D JP $DB11      ; Jump back
*$DB90 CALL $DB96    ; Hide the current visible enemy animation windows
 $DB93 JP $DB11      ; Jump back
; Hide the current visible enemy animation windows
*$DB96 LD HL,$5800   ; {Draw a rectangle (15x4) of color attribute $02 directly
 $DB99 LD B,$04      ; into the attribute file It does not seem necessary
 $DB9B LD E,$0F      ; because later overwrites it with the content of the
 $DB9D LD A,$02      ; screen buffer
 $DB9F CALL $D909    ; }
 $DBA2 LD DE,$4000   ; {Copy the contents of the screen buffer at $E4FF into de
 $DBA5 LD HL,$E4FF   ; display file
 $DBA8 LD BC,$1B00   ;
 $DBAB LDIR          ; }
 $DBAD RET           ;

; Check for key pressed in the DEFINE keys windows
;
; Read all the ports to detect a key pressed
;
; O:A Keycode of the key pressed
c$DBAE PUSH IY       ; Save #REGiy
*$DBB0 LD IX,$E0E0   ; Set #REGix to the base address for the list of ports to
                     ; read the keys
 $DBB4 LD IY,$A9CC   ; Set #REGiy to the address pointer of the charset for
                     ; keypressed
 $DBB8 LD B,$08      ; Set #REGb to the number of ports to read the keys
*$DBBA PUSH BC       ; Save #REGbc
 $DBBB LD C,(IX+$00) ; {Set #REGbc to the port pointed by #REGiy
 $DBBE LD B,(IX+$01) ; }
 $DBC1 LD ($A0AB),BC ; Save the port at #R$A0AB
 $DBC5 IN A,(C)      ; Read the keys of the port into #REGa
 $DBC7 LD B,$05      ; Set #REGb to the number of bits to read to check for key
                     ; pressed
 $DBC9 LD E,$00      ; Set #REGe to the bit number to check
 $DBCB LD D,A        ; Set #REGd a copy of the result of the port reading
*$DBCC RRCA          ; Rotates right #REGa and check for the bit leaving on the
                     ; right
 $DBCD JP NC,$DBE2   ; jump forward if keypressed
 $DBD0 INC E         ; Increment the bit number checked
 $DBD1 DJNZ $DBCC    ; Jump back until all the five bits readed
 $DBD3 POP BC        ; Restore #REGbc
 $DBD4 INC IX        ; {Point IX to the next port
 $DBD6 INC IX        ; }
 $DBD8 LD DE,$0005   ; {Point IY to the next set of chars for the corresponding
 $DBDB ADD IY,DE     ; port}
 $DBDD DJNZ $DBBA    ; Jump back until all the ports readed
 $DBDF JP $DBB0      ; Jump back and repeat the process from the beginning
; Detected a key pressed
*$DBE2 POP BC        ; Restore #REGbc
 $DBE3 PUSH DE       ; Save #REGde
*$DBE4 LD C,(IX+$00) ; {Set #REGbc to the port pointed by #REGiy
 $DBE7 LD B,(IX+$01) ; }
 $DBEA IN A,(C)      ; Read the keys of the port into #REGa
 $DBEC CP D          ; Compare with the previously readed keys. Is the key
                     ; still pressed?
 $DBED JP Z,$DBE4    ; Jump back if so
 $DBF0 LD A,E        ; Set #REGa to the bit number of the key pressed
 $DBF1 SLA A         ; {Computes the opcode of BIT to read the corresponent bit
 $DBF3 SLA A         ; number: $47 - BIT 0,a | $4F - BIT 1,a | $57 - BIT 2,a |
 $DBF5 SLA A         ; ...
 $DBF7 LD D,$47      ;
 $DBF9 ADD A,D       ; }
 $DBFA LD ($A0AD),A  ; Save corresponent opcode of BIT into #R$A0AD
 $DBFD POP DE        ; Restore in #REGde the bit number of the pressed key
 $DBFE LD D,$00      ; {Set #REGiy to the corresponding address of the key
 $DC00 ADD IY,DE     ; pressed in the charset table at #R$A9CC}
 $DC02 LD A,(IY+$00) ; Set #REGa to the keycode of the key pressed
 $DC05 POP IY        ; Restore #REGiy
 $DC07 CP $20        ; is SPACE the key pressed?
 $DC09 JP Z,$DBAE    ; Jump back if so and check for another key reading
 $DC0C CP $48        ; is H the key pressed?
 $DC0E JP Z,$DBAE    ; Jump back if so and check for another key reading
 $DC11 LD IY,$DD4E   ; Set #REGiy to the base address of the rex movement key
                     ; defined
 $DC15 LD B,$05      ; Set #REGb to the number of keys to define
*$DC17 CP (IY+$00)   ; Is the key pressed now equals to the key already
                     ; defined?
 $DC1A JP Z,$DBAE    ; Jump back if so and check for another key reading
 $DC1D INC IY        ; Points #REGiy to the next key alredy defined
 $DC1F DJNZ $DC17    ; Jump back while there are keys defined to check
 $DC21 LD IY,$DD4E   ; Set #REGiy to the base address of the rex movement key
                     ; defined
 $DC25 RET           ;

; Text Definition Data - Enemy showroom on title screen
;
; The Text Definition Data format is described at #R$AAAE
; .
; FOOT MAN PTS:100
b$DC26 DEFB $44,$03,$10      ; Color attribute and position of text
 $DC29 DEFM "   FOOT MAN"    ; #MESSAGE($DC29,$DC33)(m_foot_man)
 $DC34 DEFB $00              ; End marker
 $DC35 DEFB $43,$03,$18      ; Color attribute and position of text
 $DC38 DEFM "   PTS:100 "    ; #MESSAGE($DC38,$DC42)(pts_foot_man)
 $DC43 DEFB $00              ; End marker
; STOMPER PTS:200
 $DC44 DEFB $44,$03,$10      ; Color attribute and position of text
 $DC47 DEFM "   STOMPER"     ; #MESSAGE($DC47,$DC50)(m_stomper)
 $DC51 DEFB $00              ; End marker
 $DC52 DEFB $43,$03,$18      ; Color attribute and position of text
 $DC55 DEFM "   PTS:200"     ; #MESSAGE($DC55,$DC5E)(pts_stomper)
 $DC5F DEFB $00              ; End marker
; SCANNER PTS:600
 $DC60 DEFB $44,$03,$10      ; Color attribute and position of text
 $DC63 DEFM "   SCANNER"     ; #MESSAGE($DC63,$DC6C)(m_scanner)
 $DC6D DEFB $00              ; End marker
 $DC6E DEFB $43,$03,$18      ; Color attribute and position of text
 $DC71 DEFM "   PTS:600"     ; #MESSAGE($DC71,$DC7A)(pts_scanner)
 $DC7B DEFB $00              ; End marker
; RAMMING POD PTS:300
 $DC7C DEFB $44,$03,$10      ; Color attribute and position of text
 $DC7F DEFM "   RAMMING POD" ; #MESSAGE($DC7F,$DC8C)(m_pod)
 $DC8D DEFB $00              ; End marker
 $DC8E DEFB $43,$03,$18      ; Color attribute and position of text
 $DC91 DEFM "   PTS:300    " ; #MESSAGE($DC91,$DC9E)(pts_pod)
 $DC9F DEFB $00              ; End marker
; LAUNCHER PTS:800
 $DCA0 DEFB $44,$03,$10      ; Color attribute and position of text
 $DCA3 DEFM "   LAUNCHER"    ; #MESSAGE($DCA3,$DCAD)(m_launcher)
 $DCAE DEFB $00              ; End marker
 $DCAF DEFB $43,$03,$18      ; Color attribute and position of text
 $DCB2 DEFM "   PTS:800 "    ; #MESSAGE($DCB2,$DCBC)(pts_launcher)
 $DCBD DEFB $00              ; End marker
; SHOOTERS PTS:500
 $DCBE DEFB $44,$03,$10      ; Color attribute and position of text
 $DCC1 DEFM "   SHOOTERS"    ; #MESSAGE($DCC1,$DCCB)(m_shooter)
 $DCCC DEFB $00              ; End marker
 $DCCD DEFB $43,$03,$18      ; Color attribute and position of text
 $DCD0 DEFM "   PTS:500 "    ; #MESSAGE($DCD0,$DCDA)(pts_shooter)
 $DCDB DEFB $00              ; End marker
; SWING GUN PTS:600
 $DCDC DEFB $44,$03,$10      ; Color attribute and position of text
 $DCDF DEFM "   SWING GUN"   ; #MESSAGE($DCDF,$DCEA)(m_gun)
 $DCEB DEFB $00              ; End marker
 $DCEC DEFB $43,$03,$18      ; Color attribute and position of text
 $DCEF DEFM "   PTS:600  "   ; #MESSAGE($DCEF,$DCFA)(pts_gun)
 $DCFB DEFB $00              ; End marker
; BLOB PTS:200
 $DCFC DEFB $44,$03,$10      ; Color attribute and position of text
 $DCFF DEFM "  BLOB"         ; #MESSAGE($DCFF,$DD04)(m_blob)
 $DD05 DEFB $00              ; End marker
 $DD06 DEFB $43,$03,$18      ; Color attribute and position of text
 $DD09 DEFM "  PTS:200"      ; #MESSAGE($DD09,$DD11)(pts_blob)
 $DD12 DEFB $00              ; End marker
; MINE LAYER PTS:1000
 $DD13 DEFB $44,$03,$10      ; Color attribute and position of text
 $DD16 DEFM "   MINE LAYER"  ; #MESSAGE($DD16,$DD22)(m_mine_layer)
 $DD23 DEFB $00              ; End marker
 $DD24 DEFB $43,$03,$18      ; Color attribute and position of text
 $DD27 DEFM "   PTS:1000  "  ; #MESSAGE($DD27,$DD33)(pts_mine_layer)
 $DD34 DEFB $00              ; End marker
; MINE NO SCORE
 $DD35 DEFB $44,$03,$10      ; Color attribute and position of text
 $DD38 DEFM "  MINE"         ; #MESSAGE($DD38,$DD3D)(m_mine)
 $DD3E DEFB $00              ; End marker
 $DD3F DEFB $43,$03,$18      ; Color attribute and position of text
 $DD42 DEFM "  NO SCORE"     ; #MESSAGE($DD42,$DD4B)(pts_mine)
 $DD4C DEFB $00              ; End marker
; End marker for enemy showroom
 $DD4D DEFB $FF

; Defined keys for Rex controls
;
; #TABLE(default)
; { =h Bytes | =h Control }
; { $00 | Up }
; { $01 | Down }
; { $02 | Left }
; { $03 | Right }
; { $04 | Fire }
; TABLE#
g$DD4E DEFS $05

; Not used
s$DD53 DEFS $01

; Keypress handlers for the title screen menu
;
; This routine handles the Define keys option menu
c$DD54 CALL $DB96    ; Hidden the enemy windows of the title screen (if any)
 $DD57 LD HL,$0000   ; {Reset the keys for Rex movement defined at #R$DD4E
 $DD5A LD ($DD4E),HL ;
 $DD5D LD ($DD50),HL ;
 $DD60 LD ($DD52),HL ; }
 $DD63 LD IY,$DD4E   ; Set #REGiy to the base address of the keys defined for
                     ; Rex movement
 $DD67 LD IX,$DF9F   ; Set #REGix to address of the text definition data for
                     ; DEFINE KEYS
 $DD6B LD B,$06      ; Set #REGb to the number of rows of the windows
 $DD6D PUSH IY       ; Save #REGiy
 $DD6F CALL $A13E    ; Draws the windows DEFINE KEYS
 $DD72 POP IY        ; Restore #REGiy
*$DD74 LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DD77 IN A,(C)      ; }
 $DD79 BIT 0,A       ; Is key 1 pressed?
 $DD7B JP Z,$DD74    ; Jump back until key 1 is not pressed
 $DD7E LD IX,$DFDA   ; Set #REGix to the address of the windows defintion for
                     ; the highlighted options of the menu
 $DD82 LD B,$01      ; Set #REGb to the number of files
 $DD84 PUSH IY       ; Save #REGiy
 $DD86 CALL $A2DF    ; Draw the line of highlighted text UP
 $DD89 POP IY        ; Restore #REGiy
; Handles the DEFINE UP key
 $DD8B CALL $DBAE    ; Check for UP key pressed in the DEFINE keys windows
 $DD8E LD (IY+$00),A ; Save the keycode of the key pressed at the UP address of
                     ; the Rex movement table at #R$DD4E
 $DD91 CALL $DEF0    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DD94 LD HL,$488F   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DD97 CALL $DEFC    ; Draw the grahics data of character into display file
 $DD9A CALL $A4B5    ; Configure check UP key pressed routine
 $DD9D LD IX,$DFE2   ; Set #REGix to the address of the text definition data
                     ; for higlighted DOWN text
 $DDA1 LD B,$01      ; Set #REGb to the number of lines
 $DDA3 PUSH IY       ; Save #REGiy
 $DDA5 CALL $A2DF    ; Draws the line of higlighted text DOWN
 $DDA8 POP IY        ; Restore #REGiy
; Handles the DEFINE DOWN key
 $DDAA CALL $DBAE    ; Check for DOWN key pressed in the DEFINE keys windows
 $DDAD LD (IY+$01),A ; Save the keycode of the key pressed at the DOWN address
                     ; of the Rex movement table at #R$DD4E
 $DDB0 CALL $DEF0    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DDB3 LD HL,$48AF   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DDB6 CALL $DEFC    ; Draw the grahics data of character into display file
 $DDB9 CALL $A4CE    ; Configure check DOWN key pressed routine
 $DDBC LD IX,$DFEC   ; Set #REGix to the address of the text definition data
                     ; for higlighted LEFT text
 $DDC0 LD B,$01      ; Set #REGb to the number of lines
 $DDC2 PUSH IY       ; Save #REGiy
 $DDC4 CALL $A2DF    ; Draws the line of higlighted text LEFT
 $DDC7 POP IY        ; Restore #REGiy
; Handles the DEFINE LEFT key
 $DDC9 CALL $DBAE    ; Check for LEFT key pressed in the DEFINE keys windows
 $DDCC LD (IY+$02),A ; Save the keycode of the key pressed at the LEFT address
                     ; of the Rex movement table at #R$DD4E
 $DDCF CALL $DEF0    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DDD2 LD HL,$48CF   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DDD5 CALL $DEFC    ; Draw the grahics data of character into display file
 $DDD8 CALL $A483    ; Configure check LEFT key pressed routine
 $DDDB LD IX,$DFF6   ; Set #REGix to the address of the text definition data
                     ; for higlighted RIGHT text
 $DDDF LD B,$01      ; Set #REGb to the number of lines
 $DDE1 PUSH IY       ; Save #REGiy
 $DDE3 CALL $A2DF    ; Draws the line of higlighted text RIGHT
 $DDE6 POP IY        ; Restore #REGiy
; Handles the DEFINE RIGHT key
 $DDE8 CALL $DBAE    ; Check for RIGHT key pressed in the DEFINE keys windows
 $DDEB LD (IY+$03),A ; Save the keycode of the key pressed at the RIGHT address
                     ; of the Rex movement table at #R$DD4E
 $DDEE CALL $DEF0    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DDF1 LD HL,$48EF   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DDF4 CALL $DEFC    ; Draw the grahics data of character into display file
 $DDF7 CALL $A49C    ; Configure check RIGHT key pressed routine
 $DDFA LD IX,$E001   ; Set #REGix to the address of the text definition data
                     ; for higlighted FIRE text
 $DDFE LD B,$01      ; Set #REGb to the number of lines
 $DE00 PUSH IY       ; Save #REGiy
 $DE02 CALL $A2DF    ; Draws the line of higlighted text FIRE
 $DE05 POP IY        ; Restore #REGiy
; Handles the FIRE key
 $DE07 CALL $DBAE    ; Check for FIRE key pressed in the DEFINE keys windows
 $DE0A LD (IY+$04),A ; Save the keycode of the key pressed at the FIRE address
                     ; of the Rex movement table at #R$DD4E
 $DE0D CALL $DEF0    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DE10 LD HL,$500F   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DE13 CALL $DEFC    ; Draw the grahics data of character into display file
 $DE16 CALL $A46A    ; Configure check FIRE key pressed routine
 $DE19 LD IX,$DF8B   ; Points #REGix to the text definition data for CONFIRM
                     ; KEYS windows
 $DE1D JP $DE92      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; This routine handles the Kempston option
*$DE20 CALL $DB96    ; Hide the current visible enemy animation windows
 $DE23 LD HL,$001F   ; {Set #R$A0AB to the port to read the inputs from
 $DE26 LD ($A0AB),HL ; Kempston joystick}
 $DE29 LD A,$67      ; {Set #R$A0AB to the BIT opcode corresponent to the FIRE
 $DE2B LD ($A0AD),A  ; button}
 $DE2E CALL $A46A    ; Configure check FIRE button pressed routine
 $DE31 LD A,$5F      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE33 LD ($A0AD),A  ; joystick UP}
 $DE36 CALL $A4B5    ; Configure check joystick UP routine
 $DE39 LD A,$57      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE3B LD ($A0AD),A  ; joystick DOWN}
 $DE3E CALL $A4CE    ; Configure check joystick DOWN routine
 $DE41 LD A,$47      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE43 LD ($A0AD),A  ; joystick RIGHT}
 $DE46 CALL $A49C    ; Configure check joystick RIGHT routine
 $DE49 LD A,$4F      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE4B LD ($A0AD),A  ; joystick LEFT}
 $DE4E CALL $A483    ; Configure check joystick LEFT routine
 $DE51 LD A,$FF      ; {Set Kempston as input device type at #R$A0AE
 $DE53 LD ($A0AE),A  ; }
 $DE56 LD IX,$DF73   ; Points #REGix to the text definition data for CONFIRM
                     ; KEMPSTON windows
 $DE5A JP $DED2      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; This routine handles the Sinclair option
*$DE5D CALL $DB96    ; Hide the current visible enemy animation windows
 $DE60 LD HL,$EFFE   ; {Set #R$A0AB to the port to read the inputs from
 $DE63 LD ($A0AB),HL ; Sinclair joystick}
 $DE66 LD A,$47      ; {Set #R$A0AB to the BIT opcode corresponent to the FIRE
 $DE68 LD ($A0AD),A  ; button}
 $DE6B CALL $A46A    ; Configure check FIRE button pressed routine
 $DE6E LD A,$4F      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE70 LD ($A0AD),A  ; joystick UP}
 $DE73 CALL $A4B5    ; Configure check joystick UP routine
 $DE76 LD A,$57      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE78 LD ($A0AD),A  ; joystick DOWN}
 $DE7B CALL $A4CE    ; Configure check joystick DOWN routine
 $DE7E LD A,$5F      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE80 LD ($A0AD),A  ; joystick RIGHT}
 $DE83 CALL $A49C    ; Configure check joystick RIGHT routine
 $DE86 LD A,$67      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DE88 LD ($A0AD),A  ; joystick LEFT}
 $DE8B CALL $A483    ; Configure check joystick LEFT routine
 $DE8E LD IX,$DF45   ; Points #REGix to the text definition data for CONFIRM
                     ; SINCLAIR windows
; Reset input device type
*$DE92 XOR A         ; {Reset input device type at #R$A0AE
 $DE93 LD ($A0AE),A  ; }
 $DE96 JP $DED2      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; This routine handles the Cursor option
*$DE99 CALL $DB96    ; Hide the current visible enemy animation windows
 $DE9C LD HL,$EFFE   ; {Set #R$A0AB to the port to read the inputs FIRE, UP,
 $DE9F LD ($A0AB),HL ; DOWN and RIGHT from Sinclair joystick}
 $DEA2 LD A,$47      ; {Set #R$A0AB to the BIT opcode corresponent to the FIRE
 $DEA4 LD ($A0AD),A  ; button}
 $DEA7 CALL $A46A    ; Configure check FIRE button pressed routine
 $DEAA LD A,$57      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DEAC LD ($A0AD),A  ; joystick RIGHT}
 $DEAF CALL $A49C    ; Configure check joystick RIGHT routine
 $DEB2 LD A,$5F      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DEB4 LD ($A0AD),A  ; joystick UP}
 $DEB7 CALL $A4B5    ; Configure check joystick UP routine
 $DEBA LD A,$67      ; {Set #R$A0AB to the BIT opcode corresponent to the
 $DEBC LD ($A0AD),A  ; joystick DOWN}
 $DEBF CALL $A4CE    ; Configure check joystick DOWN routine
 $DEC2 LD HL,$F7FE   ; {Set #R$A0AB to the port to read the input LEFT from
 $DEC5 LD ($A0AB),HL ; Sinclair joystick}
 $DEC8 CALL $A483    ; Configure check joystick LEFT routine
 $DECB LD IX,$DF5D   ; Points #REGix to the text definition data for CONFIRM
                     ; CURSOR windows
 $DECF JP $DE92      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; Show confirmation windows for input device and handles Y/N key press
*$DED2 LD B,$01      ; Set #REGb to the number of lines
 $DED4 CALL $A13E    ; Draw input device confirmation windows
*$DED7 LD BC,$DFFE   ; Set #REGbc to port $DFFE for read keys P-O-I-U-Y
 $DEDA IN A,(C)      ; {Check if key Y is pressed
 $DEDC BIT 4,A       ; }
 $DEDE RET Z         ; Return if pressed. Jump to the start routine to init the
                     ; game
 $DEDF LD BC,$7FFE   ; Set #REGbc to port $DFFE for read keys SPACE-SYM-M-N-B
 $DEE2 IN A,(C)      ; {Check if key N is pressed
 $DEE4 BIT 3,A       ; }
 $DEE6 JP Z,$DEEC    ; Jump forward if pressed
 $DEE9 JP $DED7      ; Jump backs and continue to read for keys if not
*$DEEC JP $DAEE      ; Jump back to the main loop routine for the title screen
 $DEEF RET           ;
; Point #REGde to the address graphics data of the key pressed
*$DEF0 LD L,A        ; {Point #REGhl to the address graphic data of the key
 $DEF1 LD H,$00      ; pressed from the charset table at #R$60E0
 $DEF3 ADD HL,HL     ;
 $DEF4 ADD HL,HL     ;
 $DEF5 ADD HL,HL     ;
 $DEF6 LD DE,$5FE0   ;
 $DEF9 ADD HL,DE     ; }
 $DEFA EX DE,HL      ; Exchange #REGde and #REGhl
 $DEFB RET           ;
; Draw the grahics data of character into display file
*$DEFC LD B,$08      ; Set #REGb to the number of bytes to copy
*$DEFE LD A,(DE)     ; {Copy a byte from the graphics data to the display file
 $DEFF LD (HL),A     ; }
 $DF00 INC DE        ; Point #REGde to the next byte of the graphics data
 $DF01 INC H         ; Point #REGhl to the addres of the next row of pixels
 $DF02 DJNZ $DEFE    ; Jump back until all the bytes are copied
 $DF04 RET           ;

; Text Defintion Data - Control configuration
;
; The Text Definition Data format is described at #R$AAAE
; .
; MAIN SELECT MENU
b$DF05 DEFB $06,$15,$90            ; Color attribute and position of text
 $DF08 DEFM "  SELECT"             ; #MESSAGE($DF08,$DF0F)(select)
 $DF10 DEFB $00                    ; End marker
 $DF11 DEFB $05,$15,$98            ; Color attribute and position of text
 $DF14 DEFM "1:DEFINE"             ; #MESSAGE($DF14,$DF1B)(define)
 $DF1C DEFB $00                    ; End marker
 $DF1D DEFB $05,$15,$A0            ; Color attribute and position of text
 $DF20 DEFM "2:KEMPSTON"           ; #MESSAGE($DF20,$DF29)(kempston)
 $DF2A DEFB $00                    ; End marker
 $DF2B DEFB $05,$15,$A8            ; Color attribute and position of text
 $DF2E DEFM "3:CURSOR"             ; #MESSAGE($DF2E,$DF35)(cursor)
 $DF36 DEFB $00                    ; End marker
 $DF37 DEFB $05,$15,$B0            ; Color attribute and position of text
 $DF3A DEFM "4:SINCLAIR"           ; #MESSAGE($DF3A,$DF43)(sinclair)
 $DF44 DEFB $00                    ; End marker
; CONFIRM SINCLAIR
 $DF45 DEFB $04,$09,$80            ; Color attribute and position of text
 $DF48 DEFM "CONFIRM SINCLAIR Y.N" ; #MESSAGE($DF48,$DF5B)(confirm_sinclair)
 $DF5C DEFB $00                    ; End marker
; CONFIRM CURSOR
 $DF5D DEFB $04,$09,$80            ; Color attribute and position of text
 $DF60 DEFM "CONFIRM CURSOR Y.N"   ; #MESSAGE($DF60,$DF71)(confirm_cursor)
 $DF72 DEFB $00                    ; End marker
; CONFIRM KEMPSTON
 $DF73 DEFB $04,$09,$80            ; Color attribute and position of text
 $DF76 DEFM "CONFIRM KEMPSTON Y.N" ; #MESSAGE($DF76,$DF89)(confirm_kempston)
 $DF8A DEFB $00                    ; End marker
; CONFIRM KEYS
 $DF8B DEFB $04,$03,$90            ; Color attribute and position of text
 $DF8E DEFM "CONFIRM KEYS Y.N"     ; #MESSAGE($DF8E,$DF9D)(confirm_keys)
 $DF9E DEFB $00                    ; End marker
; DEFINE KEYS - no highligthed options
 $DF9F DEFB $07,$0F,$58            ; Color attribute and position of text
 $DFA2 DEFM " PRESS"               ; #MESSAGE($DFA2,$DFA7)(press)
 $DFA8 DEFB $00                    ; End marker
 $DFA9 DEFB $01,$0F,$60            ; Color attribute and position of text
 $DFAC DEFM " :UP"                 ; #MESSAGE($DFAC,$DFAF)(up)
 $DFB0 DEFB $00                    ; End marker
 $DFB1 DEFB $01,$0F,$68            ; Color attribute and position of text
 $DFB4 DEFM " :DOWN"               ; #MESSAGE($DFB4,$DFB9)(down)
 $DFBA DEFB $00                    ; End marker
 $DFBB DEFB $01,$0F,$70            ; Color attribute and position of text
 $DFBE DEFM " :LEFT"               ; #MESSAGE($DFBE,$DFC3)(left)
 $DFC4 DEFB $00                    ; End marker
 $DFC5 DEFB $01,$0F,$78            ; Color attribute and position of text
 $DFC8 DEFM " :RIGHT"              ; #MESSAGE($DFC8,$DFCE)(right)
 $DFCF DEFB $00                    ; End marker
 $DFD0 DEFB $01,$0F,$80            ; Color attribute and position of text
 $DFD3 DEFM " :FIRE"               ; #MESSAGE($DFD3,$DFD8)(shot)
 $DFD9 DEFB $00                    ; End marker
; DEFINE KEYS - highlighted options
 $DFDA DEFB $06,$0F,$60            ; Color attribute and position of text
 $DFDD DEFM " :UP"                 ; #MESSAGE($DFDD,$DFE0)(hi_up)
 $DFE1 DEFB $00                    ; End marker
 $DFE2 DEFB $06,$0F,$68            ; Color attribute and position of text
 $DFE5 DEFM " :DOWN"               ; #MESSAGE($DFE5,$DFEA)(hi_down)
 $DFEB DEFB $00                    ; End marker
 $DFEC DEFB $06,$0F,$70            ; Color attribute and position of text
 $DFEF DEFM " :LEFT"               ; #MESSAGE($DFEF,$DFF4)(hi_left)
 $DFF5 DEFB $00                    ; End marker
 $DFF6 DEFB $06,$0F,$78            ; Color attribute and position of text
 $DFF9 DEFM " :RIGHT"              ; #MESSAGE($DFF9,$DFFF)(hi_right)
 $E000 DEFB $00                    ; End marker
 $E001 DEFB $06,$0F,$80            ; Color attribute and position of text
 $E004 DEFM " :FIRE"               ; #MESSAGE($E004,$E009)(hi_shot)
 $E00A DEFB $00                    ; End marker

; Draw the enemy sprite on title screen (1/2)
;
; This routine populates the data buffer at #R$E049 that is used to display the
; next animation frame of the enemy in the tile screen. Used by the routine at
; #R$DAC0.
;
; HL Address pointer of the corresponding enemy animation definition
c$E00B LD A,($A085)  ; Pick the visibility indicator of the enemy windows
 $E00E OR A          ; Is hidden?
 $E00F RET Z         ; Then return
 $E010 LD ($A081),HL ; Save at #R$A081 the address pointer for the enemy
                     ; animation definition
 $E013 LD IX,($A081) ; Save at #REGix the address pointer for the enemy
                     ; animation definition
 $E017 LD A,(IX+$02) ; {Copy at $E04D the width of the sprite
 $E01A LD ($E04D),A  ; }
 $E01D LD A,(IX+$03) ; {Copy at $E04E the height of the sprite
 $E020 LD ($E04E),A  ; }
 $E023 LD A,(IX+$04) ; Set #REGa to the first animation frame
 $E026 PUSH IX       ; Save #REGix
 $E028 LD DE,$0004   ; {Points #REGix to the first animation frame
 $E02B ADD IX,DE     ; }
 $E02D PUSH IX       ; Save #REGix
 $E02F POP HL        ; Restore #REGhl
 $E030 POP IX        ; Restore #REGix
 $E032 LD A,($A07F)  ; {Set #REGde to the offset of the corresponding animation
 $E035 LD E,A        ; frame at #R$A07F
 $E036 LD D,$00      ;
 $E038 ADD HL,DE     ;
 $E039 LD E,(HL)     ;
 $E03A LD D,$00      ; }
 $E03C LD L,(IX+$00) ; {Set #REGhl the address pointer of the graphics data of
 $E03F LD H,(IX+$01) ; the enemy to display
 $E042 ADD HL,DE     ; }
 $E043 LD ($E049),HL ; Save at #R$E049 the addres pointer of the graphics data
                     ; of the enemy to display
 $E046 CALL $D8C0    ; Draws the enemy sprite defined in #R$E049

; Data buffer for the enemy sprite on title screen
;
; Data copied from the corresponding animation definition at #R$E067
; .
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00-0x01 | Address pointer to sprite graphics data }
; { 0x02 | Horitzontal position of sprite. Always $03 }
; { 0x03 | Vertical position of sprite. Always $10 }
; { 0x04 | Width of sprite (in bytes) }
; { 0x05 | Height of sprite (in pixels) }
; TABLE#
g$E049 DEFB $CA,$8C,$03,$10,$02,$10

; Draw the enemy sprite on title screen (2/2)
;
; Used by the routine at #R$D8C0.
c$E04F LD HL,($A081) ; Set #REGhl to the address pointer for the enemy
                     ; animation definition
 $E052 LD DE,$000C   ; {Points to the address poiner for the next enemy
 $E055 ADD HL,DE     ; animation}
 $E056 LD ($A081),HL ; Save the new address pointer to #R$A081
 $E059 LD A,($A07F)  ; {Increment the animation frame number
 $E05C INC A         ; }
 $E05D CP $08        ; Is animation frame number $08?
 $E05F JP NZ,$E063   ; Jump in not
 $E062 XOR A         ; Reset animation frame number
*$E063 LD ($A07F),A  ; Save the new animation frame number to #R$A07F
 $E066 RET           ;

; Animation definition for the enemies showed in the tile screen
;
; The tile screen display ten enemies. Every animation is defined with 12 bytes
; in the format showed below
; .
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00-0x01 | Address pointer to sprite graphics data }
; { 0x02 | Width of sprite (in bytes) }
; { 0x03 | Height of sprite (in pixels) }
; { 0x04 | Animation frame 0 }
; { 0x05 | Animation frame 1 }
; { 0x06 | Animation frame 2 }
; { 0x07 | Animation frame 3 }
; { 0x08 | Animation frame 4 }
; { 0x09 | Animation frame 5 }
; { 0x0A | Animation frame 6 }
; { 0x0B | Animation frame 7 }
; TABLE#
b$E067 DEFB $F6,$E0                                 ; {Animation definition for
 $E069 DEFB $02,$10,$00,$20,$40,$60,$00,$20,$40,$60 ; FOOT MAN}
 $E073 DEFB $76,$E1                                 ; {Animation definition for
 $E075 DEFB $02,$10,$00,$20,$40,$60,$00,$20,$40,$60 ; STOMPER}
 $E07F DEFB $F6,$E1                                 ; {Animation definition for
 $E081 DEFB $02,$10,$00,$20,$40,$60,$80,$A0,$00,$00 ; SCANNER}
 $E08B DEFB $B6,$E2                                 ; {Animation definition for
 $E08D DEFB $02,$10,$00,$20,$40,$60,$00,$20,$40,$60 ; RAMMING POD}
 $E097 DEFB $4A,$8E                                 ; {Animation definition for
 $E099 DEFB $02,$10,$00,$00,$00,$00,$00,$00,$00,$00 ; LAUNCHER}
 $E0A3 DEFB $6A,$8E                                 ; {Animation definition for
 $E0A5 DEFB $02,$10,$00,$00,$00,$00,$00,$00,$00,$00 ; SHOOTER}
 $E0AF DEFB $AA,$8E                                 ; {Animation definition for
 $E0B1 DEFB $02,$10,$00,$20,$40,$60,$80,$60,$40,$20 ; SWING GUN}
 $E0BB DEFB $F6,$E3                                 ; {Animation definition for
 $E0BD DEFB $01,$08,$00,$08,$10,$18,$20,$28,$30,$38 ; BLOB}
 $E0C7 DEFB $36,$E4                                 ; {Animation definition for
 $E0C9 DEFB $02,$0C,$00,$18,$30,$48,$00,$18,$30,$48 ; MINE LAYER}
 $E0D3 DEFB $96,$E4                                 ; {Animation definition for
 $E0D5 DEFB $01,$08,$00,$08,$10,$18,$20,$28,$30,$38 ; MINE}
 $E0DF DEFB $FF                                     ; End marker

; List of ports for read the keys
;
; Port list: $FEFE - $FDFE - $FBFE - $DFFE - $BFFE - $7FFE - $EFFE - $F7FE
b$E0E0 DEFB $FE,$FE,$FE,$FD,$FE,$FB,$FE,$DF
 $E0E8 DEFB $FE,$BF,$FE,$7F,$FE,$EF,$FE,$F7

; Unused
s$E0F0 DEFS $06

; Graphic data for the enemies showed in the title screen
;
; Graphic data at #R$E336 is not used in title screen. It's copied at routine
; #R$DAC0 to address #R$6018
b$E0F6 DEFB $00,$00,$23,$00,$04,$00,$24,$00 ; {#UDGARRAY2,$47,,2;$E0F6-$E115-1-16(win_foot_man_0)
 $E0FE DEFB $13,$80,$20,$00,$0A,$80,$10,$B4 ;
 $E106 DEFB $0C,$40,$20,$40,$02,$00,$13,$00 ;
 $E10E DEFB $01,$00,$20,$00,$40,$A0,$20,$40 ; }
 $E116 DEFB $00,$00,$23,$00,$04,$00,$24,$00 ; {#UDGARRAY2,$47,,2;$E116-$E135-1-16(win_foot_man_1)
 $E11E DEFB $13,$80,$20,$00,$0A,$80,$10,$B4 ;
 $E126 DEFB $0C,$40,$20,$40,$03,$00,$09,$80 ;
 $E12E DEFB $00,$80,$20,$00,$41,$00,$41,$80 ; }
 $E136 DEFB $00,$00,$08,$C0,$01,$00,$09,$00 ; {#UDGARRAY2,$47,,2;$E136-$E155-1-16(win_foot_man_2)
 $E13E DEFB $04,$E0,$08,$00,$02,$A0,$04,$2D ;
 $E146 DEFB $03,$10,$08,$50,$03,$00,$01,$00 ;
 $E14E DEFB $12,$00,$20,$00,$24,$00,$06,$00 ; }
 $E156 DEFB $11,$80,$02,$00,$12,$00,$09,$C0 ; {#UDGARRAY2,$47,,2;$E156-$E175-1-16(win_foot_man_3)
 $E15E DEFB $10,$00,$05,$40,$08,$5A,$06,$20 ;
 $E166 DEFB $00,$20,$13,$00,$02,$00,$06,$40 ;
 $E16E DEFB $00,$00,$08,$80,$11,$00,$18,$80 ; }
 $E176 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$E176-$E195-1-16(win_stomper_0)
 $E17E DEFB $01,$00,$01,$00,$01,$00,$02,$80 ;
 $E186 DEFB $01,$00,$00,$00,$06,$40,$0E,$20 ;
 $E18E DEFB $17,$10,$2F,$08,$00,$00,$1B,$50 ; }
 $E196 DEFB $00,$00,$00,$00,$00,$00,$00,$80 ; {#UDGARRAY2,$47,,2;$E196-$E1B5-1-16(win_stomper_1)
 $E19E DEFB $01,$00,$01,$00,$02,$80,$01,$00 ;
 $E1A6 DEFB $00,$00,$06,$40,$0E,$20,$17,$10 ;
 $E1AE DEFB $2F,$08,$00,$00,$02,$80,$1B,$50 ; }
 $E1B6 DEFB $00,$00,$01,$00,$01,$00,$01,$00 ; {#UDGARRAY2,$47,,2;$E1B6-$E1D5-1-16(win_stomper_2)
 $E1BE DEFB $02,$80,$01,$00,$00,$00,$06,$40 ;
 $E1C6 DEFB $0E,$20,$17,$10,$2F,$08,$00,$00 ;
 $E1CE DEFB $02,$80,$00,$00,$1B,$50,$00,$00 ; }
 $E1D6 DEFB $00,$00,$00,$00,$00,$00,$02,$00 ; {#UDGARRAY2,$47,,2;$E1D6-$E1F5-1-16(win_stomper_3)
 $E1DE DEFB $01,$00,$01,$00,$02,$80,$01,$00 ;
 $E1E6 DEFB $00,$00,$06,$40,$0E,$20,$17,$10 ;
 $E1EE DEFB $2F,$08,$00,$00,$02,$80,$1B,$50 ; }
 $E1F6 DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$E1F6-$E215-1-16(win_scanner_0)
 $E1FE DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $E206 DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $E20E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $E216 DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$E216-$E235-1-16(win_scanner_1)
 $E21E DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $E226 DEFB $55,$00,$00,$00,$1E,$00,$04,$00 ;
 $E22E DEFB $08,$00,$00,$00,$00,$00,$00,$00 ; }
 $E236 DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$E236-$E255-1-16(win_scanner_2)
 $E23E DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $E246 DEFB $55,$00,$00,$00,$1E,$00,$04,$00 ;
 $E24E DEFB $08,$00,$12,$00,$08,$00,$00,$00 ; }
 $E256 DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$E256-$E275-1-16(win_scanner_3)
 $E25E DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $E266 DEFB $55,$00,$00,$00,$1E,$00,$48,$00 ;
 $E26E DEFB $01,$00,$04,$00,$28,$00,$02,$00 ; }
 $E276 DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$E276-$E295-1-16(win_scanner_4)
 $E27E DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $E286 DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $E28E DEFB $00,$00,$41,$00,$00,$00,$10,$00 ; }
 $E296 DEFB $00,$00,$00,$00,$1E,$00,$AD,$40 ; {#UDGARRAY2,$47,,2;$E296-$E2B5-1-16(win_scanner_5)
 $E29E DEFB $3F,$00,$00,$00,$7F,$80,$28,$00 ;
 $E2A6 DEFB $55,$00,$00,$00,$1E,$00,$00,$00 ;
 $E2AE DEFB $00,$00,$00,$00,$00,$00,$80,$80 ; }
 $E2B6 DEFB $03,$80,$08,$60,$00,$10,$23,$10 ; {#UDGARRAY2,$47,,2;$E2B6-$E2D5-1-16(win_pod_0)
 $E2BE DEFB $04,$08,$04,$08,$43,$84,$08,$04 ;
 $E2C6 DEFB $09,$24,$84,$C4,$00,$00,$DE,$F6 ;
 $E2CE DEFB $00,$00,$2A,$B8,$17,$40,$03,$80 ; }
 $E2D6 DEFB $03,$80,$08,$60,$00,$10,$23,$10 ; {#UDGARRAY2,$47,,2;$E2D6-$E2F5-1-16(win_pod_1)
 $E2DE DEFB $04,$08,$04,$08,$43,$84,$08,$04 ;
 $E2E6 DEFB $09,$24,$84,$C4,$00,$00,$BD,$EE ;
 $E2EE DEFB $00,$00,$2B,$E8,$10,$10,$13,$90 ; }
 $E2F6 DEFB $03,$80,$08,$60,$00,$10,$23,$10 ; {#UDGARRAY2,$47,,2;$E2F6-$E315-1-16(win_pod_2)
 $E2FE DEFB $04,$08,$04,$08,$43,$84,$08,$04 ;
 $E306 DEFB $09,$24,$84,$C4,$00,$00,$7B,$DE ;
 $E30E DEFB $00,$00,$3E,$A8,$01,$40,$03,$80 ; }
 $E316 DEFB $03,$80,$08,$60,$00,$10,$23,$10 ; {#UDGARRAY2,$47,,2;$E316-$E335-1-16(win_pod_3)
 $E31E DEFB $04,$08,$04,$08,$43,$84,$08,$04 ;
 $E326 DEFB $09,$24,$84,$C4,$00,$00,$EF,$7A ;
 $E32E DEFB $00,$00,$3A,$A8,$07,$40,$03,$80 ; }
 $E336 DEFB $11,$80,$00,$02,$00,$00,$12,$00 ; {#UDGARRAY3,$47,,3;$E336-$E3F5-1-24(footman_falling)
 $E33E DEFB $00,$09,$C0,$00,$10,$00,$00,$05 ;
 $E346 DEFB $40,$00,$08,$5A,$00,$06,$20,$00 ;
 $E34E DEFB $00,$20,$00,$13,$00,$00,$02,$00 ;
 $E356 DEFB $00,$06,$40,$00,$00,$00,$00,$08 ;
 $E35E DEFB $80,$00,$11,$00,$00,$18,$80,$00 ;
 $E366 DEFB $04,$60,$00,$00,$80,$00,$04,$80 ;
 $E36E DEFB $00,$02,$70,$00,$04,$00,$00,$01 ;
 $E376 DEFB $50,$00,$02,$16,$80,$01,$88,$00 ;
 $E37E DEFB $00,$08,$00,$04,$C0,$00,$00,$80 ;
 $E386 DEFB $00,$01,$90,$00,$00,$00,$00,$02 ;
 $E38E DEFB $20,$00,$04,$40,$00,$06,$20,$00 ;
 $E396 DEFB $01,$18,$00,$00,$20,$00,$01,$20 ;
 $E39E DEFB $00,$00,$9C,$00,$01,$00,$00,$00 ;
 $E3A6 DEFB $54,$00,$00,$85,$A0,$00,$62,$00 ;
 $E3AE DEFB $00,$02,$00,$01,$30,$00,$00,$20 ;
 $E3B6 DEFB $00,$00,$64,$00,$00,$00,$00,$00 ;
 $E3BE DEFB $88,$00,$01,$10,$00,$01,$88,$00 ;
 $E3C6 DEFB $00,$46,$00,$00,$08,$00,$00,$48 ;
 $E3CE DEFB $00,$00,$27,$00,$00,$40,$00,$00 ;
 $E3D6 DEFB $15,$00,$00,$21,$68,$00,$18,$80 ;
 $E3DE DEFB $00,$00,$80,$00,$4C,$00,$00,$08 ;
 $E3E6 DEFB $00,$00,$19,$00,$00,$00,$00,$00 ;
 $E3EE DEFB $22,$00,$00,$44,$00,$00,$62,$00 ; }
 $E3F6 DEFB $00,$00,$38,$7C,$6C,$28,$00,$00 ; {#UDGARRAY1,$47,,1;$E3F6-$E435-1-8(win_blob)
 $E3FE DEFB $00,$18,$3C,$54,$78,$30,$00,$00 ;
 $E406 DEFB $00,$14,$3E,$1E,$74,$70,$20,$00 ;
 $E40E DEFB $0C,$56,$7D,$BA,$EE,$B0,$60,$00 ;
 $E416 DEFB $18,$3C,$3A,$54,$78,$68,$20,$00 ;
 $E41E DEFB $00,$38,$54,$74,$68,$14,$18,$00 ;
 $E426 DEFB $00,$00,$18,$34,$34,$10,$00,$00 ;
 $E42E DEFB $00,$00,$00,$18,$10,$00,$00,$00 ; }
 $E436 DEFB $03,$C0,$08,$10,$22,$04,$44,$02 ; {#UDGARRAY2,$47,,2;$E436-$E495-1-16(win_mine_layer)
 $E43E DEFB $00,$00,$AA,$AA,$00,$00,$5D,$B6 ;
 $E446 DEFB $03,$C0,$13,$C8,$09,$90,$04,$20 ;
 $E44E DEFB $03,$C0,$08,$10,$22,$04,$44,$02 ;
 $E456 DEFB $00,$00,$DD,$DD,$00,$00,$5C,$36 ;
 $E45E DEFB $01,$80,$11,$88,$08,$10,$04,$20 ;
 $E466 DEFB $03,$C0,$08,$10,$22,$04,$44,$02 ;
 $E46E DEFB $00,$00,$EE,$EE,$00,$00,$5C,$36 ;
 $E476 DEFB $00,$00,$10,$08,$08,$10,$04,$20 ;
 $E47E DEFB $03,$C0,$08,$10,$22,$04,$44,$02 ;
 $E486 DEFB $00,$00,$BB,$BB,$00,$00,$5C,$36 ;
 $E48E DEFB $01,$80,$11,$88,$08,$10,$04,$20 ; }
 $E496 DEFB $18,$00,$18,$BD,$B5,$18,$00,$18 ; {#UDGARRAY1,$47,,1;$E496-$E4D5-1-8(win_mine)
 $E49E DEFB $08,$04,$58,$BC,$35,$1A,$20,$10 ;
 $E4A6 DEFB $00,$24,$5A,$3C,$34,$5A,$24,$00 ;
 $E4AE DEFB $10,$20,$1A,$3D,$B4,$58,$04,$08 ;
 $E4B6 DEFB $18,$00,$18,$BD,$B5,$18,$00,$18 ;
 $E4BE DEFB $08,$04,$58,$BC,$35,$1A,$20,$10 ;
 $E4C6 DEFB $00,$24,$5A,$3C,$34,$5A,$24,$00 ;
 $E4CE DEFB $10,$20,$1A,$3D,$B4,$58,$04,$08 ; }

; Not used
s$E4D6 DEFS $29

; Title screen
;
; #LOGO
b$E4FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E507 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E50F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E517 DEFB $00,$00,$00,$00,$00,$D8,$00,$00
 $E51F DEFB $00,$00,$00,$00,$00,$00,$5B,$2E
 $E527 DEFB $DB,$AE,$ED,$7C,$88,$10,$00,$5B
 $E52F DEFB $9F,$F7,$C0,$00,$00,$00,$00,$00
 $E537 DEFB $00,$00,$04,$40,$6F,$E0,$00,$00
 $E53F DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $E547 DEFB $FF,$FF,$FF,$FF,$38,$00,$00,$7E
 $E54F DEFB $FF,$A0,$42,$66,$00,$00,$00,$00
 $E557 DEFB $04,$00,$28,$BF,$F5,$A0,$00,$00
 $E55F DEFB $00,$02,$4C,$0A,$27,$FF,$FF,$48
 $E567 DEFB $02,$EE,$9B,$7F,$FF,$02,$0F,$FF
 $E56F DEFB $FF,$00,$FF,$FF,$EB,$55,$02,$0C
 $E577 DEFB $40,$00,$47,$FF,$48,$00,$00,$00
 $E57F DEFB $00,$00,$05,$27,$FF,$FF,$FE,$80
 $E587 DEFB $04,$00,$06,$FF,$FF,$13,$7F,$FF
 $E58F DEFB $F0,$00,$7F,$FB,$FE,$11,$00,$00
 $E597 DEFB $00,$00,$3F,$FF,$C0,$00,$00,$00
 $E59F DEFB $00,$00,$00,$37,$FF,$FF,$A3,$00
 $E5A7 DEFB $52,$00,$3F,$FF,$F8,$87,$FF,$FF
 $E5AF DEFB $90,$00,$01,$FF,$FF,$FF,$C0,$B6
 $E5B7 DEFB $82,$9F,$FF,$FD,$48,$00,$00,$00
 $E5BF DEFB $00,$00,$01,$32,$FF,$FF,$32,$08
 $E5C7 DEFB $0E,$BF,$FF,$FE,$01,$53,$FF,$30
 $E5CF DEFB $00,$02,$25,$AF,$FF,$FE,$D6,$15
 $E5D7 DEFB $7B,$FF,$FF,$22,$00,$00,$00,$00
 $E5DF DEFB $00,$00,$24,$47,$FF,$FC,$00,$00
 $E5E7 DEFB $DF,$FF,$B4,$00,$0F,$FF,$FD,$24
 $E5EF DEFB $11,$51,$00,$00,$03,$F7,$FD,$00
 $E5F7 DEFB $07,$FF,$F0,$62,$40,$00,$00,$00
 $E5FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E607 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E60F DEFB $F6,$40,$00,$00,$00,$00,$00,$00
 $E617 DEFB $00,$00,$00,$00,$12,$34,$00,$00
 $E61F DEFB $00,$00,$00,$00,$00,$00,$0A,$FB
 $E627 DEFB $FF,$BF,$73,$FD,$22,$00,$00,$06
 $E62F DEFB $EF,$5C,$00,$00,$00,$00,$00,$00
 $E637 DEFB $00,$00,$09,$15,$12,$28,$80,$00
 $E63F DEFB $00,$00,$00,$00,$01,$BB,$FF,$FF
 $E647 DEFB $FF,$FF,$FF,$FF,$D6,$C0,$00,$2D
 $E64F DEFB $FF,$F3,$B1,$99,$8A,$80,$00,$00
 $E657 DEFB $00,$00,$44,$3F,$FF,$F0,$00,$00
 $E65F DEFB $00,$00,$14,$51,$0F,$FF,$FF,$F2
 $E667 DEFB $80,$BD,$EF,$FF,$FF,$EC,$07,$FF
 $E66F DEFB $FA,$01,$FF,$7B,$C0,$EC,$44,$31
 $E677 DEFB $20,$01,$7F,$FF,$FF,$00,$00,$00
 $E67F DEFB $00,$00,$00,$11,$0F,$FF,$E0,$00
 $E687 DEFB $55,$00,$09,$1F,$F4,$00,$FF,$FF
 $E68F DEFB $80,$00,$1F,$FF,$F8,$0A,$40,$11
 $E697 DEFB $00,$00,$6F,$FF,$F4,$00,$00,$00
 $E69F DEFB $00,$00,$00,$08,$FF,$FF,$DC,$C0
 $E6A7 DEFB $00,$00,$1B,$FF,$40,$47,$FF,$F0
 $E6AF DEFB $00,$00,$6F,$FF,$FF,$FC,$01,$10
 $E6B7 DEFB $26,$43,$FF,$F8,$A0,$00,$00,$00
 $E6BF DEFB $00,$40,$00,$4F,$FF,$FF,$F2,$04
 $E6C7 DEFB $01,$5F,$FF,$E0,$02,$DD,$FE,$00
 $E6CF DEFB $00,$04,$8A,$20,$FF,$FF,$F8,$22
 $E6D7 DEFB $4E,$77,$FF,$DC,$80,$00,$00,$00
 $E6DF DEFB $00,$00,$01,$07,$FF,$A0,$00,$02
 $E6E7 DEFB $2D,$FF,$FF,$80,$5F,$FF,$F8,$51
 $E6EF DEFB $08,$88,$00,$00,$1F,$ED,$FF,$A4
 $E6F7 DEFB $9F,$FF,$FD,$F2,$00,$00,$00,$00
 $E6FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E707 DEFB $00,$00,$00,$22,$00,$00,$00,$00
 $E70F DEFB $00,$03,$00,$00,$00,$00,$00,$00
 $E717 DEFB $00,$00,$00,$00,$1B,$00,$00,$00
 $E71F DEFB $00,$00,$00,$00,$00,$03,$EB,$AF
 $E727 DEFB $FF,$FF,$FE,$D9,$89,$00,$00,$0B
 $E72F DEFB $A7,$FC,$00,$00,$00,$00,$00,$00
 $E737 DEFB $08,$00,$00,$43,$EF,$80,$00,$00
 $E73F DEFB $00,$00,$00,$00,$00,$6F,$FF,$FF
 $E747 DEFB $FF,$FF,$FF,$FF,$FC,$00,$00,$FF
 $E74F DEFB $FF,$E0,$02,$66,$CA,$A0,$00,$00
 $E757 DEFB $00,$00,$1B,$FF,$FF,$F8,$00,$00
 $E75F DEFB $00,$01,$4D,$14,$5F,$FF,$FF,$80
 $E767 DEFB $02,$45,$BD,$BF,$FF,$01,$7F,$FF
 $E76F DEFB $FE,$01,$FD,$DF,$FD,$1B,$02,$88
 $E777 DEFB $40,$00,$AF,$FF,$F0,$00,$00,$00
 $E77F DEFB $00,$00,$00,$24,$7F,$FF,$40,$00
 $E787 DEFB $99,$80,$00,$FF,$FF,$A0,$FF,$FF
 $E78F DEFB $F0,$01,$FF,$77,$FF,$00,$00,$24
 $E797 DEFB $40,$41,$BB,$FF,$D1,$00,$00,$00
 $E79F DEFB $00,$00,$00,$22,$7F,$FF,$FB,$00
 $E7A7 DEFB $01,$10,$3F,$FF,$FA,$1D,$FF,$FC
 $E7AF DEFB $00,$00,$09,$FF,$FF,$FA,$00,$44
 $E7B7 DEFB $49,$FF,$FF,$FF,$20,$00,$00,$00
 $E7BF DEFB $00,$00,$01,$B3,$FF,$FE,$01,$48
 $E7C7 DEFB $22,$7F,$FF,$F8,$05,$FF,$FF,$38
 $E7CF DEFB $00,$00,$31,$00,$FF,$FF,$FC,$08
 $E7D7 DEFB $90,$FF,$FF,$F2,$00,$00,$00,$00
 $E7DF DEFB $00,$00,$14,$4F,$FF,$F8,$00,$01
 $E7E7 DEFB $7F,$FF,$F0,$02,$77,$FF,$E8,$88
 $E7EF DEFB $12,$22,$00,$00,$0F,$FF,$FF,$F0
 $E7F7 DEFB $0F,$FF,$FE,$A4,$00,$00,$00,$00
 $E7FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E807 DEFB $05,$19,$00,$48,$80,$00,$00,$0B
 $E80F DEFB $08,$A8,$00,$00,$00,$00,$00,$00
 $E817 DEFB $00,$00,$00,$02,$46,$00,$00,$00
 $E81F DEFB $00,$00,$00,$00,$00,$00,$5D,$FF
 $E827 DEFB $FF,$FF,$FB,$F7,$F2,$00,$00,$1D
 $E82F DEFB $EF,$FB,$C0,$00,$00,$00,$00,$00
 $E837 DEFB $00,$00,$05,$1E,$DF,$C0,$00,$00
 $E83F DEFB $00,$00,$00,$00,$6A,$BB,$FF,$FD
 $E847 DEFB $DF,$FF,$FF,$FF,$D0,$00,$17,$FD
 $E84F DEFB $FF,$81,$75,$F9,$82,$80,$00,$08
 $E857 DEFB $80,$00,$CC,$FF,$FD,$80,$00,$00
 $E85F DEFB $00,$02,$20,$51,$7F,$FF,$FF,$F4
 $E867 DEFB $01,$35,$6B,$6F,$FD,$00,$06,$7F
 $E86F DEFB $C0,$00,$BF,$FF,$F8,$44,$44,$40
 $E877 DEFB $00,$00,$05,$FF,$FE,$20,$00,$00
 $E87F DEFB $00,$00,$00,$01,$7F,$FF,$F8,$00
 $E887 DEFB $26,$00,$17,$FF,$FE,$2F,$FF,$FF
 $E88F DEFB $00,$00,$0F,$DD,$FF,$E4,$00,$01
 $E897 DEFB $01,$80,$D7,$FF,$04,$00,$00,$00
 $E89F DEFB $00,$00,$00,$3F,$FF,$FD,$34,$C0
 $E8A7 DEFB $02,$4F,$FF,$FF,$C0,$B7,$EF,$D8
 $E8AF DEFB $00,$00,$00,$7F,$FF,$FF,$E9,$12
 $E8B7 DEFB $16,$7F,$FF,$F8,$C0,$00,$00,$00
 $E8BF DEFB $00,$00,$01,$B7,$FF,$FC,$20,$41
 $E8C7 DEFB $5D,$FF,$FF,$E0,$1F,$1D,$F0,$00
 $E8CF DEFB $00,$02,$8C,$4B,$7F,$FF,$D0,$23
 $E8D7 DEFB $5D,$FF,$FE,$B4,$40,$00,$00,$00
 $E8DF DEFB $00,$00,$22,$FF,$FF,$F0,$00,$02
 $E8E7 DEFB $FF,$FF,$20,$00,$57,$FF,$C0,$27
 $E8EF DEFB $58,$89,$00,$01,$6E,$F7,$DF,$F0
 $E8F7 DEFB $3F,$FF,$F0,$00,$00,$00,$00,$00
 $E8FF DEFB $00,$00,$00,$00,$00,$00,$00,$02
 $E907 DEFB $60,$00,$00,$02,$44,$00,$00,$00
 $E90F DEFB $13,$02,$A0,$00,$00,$00,$00,$00
 $E917 DEFB $00,$00,$00,$00,$44,$00,$00,$00
 $E91F DEFB $00,$00,$00,$00,$00,$53,$B7,$7F
 $E927 DEFB $FF,$FF,$FF,$6D,$40,$00,$00,$C5
 $E92F DEFB $FF,$F8,$05,$33,$00,$00,$00,$00
 $E937 DEFB $01,$00,$08,$9D,$F7,$D8,$00,$00
 $E93F DEFB $00,$00,$00,$00,$05,$DF,$FF,$FB
 $E947 DEFB $FF,$FF,$FF,$FF,$FF,$80,$01,$FF
 $E94F DEFB $F6,$0A,$16,$00,$2A,$A8,$00,$02
 $E957 DEFB $20,$01,$2B,$FF,$FF,$80,$08,$00
 $E95F DEFB $00,$00,$8D,$1A,$4B,$FF,$FC,$00
 $E967 DEFB $00,$44,$BA,$BF,$FF,$C0,$0F,$FF
 $E96F DEFB $F8,$27,$FB,$FF,$90,$A0,$83,$90
 $E977 DEFB $00,$00,$1F,$FF,$58,$20,$00,$00
 $E97F DEFB $00,$00,$00,$15,$7F,$FF,$F1,$00
 $E987 DEFB $D9,$00,$0A,$FF,$F4,$03,$FF,$FA
 $E98F DEFB $00,$00,$07,$FE,$FF,$C0,$00,$14
 $E997 DEFB $40,$2F,$FF,$FF,$D1,$00,$00,$00
 $E99F DEFB $00,$00,$00,$88,$B7,$FF,$A3,$04
 $E9A7 DEFB $00,$11,$3F,$FF,$83,$1D,$FF,$E0
 $E9AF DEFB $00,$00,$05,$BF,$FF,$FE,$80,$A4
 $E9B7 DEFB $2A,$9F,$FF,$FF,$22,$00,$00,$00
 $E9BF DEFB $00,$00,$00,$47,$FF,$FF,$B0,$02
 $E9C7 DEFB $47,$FF,$FF,$C0,$06,$FF,$FF,$00
 $E9CF DEFB $08,$84,$51,$20,$FF,$FF,$FF,$F7
 $E9D7 DEFB $E7,$FF,$FF,$A1,$00,$00,$00,$00
 $E9DF DEFB $00,$00,$2A,$8F,$FF,$F8,$00,$00
 $E9E7 DEFB $0D,$FF,$F4,$11,$77,$FF,$F8,$8B
 $E9EF DEFB $59,$72,$00,$00,$01,$6F,$FF,$F8
 $E9F7 DEFB $3F,$FF,$FF,$33,$00,$00,$00,$00
 $E9FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EA07 DEFB $1F,$7D,$C9,$2A,$91,$00,$00,$43
 $EA0F DEFB $67,$F8,$00,$00,$00,$00,$00,$00
 $EA17 DEFB $00,$00,$00,$00,$07,$00,$00,$40
 $EA1F DEFB $00,$00,$00,$00,$00,$10,$CF,$FF
 $EA27 DEFB $FF,$FF,$FF,$D7,$57,$00,$00,$3E
 $EA2F DEFB $CF,$F0,$02,$4C,$C0,$00,$00,$00
 $EA37 DEFB $08,$80,$23,$7F,$6E,$A0,$00,$00
 $EA3F DEFB $00,$00,$08,$08,$9F,$7F,$FF,$FF
 $EA47 DEFB $D7,$5F,$FF,$FF,$FF,$00,$5F,$FF
 $EA4F DEFB $FF,$E0,$FB,$BF,$D5,$22,$02,$00
 $EA57 DEFB $80,$00,$0B,$FF,$FF,$E0,$00,$00
 $EA5F DEFB $00,$02,$2C,$80,$1F,$FF,$FF,$40
 $EA67 DEFB $00,$01,$25,$BF,$FF,$00,$1F,$FF
 $EA6F DEFB $C0,$00,$5F,$FF,$FE,$A2,$24,$00
 $EA77 DEFB $00,$02,$BF,$FF,$F0,$40,$00,$00
 $EA7F DEFB $00,$00,$40,$26,$FF,$FF,$FD,$40
 $EA87 DEFB $DA,$00,$07,$FF,$FE,$01,$FF,$FE
 $EA8F DEFB $00,$00,$0F,$AF,$FF,$E0,$00,$AA
 $EA97 DEFB $02,$20,$DF,$FC,$C8,$00,$00,$00
 $EA9F DEFB $00,$00,$01,$23,$FF,$FF,$F0,$84
 $EAA7 DEFB $01,$5F,$FF,$FF,$E0,$EF,$FF,$F8
 $EAAF DEFB $00,$00,$0B,$FF,$EF,$FF,$C0,$11
 $EAB7 DEFB $4F,$FF,$FF,$E4,$E4,$00,$00,$00
 $EABF DEFB $00,$00,$01,$17,$FE,$E8,$00,$00
 $EAC7 DEFB $38,$EF,$F6,$00,$07,$BB,$FE,$00
 $EACF DEFB $10,$45,$1A,$40,$43,$FF,$FF,$80
 $EAD7 DEFB $8B,$FD,$FB,$10,$00,$00,$00,$00
 $EADF DEFB $00,$00,$7A,$EF,$FE,$B0,$00,$00
 $EAE7 DEFB $FF,$FF,$00,$00,$3F,$FB,$E0,$52
 $EAEF DEFB $52,$84,$00,$00,$26,$57,$FF,$FF
 $EAF7 DEFB $F7,$FF,$F8,$6C,$C0,$00,$00,$00
 $EAFF DEFB $00,$00,$00,$00,$00,$00,$01,$75
 $EB07 DEFB $D5,$D5,$72,$4C,$84,$00,$00,$01
 $EB0F DEFB $DF,$05,$00,$00,$00,$00,$00,$00
 $EB17 DEFB $00,$00,$00,$05,$DA,$01,$20,$00
 $EB1F DEFB $00,$00,$00,$00,$00,$0F,$FF,$BF
 $EB27 DEFB $FF,$FF,$FF,$BF,$B8,$00,$00,$3D
 $EB2F DEFB $BF,$F0,$00,$13,$00,$00,$00,$00
 $EB37 DEFB $00,$00,$48,$B9,$FF,$9E,$00,$00
 $EB3F DEFB $00,$00,$08,$12,$21,$5B,$FF,$FD
 $EB47 DEFB $72,$FE,$DF,$FF,$FA,$00,$03,$7F
 $EB4F DEFB $FE,$00,$76,$ED,$74,$48,$04,$82
 $EB57 DEFB $20,$00,$BA,$9F,$FF,$01,$00,$00
 $EB5F DEFB $00,$01,$4A,$20,$3F,$FF,$34,$00
 $EB67 DEFB $44,$00,$02,$25,$FF,$C0,$FF,$FF
 $EB6F DEFB $C0,$00,$7F,$BB,$FC,$A0,$42,$00
 $EB77 DEFB $00,$00,$3F,$FF,$80,$00,$00,$00
 $EB7F DEFB $00,$00,$80,$09,$AF,$FE,$B1,$00
 $EB87 DEFB $22,$00,$0A,$9F,$60,$1F,$FF,$F8
 $EB8F DEFB $00,$00,$03,$FF,$FF,$FD,$01,$2A
 $EB97 DEFB $84,$89,$FF,$FF,$B6,$00,$00,$00
 $EB9F DEFB $00,$00,$00,$09,$FF,$FF,$22,$0E
 $EBA7 DEFB $02,$25,$FF,$FF,$07,$BB,$FF,$80
 $EBAF DEFB $00,$00,$0A,$F7,$FF,$FF,$FC,$24
 $EBB7 DEFB $51,$7F,$FF,$59,$00,$00,$00,$00
 $EBBF DEFB $00,$00,$00,$FF,$FF,$F8,$00,$01
 $EBC7 DEFB $5F,$FF,$FF,$E8,$BE,$EF,$FF,$D4
 $EBCF DEFB $00,$95,$48,$01,$7F,$FF,$FF,$82
 $EBD7 DEFB $27,$FF,$FC,$A2,$00,$00,$00,$00
 $EBDF DEFB $00,$00,$17,$FF,$FF,$FC,$00,$17
 $EBE7 DEFB $FF,$F8,$00,$02,$FF,$FF,$20,$05
 $EBEF DEFB $5A,$20,$00,$00,$00,$6E,$FF,$FE
 $EBF7 DEFB $7F,$FF,$E0,$13,$00,$00,$00,$00
 $EBFF DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $EC07 DEFB $66,$BB,$BF,$DB,$51,$00,$00,$01
 $EC0F DEFB $66,$DD,$80,$00,$00,$00,$00,$00
 $EC17 DEFB $00,$00,$00,$00,$3F,$B8,$08,$00
 $EC1F DEFB $00,$00,$00,$02,$4D,$FB,$FF,$FF
 $EC27 DEFB $FF,$FF,$FF,$FF,$EE,$00,$0B,$FF
 $EC2F DEFB $FF,$FC,$D5,$FC,$C0,$00,$00,$00
 $EC37 DEFB $08,$00,$0F,$FE,$BF,$80,$00,$00
 $EC3F DEFB $00,$01,$18,$00,$80,$9F,$FF,$FB
 $EC47 DEFB $81,$7E,$AD,$FF,$FF,$80,$03,$FF
 $EC4F DEFB $FF,$8D,$DF,$FF,$DD,$A2,$02,$01
 $EC57 DEFB $00,$01,$17,$FF,$FC,$00,$00,$00
 $EC5F DEFB $00,$00,$08,$90,$15,$FF,$F8,$00
 $EC67 DEFB $91,$00,$01,$4F,$FE,$00,$1F,$FF
 $EC6F DEFB $80,$00,$FF,$EE,$F8,$44,$00,$00
 $EC77 DEFB $00,$0B,$DF,$FF,$FC,$00,$00,$00
 $EC7F DEFB $00,$01,$00,$36,$7F,$FF,$F4,$40
 $EC87 DEFB $89,$00,$07,$FF,$F8,$01,$BF,$FE
 $EC8F DEFB $00,$00,$07,$FF,$FF,$68,$00,$2A
 $EC97 DEFB $40,$23,$FF,$FD,$E1,$00,$00,$00
 $EC9F DEFB $00,$00,$00,$AF,$FF,$FF,$00,$84
 $ECA7 DEFB $00,$8F,$FF,$F7,$A4,$ED,$FF,$EF
 $ECAF DEFB $00,$00,$1B,$B3,$FF,$FF,$E0,$01
 $ECB7 DEFB $44,$FF,$FF,$F0,$00,$00,$00,$00
 $ECBF DEFB $00,$00,$11,$03,$FF,$FD,$C0,$02
 $ECC7 DEFB $33,$FF,$FF,$00,$0F,$FB,$F4,$91
 $ECCF DEFB $0A,$06,$90,$00,$5F,$FF,$FF,$F1
 $ECD7 DEFB $4B,$FF,$FF,$19,$80,$00,$00,$00
 $ECDF DEFB $00,$00,$2B,$BF,$FF,$80,$15,$78
 $ECE7 DEFB $BF,$FE,$80,$03,$B7,$FF,$F0,$6A
 $ECEF DEFB $F9,$25,$D8,$00,$01,$5D,$FF,$FF
 $ECF7 DEFB $FF,$FF,$C0,$3C,$80,$00,$00,$00
 $ECFF DEFB $00,$00,$55,$7F,$FF,$F9,$E0,$77
 $ED07 DEFB $FF,$F8,$00,$01,$6F,$FE,$E0,$02
 $ED0F DEFB $A4,$60,$08,$00,$00,$77,$FF,$FF
 $ED17 DEFB $FF,$FF,$F3,$60,$00,$00,$00,$00
 $ED1F DEFB $00,$03,$90,$FF,$FF,$FF,$FF,$FF
 $ED27 DEFB $82,$89,$11,$FF,$DF,$FF,$FF,$FF
 $ED2F DEFB $FF,$FF,$FF,$EE,$02,$2C,$FF,$FF
 $ED37 DEFB $FF,$F4,$10,$51,$00,$00,$00,$00
 $ED3F DEFB $00,$11,$27,$FF,$FF,$2F,$33,$FF
 $ED47 DEFB $F8,$C0,$00,$17,$FF,$FF,$FF,$FF
 $ED4F DEFB $FF,$FF,$FF,$80,$00,$00,$0F,$FF
 $ED57 DEFB $FF,$FE,$B1,$04,$C8,$00,$00,$00
 $ED5F DEFB $00,$00,$1F,$FF,$E0,$00,$48,$7F
 $ED67 DEFB $FF,$F8,$05,$53,$DF,$E0,$02,$28
 $ED6F DEFB $60,$09,$10,$44,$44,$00,$2F,$FF
 $ED77 DEFB $FF,$FF,$E3,$A2,$20,$00,$00,$00
 $ED7F DEFB $3C,$02,$FF,$D0,$00,$24,$80,$05
 $ED87 DEFB $FF,$FF,$80,$25,$DF,$FF,$C0,$08
 $ED8F DEFB $20,$00,$00,$00,$00,$F7,$FF,$FE
 $ED97 DEFB $7F,$FF,$FF,$FA,$88,$51,$00,$00
 $ED9F DEFB $00,$0F,$FF,$FC,$02,$00,$00,$00
 $EDA7 DEFB $7F,$FF,$F9,$10,$07,$FF,$F8,$00
 $EDAF DEFB $00,$11,$10,$00,$9A,$7F,$FD,$95
 $EDB7 DEFB $88,$07,$FF,$FF,$C0,$00,$00,$00
 $EDBF DEFB $00,$5F,$EF,$00,$1F,$80,$00,$00
 $EDC7 DEFB $00,$7F,$FF,$D0,$00,$1F,$FF,$FC
 $EDCF DEFB $00,$0A,$40,$00,$25,$FF,$FC,$58
 $EDD7 DEFB $AA,$06,$DE,$FF,$FF,$60,$00,$00
 $EDDF DEFB $00,$18,$00,$00,$00,$02,$00,$00
 $EDE7 DEFB $00,$01,$FF,$B7,$20,$00,$FF,$FF
 $EDEF DEFB $80,$00,$00,$00,$1F,$FF,$E3,$69
 $EDF7 DEFB $00,$80,$0B,$1F,$FF,$89,$00,$00
 $EDFF DEFB $00,$02,$35,$5F,$FF,$C0,$7F,$FF
 $EE07 DEFB $FF,$E0,$00,$5F,$FF,$FF,$53,$9F
 $EE0F DEFB $B5,$DE,$7F,$A0,$00,$EF,$FF,$FF
 $EE17 DEFB $FF,$FE,$82,$59,$00,$00,$00,$00
 $EE1F DEFB $00,$02,$47,$7F,$FF,$FF,$FF,$FF
 $EE27 DEFB $FC,$51,$00,$5F,$EB,$FF,$7F,$FF
 $EE2F DEFB $FF,$FF,$FF,$FF,$84,$91,$5F,$FF
 $EE37 DEFB $FF,$FE,$E0,$08,$00,$00,$00,$00
 $EE3F DEFB $00,$0A,$47,$FF,$F8,$19,$F7,$FF
 $EE47 DEFB $FF,$00,$00,$7F,$FF,$BF,$FF,$FD
 $EE4F DEFB $FF,$FF,$FA,$EC,$20,$00,$04,$FF
 $EE57 DEFB $FF,$F1,$B6,$11,$22,$00,$00,$00
 $EE5F DEFB $00,$00,$03,$7F,$80,$12,$04,$02
 $EE67 DEFB $FF,$FC,$09,$47,$77,$FF,$02,$00
 $EE6F DEFB $10,$80,$CC,$D1,$12,$09,$FF,$FF
 $EE77 DEFB $FF,$FF,$FC,$90,$88,$00,$00,$00
 $EE7F DEFB $3E,$00,$FF,$FF,$00,$00,$00,$00
 $EE87 DEFB $FF,$FF,$F0,$04,$BF,$FF,$F9,$00
 $EE8F DEFB $00,$00,$00,$00,$00,$01,$FF,$FE
 $EE97 DEFB $21,$FF,$FF,$FE,$A4,$88,$00,$00
 $EE9F DEFB $00,$00,$7F,$C0,$20,$00,$00,$00
 $EEA7 DEFB $00,$17,$FC,$00,$4F,$FF,$FE,$00
 $EEAF DEFB $08,$4D,$C4,$01,$2A,$97,$FF,$E8
 $EEB7 DEFB $20,$3F,$FF,$FF,$E8,$00,$00,$00
 $EEBF DEFB $00,$1E,$BB,$A0,$35,$80,$00,$00
 $EEC7 DEFB $05,$AC,$FF,$50,$00,$0F,$FF,$F8
 $EECF DEFB $00,$00,$00,$00,$59,$FF,$FF,$E3
 $EED7 DEFB $0A,$05,$FF,$FF,$FF,$C0,$00,$00
 $EEDF DEFB $00,$04,$00,$00,$00,$01,$80,$00
 $EEE7 DEFB $00,$17,$FF,$E8,$00,$05,$FF,$FF
 $EEEF DEFB $E8,$00,$00,$0C,$7F,$FE,$C8,$80
 $EEF7 DEFB $12,$20,$80,$7F,$FF,$6E,$00,$00
 $EEFF DEFB $00,$04,$DD,$FF,$FF,$FF,$FC,$7F
 $EF07 DEFB $FF,$FF,$00,$1F,$FF,$FF,$FD,$F7
 $EF0F DEFB $F7,$6D,$F5,$00,$00,$EF,$FF,$FF
 $EF17 DEFB $FF,$FF,$E4,$74,$00,$00,$00,$00
 $EF1F DEFB $00,$08,$91,$FF,$FF,$FF,$FF,$ED
 $EF27 DEFB $79,$14,$02,$FF,$FF,$FF,$FF,$FF
 $EF2F DEFB $FF,$FF,$FF,$F8,$00,$12,$1F,$FF
 $EF37 DEFB $FF,$F0,$A8,$82,$00,$00,$00,$00
 $EF3F DEFB $00,$00,$02,$FF,$FC,$04,$61,$FF
 $EF47 DEFB $FF,$80,$00,$BF,$FF,$E7,$7B,$4F
 $EF4F DEFB $FE,$FF,$F8,$00,$40,$00,$07,$FF
 $EF57 DEFB $FF,$FF,$D4,$0A,$48,$00,$00,$00
 $EF5F DEFB $00,$07,$3F,$FF,$00,$6C,$04,$1F
 $EF67 DEFB $FF,$F8,$04,$01,$DF,$F8,$00,$00
 $EF6F DEFB $00,$01,$12,$8C,$EC,$00,$7F,$FF
 $EF77 DEFB $FF,$FF,$FF,$E6,$24,$00,$00,$00
 $EF7F DEFB $3E,$03,$FF,$FC,$00,$00,$00,$00
 $EF87 DEFB $97,$FD,$40,$04,$1F,$DF,$E0,$00
 $EF8F DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $EF97 DEFB $01,$FF,$FF,$FF,$48,$22,$00,$00
 $EF9F DEFB $00,$07,$FC,$00,$00,$20,$00,$00
 $EFA7 DEFB $01,$FF,$FF,$D0,$20,$7F,$EF,$10
 $EFAF DEFB $00,$3B,$24,$00,$0A,$FF,$FF,$EF
 $EFB7 DEFB $88,$03,$FF,$FF,$3F,$40,$00,$00
 $EFBF DEFB $00,$B5,$DE,$00,$40,$C0,$01,$00
 $EFC7 DEFB $00,$FF,$FF,$FC,$00,$1F,$FF,$FE
 $EFCF DEFB $80,$00,$02,$41,$46,$FF,$FA,$48
 $EFD7 DEFB $A2,$0C,$CF,$FF,$FF,$F0,$00,$00
 $EFDF DEFB $00,$66,$A0,$00,$00,$00,$00,$08
 $EFE7 DEFB $00,$00,$5F,$D7,$00,$00,$77,$FF
 $EFEF DEFB $80,$00,$00,$00,$3F,$FF,$EB,$44
 $EFF7 DEFB $00,$84,$27,$7F,$FF,$FA,$00,$00
 $EFFF DEFB $00,$00,$2B,$7F,$FF,$FF,$FF,$FF
 $F007 DEFB $FE,$D0,$00,$07,$DB,$FF,$FF,$FF
 $F00F DEFB $FB,$FF,$FF,$D8,$00,$59,$FF,$FF
 $F017 DEFB $EF,$FF,$01,$69,$00,$00,$00,$00
 $F01F DEFB $00,$13,$7F,$FF,$FF,$FF,$FF,$FF
 $F027 DEFB $EC,$58,$20,$3F,$FF,$FF,$FF,$FF
 $F02F DEFB $F7,$FF,$FD,$6E,$02,$48,$A7,$FF
 $F037 DEFB $FF,$F1,$E8,$09,$80,$00,$00,$00
 $F03F DEFB $00,$00,$07,$FC,$50,$11,$31,$37
 $F047 DEFB $E1,$00,$00,$0F,$FF,$FF,$93,$3B
 $F04F DEFB $53,$4F,$88,$00,$88,$00,$3F,$FF
 $F057 DEFB $FF,$FF,$F6,$40,$A2,$00,$00,$00
 $F05F DEFB $00,$00,$1F,$FF,$C0,$01,$04,$05
 $F067 DEFB $FF,$FF,$08,$55,$77,$FF,$80,$08
 $F06F DEFB $00,$40,$A4,$73,$90,$00,$FF,$FF
 $F077 DEFB $FF,$FF,$FF,$81,$58,$00,$00,$00
 $F07F DEFB $3E,$00,$7F,$F8,$00,$00,$00,$00
 $F087 DEFB $7F,$FF,$E0,$85,$13,$FD,$80,$00
 $F08F DEFB $00,$22,$00,$00,$00,$07,$FF,$FA
 $F097 DEFB $47,$FF,$FF,$FF,$00,$89,$00,$00
 $F09F DEFB $00,$05,$FF,$40,$12,$00,$10,$00
 $F0A7 DEFB $1F,$FF,$FF,$00,$00,$3F,$FF,$00
 $F0AF DEFB $00,$00,$8A,$00,$33,$7F,$FF,$F5
 $F0B7 DEFB $40,$01,$7F,$FF,$F8,$00,$00,$00
 $F0BF DEFB $00,$1F,$75,$00,$00,$20,$00,$00
 $F0C7 DEFB $00,$7F,$FF,$E0,$00,$03,$FF,$B0
 $F0CF DEFB $00,$00,$09,$02,$0F,$FF,$E0,$82
 $F0D7 DEFB $82,$05,$BB,$FF,$FF,$C0,$00,$00
 $F0DF DEFB $00,$00,$00,$00,$00,$00,$40,$08
 $F0E7 DEFB $00,$01,$F7,$BB,$00,$00,$5F,$FF
 $F0EF DEFB $C0,$00,$00,$27,$FF,$FF,$EC,$81
 $F0F7 DEFB $46,$20,$08,$A9,$FF,$AE,$E4,$00
 $F0FF DEFB $00,$02,$88,$95,$FF,$F8,$99,$BF
 $F107 DEFB $FF,$E4,$00,$3F,$FF,$FF,$FF,$FF
 $F10F DEFB $F7,$FF,$FF,$E0,$00,$27,$7F,$FF
 $F117 DEFB $FF,$FF,$C2,$00,$00,$00,$00,$00
 $F11F DEFB $00,$02,$A0,$5F,$FC,$83,$FF,$FF
 $F127 DEFB $FE,$92,$00,$7F,$FF,$FF,$FF,$FF
 $F12F DEFB $FF,$FF,$FF,$F8,$04,$00,$09,$FF
 $F137 DEFB $FF,$FE,$A0,$52,$20,$00,$00,$00
 $F13F DEFB $00,$00,$01,$BF,$FC,$0D,$67,$FF
 $F147 DEFB $FF,$D0,$00,$7F,$FF,$C1,$D2,$4C
 $F14F DEFB $FE,$9E,$EB,$83,$22,$00,$0B,$FF
 $F157 DEFB $FF,$FF,$FF,$11,$10,$00,$00,$00
 $F15F DEFB $08,$00,$0F,$FA,$00,$10,$40,$6F
 $F167 DEFB $FF,$C8,$03,$07,$BF,$EA,$00,$00
 $F16F DEFB $20,$00,$80,$89,$00,$03,$EF,$FF
 $F177 DEFB $CF,$FF,$FE,$F6,$C4,$00,$00,$00
 $F17F DEFB $1E,$27,$FF,$A0,$00,$00,$00,$00
 $F187 DEFB $5F,$FF,$FC,$05,$07,$FF,$F0,$00
 $F18F DEFB $08,$48,$80,$00,$20,$1B,$F7,$F8
 $F197 DEFB $80,$0B,$FF,$FE,$D0,$52,$00,$00
 $F19F DEFB $00,$03,$FF,$D4,$1F,$80,$00,$00
 $F1A7 DEFB $03,$FF,$FE,$A0,$06,$FF,$FF,$C8
 $F1AF DEFB $00,$0A,$2D,$A0,$1C,$FF,$FF,$EB
 $F1B7 DEFB $34,$17,$FF,$FF,$FE,$00,$00,$00
 $F1BF DEFB $00,$0D,$C0,$01,$80,$00,$20,$00
 $F1C7 DEFB $00,$07,$FF,$FC,$C0,$07,$FF,$F8
 $F1CF DEFB $00,$00,$00,$00,$8B,$FE,$4A,$A8
 $F1D7 DEFB $90,$02,$AF,$FF,$FF,$F0,$00,$00
 $F1DF DEFB $03,$13,$00,$00,$00,$00,$40,$18
 $F1E7 DEFB $10,$00,$FB,$AE,$F0,$01,$FF,$FF
 $F1EF DEFB $F0,$00,$00,$01,$BF,$FF,$FD,$00
 $F1F7 DEFB $91,$00,$02,$27,$FF,$77,$00,$00
 $F1FF DEFB $00,$04,$45,$BF,$FF,$FF,$FF,$FF
 $F207 DEFB $FE,$69,$80,$FF,$FF,$FF,$FF,$FF
 $F20F DEFB $ED,$DF,$FF,$FD,$00,$7D,$FF,$FF
 $F217 DEFB $FF,$FA,$00,$C0,$00,$00,$00,$00
 $F21F DEFB $00,$0A,$A9,$FF,$EA,$7E,$DF,$FF
 $F227 DEFB $BA,$10,$27,$FF,$FF,$FF,$FF,$FF
 $F22F DEFB $FF,$FF,$FF,$FC,$01,$10,$1F,$FF
 $F237 DEFB $FF,$FD,$CC,$00,$80,$00,$00,$00
 $F23F DEFB $00,$00,$DF,$FF,$FE,$81,$10,$7F
 $F247 DEFB $FE,$C0,$04,$CF,$FF,$E0,$16,$48
 $F24F DEFB $6A,$21,$AA,$04,$88,$00,$7F,$FF
 $F257 DEFB $FF,$FF,$BD,$42,$44,$00,$00,$00
 $F25F DEFB $00,$00,$FF,$FF,$E8,$64,$00,$00
 $F267 DEFB $2F,$FF,$F0,$44,$EF,$FF,$00,$00
 $F26F DEFB $08,$00,$00,$72,$00,$1F,$FF,$FF
 $F277 DEFB $FF,$FF,$FF,$F0,$10,$44,$00,$00
 $F27F DEFB $09,$00,$3F,$FC,$80,$00,$00,$00
 $F287 DEFB $EF,$FF,$F8,$04,$BF,$FF,$FC,$80
 $F28F DEFB $00,$02,$00,$00,$00,$3F,$FF,$FE
 $F297 DEFB $00,$3F,$FF,$FF,$00,$00,$00,$00
 $F29F DEFB $00,$37,$FF,$00,$1F,$00,$00,$00
 $F2A7 DEFB $01,$FF,$FF,$00,$00,$0B,$FF,$00
 $F2AF DEFB $00,$11,$4A,$40,$27,$FF,$FF,$EE
 $F2B7 DEFB $CC,$06,$FF,$FF,$38,$80,$00,$00
 $F2BF DEFB $00,$7C,$30,$01,$0C,$00,$E0,$00
 $F2C7 DEFB $00,$EF,$FF,$FC,$00,$00,$7F,$FF
 $F2CF DEFB $30,$00,$00,$02,$37,$FF,$FE,$CD
 $F2D7 DEFB $46,$00,$A2,$FF,$FF,$FF,$80,$00
 $F2DF DEFB $00,$78,$00,$00,$00,$00,$70,$18
 $F2E7 DEFB $40,$03,$F6,$AB,$00,$00,$57,$FF
 $F2EF DEFB $40,$00,$00,$03,$7F,$FF,$55,$80
 $F2F7 DEFB $04,$44,$62,$93,$FF,$D5,$00,$00
 $F2FF DEFB $00,$01,$10,$FF,$FF,$FF,$FF,$FF
 $F307 DEFB $FC,$AA,$20,$7F,$DF,$FF,$FF,$FF
 $F30F DEFB $FF,$FF,$FD,$C0,$00,$D5,$7F,$FF
 $F317 DEFB $FF,$FF,$B2,$91,$00,$00,$00,$00
 $F31F DEFB $00,$13,$27,$FF,$FF,$1B,$FF,$FF
 $F327 DEFB $FC,$0A,$00,$5F,$FF,$FF,$FF,$EF
 $F32F DEFB $FF,$FF,$FF,$F0,$04,$48,$26,$FF
 $F337 DEFB $FF,$F1,$30,$0A,$20,$00,$00,$00
 $F33F DEFB $00,$00,$03,$FF,$60,$01,$00,$1F
 $F347 DEFB $FF,$E0,$09,$37,$FF,$FC,$12,$5C
 $F34F DEFB $3A,$00,$98,$44,$A2,$00,$1F,$FF
 $F357 DEFB $FF,$FF,$FD,$11,$12,$00,$00,$00
 $F35F DEFB $08,$00,$1F,$FF,$80,$11,$08,$01
 $F367 DEFB $FF,$FE,$02,$13,$B7,$FF,$D0,$00
 $F36F DEFB $08,$00,$00,$89,$00,$01,$FF,$FF
 $F377 DEFB $05,$FF,$FF,$E1,$54,$91,$00,$00
 $F37F DEFB $08,$00,$FC,$A0,$80,$00,$00,$00
 $F387 DEFB $26,$FF,$60,$A5,$0F,$EF,$78,$00
 $F38F DEFB $00,$29,$90,$00,$00,$0F,$FF,$FB
 $F397 DEFB $80,$1F,$FF,$FF,$00,$00,$00,$00
 $F39F DEFB $00,$0E,$E8,$60,$3F,$80,$00,$00
 $F3A7 DEFB $00,$1F,$FF,$1C,$00,$1F,$FF,$80
 $F3AF DEFB $00,$04,$42,$90,$2D,$FF,$FF,$2A
 $F3B7 DEFB $90,$04,$BF,$FF,$FF,$F6,$00,$00
 $F3BF DEFB $00,$0F,$40,$00,$00,$04,$70,$06
 $F3C7 DEFB $00,$0F,$FF,$FE,$00,$2D,$FF,$FC
 $F3CF DEFB $00,$00,$00,$01,$6F,$FF,$E0,$91
 $F3D7 DEFB $82,$01,$10,$1F,$FF,$F8,$00,$00
 $F3DF DEFB $00,$00,$00,$00,$00,$00,$39,$38
 $F3E7 DEFB $80,$80,$1F,$96,$C0,$00,$01,$7F
 $F3EF DEFB $F8,$00,$00,$0F,$FF,$F4,$6D,$80
 $F3F7 DEFB $51,$21,$00,$38,$FF,$64,$98,$00
 $F3FF DEFB $00,$04,$EB,$DF,$FF,$FF,$FF,$FF
 $F407 DEFB $F8,$28,$80,$17,$FF,$FF,$FF,$FF
 $F40F DEFB $F7,$FF,$BF,$FE,$58,$33,$1B,$FF
 $F417 DEFB $FF,$FE,$45,$4C,$00,$00,$00,$00
 $F41F DEFB $00,$05,$7B,$FE,$80,$02,$CF,$FF
 $F427 DEFB $EC,$00,$05,$FE,$FF,$FF,$FF,$FF
 $F42F DEFB $FF,$FF,$FE,$5C,$82,$01,$4D,$7F
 $F437 DEFB $FF,$FD,$48,$11,$00,$00,$00,$00
 $F43F DEFB $00,$00,$07,$FF,$FE,$00,$20,$1F
 $F447 DEFB $FF,$FC,$02,$CF,$FF,$40,$00,$48
 $F44F DEFB $6A,$00,$A2,$93,$98,$04,$FF,$FF
 $F457 DEFB $FF,$FF,$FC,$81,$E4,$00,$00,$00
 $F45F DEFB $48,$00,$FF,$FE,$00,$00,$00,$00
 $F467 DEFB $17,$FF,$00,$01,$2F,$FF,$C0,$00
 $F46F DEFB $0F,$80,$00,$52,$00,$0F,$FF,$FF
 $F477 DEFB $C0,$BF,$FF,$F2,$20,$04,$00,$00
 $F47F DEFB $00,$07,$FF,$F0,$00,$00,$00,$00
 $F487 DEFB $8F,$FF,$F4,$90,$11,$7F,$FE,$00
 $F48F DEFB $00,$46,$C4,$00,$09,$FF,$FF,$EE
 $F497 DEFB $A0,$6B,$7F,$FF,$F0,$00,$00,$00
 $F49F DEFB $00,$05,$BB,$00,$1F,$00,$00,$00
 $F4A7 DEFB $00,$1F,$FF,$A0,$02,$7F,$FF,$E0
 $F4AF DEFB $00,$11,$24,$20,$8F,$FF,$FF,$C0
 $F4B7 DEFB $88,$03,$FF,$FF,$F5,$80,$00,$00
 $F4BF DEFB $00,$AB,$6B,$04,$00,$02,$60,$06
 $F4C7 DEFB $00,$0F,$FF,$DC,$00,$03,$FF,$FF
 $F4CF DEFB $00,$00,$00,$02,$7F,$FF,$D1,$E4
 $F4D7 DEFB $80,$00,$44,$7F,$FF,$FE,$00,$00
 $F4DF DEFB $02,$00,$00,$00,$00,$00,$3B,$FF
 $F4E7 DEFB $02,$05,$BA,$EF,$B0,$00,$07,$FF
 $F4EF DEFB $F0,$00,$00,$01,$FF,$FE,$29,$88
 $F4F7 DEFB $8A,$44,$01,$17,$FF,$AD,$00,$00
 $F4FF DEFB $02,$00,$00,$00,$00,$02,$3F,$FF
 $F507 DEFB $82,$00,$03,$7A,$C0,$00,$1F,$FF
 $F50F DEFB $FF,$40,$04,$1F,$FF,$FF,$D1,$22
 $F517 DEFB $22,$02,$DC,$37,$FF,$F5,$91,$00
 $F51F DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $F527 DEFB $FF,$F0,$00,$00,$40,$00,$00,$00
 $F52F DEFB $E8,$00,$01,$FF,$FD,$04,$88,$80
 $F537 DEFB $00,$88,$0A,$91,$00,$6D,$90,$00
 $F53F DEFB $00,$00,$00,$08,$01,$FF,$FF,$FF
 $F547 DEFB $FF,$F0,$04,$00,$00,$00,$00,$00
 $F54F DEFB $00,$00,$01,$B8,$D8,$FD,$80,$00
 $F557 DEFB $00,$02,$20,$01,$12,$00,$04,$00
 $F55F DEFB $00,$00,$00,$00,$01,$C1,$FF,$FF
 $F567 DEFB $FC,$DF,$FF,$80,$67,$E0,$00,$00
 $F56F DEFB $00,$00,$20,$9A,$94,$40,$00,$00
 $F577 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F57F DEFB $00,$00,$00,$00,$00,$00,$07,$8F
 $F587 DEFB $00,$3F,$FF,$80,$00,$80,$00,$00
 $F58F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F597 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F59F DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $F5A7 DEFB $00,$04,$20,$00,$11,$90,$00,$00
 $F5AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5BF DEFB $00,$00,$00,$FE,$00,$00,$00,$00
 $F5C7 DEFB $0E,$43,$00,$02,$27,$FF,$A1,$C0
 $F5CF DEFB $40,$00,$00,$00,$00,$00,$00,$00
 $F5D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5E7 DEFB $00,$00,$00,$00,$00,$00,$01,$FF
 $F5EF DEFB $00,$04,$00,$00,$00,$00,$00,$00
 $F5F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5FF DEFB $00,$01,$80,$00,$00,$01,$3F,$FF
 $F607 DEFB $DC,$00,$1C,$D7,$60,$00,$01,$FF
 $F60F DEFB $E8,$00,$00,$82,$5D,$DD,$00,$08
 $F617 DEFB $89,$00,$64,$01,$BF,$EE,$C6,$00
 $F61F DEFB $00,$00,$00,$00,$00,$EF,$FF,$FF
 $F627 DEFB $FF,$80,$00,$2B,$D0,$40,$00,$03
 $F62F DEFB $B6,$80,$00,$FF,$DE,$22,$22,$20
 $F637 DEFB $01,$22,$2D,$B4,$47,$13,$71,$00
 $F63F DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $F647 DEFB $FF,$9C,$00,$00,$00,$00,$00,$00
 $F64F DEFB $20,$00,$5B,$EE,$A0,$2C,$00,$00
 $F657 DEFB $00,$00,$88,$00,$A4,$00,$03,$10
 $F65F DEFB $00,$00,$00,$00,$03,$03,$FF,$FF
 $F667 DEFB $FC,$7F,$FF,$80,$0B,$E0,$00,$00
 $F66F DEFB $00,$04,$CA,$17,$11,$20,$00,$00
 $F677 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F67F DEFB $00,$00,$00,$00,$00,$00,$03,$83
 $F687 DEFB $00,$3F,$FF,$C0,$00,$00,$00,$00
 $F68F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F697 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F69F DEFB $00,$00,$00,$10,$40,$00,$03,$00
 $F6A7 DEFB $00,$00,$00,$00,$38,$18,$00,$00
 $F6AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6BF DEFB $00,$00,$00,$7E,$00,$00,$06,$00
 $F6C7 DEFB $1E,$03,$00,$00,$00,$FE,$01,$80
 $F6CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6E7 DEFB $00,$00,$00,$00,$00,$00,$00,$FE
 $F6EF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6FF DEFB $00,$00,$00,$00,$01,$01,$FF,$FF
 $F707 DEFB $F8,$00,$00,$4C,$00,$00,$00,$FF
 $F70F DEFB $FC,$00,$00,$07,$FB,$74,$40,$A2
 $F717 DEFB $52,$00,$04,$55,$7F,$73,$A4,$00
 $F71F DEFB $08,$00,$00,$10,$00,$FF,$FF,$FF
 $F727 DEFB $FF,$80,$00,$00,$00,$00,$00,$00
 $F72F DEFB $05,$93,$00,$1E,$EF,$EA,$89,$90
 $F737 DEFB $00,$08,$44,$22,$88,$7F,$C0,$00
 $F73F DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $F747 DEFB $FF,$82,$10,$00,$00,$00,$00,$00
 $F74F DEFB $00,$00,$FE,$99,$00,$50,$00,$00
 $F757 DEFB $00,$02,$20,$00,$00,$00,$B8,$08
 $F75F DEFB $00,$00,$00,$00,$08,$05,$FF,$FF
 $F767 DEFB $F8,$3F,$FF,$C0,$01,$F0,$00,$00
 $F76F DEFB $00,$0D,$50,$02,$4E,$40,$00,$00
 $F777 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F77F DEFB $00,$00,$00,$00,$00,$04,$03,$01
 $F787 DEFB $80,$1F,$FF,$60,$00,$00,$00,$00
 $F78F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F797 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F79F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7A7 DEFB $01,$00,$00,$00,$10,$18,$80,$60
 $F7AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7BF DEFB $00,$00,$00,$7D,$00,$00,$06,$60
 $F7C7 DEFB $0C,$00,$00,$00,$00,$FE,$00,$00
 $F7CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7E7 DEFB $00,$00,$00,$00,$00,$00,$00,$7F
 $F7EF DEFB $83,$00,$00,$00,$00,$00,$00,$00
 $F7F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7FF DEFB $04,$30,$00,$03,$00,$81,$FF,$FF
 $F807 DEFB $FC,$E0,$00,$D1,$40,$00,$17,$FD
 $F80F DEFB $DE,$80,$00,$1F,$FF,$03,$01,$10
 $F817 DEFB $00,$00,$49,$B2,$1E,$4C,$00,$00
 $F81F DEFB $00,$00,$01,$00,$00,$3F,$FF,$FF
 $F827 DEFB $FF,$80,$00,$02,$10,$40,$00,$CB
 $F82F DEFB $C0,$00,$0F,$FD,$BB,$CA,$57,$20
 $F837 DEFB $00,$A2,$11,$09,$A2,$0D,$74,$60
 $F83F DEFB $00,$00,$00,$00,$00,$5F,$FF,$FF
 $F847 DEFB $FF,$90,$30,$20,$04,$00,$00,$00
 $F84F DEFB $00,$00,$1D,$DE,$E8,$88,$00,$00
 $F857 DEFB $00,$01,$48,$00,$00,$20,$01,$04
 $F85F DEFB $00,$00,$00,$00,$08,$00,$FF,$FF
 $F867 DEFB $F0,$7F,$FF,$80,$02,$10,$00,$00
 $F86F DEFB $00,$09,$78,$81,$10,$00,$00,$00
 $F877 DEFB $00,$00,$00,$00,$00,$00,$00,$02
 $F87F DEFB $00,$00,$00,$00,$00,$08,$03,$01
 $F887 DEFB $80,$1F,$FE,$10,$00,$00,$00,$00
 $F88F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F897 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F89F DEFB $00,$00,$00,$18,$00,$00,$01,$00
 $F8A7 DEFB $01,$00,$10,$00,$00,$79,$00,$60
 $F8AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8BF DEFB $00,$00,$00,$50,$80,$00,$00,$40
 $F8C7 DEFB $00,$00,$00,$00,$00,$FF,$00,$40
 $F8CF DEFB $02,$00,$00,$00,$00,$00,$00,$00
 $F8D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8E7 DEFB $00,$00,$00,$00,$00,$10,$00,$7F
 $F8EF DEFB $00,$02,$00,$00,$00,$00,$00,$00
 $F8F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8FF DEFB $00,$60,$00,$01,$00,$69,$FF,$FF
 $F907 DEFB $FF,$80,$17,$B8,$1E,$00,$04,$FB
 $F90F DEFB $74,$00,$00,$FF,$FD,$74,$44,$44
 $F917 DEFB $00,$00,$28,$48,$8F,$F5,$8C,$00
 $F91F DEFB $00,$00,$00,$04,$04,$1F,$FF,$FF
 $F927 DEFB $FF,$F0,$00,$00,$C8,$00,$00,$00
 $F92F DEFB $B4,$E0,$00,$FD,$C4,$FA,$80,$00
 $F937 DEFB $01,$11,$54,$82,$4A,$5A,$80,$00
 $F93F DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $F947 DEFB $FF,$98,$20,$00,$00,$08,$00,$00
 $F94F DEFB $00,$00,$06,$66,$92,$22,$00,$00
 $F957 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F95F DEFB $00,$00,$00,$00,$00,$00,$FF,$FF
 $F967 DEFB $D0,$3F,$FF,$80,$00,$00,$00,$00
 $F96F DEFB $00,$05,$54,$15,$44,$00,$00,$00
 $F977 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F97F DEFB $00,$00,$00,$0C,$00,$00,$02,$00
 $F987 DEFB $80,$3F,$FE,$00,$00,$08,$00,$00
 $F98F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F997 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F99F DEFB $00,$00,$00,$19,$00,$00,$00,$00
 $F9A7 DEFB $00,$00,$00,$00,$03,$FF,$C0,$00
 $F9AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9BF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9C7 DEFB $00,$00,$00,$00,$01,$39,$00,$20
 $F9CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9E7 DEFB $00,$00,$00,$00,$00,$00,$00,$7C
 $F9EF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9FF DEFB $00,$80,$00,$00,$00,$37,$FF,$FF
 $FA07 DEFB $FF,$00,$00,$20,$A8,$00,$00,$3F
 $FA0F DEFB $D1,$00,$00,$3F,$FB,$B2,$99,$12
 $FA17 DEFB $00,$00,$05,$32,$EF,$1D,$00,$00
 $FA1F DEFB $00,$00,$00,$7C,$00,$1F,$FF,$FF
 $FA27 DEFB $FF,$C2,$00,$00,$00,$00,$00,$00
 $FA2F DEFB $00,$00,$07,$DE,$BB,$6C,$80,$00
 $FA37 DEFB $00,$46,$69,$14,$A2,$00,$E6,$80
 $FA3F DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $FA47 DEFB $FF,$0F,$F4,$C0,$03,$10,$00,$00
 $FA4F DEFB $00,$00,$9D,$98,$C0,$89,$00,$00
 $FA57 DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $FA5F DEFB $00,$00,$00,$00,$00,$00,$DF,$FE
 $FA67 DEFB $30,$7F,$FF,$E0,$04,$08,$00,$00
 $FA6F DEFB $00,$0D,$91,$22,$20,$00,$00,$00
 $FA77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA7F DEFB $00,$00,$00,$0C,$00,$00,$03,$00
 $FA87 DEFB $00,$21,$F1,$00,$00,$00,$00,$00
 $FA8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA9F DEFB $00,$00,$01,$3E,$00,$00,$00,$00
 $FAA7 DEFB $00,$00,$00,$00,$01,$FF,$00,$00
 $FAAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FABF DEFB $00,$00,$01,$10,$00,$00,$00,$00
 $FAC7 DEFB $00,$00,$00,$00,$01,$10,$80,$31
 $FACF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FADF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAE7 DEFB $00,$00,$00,$00,$00,$00,$00,$CC
 $FAEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAFF DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $FB07 DEFB $FF,$02,$00,$1C,$00,$00,$00,$15
 $FB0F DEFB $77,$D0,$00,$37,$FE,$E8,$84,$E4
 $FB17 DEFB $00,$00,$2A,$95,$86,$EE,$FA,$00
 $FB1F DEFB $00,$00,$00,$1E,$C0,$FF,$FF,$FF
 $FB27 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $FB2F DEFB $21,$00,$03,$FD,$DC,$55,$00,$00
 $FB37 DEFB $01,$12,$10,$01,$10,$00,$20,$00
 $FB3F DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $FB47 DEFB $FF,$0F,$FF,$80,$13,$D0,$00,$00
 $FB4F DEFB $80,$00,$72,$A6,$42,$72,$00,$00
 $FB57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB5F DEFB $00,$00,$00,$00,$00,$01,$87,$EE
 $FB67 DEFB $19,$FF,$FF,$F8,$00,$80,$00,$00
 $FB6F DEFB $00,$0A,$E4,$88,$88,$00,$00,$00
 $FB77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB7F DEFB $00,$00,$00,$00,$00,$00,$01,$00
 $FB87 DEFB $60,$00,$60,$80,$00,$80,$00,$00
 $FB8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB9F DEFB $00,$00,$00,$7E,$00,$00,$00,$00
 $FBA7 DEFB $00,$00,$00,$00,$00,$FE,$00,$00
 $FBAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC7 DEFB $00,$00,$00,$00,$00,$00,$00,$7C
 $FBCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE7 DEFB $00,$00,$00,$00,$00,$00,$00,$82
 $FBEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBFF DEFB $00,$00,$00,$00,$00,$07,$FF,$FF
 $FC07 DEFB $FF,$1C,$00,$06,$40,$00,$0A,$FB
 $FC0F DEFB $BC,$00,$03,$FF,$FB,$B2,$55,$10
 $FC17 DEFB $00,$00,$4A,$A4,$40,$BB,$80,$00
 $FC1F DEFB $00,$00,$00,$1C,$5F,$FF,$FF,$FF
 $FC27 DEFB $FF,$C0,$00,$00,$00,$00,$00,$09
 $FC2F DEFB $10,$00,$6E,$EF,$75,$54,$80,$00
 $FC37 DEFB $00,$A5,$44,$00,$44,$1C,$4C,$D0
 $FC3F DEFB $00,$00,$00,$00,$00,$FB,$FF,$FF
 $FC47 DEFB $FE,$1F,$FF,$00,$43,$F0,$00,$00
 $FC4F DEFB $00,$00,$0E,$39,$11,$00,$00,$00
 $FC57 DEFB $00,$00,$00,$00,$00,$00,$01,$28
 $FC5F DEFB $00,$00,$00,$00,$00,$01,$07,$8F
 $FC67 DEFB $04,$7F,$FF,$80,$01,$C2,$00,$00
 $FC6F DEFB $00,$0A,$B9,$22,$64,$00,$00,$00
 $FC77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC7F DEFB $00,$00,$00,$00,$00,$40,$01,$00
 $FC87 DEFB $60,$40,$60,$40,$01,$88,$00,$00
 $FC8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC9F DEFB $00,$00,$00,$7F,$A4,$00,$00,$00
 $FCA7 DEFB $0C,$43,$00,$00,$01,$FF,$00,$00
 $FCAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC7 DEFB $00,$00,$00,$40,$00,$10,$00,$7F
 $FCCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCEF DEFB $00,$0E,$00,$00,$00,$00,$00,$00
 $FCF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCFF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD07 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD0F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD17 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD1F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD27 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD2F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD37 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD3F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD47 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD4F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD57 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD5F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD67 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD6F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD77 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD7F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD87 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD8F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD97 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD9F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDA7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDAF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDB7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDBF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDC7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDCF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDD7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDDF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDE7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDEF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDF7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDFF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE07 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE0F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE17 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE1F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE27 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE2F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE37 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE3F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE47 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE4F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE57 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE5F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE67 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE6F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE77 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE7F DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FE87 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE8F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE97 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE9F DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FEA7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEAF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEB7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEBF DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FEC7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FECF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FED7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEDF DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FEE7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEEF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEF7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEFF DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FF07 DEFB $42,$42,$02,$02,$02,$02,$02,$02
 $FF0F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF17 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF1F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF27 DEFB $42,$42,$02,$02,$02,$02,$02,$02
 $FF2F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF37 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF3F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF47 DEFB $42,$42,$42,$42,$42,$42,$42,$02
 $FF4F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF57 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF5F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF67 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF6F DEFB $42,$42,$42,$02,$02,$42,$42,$42
 $FF77 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF7F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF87 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF8F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF97 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF9F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFA7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFAF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFB7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFBF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFC7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFCF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFD7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFDF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFE7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFEF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFF7 DEFB $42,$42,$42,$00,$00,$00,$00,$00

; Unused
s$FFFF DEFS $01
