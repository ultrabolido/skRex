@org=$4000
@expand=#DEF(#TILE(n) #UDG($6606+8*$n,#PEEK($6E06+$n),2)(tile#EVAL($n,,2)*))
@expand=#DEF(#LOGO #SCR1,0,0,32,24,$E4FF,$FCFF(logo))
@expand=#DEF(#TILES(n,m) #FOR(0,$m-1)(j, #TILE($n+j), | ))
@expand=#DEF(#TILETABLE(n,m) #UDGTABLE(rex,#FOR(0,$m-1)//j/centre/,//) { #FOR(0,$m-1)//j/=h #SPACE(1)$#EVAL($n+j,16,2)#SPACE(1)/ | // } { #TILES($n,$m) } TABLE#)
@expand=#DEF(#SSUPERTILE(i) #UDGARRAY#(3;#FOR(0,8)//n/($6606+#PEEK($6F06+$i*9+n)*8)/;//@#FOR(0,8)//n/($6E06+#PEEK($6F06+$i*9+n))/;//))
@expand=#DEF(#SUPERTILE(i) #SSUPERTILE($i)(supertile#EVAL($i,,3)*))
@expand=#DEF(#MESSAGE(m,l) #UDGARRAY#(#EVAL($l-$m+1),#PEEK($m-3);#FOR($m,$l)//n/($6206+#PEEK(n)*8)/;//))
@expand=#DEF(#ROOM(i)
@expand=+       #UDGARRAY30,$47,,1;$0-$13AF-1-240(*room_buffer)
@expand=+       #FOR(0,6)(mm,
@expand=+           #FOR(0,9)(nn,
@expand=+               #LET(id=#PEEK($7806+nn+mm*10+$i*70))
@expand=+               #SSUPERTILE({id})(*s)
@expand=+               #OVER(nn*3,mm*3,0,0,3)($f)($f)(room_buffer,s)
@expand=+           )
@expand=+       )
@expand=+       #UDGARRAY*room_buffer(room$i)
@expand=+)

; Loading screen
;
; #UDGTABLE
; { #SCR(loading) | Rex loading screen. }
; TABLE#
@label=Loading screen
@label=DISPLAY_FILE
b$4000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ; {Graphics
 $4020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$40,$00,$00,$00,$00,$00,$00 ;
 $4040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$07,$00,$00,$00,$00,$00,$00,$00 ;
 $4060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$24,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4080 DEFB $00,$00,$EE,$1C,$F4,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $40A0 DEFB $00,$00,$77,$3C,$EE,$F3,$8E,$74,$98,$1C,$CE,$77,$A4,$00,$02,$20,$00,$00,$00,$84,$00,$00,$C9,$2C,$00,$0C,$00,$00,$00,$00,$00,$00 ;
 $40C0 DEFB $00,$00,$67,$39,$DD,$22,$5D,$C6,$00,$00,$00,$00,$00,$00,$10,$78,$00,$00,$40,$18,$00,$1C,$23,$80,$E0,$00,$80,$00,$00,$00,$00,$00 ;
 $40E0 DEFB $00,$00,$97,$B9,$D2,$E2,$17,$28,$00,$00,$00,$00,$00,$00,$22,$A0,$0A,$00,$21,$80,$03,$80,$10,$00,$45,$C0,$0F,$00,$00,$00,$00,$00 ;
 $4100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$C0,$00,$00,$00,$00,$00,$00 ;
 $4140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$05,$00,$00,$00,$00,$00,$00,$00 ;
 $4160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$04,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4180 DEFB $00,$00,$49,$12,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$00,$00,$08,$01,$F8,$00,$00,$00,$00,$00,$00,$00 ;
 $41A0 DEFB $00,$00,$84,$A1,$04,$84,$09,$26,$A4,$21,$29,$24,$34,$00,$04,$60,$00,$00,$01,$0E,$00,$01,$82,$0E,$00,$04,$00,$00,$00,$00,$00,$00 ;
 $41C0 DEFB $00,$00,$94,$92,$09,$A2,$49,$29,$00,$00,$00,$00,$00,$00,$09,$94,$00,$00,$AC,$30,$00,$30,$43,$48,$60,$00,$40,$00,$00,$00,$00,$00 ;
 $41E0 DEFB $00,$00,$94,$12,$12,$42,$10,$A8,$00,$00,$00,$00,$00,$00,$54,$20,$00,$00,$0B,$80,$06,$00,$38,$00,$8B,$E0,$1E,$00,$00,$00,$00,$00 ;
 $4200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$50,$C0,$00,$00,$00,$00,$00,$00 ;
 $4240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$8A,$00,$00,$00,$00,$00,$00,$00 ;
 $4260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$09,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4280 DEFB $00,$00,$49,$52,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$01,$00,$00,$14,$03,$D6,$00,$00,$00,$00,$00,$00,$00 ;
 $42A0 DEFB $00,$00,$84,$A1,$04,$84,$29,$25,$A4,$21,$29,$24,$2C,$00,$00,$00,$00,$00,$01,$14,$00,$03,$24,$22,$00,$02,$00,$00,$00,$00,$00,$00 ;
 $42C0 DEFB $00,$00,$94,$92,$09,$6A,$49,$29,$00,$00,$00,$00,$00,$00,$10,$20,$00,$00,$83,$20,$00,$60,$07,$94,$28,$00,$C0,$00,$00,$00,$00,$00 ;
 $42E0 DEFB $00,$00,$94,$12,$12,$4A,$00,$80,$00,$00,$00,$04,$00,$00,$E0,$08,$00,$00,$05,$00,$0C,$01,$30,$01,$15,$C0,$3E,$00,$00,$00,$00,$00 ;
 $4300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$00,$00,$00,$00,$00 ;
 $4320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$A1,$80,$00,$00,$00,$00,$00,$00 ;
 $4340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$66,$00,$00,$00,$00,$00,$00,$00 ;
 $4360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$A1,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4380 DEFB $00,$00,$49,$1C,$E3,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$48,$00,$00,$00,$25,$00,$00,$19,$06,$07,$80,$00,$00,$00,$00,$00,$00 ;
 $43A0 DEFB $00,$00,$67,$39,$04,$E3,$0E,$24,$A5,$99,$EE,$27,$24,$00,$0D,$C0,$00,$00,$02,$CC,$00,$03,$84,$46,$00,$01,$00,$00,$00,$00,$00,$00 ;
 $43C0 DEFB $00,$00,$97,$12,$C9,$23,$C9,$CF,$00,$00,$00,$00,$00,$00,$38,$1C,$60,$03,$00,$80,$00,$70,$87,$20,$0C,$00,$C0,$00,$00,$00,$00,$00 ;
 $43E0 DEFB $00,$00,$F7,$12,$DE,$43,$C3,$00,$00,$00,$00,$08,$00,$00,$8E,$00,$00,$00,$0A,$00,$0A,$06,$60,$00,$0B,$80,$FE,$00,$00,$00,$00,$00 ;
 $4400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$A0,$00,$00,$00,$00,$00,$00 ;
 $4420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$91,$80,$00,$00,$00,$00,$00,$00 ;
 $4440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$1C,$00,$00,$00,$00,$00,$00,$00 ;
 $4460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$52,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4480 DEFB $00,$00,$49,$52,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$90,$00,$00,$00,$23,$00,$00,$30,$0E,$01,$C0,$00,$00,$00,$00,$00,$00 ;
 $44A0 DEFB $00,$00,$14,$21,$04,$80,$A9,$24,$A4,$05,$28,$24,$24,$00,$08,$B0,$00,$00,$02,$28,$00,$06,$08,$63,$00,$03,$00,$00,$00,$00,$00,$00 ;
 $44C0 DEFB $00,$00,$94,$92,$49,$2A,$49,$29,$00,$00,$00,$00,$00,$00,$20,$26,$94,$06,$80,$40,$00,$C1,$0E,$20,$07,$01,$80,$00,$00,$00,$00,$00 ;
 $44E0 DEFB $00,$00,$94,$12,$52,$4A,$44,$00,$00,$00,$00,$0A,$00,$01,$1D,$00,$00,$00,$24,$00,$1C,$23,$50,$00,$56,$03,$FC,$00,$00,$00,$00,$00 ;
 $4500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$A0,$00,$00,$00,$00,$00,$00 ;
 $4520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$4B,$00,$00,$00,$00,$00,$00,$00 ;
 $4540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$19,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$3D,$80,$00,$00,$00,$00,$00,$00,$00 ;
 $4580 DEFB $00,$00,$49,$12,$84,$80,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$00,$00,$00,$42,$00,$00,$60,$0C,$04,$60,$00,$00,$00,$00,$00,$00 ;
 $45A0 DEFB $00,$00,$14,$21,$04,$80,$89,$24,$A4,$05,$28,$24,$24,$00,$0C,$50,$00,$00,$04,$00,$00,$0C,$08,$D3,$00,$00,$80,$00,$00,$00,$00,$00 ;
 $45C0 DEFB $00,$00,$94,$92,$49,$22,$49,$29,$00,$00,$00,$00,$00,$00,$30,$41,$8A,$19,$00,$E0,$01,$80,$0D,$00,$03,$83,$80,$80,$00,$00,$00,$00 ;
 $45E0 DEFB $00,$00,$94,$12,$52,$42,$44,$00,$00,$00,$00,$10,$00,$02,$90,$80,$04,$00,$88,$00,$30,$26,$E0,$00,$AD,$01,$EC,$00,$00,$00,$00,$00 ;
 $4600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$60,$00,$00,$00,$00,$00,$00 ;
 $4620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$27,$00,$00,$00,$00,$00,$00,$00 ;
 $4640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$32,$20,$00,$00,$00,$00,$00,$00,$00 ;
 $4660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$0F,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4680 DEFB $00,$00,$EE,$12,$F4,$80,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$00,$00,$00,$AC,$00,$00,$74,$8C,$01,$20,$00,$00,$00,$00,$00,$00 ;
 $46A0 DEFB $00,$00,$E4,$3C,$EE,$F7,$09,$74,$98,$39,$28,$77,$A4,$00,$18,$30,$00,$00,$18,$18,$00,$0C,$10,$E1,$80,$01,$00,$00,$00,$00,$00,$00 ;
 $46C0 DEFB $00,$00,$64,$B9,$DD,$22,$5D,$C9,$00,$00,$00,$00,$00,$00,$20,$01,$00,$68,$01,$40,$01,$C2,$1A,$00,$10,$FF,$01,$80,$00,$00,$00,$00 ;
 $46E0 DEFB $00,$00,$97,$B9,$D2,$43,$C7,$80,$00,$00,$00,$11,$00,$08,$20,$00,$00,$00,$00,$00,$38,$4C,$40,$00,$7A,$00,$F8,$00,$00,$00,$00,$00 ;
 $4700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$60,$00,$00,$00,$00,$00,$00 ;
 $4720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$88,$00,$00,$00,$00,$00,$00,$00 ;
 $4740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$72,$40,$00,$00,$00,$00,$00,$00,$00 ;
 $4760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$00,$00,$10,$00,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $4780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$E0,$00,$00,$00,$82,$00,$00,$C1,$0C,$00,$88,$00,$00,$00,$00,$00,$00 ;
 $47A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$00,$00,$00,$10,$28,$00,$19,$21,$C1,$C0,$00,$40,$00,$00,$00,$00,$00 ;
 $47C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$31,$C0,$00,$80,$02,$C0,$03,$04,$9C,$00,$02,$3C,$07,$00,$00,$00,$00,$00 ;
 $47E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$06,$70,$80,$02,$00,$00,$00,$60,$96,$C8,$02,$BC,$0F,$B8,$00,$00,$00,$00,$00 ;
 $4800 DEFB $00,$00,$8B,$DC,$E9,$71,$C8,$30,$00,$00,$00,$08,$00,$10,$C8,$00,$48,$02,$20,$00,$C0,$AC,$60,$05,$68,$3F,$78,$00,$00,$00,$00,$00 ;
 $4820 DEFB $00,$00,$E6,$12,$26,$00,$00,$00,$00,$00,$00,$08,$02,$00,$00,$00,$70,$2B,$86,$1E,$14,$92,$50,$7A,$3F,$DF,$80,$00,$00,$00,$00,$00 ;
 $4840 DEFB $00,$00,$8B,$9C,$EE,$64,$80,$00,$00,$00,$00,$06,$00,$2F,$20,$00,$00,$BD,$0D,$3C,$50,$48,$7C,$50,$A6,$04,$00,$00,$00,$00,$00,$00 ;
 $4860 DEFB $00,$00,$39,$E7,$77,$19,$10,$7D,$E9,$77,$48,$00,$40,$00,$00,$22,$AB,$A9,$D0,$8F,$11,$5A,$00,$24,$E0,$03,$80,$0C,$00,$00,$00,$00 ;
 $4880 DEFB $00,$00,$39,$91,$7B,$80,$00,$00,$00,$00,$00,$00,$68,$04,$00,$48,$AE,$0D,$2D,$21,$50,$C8,$51,$BE,$10,$1A,$93,$E0,$1C,$00,$00,$00 ;
 $48A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C1,$04,$9E,$81,$B7,$03,$54,$28,$20,$78,$67,$00,$01,$CE,$82,$C0,$00,$00,$00 ;
 $48C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$F7,$68,$0E,$34,$A2,$28,$01,$09,$23,$C0,$00,$00,$01,$7F,$46,$88,$00,$00,$00 ;
 $48E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$A0,$07,$05,$21,$00,$40,$10,$00,$70,$30,$25,$E7,$E5,$0B,$D0,$00,$00,$00 ;
 $4900 DEFB $00,$00,$8A,$09,$09,$20,$28,$48,$00,$00,$00,$10,$40,$30,$04,$00,$14,$00,$40,$00,$E1,$36,$62,$02,$F0,$1F,$F0,$00,$00,$00,$00,$00 ;
 $4920 DEFB $00,$00,$49,$1A,$29,$00,$00,$00,$00,$00,$00,$18,$05,$39,$02,$01,$E0,$9E,$09,$08,$26,$84,$2D,$07,$3F,$BF,$00,$00,$00,$00,$00,$00 ;
 $4940 DEFB $00,$00,$D9,$21,$04,$96,$80,$00,$00,$00,$00,$03,$40,$5D,$D0,$00,$00,$78,$1A,$16,$40,$8C,$FB,$03,$C7,$5C,$00,$00,$00,$00,$00,$00 ;
 $4960 DEFB $00,$00,$25,$08,$24,$A5,$10,$05,$0D,$22,$48,$00,$70,$00,$00,$49,$55,$C0,$EA,$17,$88,$CE,$01,$10,$E8,$05,$80,$1C,$00,$00,$00,$00 ;
 $4980 DEFB $00,$00,$12,$51,$42,$40,$00,$00,$00,$00,$00,$00,$70,$21,$10,$05,$5C,$1E,$1E,$90,$40,$40,$88,$CC,$00,$04,$48,$E0,$28,$00,$00,$00 ;
 $49A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$00,$45,$51,$C3,$91,$78,$00,$02,$B0,$58,$04,$40,$33,$41,$C0,$00,$00,$00 ;
 $49C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$DE,$C0,$BC,$38,$44,$34,$80,$00,$E1,$A0,$00,$00,$00,$AF,$B1,$58,$00,$00,$00 ;
 $49E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$D0,$45,$49,$91,$0A,$30,$00,$04,$30,$40,$02,$F2,$6F,$C5,$A0,$00,$00,$00 ;
 $4A00 DEFB $00,$00,$8A,$09,$09,$24,$2A,$4A,$80,$00,$00,$10,$10,$41,$C0,$00,$09,$02,$80,$01,$82,$54,$10,$15,$A0,$0F,$F0,$00,$00,$00,$00,$00 ;
 $4A20 DEFB $00,$00,$49,$56,$49,$00,$00,$00,$00,$00,$00,$0C,$0A,$C4,$04,$07,$C0,$2D,$04,$E4,$0D,$44,$1E,$DE,$7F,$FE,$00,$00,$00,$00,$00,$00 ;
 $4A40 DEFB $00,$00,$A9,$21,$04,$95,$80,$00,$00,$00,$00,$02,$00,$2B,$80,$00,$02,$F4,$34,$3C,$41,$01,$77,$A5,$8F,$F8,$00,$00,$00,$00,$00,$00 ;
 $4A60 DEFB $00,$00,$A5,$08,$24,$A4,$A0,$09,$0B,$22,$48,$00,$3A,$00,$00,$12,$AB,$81,$F1,$0D,$48,$17,$C8,$0D,$72,$A6,$80,$28,$00,$00,$00,$00 ;
 $4A80 DEFB $00,$00,$12,$51,$42,$40,$00,$00,$00,$00,$00,$00,$6A,$0A,$AA,$82,$BE,$18,$0F,$44,$A3,$20,$5C,$30,$00,$0A,$05,$E0,$58,$00,$00,$00 ;
 $4AA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$83,$17,$00,$B4,$4C,$01,$40,$A0,$00,$15,$0D,$A3,$80,$00,$00,$00 ;
 $4AC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$29,$25,$50,$60,$4E,$08,$21,$40,$50,$E0,$00,$00,$12,$17,$E8,$A8,$00,$00,$00 ;
 $4AE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$A2,$0E,$2A,$0A,$15,$24,$04,$00,$18,$80,$01,$A6,$A7,$02,$C0,$00,$00,$00 ;
 $4B00 DEFB $00,$00,$AB,$89,$6F,$20,$CF,$4A,$80,$00,$00,$18,$20,$63,$20,$10,$BE,$05,$20,$03,$C2,$46,$28,$4B,$C0,$3F,$00,$00,$00,$00,$00,$00 ;
 $4B20 DEFB $00,$00,$49,$12,$4F,$00,$00,$00,$00,$00,$00,$08,$01,$64,$08,$1F,$80,$56,$08,$90,$1A,$08,$27,$FC,$7F,$FC,$00,$00,$00,$00,$00,$00 ;
 $4B40 DEFB $00,$00,$89,$18,$C4,$94,$80,$00,$00,$00,$00,$03,$20,$95,$50,$00,$81,$68,$38,$9E,$22,$02,$EE,$8B,$0F,$F0,$00,$00,$00,$00,$00,$00 ;
 $4B60 DEFB $00,$00,$25,$C6,$27,$24,$40,$11,$C9,$22,$78,$00,$34,$00,$20,$24,$57,$40,$78,$0A,$88,$2D,$A2,$04,$A7,$F5,$80,$08,$00,$00,$00,$00 ;
 $4B80 DEFB $00,$00,$12,$51,$73,$80,$00,$00,$00,$00,$00,$00,$30,$15,$D5,$55,$74,$35,$8A,$A4,$09,$00,$A8,$00,$2A,$A0,$24,$E0,$B0,$00,$00,$00 ;
 $4BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$06,$3D,$06,$61,$C4,$78,$4A,$48,$E1,$40,$00,$02,$A2,$68,$40,$00,$00,$00 ;
 $4BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$04,$02,$A0,$E0,$90,$09,$00,$E0,$21,$40,$00,$00,$00,$4D,$FA,$A0,$00,$00,$00 ;
 $4BE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$00,$08,$19,$13,$04,$2F,$80,$00,$01,$0C,$00,$0A,$F3,$59,$91,$E0,$00,$00,$00 ;
 $4C00 DEFB $00,$00,$AA,$09,$29,$24,$22,$4A,$E0,$00,$00,$14,$50,$06,$01,$05,$62,$22,$90,$03,$04,$55,$10,$96,$90,$7E,$00,$00,$00,$00,$00,$00 ;
 $4C20 DEFB $00,$00,$49,$52,$49,$00,$00,$00,$00,$00,$00,$0C,$12,$B0,$84,$FF,$80,$3D,$09,$02,$14,$10,$09,$F0,$7F,$F8,$00,$00,$00,$00,$00,$00 ;
 $4C40 DEFB $00,$00,$89,$04,$24,$94,$80,$00,$00,$00,$00,$01,$90,$02,$80,$00,$42,$F2,$74,$AD,$22,$65,$CC,$26,$1F,$E1,$00,$00,$00,$00,$00,$00 ;
 $4C60 DEFB $00,$00,$A5,$01,$24,$A4,$40,$21,$09,$22,$48,$00,$19,$00,$50,$4A,$AD,$80,$B0,$87,$40,$5F,$44,$23,$05,$47,$C0,$78,$00,$00,$00,$00 ;
 $4C80 DEFB $00,$00,$12,$51,$42,$40,$00,$00,$00,$00,$00,$00,$2A,$62,$7C,$A2,$B8,$2A,$07,$C2,$30,$80,$1C,$00,$BF,$EA,$00,$59,$70,$00,$00,$00 ;
 $4CA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$51,$40,$F8,$87,$29,$A4,$7D,$22,$02,$A2,$80,$00,$15,$51,$94,$A0,$00,$00,$00 ;
 $4CC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$48,$28,$00,$C9,$38,$06,$90,$58,$10,$C0,$00,$05,$40,$12,$FC,$50,$00,$00,$00 ;
 $4CE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8F,$00,$18,$16,$04,$17,$0A,$00,$00,$5E,$00,$01,$65,$CE,$29,$D0,$00,$00,$00 ;
 $4D00 DEFB $00,$00,$AA,$09,$29,$20,$22,$4A,$A0,$00,$00,$10,$20,$80,$12,$4B,$80,$15,$40,$06,$85,$4A,$85,$2F,$18,$FC,$00,$00,$00,$00,$00,$00 ;
 $4D20 DEFB $00,$00,$4A,$12,$89,$00,$00,$00,$00,$00,$00,$0A,$04,$7C,$00,$3F,$00,$5E,$12,$9C,$38,$10,$2F,$48,$6D,$F0,$00,$00,$00,$00,$00,$00 ;
 $4D40 DEFB $00,$00,$89,$04,$24,$94,$80,$00,$00,$00,$00,$01,$D0,$05,$00,$00,$15,$E0,$21,$1E,$04,$73,$98,$9C,$3C,$01,$00,$00,$00,$00,$00,$00 ;
 $4D60 DEFB $00,$00,$25,$01,$24,$A4,$40,$41,$09,$22,$48,$00,$0E,$00,$72,$05,$57,$02,$78,$46,$84,$AE,$84,$55,$CA,$8D,$C0,$B8,$00,$00,$00,$00 ;
 $4D80 DEFB $00,$00,$12,$55,$42,$40,$00,$00,$00,$00,$00,$00,$11,$D0,$0D,$55,$60,$70,$07,$A1,$00,$40,$38,$0A,$C0,$1F,$40,$0C,$B0,$00,$00,$00 ;
 $4DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$B9,$CF,$E1,$0E,$D4,$C2,$1A,$11,$91,$C1,$00,$00,$02,$E8,$6D,$60,$00,$00,$00 ;
 $4DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$01,$A5,$50,$07,$44,$E8,$00,$40,$00,$29,$25,$05,$5F,$50,$00,$00,$00 ;
 $4DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$BE,$A0,$3A,$24,$08,$2F,$C4,$00,$00,$0A,$00,$02,$BB,$E3,$74,$E0,$00,$00,$00 ;
 $4E00 DEFB $00,$00,$53,$DC,$E9,$21,$C2,$32,$E0,$00,$00,$18,$08,$8F,$01,$16,$00,$2B,$80,$0F,$09,$23,$02,$5E,$1D,$FC,$00,$00,$00,$00,$00,$00 ;
 $4E20 DEFB $00,$00,$E5,$12,$89,$00,$00,$00,$00,$00,$00,$05,$00,$AF,$00,$0E,$00,$BD,$17,$0C,$B0,$22,$5F,$D0,$F9,$80,$00,$00,$00,$00,$00,$00 ;
 $4E40 DEFB $00,$00,$8B,$B9,$CE,$64,$80,$00,$00,$00,$00,$00,$80,$0A,$40,$00,$AB,$74,$1B,$8F,$14,$37,$02,$41,$38,$03,$00,$00,$00,$00,$00,$00 ;
 $4E60 DEFB $00,$00,$39,$EE,$24,$98,$40,$7D,$E9,$72,$48,$00,$19,$40,$20,$10,$AE,$86,$3D,$07,$40,$59,$42,$3E,$80,$2B,$D8,$F0,$04,$00,$00,$00 ;
 $4E80 DEFB $00,$00,$11,$8A,$7A,$40,$00,$00,$00,$00,$00,$00,$1B,$83,$D1,$EB,$D0,$D9,$03,$D0,$24,$42,$5C,$57,$3F,$E1,$E8,$08,$60,$00,$00,$00 ;
 $4EA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$12,$1B,$42,$8C,$10,$61,$0B,$13,$62,$A2,$00,$00,$09,$75,$12,$30,$00,$00,$00 ;
 $4EC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$34,$02,$01,$C2,$28,$03,$A3,$30,$00,$20,$03,$85,$C2,$A0,$3E,$30,$00,$00,$00 ;
 $4EE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$74,$00,$31,$48,$08,$5F,$52,$00,$00,$57,$00,$04,$71,$F1,$6A,$F0,$00,$00,$00 ;
 $4F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$14,$19,$80,$48,$00,$15,$44,$0C,$11,$22,$A1,$BD,$3F,$FF,$C0,$00,$00,$00,$00,$00 ;
 $4F20 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$01,$5F,$C0,$00,$00,$5A,$0E,$9A,$28,$44,$AF,$A1,$D3,$02,$00,$00,$00,$00,$00,$00 ;
 $4F40 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$E4,$01,$00,$00,$15,$C0,$C2,$1E,$91,$86,$04,$AA,$70,$01,$80,$04,$00,$00,$00,$00 ;
 $4F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$3C,$00,$00,$01,$5D,$06,$7A,$03,$A2,$14,$02,$7F,$00,$09,$C9,$70,$0C,$00,$00,$00 ;
 $4F80 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0E,$61,$86,$77,$20,$C3,$A5,$A8,$00,$34,$B0,$B8,$C0,$1E,$34,$11,$E0,$00,$00,$00 ;
 $4FA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$00,$FC,$15,$19,$24,$F0,$84,$8B,$05,$C0,$00,$00,$04,$FE,$8D,$10,$00,$00,$00 ;
 $4FC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$1A,$00,$03,$22,$A0,$81,$C0,$0A,$00,$60,$0C,$0B,$6B,$56,$1F,$A8,$00,$00,$00 ;
 $4FE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$AA,$08,$68,$C8,$12,$3F,$A0,$00,$00,$A9,$80,$00,$AB,$9E,$FD,$60,$00,$00,$00 ;
 $5000 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$D0,$00,$D0,$A4,$30,$1F,$70,$80,$00,$05,$40,$00,$75,$FF,$FA,$70,$00,$00,$00 ;
 $5020 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$04,$0E,$12,$42,$03,$92,$00,$00,$00,$0F,$AB,$00,$B6,$FF,$2E,$A2,$00,$00,$00 ;
 $5040 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$42,$34,$4F,$40,$41,$50,$00,$00,$10,$00,$00,$AB,$F4,$04,$40,$7E,$E0,$00,$00,$00 ;
 $5060 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$32,$10,$84,$09,$0A,$00,$40,$80,$40,$00,$00,$00,$00,$15,$DD,$15,$50,$00,$00,$00 ;
 $5080 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$86,$44,$30,$80,$2F,$FB,$00,$28,$00,$00,$08,$20,$00,$01,$11,$17,$4B,$00,$00,$00,$00 ;
 $50A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$8C,$2E,$00,$02,$00,$00,$01,$AA,$A0,$2B,$81,$40,$00,$00,$81,$00,$00,$00,$00,$00 ;
 $50C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$18,$41,$87,$00,$20,$20,$DC,$20,$40,$EC,$00,$05,$F0,$BC,$00,$00,$00,$00,$00,$00,$00,$00 ;
 $50E0 DEFB $00,$7E,$00,$00,$00,$00,$00,$00,$00,$02,$48,$69,$88,$00,$E8,$01,$72,$02,$0B,$C0,$00,$00,$14,$1E,$06,$0A,$A5,$10,$00,$00,$00,$00 ;
 $5100 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$A8,$00,$E8,$B4,$28,$A6,$D0,$00,$00,$0A,$A0,$00,$38,$F7,$EC,$20,$00,$00,$00 ;
 $5120 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$40,$18,$13,$24,$10,$C1,$00,$40,$00,$15,$DD,$A0,$C0,$FE,$59,$84,$00,$00,$00 ;
 $5140 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$82,$D0,$92,$40,$80,$20,$81,$00,$00,$00,$00,$15,$7E,$AA,$A0,$9D,$C8,$00,$00,$00 ;
 $5160 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$76,$4C,$88,$10,$24,$00,$2A,$40,$01,$04,$00,$08,$01,$01,$7A,$94,$80,$00,$00,$00 ;
 $5180 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$04,$C4,$09,$00,$5E,$A5,$80,$45,$58,$04,$08,$30,$00,$00,$08,$4A,$88,$80,$00,$00,$00 ;
 $51A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$40,$C3,$18,$00,$08,$00,$40,$02,$5F,$E0,$5F,$04,$80,$00,$00,$40,$40,$00,$00,$00,$00 ;
 $51C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$30,$01,$0A,$0A,$00,$00,$2E,$00,$10,$DA,$00,$0F,$81,$50,$10,$00,$00,$00,$00,$00,$00,$00 ;
 $51E0 DEFB $00,$81,$2E,$EE,$57,$77,$77,$50,$00,$05,$00,$D0,$80,$01,$50,$00,$1C,$02,$17,$A0,$00,$00,$00,$2E,$03,$00,$00,$00,$00,$00,$00,$00 ;
 $5200 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$40,$01,$81,$62,$45,$49,$A0,$40,$00,$21,$68,$00,$45,$E3,$DA,$A0,$00,$00,$00 ;
 $5220 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$A0,$34,$25,$08,$5C,$3F,$00,$80,$00,$02,$B5,$43,$3E,$1E,$B0,$C8,$00,$00,$00 ;
 $5240 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$47,$41,$52,$21,$04,$00,$54,$00,$41,$80,$00,$02,$BD,$55,$E8,$B8,$B0,$00,$00,$00 ;
 $5260 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$14,$64,$43,$10,$10,$00,$10,$00,$00,$00,$00,$00,$00,$40,$80,$AD,$13,$20,$00,$00,$00 ;
 $5280 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$45,$88,$27,$0A,$B5,$02,$80,$00,$08,$08,$38,$BC,$00,$00,$02,$05,$2B,$00,$00,$00,$00 ;
 $52A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$20,$80,$74,$3C,$30,$00,$80,$0A,$2B,$40,$BE,$0B,$C0,$00,$00,$82,$00,$00,$00,$00,$00 ;
 $52C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$54,$47,$16,$90,$00,$04,$02,$10,$A0,$EC,$00,$27,$80,$F0,$23,$0C,$63,$20,$00,$00,$00,$00 ;
 $52E0 DEFB $00,$9D,$2A,$AA,$75,$52,$44,$50,$00,$00,$11,$21,$80,$02,$00,$00,$2E,$05,$4D,$40,$12,$11,$10,$5C,$16,$00,$00,$00,$00,$00,$00,$00 ;
 $5300 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$81,$D2,$70,$40,$F1,$40,$20,$00,$88,$50,$00,$28,$DB,$F5,$40,$00,$00,$00 ;
 $5320 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$12,$01,$F8,$26,$08,$AA,$01,$00,$00,$00,$05,$ED,$E0,$C0,$E9,$7A,$E0,$00,$00,$00 ;
 $5340 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$47,$02,$14,$21,$0A,$80,$01,$00,$00,$80,$00,$01,$5F,$BB,$B4,$5D,$80,$00,$00,$00 ;
 $5360 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$C8,$80,$90,$20,$40,$00,$20,$40,$00,$11,$00,$02,$90,$24,$7B,$96,$50,$00,$00,$00 ;
 $5380 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$EB,$10,$41,$0F,$D0,$01,$00,$04,$04,$00,$71,$6C,$00,$00,$00,$49,$01,$00,$00,$00,$00 ;
 $53A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$40,$38,$FD,$E0,$00,$00,$04,$5F,$80,$70,$1F,$80,$00,$00,$50,$00,$00,$00,$00,$00 ;
 $53C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$D1,$27,$2D,$04,$07,$C0,$05,$01,$41,$D8,$00,$D3,$05,$D0,$35,$96,$B5,$90,$00,$00,$00,$00 ;
 $53E0 DEFB $00,$A1,$2E,$EE,$57,$62,$64,$70,$00,$04,$20,$00,$80,$05,$00,$00,$12,$02,$AA,$80,$00,$00,$00,$F0,$38,$02,$10,$80,$00,$00,$00,$00 ;
 $5400 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$00,$03,$0A,$40,$83,$7C,$20,$00,$00,$52,$28,$00,$1D,$BC,$EB,$80,$00,$00,$00 ;
 $5420 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0D,$0E,$60,$4C,$10,$54,$55,$00,$08,$00,$02,$FF,$D1,$00,$12,$FA,$60,$00,$00,$00 ;
 $5440 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$8E,$85,$24,$12,$21,$40,$80,$80,$04,$00,$00,$02,$17,$F5,$4A,$5A,$D0,$00,$00,$00 ;
 $5460 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$A8,$80,$20,$40,$00,$00,$10,$00,$00,$00,$00,$00,$45,$02,$2B,$08,$E8,$00,$00,$00 ;
 $5480 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$5A,$30,$82,$F6,$80,$25,$81,$0A,$AA,$00,$82,$B0,$00,$00,$00,$02,$42,$00,$00,$00,$00 ;
 $54A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$4A,$00,$E1,$F5,$B6,$00,$40,$10,$BE,$80,$F0,$2C,$06,$00,$00,$01,$00,$00,$00,$00,$00 ;
 $54C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$80,$1F,$7A,$20,$1F,$F0,$00,$08,$02,$F0,$00,$A0,$0B,$E0,$C3,$8E,$73,$90,$00,$00,$00,$00 ;
 $54E0 DEFB $00,$A1,$22,$AA,$55,$52,$44,$50,$00,$08,$01,$01,$40,$02,$00,$50,$05,$00,$00,$00,$00,$75,$51,$E0,$54,$00,$00,$00,$00,$00,$00,$00 ;
 $5500 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$80,$07,$84,$A0,$05,$EB,$00,$00,$00,$2D,$14,$00,$28,$CE,$E7,$C0,$00,$00,$00 ;
 $5520 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$22,$30,$50,$9A,$20,$A8,$00,$00,$00,$00,$04,$BB,$68,$00,$01,$7D,$10,$00,$00,$00 ;
 $5540 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$06,$08,$88,$22,$02,$54,$81,$3F,$00,$08,$20,$00,$01,$0A,$FF,$B4,$2F,$60,$00,$00,$00 ;
 $5560 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$51,$00,$20,$45,$10,$00,$0F,$E0,$00,$40,$00,$00,$0A,$A8,$5F,$89,$C4,$00,$00,$00 ;
 $5580 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$2D,$C0,$05,$D5,$40,$0E,$00,$00,$02,$01,$85,$F0,$00,$00,$00,$00,$20,$00,$00,$00,$00 ;
 $55A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$81,$C3,$C8,$57,$00,$00,$08,$5F,$00,$70,$5C,$0A,$00,$04,$10,$00,$00,$00,$00,$00 ;
 $55C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$05,$C0,$1D,$38,$00,$1D,$5E,$81,$04,$41,$E8,$00,$F2,$1F,$03,$70,$00,$00,$00,$00,$00,$00,$00 ;
 $55E0 DEFB $00,$9D,$22,$AA,$55,$52,$44,$50,$00,$02,$0A,$88,$00,$00,$01,$0A,$00,$00,$00,$00,$10,$22,$60,$C1,$79,$16,$A5,$90,$00,$00,$00,$00 ;
 $5600 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0C,$00,$06,$04,$80,$02,$FE,$80,$00,$00,$56,$8D,$00,$55,$ED,$CF,$A0,$00,$00,$00 ;
 $5620 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$C1,$A0,$94,$20,$54,$01,$00,$0A,$00,$10,$5F,$F0,$00,$04,$FA,$AA,$00,$00,$00 ;
 $5640 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$04,$1D,$54,$42,$04,$2A,$00,$40,$80,$00,$40,$00,$00,$14,$5F,$DA,$27,$70,$00,$00,$00 ;
 $5660 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$13,$B2,$40,$40,$80,$00,$00,$00,$10,$00,$85,$80,$00,$01,$15,$3F,$4B,$82,$00,$00,$00 ;
 $5680 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$08,$04,$A1,$0E,$A2,$02,$50,$00,$02,$00,$83,$8B,$80,$80,$00,$00,$40,$40,$00,$00,$00,$00 ;
 $56A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$0A,$04,$78,$A2,$90,$8A,$C0,$20,$00,$3D,$00,$40,$BC,$1D,$00,$21,$22,$00,$00,$00,$00,$00 ;
 $56C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$07,$21,$3D,$68,$00,$3A,$2B,$A2,$08,$03,$F0,$A8,$E5,$3F,$05,$E1,$9E,$E7,$10,$00,$00,$00,$00 ;
 $56E0 DEFB $00,$81,$22,$EE,$55,$52,$77,$50,$00,$11,$55,$00,$40,$10,$00,$00,$81,$00,$00,$00,$02,$55,$50,$02,$F2,$8A,$F7,$10,$00,$00,$00,$00 ;
 $5700 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$02,$0D,$08,$42,$15,$8F,$00,$00,$00,$1F,$5E,$80,$09,$73,$96,$40,$00,$00,$00 ;
 $5720 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$01,$0E,$11,$08,$42,$A0,$7F,$00,$02,$00,$01,$16,$BA,$11,$02,$F6,$70,$00,$00,$00 ;
 $5740 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$09,$19,$00,$44,$88,$45,$04,$00,$00,$00,$00,$00,$00,$0A,$AA,$EC,$2E,$E8,$00,$00,$00 ;
 $5760 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$03,$03,$62,$60,$40,$85,$7C,$00,$10,$10,$00,$07,$10,$00,$08,$4A,$AA,$89,$C0,$00,$00,$00 ;
 $5780 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$10,$00,$B0,$1D,$01,$00,$80,$80,$01,$00,$43,$17,$80,$C0,$00,$00,$00,$A0,$00,$00,$00,$00 ;
 $57A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$11,$00,$C3,$85,$00,$01,$70,$00,$08,$7E,$00,$02,$F8,$2E,$00,$02,$40,$00,$00,$00,$00,$00 ;
 $57C0 DEFB $00,$00,$00,$00,$00,$00,$00,$00,$00,$02,$92,$74,$B0,$80,$70,$02,$E5,$01,$85,$E0,$04,$F7,$3A,$07,$C0,$94,$52,$80,$00,$00,$00,$00 ;
 $57E0 DEFB $00,$7E,$00,$00,$00,$00,$00,$00,$00,$00,$00,$00,$A0,$00,$02,$00,$26,$00,$00,$00,$00,$00,$00,$07,$C1,$16,$A5,$90,$00,$00,$00,$00 ; }
@label=ATTRIBUTE_FILE
 $5800 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$45,$05,$47,$47,$47,$47,$47 ; {Attributes
 $5820 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$45,$47,$05,$47,$47,$47,$47,$47 ;
 $5840 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$47,$47,$04,$44,$45,$45,$47,$47,$47,$47,$47,$47 ;
 $5860 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$47,$47,$47,$47,$44,$44,$47,$46,$44,$45,$47,$47,$47,$47,$06,$47,$47 ;
 $5880 DEFB $47,$42,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$47,$47,$46,$44,$44,$46,$46,$47,$45,$45,$47,$47,$47,$06,$47,$47 ;
 $58A0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$47,$47,$44,$46,$44,$46,$05,$46,$45,$45,$45,$47,$47,$47,$47,$47 ;
 $58C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$04,$47,$47,$46,$44,$46,$44,$44,$46,$44,$46,$46,$45,$45,$47,$47,$47,$47,$47,$47,$47 ;
 $58E0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$47,$44,$46,$44,$44,$44,$46,$46,$46,$44,$46,$45,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5900 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$44,$44,$44,$44,$04,$06,$46,$44,$05,$05,$45,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5920 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$06,$44,$42,$42,$04,$46,$04,$44,$45,$45,$45,$47,$47,$47,$47,$47,$47,$47,$47 ;
 $5940 DEFB $47,$45,$45,$45,$45,$45,$45,$47,$47,$47,$47,$46,$46,$44,$44,$42,$04,$04,$06,$44,$04,$45,$45,$45,$47,$47,$45,$05,$47,$47,$47,$47 ;
 $5960 DEFB $47,$45,$45,$45,$45,$45,$45,$45,$45,$45,$45,$47,$46,$47,$04,$04,$04,$04,$44,$44,$04,$45,$45,$45,$45,$45,$45,$45,$45,$05,$47,$47 ;
 $5980 DEFB $47,$47,$45,$45,$45,$45,$45,$45,$45,$47,$47,$47,$46,$44,$04,$04,$04,$06,$44,$44,$04,$04,$44,$05,$05,$05,$45,$45,$45,$05,$47,$47 ;
 $59A0 DEFB $47,$47,$45,$45,$45,$45,$45,$47,$47,$47,$47,$47,$47,$46,$04,$04,$06,$04,$44,$04,$04,$04,$44,$05,$04,$04,$04,$45,$45,$45,$47,$47 ;
 $59C0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$46,$44,$44,$44,$06,$05,$44,$44,$04,$04,$44,$04,$05,$05,$04,$04,$45,$05,$47,$47 ;
 $59E0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$44,$44,$06,$05,$05,$05,$44,$04,$04,$44,$01,$05,$05,$05,$05,$04,$04,$47,$47 ;
 $5A00 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$45,$45,$06,$06,$05,$05,$05,$04,$42,$04,$04,$44,$05,$05,$05,$05,$04,$47,$47,$47 ;
 $5A20 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$47,$44,$45,$06,$06,$05,$05,$05,$05,$05,$42,$05,$04,$04,$44,$05,$05,$05,$45,$47,$47,$47 ;
 $5A40 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$46,$44,$06,$06,$45,$05,$05,$05,$05,$05,$42,$42,$47,$04,$04,$04,$04,$45,$45,$47,$47,$47 ;
 $5A60 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$05,$06,$44,$06,$05,$05,$05,$04,$05,$05,$05,$42,$42,$42,$04,$04,$04,$04,$04,$45,$47,$47,$47 ;
 $5A80 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$06,$05,$44,$44,$44,$44,$04,$05,$05,$42,$42,$42,$42,$42,$04,$04,$04,$45,$47,$47,$47 ;
 $5AA0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$05,$04,$44,$04,$04,$04,$05,$05,$05,$05,$02,$42,$42,$42,$04,$04,$04,$47,$47,$47,$47 ;
 $5AC0 DEFB $47,$47,$47,$47,$47,$47,$47,$47,$47,$06,$06,$05,$44,$04,$04,$04,$04,$05,$05,$05,$44,$02,$02,$42,$42,$02,$02,$02,$47,$47,$47,$47 ;
 $5AE0 DEFB $02,$02,$02,$02,$02,$02,$02,$02,$47,$05,$06,$05,$05,$04,$04,$04,$04,$05,$05,$05,$44,$42,$02,$02,$02,$02,$02,$02,$47,$47,$47,$47 ; }

; Unused
s$5B00 DEFS $60

; Rex projectile configuration
;
; Initialized at routine #R$9470
g$5B60 DEFS $01C2

; Enemy projectiles configuration for the current room
;
; Initialized at routine #R$9470.
; #TABLE(default)
; { =h Byte | =h Meaning }
; { 0x00 | x-position (in pixels) }
; { 0x01 | y-position (in pixels) }
; { 0x02 - 0x03 | Address of the location into the room graphic buffer }
; { 0x04 | x-delta (in pixels) }
; { 0x05 | y-delta (in pixels) }
; { 0x06 | Projectile status: $00 Destroyed - $01 Flying - $02 Impact 1 - $03
; Impact 2 }
; { 0x07 - 0x08 | Precomputed offset to add to address pointer into room
; graphic buffer every frame }
; { 0x0B | Projectile type: $00-$01 basic laser , $02 laser, $03 multiple, $04
; spray, $07 seed plant # Bit 7: subtype }
; { 0x0C | For $07: Seed plant trajectory index - For $02: Number of laser type
; $06 to create }
; { 0x0D | x-position for laser type $06 }
; { =r2 0x0E | For projectile type $00 (laser): Laser duration counter -
; Destroy laser at $00 }
; { projectile type $07 (seed plant): Seed Plant index into address for
; trajectories at #R$AA47  }
; TABLE#
g$5D22 DEFS $012C

; Drones configuration for multiple weapon
;
; Initialized at routine #R$A793. Three bytes for every drone. 8 drones max.
; Byte $00 - x-position of drone Byte $01 - y-position of drone Byte $02 -
; index into the offset position table for the drone
g$5E4E DEFS $18

; Data buffer for the state of every enemy on screen
;
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00 | X position }
; { 0x01 | Y position }
; { 0x02 | Bit 0: reverse sprite if set - Enemy direction $00 left $01 right }
; { 0x03 | $00 FOOT MAN not jumping - $01 FOOT MAN jumping ; For Enemy type $FF
; (EXPLOSION) debris expansion counter }
; { 0x04 - 0x05 | Address pointer to graphic data for static (non-animated)
; sprites - y-offset address pointer for FOOT MAN jumping - x-delta and y-delta
; for TRIANGLE movement }
; { 0x06 | FOOT MAN Falling speed? $00 Not falling  - $02 - $04 }
; { 0x07 | $00 Not used }
; { 0x08 | $00 Not used }
; { =r3 0x09 | Bit 7: 1 - graphic data for fixed (non animated) sprite.
; Computed by: address at 0x04-0x05 }
; {                   0 - graphic data from animated sprite. Computed by: base
; graphic data address at 0x0A-0x0B + offset of animation from base address at
; 0x16-0x17 }
; {            Bit 6-0: enemy type -> $00 FOOT MAN , $FF Explosion, $FE Bubble,
; $FD Smartbomb, $FC Question }
; { 0x0A - 0x0B | Address pointer to animation offset table }
; { 0x0C | Enemy status $00 dead / $01 alive }
; { 0x0D | Explosion counter (decrement)) }
; { 0x0E | Width of the sprite (in bytes) }
; { 0x0F | Height of the sprite (in pixels) }
; { 0x10 | Enemy speed velocity ($00 stopped). For Bubble: bubble y-position
; counter offset }
; { =r9 0x11 | Enemy type: }
; { 0x00 (FOOTMAN) - Counter for state change duration: $C8 fixed crouched }
; { 0x02 (DROP) - Drop state: $00 standing on ceil $01 hanging from ceil $02
; free falling $03 impacting ground $04 on ground }
; { 0x03 (BRAIN) - Wound counter: $00 100% health }
; { 0x04 (PINE) - Movement direction: $00 Downwards $01 upwards }
; { 0x05 (PLANT) - PLANT state: $00 standing-by $01 opening $02 closing }
; { 0x09 (BULB) - State indicator $00 stand-by $01 expanding $02 retracting }
; { 0x0E (TRIANGLE) - State change counter }
; { 0xFE (BUBBLE) - Bubble duration counter }
; { =r9 0x12 | Enemy type: }
; { 0x00 (FOOTMAN): $00 walking - $01 crouched - $02 stand-by }
; { 0x02 (DROP) - State change counter }
; { 0x03 (BRAIN) - Recover counter }
; { 0x04 (PINE) - Animation state: $00 stand-by $02 expanding $03 retracting
; $04 holding }
; { 0x05 (PLANT) - State change counter }
; { 0x09 (BULB) - State change counter }
; { 0x0E (TRIANGLE) - Change movement direction: $00 no change $01 change
; direction }
; { 0xFE (BUBBLE) - MSB of address graphic data }
; { =r2 0x13 | 0xFE (BUBBLE) LSB of address graphic data }
; { 0x04 (PINE) state change counter }
; { 0x14 | Enemy health }
; { 0x15 | Energy bubble $01 big / $00 small / $FF no bubble }
; { 0x16 - 0x17 | Address pointer to graphic data for animated sprites }
; { 0x18 | Teleporting status for FOOT MAN: $00 teleporting inactive $01
; teleporting active }
; { 0x19 | Teleporting index into table of mask teleporting data }
; { 0x1A | Teleporting type: $00 Teleporting out of the room $01 teleporting
; into the room }
; TABLE#
g$5E66 DEFS $0180

; Stack (SP = $6190 at init game )
g$5FE6 DEFS $01AA

; Unused
s$6190 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6198 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $61A8 DEFB $F5,$3E,$FF,$D3,$7F,$D3,$3F,$3E
 $61B0 DEFB $3F,$D3,$7F,$3C,$32,$E2,$61,$3E
 $61B8 DEFB $FF,$D3,$5F,$D3,$5F,$F1,$F3,$22
 $61C0 DEFB $F8,$62,$ED,$73,$FC,$62,$E1,$22
 $61C8 DEFB $FA,$62,$31,$F8,$62,$D5,$C5,$D9
 $61D0 DEFB $E5,$D5,$C5,$DD,$E5,$FD,$E5,$F5
 $61D8 DEFB $ED,$57,$67,$ED,$5F,$6F,$E5,$08
 $61E0 DEFB $F5,$16,$40,$CD,$C3,$62,$7B,$FE
 $61E8 DEFB $B4,$28,$2D,$FE,$BA,$CA,$89,$62
 $61F0 DEFB $FE,$B8,$28,$4A,$FE,$B9,$28,$4E
 $61F8 DEFB $FE,$B7,$28,$38,$FE,$B6,$28,$4E
 $6200 DEFB $FE,$B5,$20,$DF,$CD,$C3,$62,$63
 $6208 DEFB $CD,$C3,$62,$6B,$22,$BE,$62,$21
 $6210 DEFB $00,$CD,$22,$BC,$62,$C3,$9F,$62
 $6218 DEFB $CD,$C3,$62,$63,$CD,$C3,$62,$6B
 $6220 DEFB $CD,$C3,$62,$43,$CD,$C3,$62,$4B
 $6228 DEFB $CD,$C3,$62,$73,$23,$0B,$78,$B1
 $6230 DEFB $20,$F6,$18,$AF,$CD,$C3,$62,$01
 $6238 DEFB $FD,$7F,$ED,$59,$18,$A5,$21,$E4
 $6240 DEFB $62,$01,$1A,$00,$18,$18,$21,$E4
 $6248 DEFB $62,$01,$1A,$00,$18,$DA,$CD,$C3
 $6250 DEFB $62,$63,$CD,$C3,$62,$6B,$CD,$C3
 $6258 DEFB $62,$43,$CD,$C3,$62,$4B,$DB,$3F
 $6260 DEFB $AA,$0F,$38,$FA,$3E,$FF,$D3,$5F
 $6268 DEFB $3C,$D3,$5F,$7A,$EE,$41,$57,$7E
 $6270 DEFB $CD,$D3,$62,$23,$0B,$78,$B1,$20
 $6278 DEFB $F6,$3D,$D3,$5F,$D3,$5F,$7A,$EE
 $6280 DEFB $40,$D3,$3F,$EE,$80,$57,$C3,$E3
 $6288 DEFB $61,$CD,$C3,$62,$6B,$CD,$C3,$62
 $6290 DEFB $63,$22,$BC,$62,$CD,$C3,$62,$6B
 $6298 DEFB $CD,$C3,$62,$63,$22,$BE,$62,$7A
 $62A0 DEFB $32,$E2,$61,$F1,$08,$E1,$7C,$ED
 $62A8 DEFB $47,$7D,$ED,$4F,$F1,$FD,$E1,$DD
 $62B0 DEFB $E1,$C1,$D1,$E1,$D9,$C1,$D1,$E1
 $62B8 DEFB $ED,$7B,$FC,$62,$00,$CD,$C6,$D6
 $62C0 DEFB $C3,$BE,$61,$DB,$3F,$AA,$0F,$38
 $62C8 DEFB $FA,$DB,$1F,$5F,$7A,$D3,$3F,$EE
 $62D0 DEFB $81,$57,$C9,$D3,$1F,$7A,$D3,$3F
 $62D8 DEFB $EE,$81,$57,$DB,$3F,$AA,$0F,$30
 $62E0 DEFB $FA,$C9,$0B,$62,$78,$08,$07,$00
 $62E8 DEFB $54,$A8,$3A,$5C,$C0,$E2,$FD,$7F
 $62F0 DEFB $9B,$36,$58,$27,$A8,$61,$34,$5D
 $62F8 DEFB $2B,$2D,$2B,$2D,$90,$61,$00,$00
 $6300 DEFB $00,$00,$00,$00,$00,$00

; Charset and ui graphics
;
; Base address for charset and ui graphics begins at $6206, but $20 first chars
; are not used
b$6306 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$6306,$47
 $630E DEFB $1C,$1C,$1C,$1C,$1C,$00,$1C,$00 ; #UDG$630E,$47
 $6316 DEFB $00,$00,$7B,$63,$7B,$0B,$78,$00 ; #UDG$6316,$47
 $631E DEFB $00,$7E,$3E,$7E,$3E,$5E,$00,$00 ; #UDG$631E,$47
 $6326 DEFB $00,$00,$63,$63,$7B,$6B,$78,$00 ; #UDG$6326,$47
 $632E DEFB $00,$00,$7B,$1B,$1B,$1B,$18,$00 ; #UDG$632E,$47
 $6336 DEFB $00,$00,$7B,$6B,$7B,$6B,$78,$00 ; #UDG$6336,$47
 $633E DEFB $00,$00,$7B,$6B,$7B,$0B,$08,$00 ; #UDG$633E,$47
 $6346 DEFB $00,$7E,$7C,$7E,$7C,$7E,$54,$00 ; #UDG$6346,$47
 $634E DEFB $00,$7E,$7C,$7E,$7C,$7E,$54,$00 ; #UDG$634E,$47
 $6356 DEFB $00,$3E,$5C,$6E,$34,$5A,$54,$00 ; #UDG$6356,$47
 $635E DEFB $00,$7E,$7C,$7E,$7C,$7E,$54,$00 ; #UDG$635E,$47
 $6366 DEFB $00,$00,$FF,$FF,$FF,$55,$00,$00 ; #UDG$6366,$47
 $636E DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$636E,$47
 $6376 DEFB $02,$06,$0C,$18,$30,$60,$40,$00 ; #UDG$6376,$47
 $637E DEFB $00,$00,$55,$FF,$00,$AA,$00,$00 ; #UDG$637E,$47
 $6386 DEFB $7E,$62,$62,$22,$6A,$22,$5E,$00 ; #UDG$6386,$47
 $638E DEFB $18,$08,$10,$18,$18,$18,$18,$00 ; #UDG$638E,$47
 $6396 DEFB $7E,$02,$02,$7E,$20,$40,$7E,$00 ; #UDG$6396,$47
 $639E DEFB $7E,$06,$06,$3E,$02,$04,$7E,$00 ; #UDG$639E,$47
 $63A6 DEFB $60,$22,$42,$7E,$02,$02,$02,$00 ; #UDG$63A6,$47
 $63AE DEFB $7E,$20,$40,$7E,$02,$02,$7E,$00 ; #UDG$63AE,$47
 $63B6 DEFB $60,$60,$60,$3E,$62,$22,$5E,$00 ; #UDG$63B6,$47
 $63BE DEFB $7E,$06,$06,$06,$02,$04,$06,$00 ; #UDG$63BE,$47
 $63C6 DEFB $7E,$62,$62,$7E,$62,$22,$5E,$00 ; #UDG$63C6,$47
 $63CE DEFB $7E,$22,$42,$7E,$02,$02,$02,$00 ; #UDG$63CE,$47
 $63D6 DEFB $00,$00,$00,$18,$00,$00,$00,$00 ; #UDG$63D6,$47
 $63DE DEFB $38,$3C,$38,$3C,$38,$3C,$38,$3C ; #UDG$63DE,$47
 $63E6 DEFB $10,$34,$10,$34,$10,$34,$10,$34 ; #UDG$63E6,$47
 $63EE DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$63EE,$47
 $63F6 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; #UDG$63F6,$47
 $63FE DEFB $7E,$7E,$3E,$7E,$7E,$3E,$5E,$00 ; #UDG$63FE,$47
 $6406 DEFB $00,$00,$63,$63,$7B,$1B,$18,$00 ; #UDG$6406,$47
 $640E DEFB $7E,$62,$62,$7E,$62,$22,$62,$00 ; #UDG$640E,$47
 $6416 DEFB $7C,$62,$62,$7C,$62,$22,$5C,$00 ; #UDG$6416,$47
 $641E DEFB $7E,$60,$60,$60,$60,$20,$5E,$00 ; #UDG$641E,$47
 $6426 DEFB $7C,$62,$62,$22,$62,$22,$5C,$00 ; #UDG$6426,$47
 $642E DEFB $7E,$60,$60,$7C,$60,$20,$5E,$00 ; #UDG$642E,$47
 $6436 DEFB $7E,$60,$60,$7C,$60,$20,$60,$00 ; #UDG$6436,$47
 $643E DEFB $7E,$60,$60,$66,$62,$22,$5E,$00 ; #UDG$643E,$47
 $6446 DEFB $62,$62,$7E,$62,$62,$22,$62,$00 ; #UDG$6446,$47
 $644E DEFB $7E,$18,$18,$08,$10,$18,$7E,$00 ; #UDG$644E,$47
 $6456 DEFB $7E,$06,$02,$04,$06,$06,$3C,$00 ; #UDG$6456,$47
 $645E DEFB $62,$64,$68,$60,$68,$24,$62,$00 ; #UDG$645E,$47
 $6466 DEFB $60,$60,$60,$20,$60,$20,$5E,$00 ; #UDG$6466,$47
 $646E DEFB $62,$76,$7E,$6A,$22,$42,$62,$00 ; #UDG$646E,$47
 $6476 DEFB $62,$72,$7A,$6E,$66,$62,$62,$00 ; #UDG$6476,$47
 $647E DEFB $7E,$62,$62,$62,$62,$22,$5E,$00 ; #UDG$647E,$47
 $6486 DEFB $7E,$62,$62,$7E,$60,$20,$60,$00 ; #UDG$6486,$47
 $648E DEFB $7E,$62,$62,$62,$62,$26,$5E,$00 ; #UDG$648E,$47
 $6496 DEFB $7C,$62,$62,$74,$78,$2C,$66,$00 ; #UDG$6496,$47
 $649E DEFB $7E,$20,$40,$7E,$02,$02,$7E,$00 ; #UDG$649E,$47
 $64A6 DEFB $7E,$18,$18,$18,$08,$10,$18,$00 ; #UDG$64A6,$47
 $64AE DEFB $62,$62,$62,$22,$62,$22,$5E,$00 ; #UDG$64AE,$47
 $64B6 DEFB $62,$22,$42,$62,$76,$3C,$18,$00 ; #UDG$64B6,$47
 $64BE DEFB $62,$62,$62,$6A,$7E,$36,$62,$00 ; #UDG$64BE,$47
 $64C6 DEFB $42,$66,$3C,$18,$3C,$66,$42,$00 ; #UDG$64C6,$47
 $64CE DEFB $62,$36,$1C,$18,$30,$60,$40,$00 ; #UDG$64CE,$47
 $64D6 DEFB $5E,$06,$0C,$18,$30,$60,$7E,$00 ; #UDG$64D6,$47
 $64DE DEFB $00,$3C,$7E,$72,$72,$72,$30,$00 ; #UDG$64DE,$47
 $64E6 DEFB $00,$00,$DE,$5A,$5A,$DE,$00,$00 ; #UDG$64E6,$47
 $64EE DEFB $00,$00,$1B,$1B,$1B,$1B,$18,$00 ; #UDG$64EE,$47
 $64F6 DEFB $00,$00,$7B,$0B,$7B,$63,$78,$00 ; #UDG$64F6,$47
 $64FE DEFB $00,$00,$7B,$1B,$3B,$1B,$78,$00 ; #UDG$64FE,$47

; Tile collision behaviour
;
; Every tile has an associated byte value, indicating the action to execute if
; Rex, an enemy or a shot collides with it.
; #TABLE(default)
; { =h Value | =h Action }
; { 0x00 | Decorative tile. Anyone can pass trough it. The tile is drawn over
; Rex or the enemy }
; { 0x01 | Platform tile. Anyone can walk over it and pass trought it if jumped
; from below }
; { 0x02 | Wall tile (solid). Nobody can move trough this tile }
; { 0x03 | Rex or enemy killed on contact }
; { 0x04 | FINAL BOSS tile - Hit this tile to destroy FINAL BOSS }
; { 0x05 | Used in game but no special behaviour }
; { 0x06 | Used in game but no special behaviour }
; { 0x07 | Respawn activated }
; { 0x08 | Shield recharging }
; { 0x09 | Not used in game }
; { 0x0A | Not used in game }
; { 0x0B | Not used in game }
; { 0x0C | Not used in game }
; { 0x0D | Not used in game }
; { 0x0E | Not used in game }
; { 0x0F | Enemy always jump (J) }
; { 0x10 | Enemy can crouch and fire (RD) }
; { 0x11 | Enemy can jump (RJ) }
; { 0x12 | Elevator }
; { 0x13 | Not used in game }
; { 0x14 | Not used in game }
; { 0x15 | Random teleporting of FOOT MAN out of the room }
; { 0x16 | Forced teleporting of FOOT MAN out of the room }
; TABLE#
b$6506 DEFB $00,$00,$03,$03,$03,$03,$02,$02
 $650E DEFB $02,$01,$01,$01,$01,$01,$03,$03
 $6516 DEFB $10,$00,$03,$03,$03,$03,$00,$00
 $651E DEFB $01,$01,$01,$00,$03,$01,$01,$03
 $6526 DEFB $00,$01,$03,$03,$03,$03,$03,$12
 $652E DEFB $01,$01,$01,$00,$03,$01,$03,$03
 $6536 DEFB $00,$00,$00,$00,$00,$03,$02,$03
 $653E DEFB $00,$00,$01,$03,$03,$01,$03,$03
 $6546 DEFB $00,$03,$03,$03,$00,$03,$03,$03
 $654E DEFB $03,$01,$07,$07,$01,$03,$03,$01
 $6556 DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $655E DEFB $03,$03,$00,$00,$00,$00,$00,$00
 $6566 DEFB $01,$00,$03,$00,$00,$03,$03,$03
 $656E DEFB $03,$03,$03,$01,$00,$00,$05,$03
 $6576 DEFB $03,$01,$03,$03,$02,$04,$03,$03
 $657E DEFB $03,$00,$12,$00,$12,$00,$00,$03
 $6586 DEFB $02,$0F,$03,$00,$00,$03,$03,$03
 $658E DEFB $03,$03,$03,$06,$02,$03,$03,$03
 $6596 DEFB $02,$12,$03,$01,$00,$15,$16,$01
 $659E DEFB $03,$03,$03,$03,$02,$03,$00,$00
 $65A6 DEFB $02,$02,$02,$02,$02,$01,$02,$01
 $65AE DEFB $03,$03,$03,$03,$00,$03,$03,$00
 $65B6 DEFB $03,$02,$02,$02,$00,$02,$01,$04
 $65BE DEFB $03,$03,$03,$03,$00,$03,$03,$03
 $65C6 DEFB $02,$02,$02,$02,$02,$03,$0F,$03
 $65CE DEFB $03,$03,$03,$03,$03,$03,$03,$03
 $65D6 DEFB $02,$02,$03,$02,$03,$03,$11,$03
 $65DE DEFB $03,$03,$03,$03,$03,$03,$01,$03
 $65E6 DEFB $01,$01,$01,$02,$03,$03,$02,$02
 $65EE DEFB $02,$03,$03,$03,$03,$03,$01,$01
 $65F6 DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $65FE DEFB $00,$00,$08,$08,$00,$00,$00,$00

; Tiles graphic data
;
; Every 8 byte respresent the sprite for a tile. There are 256 tiles. The
; attribute data for every sprite is defined in #R$6E06 #TILETABLE(0,32)
; #TILETABLE(32,32) #TILETABLE(64,32) #TILETABLE(96,32) #TILETABLE(128,32)
; #TILETABLE(160,32) #TILETABLE(192,32) #TILETABLE(224,32)
b$6606 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $660E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6616 DEFB $30,$30,$F0,$E0,$87,$1F,$38,$30
 $661E DEFB $00,$38,$44,$43,$42,$A7,$DF,$4F
 $6626 DEFB $50,$47,$18,$90,$F0,$48,$1D,$FF
 $662E DEFB $10,$C4,$72,$32,$16,$25,$48,$C0
 $6636 DEFB $00,$0B,$00,$40,$41,$40,$22,$00
 $663E DEFB $00,$BB,$00,$AF,$57,$AF,$55,$00
 $6646 DEFB $00,$F0,$00,$FE,$FE,$FE,$54,$00
 $664E DEFB $FF,$80,$BF,$B0,$B5,$B0,$B4,$B0
 $6656 DEFB $00,$2A,$7F,$2A,$00,$57,$00,$2A
 $665E DEFB $00,$00,$00,$00,$4C,$2C,$0C,$00
 $6666 DEFB $00,$44,$10,$00,$2A,$54,$2A,$00
 $666E DEFB $7C,$7A,$7C,$7A,$7C,$7A,$7C,$7A
 $6676 DEFB $00,$00,$40,$62,$30,$18,$38,$32
 $667E DEFB $45,$06,$0C,$0E,$07,$21,$00,$08
 $6686 DEFB $00,$60,$50,$66,$55,$05,$06,$00
 $668E DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $6696 DEFB $65,$7A,$3D,$0D,$06,$07,$03,$03
 $669E DEFB $2B,$37,$33,$17,$1E,$3D,$F8,$E0
 $66A6 DEFB $FE,$BC,$5A,$BD,$D9,$75,$FB,$F3
 $66AE DEFB $3E,$27,$81,$DC,$AA,$9C,$7A,$3D
 $66B6 DEFB $00,$9D,$AD,$9D,$AD,$9D,$AD,$00
 $66BE DEFB $FF,$03,$07,$03,$07,$03,$07,$FF
 $66C6 DEFB $46,$4E,$46,$4E,$46,$4E,$46,$4E
 $66CE DEFB $00,$E3,$E3,$E3,$EB,$EB,$E3,$EB
 $66D6 DEFB $00,$88,$00,$8A,$51,$00,$AA,$55
 $66DE DEFB $5C,$04,$14,$10,$7C,$00,$00,$00
 $66E6 DEFB $C0,$98,$6E,$1F,$3F,$73,$61,$30
 $66EE DEFB $C1,$6C,$BE,$9B,$37,$63,$CE,$16
 $66F6 DEFB $3C,$8E,$C6,$6C,$18,$11,$36,$3A
 $66FE DEFB $66,$43,$23,$12,$E1,$77,$3F,$1D
 $6706 DEFB $56,$5E,$56,$5E,$00,$BF,$B7,$00
 $670E DEFB $6A,$78,$68,$6A,$2E,$68,$24,$24
 $6716 DEFB $38,$38,$38,$1D,$1F,$0F,$02,$00
 $671E DEFB $B8,$9E,$F8,$A0,$81,$11,$38,$39
 $6726 DEFB $17,$4E,$DC,$CD,$9C,$2E,$57,$28
 $672E DEFB $7A,$F4,$E8,$F5,$AA,$12,$84,$08
 $6736 DEFB $10,$31,$63,$ED,$CB,$E8,$71,$78
 $673E DEFB $00,$4B,$00,$4B,$45,$4B,$45,$00
 $6746 DEFB $02,$5A,$00,$5A,$02,$18,$42,$1A
 $674E DEFB $1C,$14,$55,$96,$5D,$D7,$DF,$1C
 $6756 DEFB $00,$7F,$41,$3E,$22,$95,$2A,$00
 $675E DEFB $0C,$2D,$00,$AD,$00,$AD,$00,$55
 $6766 DEFB $74,$68,$68,$73,$3F,$1C,$C8,$F0
 $676E DEFB $E0,$AC,$1E,$3A,$1A,$C6,$E4,$38
 $6776 DEFB $00,$00,$06,$0F,$0D,$0C,$06,$06
 $677E DEFB $00,$0F,$1F,$18,$30,$20,$30,$18
 $6786 DEFB $08,$00,$1C,$00,$08,$00,$3E,$00
 $678E DEFB $30,$3C,$0C,$18,$30,$30,$1C,$0E
 $6796 DEFB $18,$18,$6C,$EE,$87,$81,$7C,$34
 $679E DEFB $50,$48,$A8,$64,$14,$28,$00,$00
 $67A6 DEFB $80,$0C,$9E,$8E,$98,$18,$1C,$0E
 $67AE DEFB $60,$70,$30,$70,$E3,$D7,$3E,$CC
 $67B6 DEFB $00,$40,$00,$40,$00,$40,$00,$40
 $67BE DEFB $00,$00,$00,$00,$80,$E0,$70,$30
 $67C6 DEFB $79,$3C,$69,$2C,$69,$3C,$79,$00
 $67CE DEFB $00,$42,$BD,$00,$DB,$00,$5A,$42
 $67D6 DEFB $00,$43,$00,$65,$00,$20,$10,$04
 $67DE DEFB $06,$0E,$0C,$19,$19,$0F,$06,$00
 $67E6 DEFB $1E,$18,$38,$30,$39,$1D,$0E,$00
 $67EE DEFB $86,$8E,$DC,$7A,$26,$0C,$18,$0C
 $67F6 DEFB $3C,$0E,$C6,$37,$13,$E7,$EC,$2E
 $67FE DEFB $01,$01,$33,$FA,$9C,$0E,$96,$8E
 $6806 DEFB $10,$00,$38,$00,$10,$00,$78,$00
 $680E DEFB $39,$59,$5E,$27,$33,$70,$70,$39
 $6816 DEFB $1B,$5C,$AC,$99,$F9,$73,$8A,$02
 $681E DEFB $E1,$58,$A2,$9D,$26,$06,$0E,$1C
 $6826 DEFB $40,$9C,$49,$F1,$52,$E4,$64,$A8
 $682E DEFB $60,$38,$1C,$1C,$78,$E0,$C0,$00
 $6836 DEFB $0C,$12,$11,$01,$07,$0E,$18,$1C
 $683E DEFB $E0,$88,$7C,$FE,$E7,$83,$07,$1C
 $6846 DEFB $C0,$60,$68,$C0,$00,$00,$00,$00
 $684E DEFB $18,$34,$34,$99,$A5,$18,$3C,$18
 $6856 DEFB $00,$5F,$5E,$01,$2B,$02,$11,$10
 $685E DEFB $00,$FE,$7E,$80,$DC,$C0,$88,$08
 $6866 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $686E DEFB $1C,$36,$23,$21,$30,$1E,$07,$01
 $6876 DEFB $10,$07,$8A,$3C,$67,$83,$1C,$46
 $687E DEFB $8E,$36,$EC,$EC,$67,$03,$D9,$08
 $6886 DEFB $00,$4C,$58,$38,$30,$38,$1C,$04
 $688E DEFB $00,$0E,$1F,$33,$41,$00,$18,$00
 $6896 DEFB $83,$13,$C1,$E0,$70,$60,$60,$C0
 $689E DEFB $8E,$BC,$F8,$64,$0E,$86,$86,$4C
 $68A6 DEFB $00,$00,$C2,$E0,$74,$60,$70,$E0
 $68AE DEFB $00,$00,$00,$00,$38,$7C,$CE,$86
 $68B6 DEFB $00,$80,$80,$40,$70,$08,$0C,$06
 $68BE DEFB $00,$10,$60,$40,$E0,$E0,$78,$1C
 $68C6 DEFB $04,$02,$06,$0C,$4C,$A6,$37,$3E
 $68CE DEFB $08,$38,$20,$30,$08,$00,$00,$00
 $68D6 DEFB $00,$30,$32,$35,$32,$35,$22,$00
 $68DE DEFB $00,$00,$7F,$7F,$7F,$7F,$7F,$00
 $68E6 DEFB $00,$00,$58,$10,$58,$10,$58,$00
 $68EE DEFB $3A,$3D,$3A,$3D,$3A,$3D,$3A,$3D
 $68F6 DEFB $40,$00,$40,$00,$40,$00,$40,$00
 $68FE DEFB $80,$50,$80,$50,$80,$50,$80,$50
 $6906 DEFB $00,$8F,$97,$8F,$97,$8F,$97,$00
 $690E DEFB $00,$4E,$56,$4E,$56,$4E,$56,$00
 $6916 DEFB $02,$42,$76,$3C,$40,$78,$0C,$04
 $691E DEFB $00,$00,$00,$00,$00,$00,$C0,$E0
 $6926 DEFB $D0,$70,$69,$1F,$0E,$00,$00,$00
 $692E DEFB $18,$38,$32,$39,$3A,$1C,$1E,$0E
 $6936 DEFB $03,$03,$07,$07,$0C,$0E,$0F,$07
 $693E DEFB $1C,$2E,$27,$57,$4F,$8E,$9E,$1C
 $6946 DEFB $08,$10,$08,$04,$0C,$18,$98,$D0
 $694E DEFB $2C,$C8,$99,$D1,$33,$63,$5E,$88
 $6956 DEFB $02,$04,$0C,$18,$38,$24,$64,$62
 $695E DEFB $00,$7E,$56,$00,$FF,$AA,$55,$00
 $6966 DEFB $00,$23,$25,$23,$25,$23,$25,$00
 $696E DEFB $00,$F4,$FC,$F4,$FC,$F4,$FC,$00
 $6976 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $697E DEFB $3C,$5C,$39,$3F,$57,$C6,$80,$20
 $6986 DEFB $29,$F1,$3B,$9D,$5D,$4E,$8E,$1D
 $698E DEFB $00,$BF,$00,$00,$AF,$00,$AF,$00
 $6996 DEFB $C4,$EE,$6C,$34,$36,$63,$73,$3B
 $699E DEFB $82,$C2,$E6,$7C,$38,$80,$00,$00
 $69A6 DEFB $60,$40,$C0,$80,$00,$00,$00,$00
 $69AE DEFB $00,$34,$60,$72,$BE,$74,$2C,$10
 $69B6 DEFB $0F,$1F,$9C,$DC,$4E,$4E,$67,$37
 $69BE DEFB $04,$34,$79,$FF,$EF,$E4,$C2,$96
 $69C6 DEFB $DC,$CE,$94,$96,$0C,$3C,$B0,$42
 $69CE DEFB $45,$4E,$5F,$44,$45,$44,$41,$00
 $69D6 DEFB $97,$8F,$97,$8F,$97,$8F,$97,$8B
 $69DE DEFB $00,$4E,$00,$BF,$BF,$AB,$00,$4E
 $69E6 DEFB $45,$4B,$45,$4B,$45,$4B,$45,$00
 $69EE DEFB $2F,$1F,$2F,$1F,$2F,$1F,$2F,$1F
 $69F6 DEFB $9F,$2F,$1F,$2F,$1F,$2F,$1F,$2F
 $69FE DEFB $38,$1C,$EF,$E3,$BC,$3E,$16,$07
 $6A06 DEFB $00,$36,$4C,$06,$14,$1A,$14,$00
 $6A0E DEFB $00,$7E,$08,$08,$08,$08,$38,$00
 $6A16 DEFB $08,$8B,$56,$76,$07,$03,$01,$00
 $6A1E DEFB $00,$00,$00,$0A,$3F,$75,$E0,$C0
 $6A26 DEFB $00,$04,$08,$0C,$82,$E6,$3C,$00
 $6A2E DEFB $00,$02,$01,$1C,$3F,$37,$63,$C1
 $6A36 DEFB $67,$2E,$5C,$5C,$3D,$38,$BE,$9E
 $6A3E DEFB $30,$3B,$19,$3C,$37,$73,$E6,$C7
 $6A46 DEFB $10,$3C,$7E,$67,$63,$B1,$BD,$18
 $6A4E DEFB $00,$00,$70,$40,$BC,$7E,$66,$53
 $6A56 DEFB $60,$60,$40,$C0,$80,$80,$00,$00
 $6A5E DEFB $00,$DB,$00,$00,$FF,$54,$2A,$00
 $6A66 DEFB $00,$AA,$BF,$23,$BF,$00,$B5,$00
 $6A6E DEFB $3C,$38,$70,$38,$7E,$2F,$0B,$01
 $6A76 DEFB $0E,$3E,$1C,$39,$72,$32,$39,$0C
 $6A7E DEFB $8E,$56,$2C,$38,$50,$78,$2C,$0C
 $6A86 DEFB $00,$A4,$40,$A8,$08,$5C,$04,$A8
 $6A8E DEFB $00,$38,$76,$C2,$C0,$E2,$60,$70
 $6A96 DEFB $00,$1C,$0E,$5E,$7E,$7E,$3C,$00
 $6A9E DEFB $00,$38,$70,$52,$7E,$5E,$BC,$C0
 $6AA6 DEFB $18,$2C,$26,$04,$0E,$0A,$1C,$18
 $6AAE DEFB $00,$7C,$42,$42,$7C,$42,$42,$00
 $6AB6 DEFB $00,$7C,$42,$7C,$42,$42,$7C,$00
 $6ABE DEFB $06,$6A,$F0,$98,$98,$22,$04,$22
 $6AC6 DEFB $00,$3A,$4C,$24,$02,$4C,$38,$04
 $6ACE DEFB $6B,$B6,$51,$19,$3D,$5C,$14,$1C
 $6AD6 DEFB $AA,$A4,$49,$83,$51,$87,$23,$01
 $6ADE DEFB $1E,$6C,$E0,$80,$00,$00,$C0,$70
 $6AE6 DEFB $32,$1C,$4E,$46,$1D,$22,$30,$9E
 $6AEE DEFB $40,$40,$9E,$39,$F1,$E8,$C4,$04
 $6AF6 DEFB $00,$45,$43,$47,$43,$45,$43,$00
 $6AFE DEFB $00,$54,$7E,$7C,$7E,$7C,$7E,$00
 $6B06 DEFB $00,$AA,$7F,$AA,$00,$55,$00,$AA
 $6B0E DEFB $00,$3E,$5C,$6E,$74,$7A,$54,$00
 $6B16 DEFB $0C,$18,$10,$38,$18,$1D,$0A,$04
 $6B1E DEFB $02,$01,$19,$2A,$D6,$2D,$57,$2A
 $6B26 DEFB $38,$18,$3C,$14,$9E,$4F,$86,$CF
 $6B2E DEFB $00,$00,$C0,$F0,$B8,$18,$38,$30
 $6B36 DEFB $B0,$58,$0C,$1C,$1C,$38,$10,$70
 $6B3E DEFB $00,$38,$45,$26,$A4,$C4,$08,$48
 $6B46 DEFB $00,$84,$80,$0A,$10,$B4,$30,$68
 $6B4E DEFB $86,$8C,$97,$0F,$57,$8F,$86,$04
 $6B56 DEFB $70,$80,$1C,$22,$23,$61,$50,$70
 $6B5E DEFB $70,$18,$CC,$34,$50,$D5,$2F,$57
 $6B66 DEFB $FA,$87,$31,$F9,$B3,$A7,$AD,$AF
 $6B6E DEFB $00,$00,$00,$5D,$6F,$C5,$80,$00
 $6B76 DEFB $0E,$1F,$3B,$70,$D1,$E2,$A1,$00
 $6B7E DEFB $00,$30,$72,$30,$72,$30,$72,$00
 $6B86 DEFB $00,$00,$38,$FE,$E3,$01,$00,$00
 $6B8E DEFB $1A,$4E,$1A,$4E,$1A,$4E,$1A,$4E
 $6B96 DEFB $00,$F8,$00,$FE,$FE,$FE,$A8,$00
 $6B9E DEFB $E0,$78,$1C,$8E,$F4,$66,$A5,$41
 $6BA6 DEFB $04,$24,$42,$08,$54,$1A,$75,$FA
 $6BAE DEFB $20,$20,$10,$18,$00,$00,$00,$00
 $6BB6 DEFB $50,$38,$2C,$1F,$05,$02,$00,$00
 $6BBE DEFB $06,$43,$01,$A1,$F9,$B4,$5A,$0D
 $6BC6 DEFB $02,$22,$54,$21,$1C,$A9,$1A,$54
 $6BCE DEFB $83,$56,$77,$1D,$7F,$00,$32,$BA
 $6BD6 DEFB $1B,$18,$8F,$47,$90,$6D,$26,$97
 $6BDE DEFB $1C,$38,$70,$D2,$A0,$0A,$D4,$E8
 $6BE6 DEFB $50,$A8,$68,$C8,$48,$C8,$64,$A4
 $6BEE DEFB $00,$80,$C0,$EA,$7F,$B5,$51,$00
 $6BF6 DEFB $00,$00,$11,$64,$00,$C4,$C3,$E0
 $6BFE DEFB $8C,$12,$03,$0F,$99,$60,$06,$08
 $6C06 DEFB $18,$C3,$DB,$18,$DB,$5A,$99,$18
 $6C0E DEFB $00,$2D,$00,$57,$4F,$57,$2A,$00
 $6C16 DEFB $11,$04,$04,$19,$60,$48,$30,$00
 $6C1E DEFB $E8,$E8,$DB,$9F,$0E,$00,$00,$00
 $6C26 DEFB $B7,$40,$24,$C2,$32,$02,$04,$00
 $6C2E DEFB $18,$30,$20,$20,$18,$04,$04,$00
 $6C36 DEFB $00,$7E,$08,$08,$08,$08,$38,$00
 $6C3E DEFB $07,$23,$07,$3B,$43,$51,$83,$09
 $6C46 DEFB $34,$A8,$28,$B0,$10,$D8,$48,$40
 $6C4E DEFB $01,$81,$00,$80,$00,$00,$08,$74
 $6C56 DEFB $17,$0B,$05,$0B,$05,$08,$05,$07
 $6C5E DEFB $E8,$74,$E8,$B0,$F0,$E0,$E0,$C0
 $6C66 DEFB $00,$1E,$26,$23,$63,$C1,$03,$07
 $6C6E DEFB $00,$00,$00,$30,$82,$CC,$E1,$60
 $6C76 DEFB $70,$F0,$39,$F6,$60,$E8,$84,$00
 $6C7E DEFB $00,$00,$70,$FA,$DC,$AF,$86,$00
 $6C86 DEFB $ED,$ED,$00,$57,$00,$57,$2A,$00
 $6C8E DEFB $FB,$FB,$00,$5A,$00,$FE,$A8,$00
 $6C96 DEFB $00,$00,$00,$00,$00,$01,$00,$03
 $6C9E DEFB $65,$90,$65,$20,$49,$94,$44,$91
 $6CA6 DEFB $1B,$67,$46,$47,$2B,$7D,$3E,$67
 $6CAE DEFB $04,$0E,$09,$03,$A6,$F8,$34,$0E
 $6CB6 DEFB $00,$6E,$54,$64,$54,$04,$18,$00
 $6CBE DEFB $09,$81,$C8,$46,$FE,$34,$00,$02
 $6CC6 DEFB $E0,$F1,$B7,$5F,$15,$02,$90,$08
 $6CCE DEFB $DA,$AA,$45,$82,$00,$00,$10,$00
 $6CD6 DEFB $07,$0A,$02,$15,$21,$22,$1C,$01
 $6CDE DEFB $D0,$A0,$F0,$88,$08,$65,$65,$C2
 $6CE6 DEFB $1C,$3C,$B0,$B8,$1C,$1C,$1C,$38
 $6CEE DEFB $20,$02,$08,$20,$00,$00,$00,$00
 $6CF6 DEFB $10,$0A,$41,$00,$88,$01,$21,$10
 $6CFE DEFB $08,$14,$16,$23,$05,$24,$08,$30
 $6D06 DEFB $9F,$2F,$1F,$2F,$1F,$2F,$1F,$2F
 $6D0E DEFB $97,$8F,$97,$8F,$97,$8F,$97,$8B
 $6D16 DEFB $2F,$1F,$2F,$1F,$2F,$1F,$2F,$1F
 $6D1E DEFB $89,$54,$82,$09,$45,$30,$65,$30
 $6D26 DEFB $73,$38,$1C,$18,$1C,$78,$F1,$A2
 $6D2E DEFB $CC,$E6,$64,$4E,$1C,$7C,$7A,$A3
 $6D36 DEFB $3A,$3D,$3A,$3D,$3A,$3D,$3A,$3D
 $6D3E DEFB $40,$00,$40,$00,$40,$00,$40,$00
 $6D46 DEFB $80,$50,$80,$50,$80,$50,$80,$50
 $6D4E DEFB $08,$82,$80,$40,$52,$25,$10,$02
 $6D56 DEFB $02,$07,$D8,$05,$57,$FF,$DD,$6A
 $6D5E DEFB $53,$05,$AA,$7E,$B4,$F8,$D4,$A8
 $6D66 DEFB $00,$00,$00,$00,$38,$7E,$67,$41
 $6D6E DEFB $18,$00,$08,$00,$02,$10,$04,$00
 $6D76 DEFB $30,$01,$0B,$38,$40,$42,$42,$39
 $6D7E DEFB $54,$22,$60,$07,$96,$5C,$10,$12
 $6D86 DEFB $FF,$2F,$AF,$2D,$A5,$6D,$25,$2D
 $6D8E DEFB $35,$71,$CD,$3F,$E5,$AF,$27,$2F
 $6D96 DEFB $DF,$CF,$E3,$F8,$FE,$E5,$D3,$DF
 $6D9E DEFB $00,$86,$5C,$2A,$31,$60,$26,$62
 $6DA6 DEFB $00,$00,$0E,$6C,$0E,$6C,$6E,$6C
 $6DAE DEFB $6E,$6C,$02,$20,$02,$60,$0E,$00
 $6DB6 DEFB $08,$00,$15,$12,$15,$00,$08,$08
 $6DBE DEFB $00,$00,$B6,$94,$B6,$00,$5E,$5E
 $6DC6 DEFB $10,$00,$F8,$F8,$F8,$00,$10,$10
 $6DCE DEFB $00,$5E,$5E,$00,$BF,$BF,$00,$99
 $6DD6 DEFB $00,$56,$3F,$56,$00,$16,$00,$00
 $6DDE DEFB $00,$FA,$FC,$FA,$00,$F8,$00,$00
 $6DE6 DEFB $00,$7C,$7C,$7C,$FE,$7C,$38,$10
 $6DEE DEFB $10,$38,$7C,$FE,$7C,$7C,$7C,$00
 $6DF6 DEFB $10,$3E,$7E,$FE,$7E,$3E,$10,$00
 $6DFE DEFB $08,$7C,$7E,$7F,$7E,$7C,$08,$00

; Tiles attributes
;
; Every byte represent attribute data for the specific tile. The graphic data
; for every tile is defined in #R$6606
b$6E06 DEFB $47,$0F,$02,$02,$02,$02,$04,$06
 $6E0E DEFB $4E,$0D,$05,$41,$41,$41,$03,$03
 $6E16 DEFB $0F,$4F,$02,$02,$02,$02,$01,$08
 $6E1E DEFB $01,$41,$41,$01,$03,$03,$03,$03
 $6E26 DEFB $0E,$05,$02,$10,$02,$02,$03,$05
 $6E2E DEFB $01,$08,$05,$45,$03,$03,$0B,$0B
 $6E36 DEFB $0C,$02,$02,$50,$02,$0A,$05,$0A
 $6E3E DEFB $04,$4D,$03,$0B,$0B,$03,$03,$03
 $6E46 DEFB $4E,$02,$02,$02,$50,$0A,$0E,$0A
 $6E4E DEFB $0A,$0C,$0C,$0E,$07,$03,$03,$03
 $6E56 DEFB $03,$02,$02,$03,$02,$0B,$0B,$0E
 $6E5E DEFB $0B,$0B,$01,$01,$45,$10,$50,$5A
 $6E66 DEFB $06,$04,$03,$43,$43,$0E,$0B,$06
 $6E6E DEFB $0B,$06,$06,$02,$05,$05,$50,$03
 $6E76 DEFB $03,$46,$03,$03,$03,$06,$0A,$02
 $6E7E DEFB $0B,$05,$04,$02,$05,$66,$74,$03
 $6E86 DEFB $05,$47,$03,$43,$43,$0A,$0A,$06
 $6E8E DEFB $0E,$0E,$02,$02,$04,$03,$03,$03
 $6E96 DEFB $05,$03,$02,$03,$03,$0F,$0F,$03
 $6E9E DEFB $06,$43,$43,$43,$0C,$03,$01,$41
 $6EA6 DEFB $05,$05,$03,$03,$43,$03,$03,$03
 $6EAE DEFB $03,$43,$03,$43,$10,$03,$03,$41
 $6EB6 DEFB $42,$05,$45,$43,$43,$03,$03,$03
 $6EBE DEFB $43,$03,$43,$43,$50,$03,$03,$03
 $6EC6 DEFB $4A,$05,$43,$03,$43,$03,$0F,$03
 $6ECE DEFB $03,$43,$43,$43,$03,$03,$03,$03
 $6ED6 DEFB $05,$45,$0D,$05,$03,$03,$0F,$03
 $6EDE DEFB $03,$43,$43,$43,$03,$02,$02,$02
 $6EE6 DEFB $3E,$06,$37,$05,$03,$03,$10,$50
 $6EEE DEFB $5A,$03,$03,$43,$03,$02,$02,$02
 $6EF6 DEFB $48,$08,$48,$41,$41,$01,$0C,$06
 $6EFE DEFB $4E,$44,$04,$06,$4E,$4E,$4E,$4E

; Supertiles layout
;
; Each supertile is composed of 9 tiles in a 3x3 grid configuration. Every
; block of 9 bytes references the tiles, from left to right, top to bottom.
; There are 256 supertile in game. Tile graphics data is defined in #R$6606
b$6F06 DEFB $01,$01,$01 ; {#SUPERTILE(0)
 $6F09 DEFB $01,$01,$01 ;
 $6F0C DEFB $01,$01,$01 ; }
 $6F0F DEFB $00,$00,$00 ; {#SUPERTILE(1)
 $6F12 DEFB $00,$00,$00 ;
 $6F15 DEFB $00,$00,$00 ; }
 $6F18 DEFB $03,$03,$04 ; {#SUPERTILE(2)
 $6F1B DEFB $13,$13,$14 ;
 $6F1E DEFB $23,$23,$24 ; }
 $6F21 DEFB $01,$01,$01 ; {#SUPERTILE(3)
 $6F24 DEFB $49,$4A,$4B ;
 $6F27 DEFB $00,$00,$00 ; }
 $6F2A DEFB $00,$00,$00 ; {#SUPERTILE(4)
 $6F2D DEFB $01,$01,$01 ;
 $6F30 DEFB $01,$01,$01 ; }
 $6F33 DEFB $00,$00,$00 ; {#SUPERTILE(5)
 $6F36 DEFB $B8,$00,$00 ;
 $6F39 DEFB $00,$00,$00 ; }
 $6F3C DEFB $01,$01,$01 ; {#SUPERTILE(6)
 $6F3F DEFB $49,$01,$01 ;
 $6F42 DEFB $01,$01,$01 ; }
 $6F45 DEFB $00,$00,$01 ; {#SUPERTILE(7)
 $6F48 DEFB $49,$00,$01 ;
 $6F4B DEFB $00,$00,$01 ; }
 $6F4E DEFB $01,$01,$01 ; {#SUPERTILE(8)
 $6F51 DEFB $F9,$01,$01 ;
 $6F54 DEFB $9C,$01,$01 ; }
 $6F57 DEFB $01,$01,$04 ; {#SUPERTILE(9)
 $6F5A DEFB $01,$01,$14 ;
 $6F5D DEFB $01,$00,$24 ; }
 $6F60 DEFB $01,$00,$00 ; {#SUPERTILE(10)
 $6F63 DEFB $01,$01,$01 ;
 $6F66 DEFB $01,$01,$01 ; }
 $6F69 DEFB $00,$00,$00 ; {#SUPERTILE(11)
 $6F6C DEFB $00,$0A,$0A ;
 $6F6F DEFB $00,$00,$00 ; }
 $6F72 DEFB $00,$00,$00 ; {#SUPERTILE(12)
 $6F75 DEFB $00,$00,$00 ;
 $6F78 DEFB $00,$0A,$0A ; }
 $6F7B DEFB $00,$00,$00 ; {#SUPERTILE(13)
 $6F7E DEFB $BA,$FA,$FB ;
 $6F81 DEFB $00,$00,$00 ; }
 $6F84 DEFB $01,$01,$01 ; {#SUPERTILE(14)
 $6F87 DEFB $01,$01,$01 ;
 $6F8A DEFB $D6,$01,$01 ; }
 $6F8D DEFB $00,$00,$01 ; {#SUPERTILE(15)
 $6F90 DEFB $01,$01,$01 ;
 $6F93 DEFB $01,$01,$01 ; }
 $6F96 DEFB $00,$0A,$0A ; {#SUPERTILE(16)
 $6F99 DEFB $00,$00,$00 ;
 $6F9C DEFB $00,$00,$00 ; }
 $6F9F DEFB $01,$01,$01 ; {#SUPERTILE(17)
 $6FA2 DEFB $F9,$01,$01 ;
 $6FA5 DEFB $9C,$00,$01 ; }
 $6FA8 DEFB $01,$01,$01 ; {#SUPERTILE(18)
 $6FAB DEFB $01,$01,$01 ;
 $6FAE DEFB $01,$01,$00 ; }
 $6FB1 DEFB $88,$01,$01 ; {#SUPERTILE(19)
 $6FB4 DEFB $01,$01,$01 ;
 $6FB7 DEFB $01,$01,$01 ; }
 $6FBA DEFB $01,$01,$01 ; {#SUPERTILE(20)
 $6FBD DEFB $01,$01,$01 ;
 $6FC0 DEFB $01,$00,$01 ; }
 $6FC3 DEFB $00,$00,$01 ; {#SUPERTILE(21)
 $6FC6 DEFB $00,$00,$01 ;
 $6FC9 DEFB $00,$81,$01 ; }
 $6FCC DEFB $01,$00,$01 ; {#SUPERTILE(22)
 $6FCF DEFB $01,$00,$01 ;
 $6FD2 DEFB $96,$00,$96 ; }
 $6FD5 DEFB $5D,$5E,$5F ; {#SUPERTILE(23)
 $6FD8 DEFB $5A,$5B,$5C ;
 $6FDB DEFB $5D,$5E,$5F ; }
 $6FDE DEFB $01,$01,$01 ; {#SUPERTILE(24)
 $6FE1 DEFB $01,$FF,$01 ;
 $6FE4 DEFB $01,$01,$01 ; }
 $6FE7 DEFB $01,$01,$01 ; {#SUPERTILE(25)
 $6FEA DEFB $01,$FE,$01 ;
 $6FED DEFB $01,$01,$01 ; }
 $6FF0 DEFB $01,$01,$01 ; {#SUPERTILE(26)
 $6FF3 DEFB $01,$FD,$01 ;
 $6FF6 DEFB $01,$01,$01 ; }
 $6FF9 DEFB $01,$01,$01 ; {#SUPERTILE(27)
 $6FFC DEFB $01,$FC,$01 ;
 $6FFF DEFB $01,$01,$01 ; }
 $7002 DEFB $00,$00,$01 ; {#SUPERTILE(28)
 $7005 DEFB $00,$00,$01 ;
 $7008 DEFB $00,$00,$01 ; }
 $700B DEFB $C6,$01,$C6 ; {#SUPERTILE(29)
 $700E DEFB $01,$01,$01 ;
 $7011 DEFB $01,$01,$00 ; }
 $7014 DEFB $0A,$0A,$0A ; {#SUPERTILE(30)
 $7017 DEFB $00,$00,$00 ;
 $701A DEFB $01,$01,$01 ; }
 $701D DEFB $01,$10,$01 ; {#SUPERTILE(31)
 $7020 DEFB $A0,$A0,$A1 ;
 $7023 DEFB $1E,$1D,$B1 ; }
 $7026 DEFB $01,$00,$1B ; {#SUPERTILE(32)
 $7029 DEFB $2A,$2A,$2B ;
 $702C DEFB $00,$00,$01 ; }
 $702F DEFB $01,$01,$01 ; {#SUPERTILE(33)
 $7032 DEFB $2A,$2A,$2A ;
 $7035 DEFB $00,$00,$00 ; }
 $7038 DEFB $01,$01,$00 ; {#SUPERTILE(34)
 $703B DEFB $01,$01,$00 ;
 $703E DEFB $C6,$01,$00 ; }
 $7041 DEFB $00,$A1,$A0 ; {#SUPERTILE(35)
 $7044 DEFB $00,$00,$00 ;
 $7047 DEFB $01,$01,$01 ; }
 $704A DEFB $01,$01,$01 ; {#SUPERTILE(36)
 $704D DEFB $2A,$2A,$2A ;
 $7050 DEFB $00,$00,$00 ; }
 $7053 DEFB $01,$C6,$01 ; {#SUPERTILE(37)
 $7056 DEFB $01,$01,$01 ;
 $7059 DEFB $01,$01,$01 ; }
 $705C DEFB $01,$00,$1B ; {#SUPERTILE(38)
 $705F DEFB $01,$00,$1B ;
 $7062 DEFB $01,$00,$1B ; }
 $7065 DEFB $A0,$A0,$A1 ; {#SUPERTILE(39)
 $7068 DEFB $EF,$EE,$EF ;
 $706B DEFB $DD,$DD,$DD ; }
 $706E DEFB $A0,$A0,$A1 ; {#SUPERTILE(40)
 $7071 DEFB $EF,$AD,$AE ;
 $7074 DEFB $BF,$DF,$BF ; }
 $7077 DEFB $A1,$1F,$BD ; {#SUPERTILE(41)
 $707A DEFB $0F,$3F,$8F ;
 $707D DEFB $EC,$DC,$2D ; }
 $7080 DEFB $A0,$A0,$A1 ; {#SUPERTILE(42)
 $7083 DEFB $EF,$CC,$EF ;
 $7086 DEFB $EC,$DC,$9D ; }
 $7089 DEFB $7C,$01,$01 ; {#SUPERTILE(43)
 $708C DEFB $79,$01,$01 ;
 $708F DEFB $5D,$5E,$5F ; }
 $7092 DEFB $7A,$7D,$7E ; {#SUPERTILE(44)
 $7095 DEFB $27,$01,$01 ;
 $7098 DEFB $7C,$01,$01 ; }
 $709B DEFB $E1,$E2,$E0 ; {#SUPERTILE(45)
 $709E DEFB $27,$01,$01 ;
 $70A1 DEFB $7C,$01,$01 ; }
 $70A4 DEFB $00,$00,$00 ; {#SUPERTILE(46)
 $70A7 DEFB $00,$00,$00 ;
 $70AA DEFB $00,$00,$00 ; }
 $70AD DEFB $01,$00,$01 ; {#SUPERTILE(47)
 $70B0 DEFB $01,$00,$00 ;
 $70B3 DEFB $01,$00,$01 ; }
 $70B6 DEFB $01,$01,$01 ; {#SUPERTILE(48)
 $70B9 DEFB $01,$00,$00 ;
 $70BC DEFB $01,$00,$01 ; }
 $70BF DEFB $01,$00,$01 ; {#SUPERTILE(49)
 $70C2 DEFB $01,$00,$01 ;
 $70C5 DEFB $01,$00,$01 ; }
 $70C8 DEFB $4E,$1D,$A1 ; {#SUPERTILE(50)
 $70CB DEFB $8F,$6F,$7F ;
 $70CE DEFB $3E,$8D,$9D ; }
 $70D1 DEFB $01,$00,$B1 ; {#SUPERTILE(51)
 $70D4 DEFB $01,$00,$A1 ;
 $70D7 DEFB $96,$00,$B1 ; }
 $70DA DEFB $1D,$1E,$B1 ; {#SUPERTILE(52)
 $70DD DEFB $8C,$8C,$A1 ;
 $70E0 DEFB $1F,$1E,$B1 ; }
 $70E3 DEFB $2E,$3D,$D3 ; {#SUPERTILE(53)
 $70E6 DEFB $2F,$4F,$4E ;
 $70E9 DEFB $01,$4D,$E3 ; }
 $70EC DEFB $1F,$1E,$B1 ; {#SUPERTILE(54)
 $70EF DEFB $1C,$1D,$A1 ;
 $70F2 DEFB $2C,$2D,$B1 ; }
 $70F5 DEFB $1C,$3E,$B1 ; {#SUPERTILE(55)
 $70F8 DEFB $2D,$2D,$A1 ;
 $70FB DEFB $1C,$1E,$B1 ; }
 $70FE DEFB $01,$01,$01 ; {#SUPERTILE(56)
 $7101 DEFB $01,$01,$A1 ;
 $7104 DEFB $01,$00,$B1 ; }
 $7107 DEFB $01,$01,$01 ; {#SUPERTILE(57)
 $710A DEFB $A0,$A0,$A1 ;
 $710D DEFB $3D,$1D,$B1 ; }
 $7110 DEFB $A0,$A0,$A1 ; {#SUPERTILE(58)
 $7113 DEFB $BD,$BE,$EE ;
 $7116 DEFB $CF,$CE,$DF ; }
 $7119 DEFB $A0,$A0,$A1 ; {#SUPERTILE(59)
 $711C DEFB $EF,$DE,$38 ;
 $711F DEFB $DD,$DD,$38 ; }
 $7122 DEFB $D4,$1C,$A1 ; {#SUPERTILE(60)
 $7125 DEFB $E4,$E5,$B1 ;
 $7128 DEFB $3D,$2C,$B1 ; }
 $712B DEFB $A0,$A0,$A1 ; {#SUPERTILE(61)
 $712E DEFB $00,$00,$00 ;
 $7131 DEFB $01,$01,$01 ; }
 $7134 DEFB $90,$70,$80 ; {#SUPERTILE(62)
 $7137 DEFB $82,$3E,$84 ;
 $713A DEFB $01,$3B,$00 ; }
 $713D DEFB $01,$0A,$0A ; {#SUPERTILE(63)
 $7140 DEFB $00,$00,$01 ;
 $7143 DEFB $01,$01,$01 ; }
 $7146 DEFB $A0,$A0,$A1 ; {#SUPERTILE(64)
 $7149 DEFB $00,$00,$00 ;
 $714C DEFB $00,$00,$01 ; }
 $714F DEFB $A0,$A0,$A1 ; {#SUPERTILE(65)
 $7152 DEFB $EF,$EE,$EF ;
 $7155 DEFB $BF,$CF,$9D ; }
 $7158 DEFB $A0,$A0,$A0 ; {#SUPERTILE(66)
 $715B DEFB $00,$00,$00 ;
 $715E DEFB $01,$01,$00 ; }
 $7161 DEFB $A0,$A0,$A1 ; {#SUPERTILE(67)
 $7164 DEFB $EE,$EF,$B1 ;
 $7167 DEFB $DD,$DD,$B1 ; }
 $716A DEFB $A1,$A0,$A0 ; {#SUPERTILE(68)
 $716D DEFB $B1,$4D,$1E ;
 $7170 DEFB $B1,$4F,$3F ; }
 $7173 DEFB $01,$01,$01 ; {#SUPERTILE(69)
 $7176 DEFB $0A,$FA,$FB ;
 $7179 DEFB $00,$00,$00 ; }
 $717C DEFB $01,$01,$00 ; {#SUPERTILE(70)
 $717F DEFB $01,$01,$00 ;
 $7182 DEFB $01,$01,$00 ; }
 $7185 DEFB $0C,$0C,$0C ; {#SUPERTILE(71)
 $7188 DEFB $F0,$F0,$F0 ;
 $718B DEFB $01,$01,$01 ; }
 $718E DEFB $A1,$1F,$1E ; {#SUPERTILE(72)
 $7191 DEFB $B1,$3D,$1F ;
 $7194 DEFB $B1,$4E,$3F ; }
 $7197 DEFB $01,$01,$01 ; {#SUPERTILE(73)
 $719A DEFB $00,$00,$00 ;
 $719D DEFB $00,$00,$00 ; }
 $71A0 DEFB $01,$01,$D1 ; {#SUPERTILE(74)
 $71A3 DEFB $01,$00,$B1 ;
 $71A6 DEFB $01,$00,$B1 ; }
 $71A9 DEFB $06,$07,$08 ; {#SUPERTILE(75)
 $71AC DEFB $31,$32,$34 ;
 $71AF DEFB $5D,$33,$5F ; }
 $71B2 DEFB $01,$01,$01 ; {#SUPERTILE(76)
 $71B5 DEFB $A0,$A0,$A1 ;
 $71B8 DEFB $1E,$1D,$B1 ; }
 $71BB DEFB $00,$D7,$00 ; {#SUPERTILE(77)
 $71BE DEFB $01,$01,$01 ;
 $71C1 DEFB $01,$01,$01 ; }
 $71C4 DEFB $A1,$8C,$8C ; {#SUPERTILE(78)
 $71C7 DEFB $B1,$4E,$0E ;
 $71CA DEFB $B1,$2C,$1E ; }
 $71CD DEFB $A0,$A0,$A1 ; {#SUPERTILE(79)
 $71D0 DEFB $00,$00,$01 ;
 $71D3 DEFB $01,$01,$01 ; }
 $71D6 DEFB $0C,$0C,$0C ; {#SUPERTILE(80)
 $71D9 DEFB $F0,$F0,$F0 ;
 $71DC DEFB $00,$00,$01 ; }
 $71DF DEFB $AC,$BC,$5F ; {#SUPERTILE(81)
 $71E2 DEFB $41,$42,$43 ;
 $71E5 DEFB $51,$52,$42 ; }
 $71E8 DEFB $01,$01,$00 ; {#SUPERTILE(82)
 $71EB DEFB $01,$01,$00 ;
 $71EE DEFB $01,$01,$00 ; }
 $71F1 DEFB $01,$10,$01 ; {#SUPERTILE(83)
 $71F4 DEFB $0A,$0A,$0A ;
 $71F7 DEFB $00,$00,$01 ; }
 $71FA DEFB $0C,$0C,$0C ; {#SUPERTILE(84)
 $71FD DEFB $F0,$F0,$F0 ;
 $7200 DEFB $01,$01,$00 ; }
 $7203 DEFB $01,$C6,$01 ; {#SUPERTILE(85)
 $7206 DEFB $01,$01,$01 ;
 $7209 DEFB $01,$01,$00 ; }
 $720C DEFB $01,$37,$01 ; {#SUPERTILE(86)
 $720F DEFB $35,$47,$01 ;
 $7212 DEFB $45,$48,$01 ; }
 $7215 DEFB $A0,$A0,$A1 ; {#SUPERTILE(87)
 $7218 DEFB $00,$00,$00 ;
 $721B DEFB $01,$01,$00 ; }
 $721E DEFB $00,$00,$2E ; {#SUPERTILE(88)
 $7221 DEFB $00,$00,$2F ;
 $7224 DEFB $00,$00,$01 ; }
 $7227 DEFB $D5,$00,$01 ; {#SUPERTILE(89)
 $722A DEFB $E5,$00,$01 ;
 $722D DEFB $0E,$00,$01 ; }
 $7230 DEFB $F6,$F7,$F8 ; {#SUPERTILE(90)
 $7233 DEFB $30,$20,$40 ;
 $7236 DEFB $5D,$5E,$5F ; }
 $7239 DEFB $00,$00,$01 ; {#SUPERTILE(91)
 $723C DEFB $00,$00,$01 ;
 $723F DEFB $01,$00,$01 ; }
 $7242 DEFB $01,$00,$01 ; {#SUPERTILE(92)
 $7245 DEFB $00,$00,$01 ;
 $7248 DEFB $00,$00,$01 ; }
 $724B DEFB $90,$70,$80 ; {#SUPERTILE(93)
 $724E DEFB $82,$3E,$73 ;
 $7251 DEFB $01,$3B,$01 ; }
 $7254 DEFB $A0,$A0,$A1 ; {#SUPERTILE(94)
 $7257 DEFB $EF,$DE,$38 ;
 $725A DEFB $DD,$82,$38 ; }
 $725D DEFB $90,$72,$80 ; {#SUPERTILE(95)
 $7260 DEFB $3E,$3D,$62 ;
 $7263 DEFB $3B,$01,$59 ; }
 $7266 DEFB $C6,$01,$01 ; {#SUPERTILE(96)
 $7269 DEFB $01,$0A,$0A ;
 $726C DEFB $00,$00,$01 ; }
 $726F DEFB $00,$A1,$A0 ; {#SUPERTILE(97)
 $7272 DEFB $00,$00,$00 ;
 $7275 DEFB $01,$01,$00 ; }
 $7278 DEFB $01,$01,$00 ; {#SUPERTILE(98)
 $727B DEFB $01,$0A,$0A ;
 $727E DEFB $00,$00,$00 ; }
 $7281 DEFB $66,$67,$68 ; {#SUPERTILE(99)
 $7284 DEFB $76,$77,$78 ;
 $7287 DEFB $86,$87,$88 ; }
 $728A DEFB $01,$01,$01 ; {#SUPERTILE(100)
 $728D DEFB $01,$01,$01 ;
 $7290 DEFB $56,$57,$58 ; }
 $7293 DEFB $01,$01,$01 ; {#SUPERTILE(101)
 $7296 DEFB $01,$01,$01 ;
 $7299 DEFB $96,$96,$85 ; }
 $729C DEFB $01,$01,$01 ; {#SUPERTILE(102)
 $729F DEFB $01,$01,$01 ;
 $72A2 DEFB $89,$95,$01 ; }
 $72A5 DEFB $A0,$A0,$A1 ; {#SUPERTILE(103)
 $72A8 DEFB $C1,$B2,$00 ;
 $72AB DEFB $00,$01,$01 ; }
 $72AE DEFB $01,$01,$01 ; {#SUPERTILE(104)
 $72B1 DEFB $55,$46,$01 ;
 $72B4 DEFB $66,$65,$01 ; }
 $72B7 DEFB $A0,$A0,$A1 ; {#SUPERTILE(105)
 $72BA DEFB $41,$41,$69 ;
 $72BD DEFB $31,$6A,$3F ; }
 $72C0 DEFB $A0,$A0,$A1 ; {#SUPERTILE(106)
 $72C3 DEFB $8A,$EE,$EF ;
 $72C6 DEFB $ED,$ED,$ED ; }
 $72C9 DEFB $A1,$3E,$1D ; {#SUPERTILE(107)
 $72CC DEFB $B1,$D4,$D5 ;
 $72CF DEFB $B1,$E4,$E5 ; }
 $72D2 DEFB $4A,$4B,$4C ; {#SUPERTILE(108)
 $72D5 DEFB $00,$00,$00 ;
 $72D8 DEFB $00,$00,$00 ; }
 $72DB DEFB $00,$00,$49 ; {#SUPERTILE(109)
 $72DE DEFB $00,$00,$00 ;
 $72E1 DEFB $00,$00,$00 ; }
 $72E4 DEFB $1E,$1E,$B1 ; {#SUPERTILE(110)
 $72E7 DEFB $26,$8C,$A1 ;
 $72EA DEFB $4D,$72,$B1 ; }
 $72ED DEFB $A0,$A0,$A1 ; {#SUPERTILE(111)
 $72F0 DEFB $00,$00,$00 ;
 $72F3 DEFB $01,$01,$00 ; }
 $72F6 DEFB $1C,$3D,$E3 ; {#SUPERTILE(112)
 $72F9 DEFB $1F,$2C,$9D ;
 $72FC DEFB $1C,$1E,$E3 ; }
 $72FF DEFB $5D,$5E,$5F ; {#SUPERTILE(113)
 $7302 DEFB $5A,$5B,$5C ;
 $7305 DEFB $F6,$F7,$F8 ; }
 $7308 DEFB $F6,$F7,$F8 ; {#SUPERTILE(114)
 $730B DEFB $5A,$5B,$5C ;
 $730E DEFB $5D,$5E,$5F ; }
 $7311 DEFB $80,$8E,$3D ; {#SUPERTILE(115)
 $7314 DEFB $1D,$2C,$3F ;
 $7317 DEFB $B1,$72,$1E ; }
 $731A DEFB $01,$01,$0F ; {#SUPERTILE(116)
 $731D DEFB $01,$01,$8E ;
 $7320 DEFB $01,$2F,$1D ; }
 $7323 DEFB $01,$01,$01 ; {#SUPERTILE(117)
 $7326 DEFB $0A,$0A,$0A ;
 $7329 DEFB $00,$00,$01 ; }
 $732C DEFB $01,$01,$01 ; {#SUPERTILE(118)
 $732F DEFB $01,$01,$01 ;
 $7332 DEFB $01,$01,$01 ; }
 $7335 DEFB $01,$01,$01 ; {#SUPERTILE(119)
 $7338 DEFB $01,$01,$01 ;
 $733B DEFB $01,$01,$00 ; }
 $733E DEFB $01,$01,$01 ; {#SUPERTILE(120)
 $7341 DEFB $0A,$0A,$0A ;
 $7344 DEFB $00,$00,$00 ; }
 $7347 DEFB $01,$01,$01 ; {#SUPERTILE(121)
 $734A DEFB $01,$0A,$0A ;
 $734D DEFB $00,$00,$01 ; }
 $7350 DEFB $1F,$1E,$B1 ; {#SUPERTILE(122)
 $7353 DEFB $1D,$1E,$B1 ;
 $7356 DEFB $A0,$A0,$A1 ; }
 $7359 DEFB $1D,$3F,$A1 ; {#SUPERTILE(123)
 $735C DEFB $8C,$8C,$B1 ;
 $735F DEFB $3D,$2D,$A1 ; }
 $7362 DEFB $A0,$A0,$A1 ; {#SUPERTILE(124)
 $7365 DEFB $2D,$1D,$B1 ;
 $7368 DEFB $4D,$0F,$B1 ; }
 $736B DEFB $01,$00,$B1 ; {#SUPERTILE(125)
 $736E DEFB $01,$00,$B1 ;
 $7371 DEFB $01,$00,$A1 ; }
 $7374 DEFB $01,$00,$00 ; {#SUPERTILE(126)
 $7377 DEFB $01,$01,$01 ;
 $737A DEFB $01,$01,$01 ; }
 $737D DEFB $00,$10,$01 ; {#SUPERTILE(127)
 $7380 DEFB $01,$01,$01 ;
 $7383 DEFB $01,$01,$01 ; }
 $7386 DEFB $4D,$1D,$1C ; {#SUPERTILE(128)
 $7389 DEFB $1C,$2D,$3F ;
 $738C DEFB $2C,$2D,$4D ; }
 $738F DEFB $1D,$2C,$CE ; {#SUPERTILE(129)
 $7392 DEFB $8C,$8C,$4E ;
 $7395 DEFB $4D,$4E,$3F ; }
 $7398 DEFB $01,$01,$01 ; {#SUPERTILE(130)
 $739B DEFB $A0,$A0,$A1 ;
 $739E DEFB $4D,$4E,$4F ; }
 $73A1 DEFB $4E,$1D,$D5 ; {#SUPERTILE(131)
 $73A4 DEFB $8F,$6F,$7F ;
 $73A7 DEFB $8E,$8D,$3E ; }
 $73AA DEFB $BD,$2D,$A1 ; {#SUPERTILE(132)
 $73AD DEFB $BD,$BE,$EE ;
 $73B0 DEFB $CF,$CE,$DF ; }
 $73B3 DEFB $03,$04,$05 ; {#SUPERTILE(133)
 $73B6 DEFB $13,$14,$15 ;
 $73B9 DEFB $23,$24,$25 ; }
 $73BC DEFB $EF,$41,$02 ; {#SUPERTILE(134)
 $73BF DEFB $EE,$EF,$12 ;
 $73C2 DEFB $DD,$DD,$52 ; }
 $73C5 DEFB $DE,$DF,$52 ; {#SUPERTILE(135)
 $73C8 DEFB $8C,$8C,$34 ;
 $73CB DEFB $DE,$EE,$52 ; }
 $73CE DEFB $00,$DE,$DF ; {#SUPERTILE(136)
 $73D1 DEFB $8C,$8C,$EF ;
 $73D4 DEFB $51,$41,$31 ; }
 $73D7 DEFB $DE,$22,$02 ; {#SUPERTILE(137)
 $73DA DEFB $34,$BF,$34 ;
 $73DD DEFB $DE,$EF,$52 ; }
 $73E0 DEFB $DE,$42,$31 ; {#SUPERTILE(138)
 $73E3 DEFB $32,$31,$32 ;
 $73E6 DEFB $DF,$02,$54 ; }
 $73E9 DEFB $42,$52,$B1 ; {#SUPERTILE(139)
 $73EC DEFB $54,$8C,$A1 ;
 $73EF DEFB $EF,$34,$B1 ; }
 $73F2 DEFB $31,$32,$E3 ; {#SUPERTILE(140)
 $73F5 DEFB $41,$42,$05 ;
 $73F8 DEFB $52,$31,$E3 ; }
 $73FB DEFB $DF,$EE,$B1 ; {#SUPERTILE(141)
 $73FE DEFB $8C,$8C,$A1 ;
 $7401 DEFB $22,$52,$B1 ; }
 $7404 DEFB $01,$01,$01 ; {#SUPERTILE(142)
 $7407 DEFB $A0,$A0,$A1 ;
 $740A DEFB $00,$00,$00 ; }
 $740D DEFB $01,$01,$01 ; {#SUPERTILE(143)
 $7410 DEFB $A0,$A0,$A1 ;
 $7413 DEFB $DE,$EF,$B1 ; }
 $7416 DEFB $DF,$EE,$00 ; {#SUPERTILE(144)
 $7419 DEFB $BD,$BE,$EE ;
 $741C DEFB $CF,$CE,$DF ; }
 $741F DEFB $DF,$DE,$A1 ; {#SUPERTILE(145)
 $7422 DEFB $31,$DE,$DE ;
 $7425 DEFB $52,$34,$DF ; }
 $7428 DEFB $01,$01,$01 ; {#SUPERTILE(146)
 $742B DEFB $A0,$A0,$A1 ;
 $742E DEFB $EE,$EF,$DE ; }
 $7431 DEFB $01,$58,$01 ; {#SUPERTILE(147)
 $7434 DEFB $E3,$32,$80 ;
 $7437 DEFB $EE,$EF,$DE ; }
 $743A DEFB $01,$2A,$2A ; {#SUPERTILE(148)
 $743D DEFB $00,$00,$00 ;
 $7440 DEFB $89,$01,$00 ; }
 $7443 DEFB $1C,$0E,$0F ; {#SUPERTILE(149)
 $7446 DEFB $2C,$1D,$1F ;
 $7449 DEFB $3D,$3D,$3F ; }
 $744C DEFB $01,$01,$01 ; {#SUPERTILE(150)
 $744F DEFB $01,$01,$01 ;
 $7452 DEFB $2A,$2A,$2A ; }
 $7455 DEFB $00,$00,$01 ; {#SUPERTILE(151)
 $7458 DEFB $01,$01,$01 ;
 $745B DEFB $01,$01,$01 ; }
 $745E DEFB $01,$01,$00 ; {#SUPERTILE(152)
 $7461 DEFB $01,$01,$01 ;
 $7464 DEFB $01,$01,$01 ; }
 $7467 DEFB $01,$C6,$01 ; {#SUPERTILE(153)
 $746A DEFB $01,$01,$01 ;
 $746D DEFB $56,$57,$58 ; }
 $7470 DEFB $51,$42,$51 ; {#SUPERTILE(154)
 $7473 DEFB $02,$34,$42 ;
 $7476 DEFB $51,$42,$43 ; }
 $7479 DEFB $01,$01,$00 ; {#SUPERTILE(155)
 $747C DEFB $01,$01,$00 ;
 $747F DEFB $01,$2A,$2A ; }
 $7482 DEFB $01,$00,$00 ; {#SUPERTILE(156)
 $7485 DEFB $01,$01,$00 ;
 $7488 DEFB $01,$01,$00 ; }
 $748B DEFB $01,$2A,$2A ; {#SUPERTILE(157)
 $748E DEFB $00,$00,$00 ;
 $7491 DEFB $01,$01,$00 ; }
 $7494 DEFB $C6,$01,$00 ; {#SUPERTILE(158)
 $7497 DEFB $01,$0A,$0A ;
 $749A DEFB $00,$00,$00 ; }
 $749D DEFB $2A,$2A,$01 ; {#SUPERTILE(159)
 $74A0 DEFB $00,$00,$01 ;
 $74A3 DEFB $00,$00,$01 ; }
 $74A6 DEFB $00,$71,$01 ; {#SUPERTILE(160)
 $74A9 DEFB $0A,$0A,$0A ;
 $74AC DEFB $00,$00,$00 ; }
 $74AF DEFB $00,$61,$01 ; {#SUPERTILE(161)
 $74B2 DEFB $00,$60,$01 ;
 $74B5 DEFB $00,$61,$01 ; }
 $74B8 DEFB $A0,$A0,$A1 ; {#SUPERTILE(162)
 $74BB DEFB $C1,$B2,$00 ;
 $74BE DEFB $00,$00,$01 ; }
 $74C1 DEFB $01,$A1,$AC ; {#SUPERTILE(163)
 $74C4 DEFB $00,$B1,$EF ;
 $74C7 DEFB $00,$B1,$02 ; }
 $74CA DEFB $00,$61,$01 ; {#SUPERTILE(164)
 $74CD DEFB $00,$60,$01 ;
 $74D0 DEFB $00,$60,$01 ; }
 $74D3 DEFB $01,$01,$01 ; {#SUPERTILE(165)
 $74D6 DEFB $01,$01,$01 ;
 $74D9 DEFB $01,$96,$01 ; }
 $74DC DEFB $00,$61,$01 ; {#SUPERTILE(166)
 $74DF DEFB $00,$71,$01 ;
 $74E2 DEFB $00,$01,$01 ; }
 $74E5 DEFB $90,$72,$80 ; {#SUPERTILE(167)
 $74E8 DEFB $3E,$3D,$62 ;
 $74EB DEFB $3B,$01,$00 ; }
 $74EE DEFB $3D,$1F,$8E ; {#SUPERTILE(168)
 $74F1 DEFB $3E,$02,$7F ;
 $74F4 DEFB $3F,$6F,$52 ; }
 $74F7 DEFB $3D,$23,$04 ; {#SUPERTILE(169)
 $74FA DEFB $12,$02,$1F ;
 $74FD DEFB $1D,$6F,$52 ; }
 $7500 DEFB $A0,$A0,$A1 ; {#SUPERTILE(170)
 $7503 DEFB $00,$60,$00 ;
 $7506 DEFB $00,$61,$01 ; }
 $7509 DEFB $42,$03,$69 ; {#SUPERTILE(171)
 $750C DEFB $41,$6A,$3D ;
 $750F DEFB $EE,$EF,$EE ; }
 $7512 DEFB $00,$00,$00 ; {#SUPERTILE(172)
 $7515 DEFB $00,$00,$00 ;
 $7518 DEFB $00,$71,$00 ; }
 $751B DEFB $C1,$B2,$01 ; {#SUPERTILE(173)
 $751E DEFB $01,$01,$01 ;
 $7521 DEFB $01,$01,$01 ; }
 $7524 DEFB $01,$01,$01 ; {#SUPERTILE(174)
 $7527 DEFB $01,$37,$01 ;
 $752A DEFB $85,$86,$47 ; }
 $752D DEFB $00,$00,$01 ; {#SUPERTILE(175)
 $7530 DEFB $00,$02,$01 ;
 $7533 DEFB $02,$05,$47 ; }
 $7536 DEFB $BD,$2D,$03 ; {#SUPERTILE(176)
 $7539 DEFB $BD,$BE,$EE ;
 $753C DEFB $CF,$CE,$DF ; }
 $753F DEFB $01,$01,$01 ; {#SUPERTILE(177)
 $7542 DEFB $01,$37,$68 ;
 $7545 DEFB $85,$47,$86 ; }
 $7548 DEFB $01,$01,$76 ; {#SUPERTILE(178)
 $754B DEFB $58,$55,$86 ;
 $754E DEFB $78,$05,$53 ; }
 $7551 DEFB $00,$00,$00 ; {#SUPERTILE(179)
 $7554 DEFB $00,$00,$00 ;
 $7557 DEFB $00,$00,$AD ; }
 $755A DEFB $0E,$0F,$00 ; {#SUPERTILE(180)
 $755D DEFB $1E,$1F,$00 ;
 $7560 DEFB $0E,$0F,$9D ; }
 $7563 DEFB $01,$01,$00 ; {#SUPERTILE(181)
 $7566 DEFB $49,$4A,$4B ;
 $7569 DEFB $00,$00,$00 ; }
 $756C DEFB $01,$01,$1F ; {#SUPERTILE(182)
 $756F DEFB $55,$46,$00 ;
 $7572 DEFB $66,$65,$52 ; }
 $7575 DEFB $00,$A1,$A0 ; {#SUPERTILE(183)
 $7578 DEFB $00,$00,$00 ;
 $757B DEFB $01,$01,$01 ; }
 $757E DEFB $01,$01,$01 ; {#SUPERTILE(184)
 $7581 DEFB $00,$00,$01 ;
 $7584 DEFB $00,$54,$01 ; }
 $7587 DEFB $01,$01,$01 ; {#SUPERTILE(185)
 $758A DEFB $01,$71,$01 ;
 $758D DEFB $00,$61,$01 ; }
 $7590 DEFB $01,$01,$01 ; {#SUPERTILE(186)
 $7593 DEFB $01,$01,$01 ;
 $7596 DEFB $D6,$D0,$D1 ; }
 $7599 DEFB $AC,$BC,$5F ; {#SUPERTILE(187)
 $759C DEFB $31,$32,$34 ;
 $759F DEFB $5D,$33,$5F ; }
 $75A2 DEFB $52,$02,$A1 ; {#SUPERTILE(188)
 $75A5 DEFB $12,$EF,$B1 ;
 $75A8 DEFB $53,$32,$B1 ; }
 $75AB DEFB $01,$01,$01 ; {#SUPERTILE(189)
 $75AE DEFB $0A,$0A,$0A ;
 $75B1 DEFB $00,$00,$01 ; }
 $75B4 DEFB $0A,$0A,$0A ; {#SUPERTILE(190)
 $75B7 DEFB $00,$00,$00 ;
 $75BA DEFB $01,$01,$01 ; }
 $75BD DEFB $01,$01,$01 ; {#SUPERTILE(191)
 $75C0 DEFB $01,$01,$00 ;
 $75C3 DEFB $01,$01,$01 ; }
 $75C6 DEFB $0A,$0A,$0A ; {#SUPERTILE(192)
 $75C9 DEFB $00,$00,$01 ;
 $75CC DEFB $01,$01,$01 ; }
 $75CF DEFB $01,$A1,$A0 ; {#SUPERTILE(193)
 $75D2 DEFB $00,$B1,$EF ;
 $75D5 DEFB $00,$B1,$02 ; }
 $75D8 DEFB $01,$00,$00 ; {#SUPERTILE(194)
 $75DB DEFB $01,$01,$01 ;
 $75DE DEFB $01,$01,$01 ; }
 $75E1 DEFB $00,$01,$01 ; {#SUPERTILE(195)
 $75E4 DEFB $01,$01,$01 ;
 $75E7 DEFB $01,$01,$01 ; }
 $75EA DEFB $7A,$7E,$7D ; {#SUPERTILE(196)
 $75ED DEFB $27,$00,$00 ;
 $75F0 DEFB $7C,$00,$00 ; }
 $75F3 DEFB $8C,$8C,$A1 ; {#SUPERTILE(197)
 $75F6 DEFB $1E,$1D,$73 ;
 $75F9 DEFB $4D,$3F,$B1 ; }
 $75FC DEFB $01,$01,$96 ; {#SUPERTILE(198)
 $75FF DEFB $0A,$0A,$0A ;
 $7602 DEFB $00,$00,$01 ; }
 $7605 DEFB $19,$F4,$19 ; {#SUPERTILE(199)
 $7608 DEFB $29,$F5,$29 ;
 $760B DEFB $00,$00,$00 ; }
 $760E DEFB $F4,$F3,$F0 ; {#SUPERTILE(200)
 $7611 DEFB $F5,$F2,$F1 ;
 $7614 DEFB $00,$00,$00 ; }
 $7617 DEFB $02,$00,$00 ; {#SUPERTILE(201)
 $761A DEFB $EF,$05,$00 ;
 $761D DEFB $12,$EE,$00 ; }
 $7620 DEFB $00,$05,$31 ; {#SUPERTILE(202)
 $7623 DEFB $EF,$02,$05 ;
 $7626 DEFB $00,$12,$EE ; }
 $7629 DEFB $00,$00,$00 ; {#SUPERTILE(203)
 $762C DEFB $01,$01,$01 ;
 $762F DEFB $01,$01,$01 ; }
 $7632 DEFB $02,$42,$24 ; {#SUPERTILE(204)
 $7635 DEFB $22,$23,$35 ;
 $7638 DEFB $32,$86,$01 ; }
 $763B DEFB $05,$12,$13 ; {#SUPERTILE(205)
 $763E DEFB $47,$22,$12 ;
 $7641 DEFB $01,$47,$32 ; }
 $7644 DEFB $0A,$0A,$0A ; {#SUPERTILE(206)
 $7647 DEFB $00,$00,$01 ;
 $764A DEFB $01,$01,$01 ; }
 $764D DEFB $00,$00,$00 ; {#SUPERTILE(207)
 $7650 DEFB $01,$01,$00 ;
 $7653 DEFB $01,$01,$01 ; }
 $7656 DEFB $01,$01,$01 ; {#SUPERTILE(208)
 $7659 DEFB $01,$01,$00 ;
 $765C DEFB $01,$01,$00 ; }
 $765F DEFB $0A,$0A,$0A ; {#SUPERTILE(209)
 $7662 DEFB $00,$00,$00 ;
 $7665 DEFB $00,$00,$00 ; }
 $7668 DEFB $00,$00,$24 ; {#SUPERTILE(210)
 $766B DEFB $32,$02,$DF ;
 $766E DEFB $00,$43,$42 ; }
 $7671 DEFB $00,$DF,$32 ; {#SUPERTILE(211)
 $7674 DEFB $00,$EF,$43 ;
 $7677 DEFB $00,$00,$42 ; }
 $767A DEFB $32,$EF,$00 ; {#SUPERTILE(212)
 $767D DEFB $42,$02,$43 ;
 $7680 DEFB $42,$52,$00 ; }
 $7683 DEFB $42,$02,$22 ; {#SUPERTILE(213)
 $7686 DEFB $42,$05,$02 ;
 $7689 DEFB $41,$42,$32 ; }
 $768C DEFB $1D,$1C,$B1 ; {#SUPERTILE(214)
 $768F DEFB $8C,$8C,$A1 ;
 $7692 DEFB $3D,$4F,$B1 ; }
 $7695 DEFB $01,$01,$01 ; {#SUPERTILE(215)
 $7698 DEFB $A0,$A0,$A1 ;
 $769B DEFB $2D,$4F,$B1 ; }
 $769E DEFB $01,$01,$01 ; {#SUPERTILE(216)
 $76A1 DEFB $58,$55,$56 ;
 $76A4 DEFB $78,$05,$53 ; }
 $76A7 DEFB $7C,$01,$01 ; {#SUPERTILE(217)
 $76AA DEFB $79,$01,$01 ;
 $76AD DEFB $E6,$E7,$E8 ; }
 $76B0 DEFB $E6,$BC,$E8 ; {#SUPERTILE(218)
 $76B3 DEFB $42,$23,$34 ;
 $76B6 DEFB $DE,$EF,$DF ; }
 $76B9 DEFB $42,$05,$54 ; {#SUPERTILE(219)
 $76BC DEFB $83,$84,$94 ;
 $76BF DEFB $B3,$B4,$A4 ; }
 $76C2 DEFB $02,$42,$24 ; {#SUPERTILE(220)
 $76C5 DEFB $22,$4D,$AE ;
 $76C8 DEFB $32,$EF,$4E ; }
 $76CB DEFB $C9,$CA,$CB ; {#SUPERTILE(221)
 $76CE DEFB $D9,$DA,$DB ;
 $76D1 DEFB $EA,$EB,$00 ; }
 $76D4 DEFB $99,$9A,$9B ; {#SUPERTILE(222)
 $76D7 DEFB $A9,$AA,$AB ;
 $76DA DEFB $B9,$BA,$BB ; }
 $76DD DEFB $02,$C7,$C8 ; {#SUPERTILE(223)
 $76E0 DEFB $03,$D7,$D8 ;
 $76E3 DEFB $00,$EF,$E9 ; }
 $76E6 DEFB $05,$97,$98 ; {#SUPERTILE(224)
 $76E9 DEFB $A6,$A7,$A8 ;
 $76EC DEFB $B6,$B7,$B8 ; }
 $76EF DEFB $02,$02,$34 ; {#SUPERTILE(225)
 $76F2 DEFB $12,$CF,$42 ;
 $76F5 DEFB $52,$A2,$A3 ; }
 $76F8 DEFB $C4,$C3,$A5 ; {#SUPERTILE(226)
 $76FB DEFB $C5,$00,$B5 ;
 $76FE DEFB $00,$00,$00 ; }
 $7701 DEFB $42,$41,$22 ; {#SUPERTILE(227)
 $7704 DEFB $03,$12,$42 ;
 $7707 DEFB $31,$52,$05 ; }
 $770A DEFB $00,$00,$00 ; {#SUPERTILE(228)
 $770D DEFB $63,$75,$00 ;
 $7710 DEFB $64,$74,$00 ; }
 $7713 DEFB $02,$EF,$00 ; {#SUPERTILE(229)
 $7716 DEFB $32,$00,$00 ;
 $7719 DEFB $02,$EE,$00 ; }
 $771C DEFB $00,$32,$02 ; {#SUPERTILE(230)
 $771F DEFB $22,$43,$12 ;
 $7722 DEFB $00,$31,$42 ; }
 $7725 DEFB $03,$04,$05 ; {#SUPERTILE(231)
 $7728 DEFB $13,$14,$15 ;
 $772B DEFB $23,$24,$25 ; }
 $772E DEFB $B1,$3D,$1E ; {#SUPERTILE(232)
 $7731 DEFB $B1,$3E,$3F ;
 $7734 DEFB $A1,$8C,$8C ; }
 $7737 DEFB $01,$01,$01 ; {#SUPERTILE(233)
 $773A DEFB $01,$01,$01 ;
 $773D DEFB $0A,$0A,$0A ; }
 $7740 DEFB $0A,$0A,$0A ; {#SUPERTILE(234)
 $7743 DEFB $00,$60,$00 ;
 $7746 DEFB $00,$60,$01 ; }
 $7749 DEFB $01,$01,$01 ; {#SUPERTILE(235)
 $774C DEFB $0A,$0A,$0A ;
 $774F DEFB $00,$C1,$B2 ; }
 $7752 DEFB $00,$00,$01 ; {#SUPERTILE(236)
 $7755 DEFB $01,$01,$01 ;
 $7758 DEFB $01,$01,$01 ; }
 $775B DEFB $0A,$0A,$0A ; {#SUPERTILE(237)
 $775E DEFB $00,$C1,$B2 ;
 $7761 DEFB $00,$00,$01 ; }
 $7764 DEFB $01,$01,$01 ; {#SUPERTILE(238)
 $7767 DEFB $D0,$D1,$01 ;
 $776A DEFB $0A,$0A,$0A ; }
 $776D DEFB $01,$0A,$0A ; {#SUPERTILE(239)
 $7770 DEFB $00,$00,$00 ;
 $7773 DEFB $01,$01,$01 ; }
 $7776 DEFB $0A,$0A,$00 ; {#SUPERTILE(240)
 $7779 DEFB $00,$00,$00 ;
 $777C DEFB $01,$01,$00 ; }
 $777F DEFB $0A,$FA,$FB ; {#SUPERTILE(241)
 $7782 DEFB $00,$00,$00 ;
 $7785 DEFB $01,$01,$00 ; }
 $7788 DEFB $01,$01,$01 ; {#SUPERTILE(242)
 $778B DEFB $01,$01,$00 ;
 $778E DEFB $01,$01,$01 ; }
 $7791 DEFB $A1,$3D,$1E ; {#SUPERTILE(243)
 $7794 DEFB $B1,$AE,$4E ;
 $7797 DEFB $A1,$A0,$A0 ; }
 $779A DEFB $01,$01,$00 ; {#SUPERTILE(244)
 $779D DEFB $01,$01,$01 ;
 $77A0 DEFB $01,$01,$01 ; }
 $77A3 DEFB $00,$00,$00 ; {#SUPERTILE(245)
 $77A6 DEFB $01,$01,$01 ;
 $77A9 DEFB $01,$01,$01 ; }
 $77AC DEFB $00,$00,$01 ; {#SUPERTILE(246)
 $77AF DEFB $01,$01,$01 ;
 $77B2 DEFB $01,$01,$01 ; }
 $77B5 DEFB $00,$C1,$B2 ; {#SUPERTILE(247)
 $77B8 DEFB $00,$00,$01 ;
 $77BB DEFB $01,$01,$01 ; }
 $77BE DEFB $01,$01,$01 ; {#SUPERTILE(248)
 $77C1 DEFB $A1,$A0,$A0 ;
 $77C4 DEFB $B1,$4F,$1D ; }
 $77C7 DEFB $01,$01,$01 ; {#SUPERTILE(249)
 $77CA DEFB $01,$01,$01 ;
 $77CD DEFB $01,$01,$00 ; }
 $77D0 DEFB $0A,$0A,$0A ; {#SUPERTILE(250)
 $77D3 DEFB $00,$00,$01 ;
 $77D6 DEFB $01,$01,$01 ; }
 $77D9 DEFB $0A,$0A,$0A ; {#SUPERTILE(251)
 $77DC DEFB $00,$00,$00 ;
 $77DF DEFB $01,$01,$01 ; }
 $77E2 DEFB $01,$01,$10 ; {#SUPERTILE(252)
 $77E5 DEFB $0A,$0A,$0A ;
 $77E8 DEFB $00,$00,$00 ; }
 $77EB DEFB $A0,$CE,$CE ; {#SUPERTILE(253)
 $77EE DEFB $00,$00,$00 ;
 $77F1 DEFB $00,$00,$00 ; }
 $77F4 DEFB $00,$00,$01 ; {#SUPERTILE(254)
 $77F7 DEFB $00,$00,$01 ;
 $77FA DEFB $00,$00,$95 ; }
 $77FD DEFB $D6,$01,$01 ; {#SUPERTILE(255)
 $7800 DEFB $01,$01,$01 ;
 $7803 DEFB $01,$01,$01 ; }

; Room layout
;
; Every room is composed of 70 supertiles in a 10x7 grid configuration. Every
; supertile is a grid of 9 (3x3) tiles. This data block contains the references
; of the supertiles thats build every room (from left to right, top to bottom).
; The supertiles are defined at address #R$6F06
;
; .
;
; ---------------------------------------- Room 0
; ---------------------------------------
; .
; #ROOM0
b$7806 DEFB $3C,$40,$17,$3D,$3D,$3D,$57,$40,$17,$3D
 $7810 DEFB $34,$1C,$17,$00,$00,$00,$52,$1C,$17,$00
 $781A DEFB $37,$1C,$17,$12,$03,$06,$52,$58,$BB,$56
 $7824 DEFB $70,$59,$17,$00,$30,$2D,$52,$1C,$17,$00
 $782E DEFB $6E,$1C,$17,$79,$2F,$2C,$52,$1C,$17,$18
 $7838 DEFB $37,$FE,$BB,$56,$2F,$2C,$52,$1C,$17,$BA
 $7842 DEFB $32,$3A,$DA,$27,$2A,$27,$5E,$27,$DA,$27
; ---------------------------------------- Room 1
; ---------------------------------------
; .
; #ROOM1
 $784C DEFB $6F,$67,$5F,$6F,$67,$57,$40,$71,$6F,$67
 $7856 DEFB $00,$00,$00,$00,$00,$52,$1C,$5A,$00,$00
 $7860 DEFB $30,$2D,$79,$00,$00,$52,$58,$71,$00,$00
 $786A DEFB $2F,$2C,$77,$FC,$75,$52,$1C,$5A,$56,$00
 $7874 DEFB $2F,$2C,$38,$D7,$39,$62,$1C,$71,$00,$18
 $787E DEFB $31,$D9,$33,$34,$D6,$52,$1C,$5A,$79,$00
 $7888 DEFB $3B,$27,$28,$32,$32,$3A,$2A,$DA,$3B,$27
; ---------------------------------------- Room 2
; ---------------------------------------
; .
; #ROOM2
 $7892 DEFB $3D,$7C,$7B,$3D,$5D,$4F,$2F,$2C,$46,$6B
 $789C DEFB $00,$7D,$7A,$00,$00,$00,$2F,$2C,$46,$48
 $78A6 DEFB $00,$7E,$F6,$00,$00,$00,$2F,$2C,$46,$4E
 $78B0 DEFB $60,$38,$39,$FC,$53,$00,$2F,$2C,$74,$73
 $78BA DEFB $75,$33,$6E,$56,$64,$79,$2F,$2C,$46,$4E
 $78C4 DEFB $60,$33,$34,$65,$63,$66,$31,$D9,$22,$48
 $78CE DEFB $3B,$28,$32,$3A,$69,$6A,$3B,$27,$2A,$29
; ---------------------------------------- Room 3
; ---------------------------------------
; .
; #ROOM3
 $78D8 DEFB $6F,$67,$3D,$3D,$5D,$5F,$6F,$67,$42,$48
 $78E2 DEFB $00,$12,$03,$06,$00,$00,$00,$00,$74,$48
 $78EC DEFB $00,$38,$92,$93,$8F,$00,$30,$2D,$46,$4E
 $78F6 DEFB $00,$33,$88,$8A,$8D,$75,$2F,$2C,$46,$6B
 $7900 DEFB $19,$33,$86,$85,$8B,$75,$2F,$2C,$46,$48
 $790A DEFB $60,$33,$87,$89,$8C,$56,$2F,$2C,$46,$6B
 $7914 DEFB $5E,$28,$90,$86,$91,$43,$2F,$2C,$46,$4E
; ---------------------------------------- Room 4
; ---------------------------------------
; .
; #ROOM4
 $791E DEFB $3D,$3D,$5F,$6F,$67,$57,$40,$71,$3D,$5D
 $7928 DEFB $19,$00,$00,$00,$00,$52,$1C,$5A,$00,$00
 $7932 DEFB $78,$45,$53,$00,$00,$52,$1C,$17,$00,$00
 $793C DEFB $77,$78,$FC,$75,$00,$52,$58,$BB,$56,$00
 $7946 DEFB $19,$00,$00,$00,$60,$52,$1C,$71,$00,$00
 $7950 DEFB $00,$00,$00,$68,$64,$9E,$15,$5A,$79,$00
 $795A DEFB $27,$5E,$27,$2A,$69,$3A,$27,$DA,$27,$3B
; ---------------------------------------- Room 5
; ---------------------------------------
; .
; #ROOM5
 $7964 DEFB $3C,$A2,$17,$1A,$A1,$1A,$61,$A2,$17,$5F
 $796E DEFB $34,$1C,$71,$00,$A1,$76,$52,$1C,$5A,$00
 $7978 DEFB $70,$1C,$17,$00,$A1,$76,$52,$1C,$17,$77
 $7982 DEFB $37,$9F,$BB,$D7,$A0,$75,$52,$1C,$5A,$00
 $798C DEFB $6E,$9F,$17,$34,$76,$68,$9D,$1C,$17,$00
 $7996 DEFB $37,$9F,$71,$6E,$56,$63,$94,$1C,$BB,$00
 $79A0 DEFB $32,$2A,$DA,$32,$2A,$69,$2A,$3B,$DA,$27
; ---------------------------------------- Room 6
; ---------------------------------------
; .
; #ROOM6
 $79AA DEFB $3C,$40,$17,$5D,$AA,$3D,$A7,$AA,$17,$AA
 $79B4 DEFB $34,$1C,$71,$00,$A1,$79,$52,$A1,$17,$A1
 $79BE DEFB $37,$1C,$5A,$00,$A1,$00,$52,$A1,$17,$A1
 $79C8 DEFB $6E,$59,$17,$79,$A1,$00,$52,$A1,$17,$A6
 $79D2 DEFB $70,$59,$17,$00,$A1,$00,$9D,$9F,$17,$18
 $79DC DEFB $34,$1C,$BB,$00,$A1,$00,$52,$AF,$17,$AE
 $79E6 DEFB $32,$43,$17,$56,$A4,$00,$A3,$A8,$DA,$A9
; ---------------------------------------- Room 7
; ---------------------------------------
; .
; #ROOM7
 $79F0 DEFB $5D,$AA,$3D,$3D,$AA,$4F,$1A,$A1,$46,$48
 $79FA DEFB $00,$A1,$00,$00,$A1,$00,$00,$A1,$46,$4E
 $7A04 DEFB $00,$A1,$00,$00,$A1,$00,$00,$A1,$46,$48
 $7A0E DEFB $00,$A6,$00,$00,$A1,$00,$00,$A1,$9D,$48
 $7A18 DEFB $00,$64,$00,$00,$A6,$68,$00,$A6,$74,$4E
 $7A22 DEFB $AE,$63,$B2,$64,$B2,$63,$B1,$D8,$B6,$48
 $7A2C DEFB $A8,$85,$A9,$A9,$A8,$AB,$A9,$4B,$A8,$29
; ---------------------------------------- Room 8
; ---------------------------------------
; .
; #ROOM8
 $7A36 DEFB $67,$3D,$6F,$67,$3D,$3D,$3D,$3D,$42,$48
 $7A40 DEFB $19,$60,$00,$00,$00,$55,$BD,$00,$46,$4E
 $7A4A DEFB $75,$25,$60,$25,$00,$00,$00,$B9,$46,$48
 $7A54 DEFB $55,$FC,$75,$12,$03,$06,$00,$A1,$46,$48
 $7A5E DEFB $00,$64,$55,$FC,$75,$25,$00,$A1,$46,$4E
 $7A68 DEFB $64,$63,$D8,$B1,$AE,$B2,$00,$A1,$46,$48
 $7A72 DEFB $A9,$AB,$85,$A9,$A9,$BC,$00,$A4,$46,$29
; ---------------------------------------- Room 9
; ---------------------------------------
; .
; #ROOM9
 $7A7C DEFB $6E,$2F,$2C,$1A,$23,$3E,$67,$3D,$3D,$6F
 $7A86 DEFB $34,$16,$D9,$00,$00,$00,$00,$00,$00,$00
 $7A90 DEFB $37,$BE,$BE,$BE,$C0,$00,$55,$53,$55,$78
 $7A9A DEFB $37,$FC,$FC,$BD,$C0,$77,$53,$FF,$60,$25
 $7AA4 DEFB $34,$56,$AE,$55,$45,$53,$25,$60,$25,$00
 $7AAE DEFB $70,$AE,$4B,$D8,$B1,$64,$B2,$AE,$64,$B2
 $7AB8 DEFB $32,$A9,$17,$A9,$A8,$A9,$85,$A9,$4B,$A9
; ---------------------------------------- Room 10
; ---------------------------------------
; .
; #ROOM10
 $7AC2 DEFB $3C,$5F,$AA,$6F,$67,$6F,$67,$6F,$67,$3D
 $7ACC DEFB $6E,$00,$A1,$00,$00,$00,$00,$00,$00,$00
 $7AD6 DEFB $37,$00,$A6,$00,$00,$00,$00,$00,$00,$18
 $7AE0 DEFB $70,$56,$77,$BD,$00,$38,$1F,$1F,$4C,$77
 $7AEA DEFB $37,$00,$00,$BF,$C0,$33,$D6,$34,$34,$00
 $7AF4 DEFB $6E,$30,$2D,$BF,$C0,$33,$34,$A9,$8C,$56
 $7AFE DEFB $70,$2F,$2C,$00,$C1,$28,$32,$80,$91,$2A
; ---------------------------------------- Room 11
; ---------------------------------------
; .
; #ROOM11
 $7B08 DEFB $3D,$3D,$3D,$5D,$4F,$2F,$2C,$1A,$46,$48
 $7B12 DEFB $00,$00,$00,$00,$00,$2F,$2C,$00,$46,$4E
 $7B1C DEFB $00,$00,$12,$03,$06,$2F,$2C,$00,$46,$48
 $7B26 DEFB $BD,$25,$60,$25,$60,$31,$D9,$00,$46,$48
 $7B30 DEFB $00,$60,$25,$00,$68,$C2,$C3,$00,$74,$4E
 $7B3A DEFB $60,$B2,$AE,$64,$63,$AE,$D8,$64,$B6,$48
 $7B44 DEFB $28,$A9,$A8,$A9,$AB,$A9,$32,$2A,$27,$29
; ---------------------------------------- Room 12
; ---------------------------------------
; .
; #ROOM12
 $7B4E DEFB $34,$00,$00,$1A,$60,$1A,$00,$00,$46,$48
 $7B58 DEFB $6E,$77,$EB,$FC,$78,$53,$00,$00,$46,$4E
 $7B62 DEFB $37,$00,$EC,$00,$00,$00,$77,$BD,$46,$29
 $7B6C DEFB $70,$56,$00,$00,$79,$25,$60,$25,$46,$48
 $7B76 DEFB $6E,$77,$45,$BD,$25,$60,$00,$00,$46,$4E
 $7B80 DEFB $34,$BA,$A5,$64,$AE,$30,$2D,$00,$46,$48
 $7B8A DEFB $32,$2A,$3B,$27,$BC,$2F,$2C,$00,$46,$73
; ---------------------------------------- Room 13
; ---------------------------------------
; .
; #ROOM13
 $7B94 DEFB $34,$00,$64,$00,$00,$00,$1A,$A1,$46,$48
 $7B9E DEFB $37,$3D,$ED,$3D,$EA,$FA,$00,$A1,$46,$4E
 $7BA8 DEFB $6E,$AE,$00,$00,$A1,$00,$00,$A6,$74,$29
 $7BB2 DEFB $37,$ED,$EA,$FA,$A1,$77,$03,$06,$46,$48
 $7BBC DEFB $70,$00,$A1,$00,$A6,$00,$00,$00,$46,$73
 $7BC6 DEFB $34,$00,$A6,$00,$00,$00,$00,$00,$74,$48
 $7BD0 DEFB $37,$00,$E9,$EE,$E9,$E9,$EE,$E9,$46,$48
; ---------------------------------------- Room 14
; ---------------------------------------
; .
; #ROOM14
 $7BDA DEFB $34,$77,$BD,$1A,$00,$00,$00,$00,$46,$48
 $7BE4 DEFB $37,$00,$00,$60,$25,$60,$0E,$00,$46,$4E
 $7BEE DEFB $6E,$56,$00,$00,$00,$00,$EF,$EA,$F0,$29
 $7BF8 DEFB $37,$00,$00,$60,$25,$60,$00,$A6,$46,$48
 $7C02 DEFB $70,$EF,$FA,$00,$00,$00,$0E,$00,$46,$4E
 $7C0C DEFB $6E,$3D,$FA,$0E,$0E,$00,$EF,$EA,$F0,$73
 $7C16 DEFB $37,$EF,$FA,$00,$EF,$FA,$00,$A4,$46,$48
; ---------------------------------------- Room 15
; ---------------------------------------
; .
; #ROOM15
 $7C20 DEFB $37,$79,$1A,$00,$00,$1A,$64,$79,$46,$48
 $7C2A DEFB $34,$79,$00,$00,$AE,$30,$2D,$F2,$F0,$4E
 $7C34 DEFB $37,$EA,$CE,$30,$2D,$2F,$2C,$F2,$F0,$29
 $7C3E DEFB $34,$A1,$00,$2F,$2C,$2F,$2C,$F2,$F0,$29
 $7C48 DEFB $37,$A1,$00,$2F,$2C,$2F,$2C,$00,$74,$48
 $7C52 DEFB $6E,$A1,$00,$31,$D9,$31,$D9,$F2,$F1,$48
 $7C5C DEFB $37,$A6,$E9,$C2,$C3,$C2,$C3,$00,$46,$4E
; ---------------------------------------- Room 16
; ---------------------------------------
; .
; #ROOM16
 $7C66 DEFB $37,$2F,$2C,$46,$48,$34,$1A,$A1,$46,$48
 $7C70 DEFB $70,$16,$D9,$46,$4E,$37,$00,$A6,$46,$4E
 $7C7A DEFB $34,$EA,$ED,$46,$48,$34,$79,$00,$46,$48
 $7C84 DEFB $37,$A1,$00,$46,$48,$37,$00,$60,$74,$29
 $7C8E DEFB $37,$A6,$00,$46,$4E,$37,$79,$25,$46,$48
 $7C98 DEFB $6E,$56,$79,$46,$F3,$7A,$00,$60,$46,$4E
 $7CA2 DEFB $37,$E9,$79,$F4,$F5,$F6,$79,$E9,$46,$48
; ---------------------------------------- Room 17
; ---------------------------------------
; .
; #ROOM17
 $7CAC DEFB $37,$00,$00,$00,$00,$79,$1A,$00,$46,$48
 $7CB6 DEFB $70,$56,$00,$00,$00,$00,$79,$00,$46,$48
 $7CC0 DEFB $6E,$00,$00,$77,$03,$06,$EF,$EA,$F0,$29
 $7CCA DEFB $37,$30,$2D,$00,$00,$00,$00,$A1,$46,$48
 $7CD4 DEFB $70,$2F,$2C,$F9,$F8,$4C,$00,$A1,$46,$48
 $7CDE DEFB $37,$2F,$2C,$46,$48,$37,$EF,$EA,$F0,$4E
 $7CE8 DEFB $6E,$2F,$2C,$46,$48,$37,$00,$A4,$46,$48
; ---------------------------------------- Room 18
; ---------------------------------------
; .
; #ROOM18
 $7CF2 DEFB $3C,$5D,$3D,$3D,$AA,$4F,$1A,$A1,$46,$48
 $7CFC DEFB $70,$56,$00,$00,$A1,$00,$00,$A1,$46,$4E
 $7D06 DEFB $34,$00,$79,$00,$A1,$00,$00,$A1,$46,$29
 $7D10 DEFB $37,$00,$00,$79,$A1,$00,$00,$A1,$46,$48
 $7D1A DEFB $34,$00,$00,$64,$A6,$00,$AE,$A6,$46,$48
 $7D24 DEFB $37,$FB,$FB,$CE,$79,$EF,$CE,$00,$46,$4E
 $7D2E DEFB $6E,$00,$00,$00,$79,$E9,$00,$00,$46,$48
; ---------------------------------------- Room 19
; ---------------------------------------
; .
; #ROOM19
 $7D38 DEFB $70,$2C,$46,$48,$37,$46,$48,$37,$46,$48
 $7D42 DEFB $34,$2C,$46,$F3,$7A,$74,$29,$37,$46,$29
 $7D4C DEFB $37,$2C,$F4,$F7,$F6,$46,$F3,$7A,$46,$48
 $7D56 DEFB $70,$D9,$00,$00,$79,$F4,$F7,$F6,$46,$4E
 $7D60 DEFB $34,$C3,$60,$79,$99,$60,$00,$00,$46,$48
 $7D6A DEFB $70,$56,$64,$B2,$63,$AE,$60,$A5,$46,$29
 $7D74 DEFB $32,$2A,$A8,$A9,$AB,$BC,$EF,$EA,$F0,$48
; ---------------------------------------- Room 20
; ---------------------------------------
; .
; #ROOM20
 $7D7E DEFB $34,$2C,$00,$23,$3D,$5F,$3D,$3D,$6F,$48
 $7D88 DEFB $37,$2C,$00,$00,$00,$00,$00,$00,$46,$4E
 $7D92 DEFB $70,$2C,$F9,$F8,$1F,$00,$79,$00,$F1,$48
 $7D9C DEFB $37,$2C,$46,$F3,$7A,$00,$00,$60,$46,$48
 $7DA6 DEFB $34,$2C,$F4,$F5,$F6,$77,$03,$06,$46,$29
 $7DB0 DEFB $37,$2C,$F9,$F8,$1F,$00,$00,$00,$46,$4E
 $7DBA DEFB $70,$2C,$46,$48,$37,$F9,$F8,$4C,$46,$48
; ---------------------------------------- Room 21
; ---------------------------------------
; .
; #ROOM21
 $7DC4 DEFB $37,$00,$00,$1A,$00,$23,$3D,$3D,$6F,$48
 $7DCE DEFB $34,$00,$30,$2D,$00,$00,$0E,$00,$46,$4E
 $7DD8 DEFB $70,$56,$31,$D9,$00,$00,$EF,$EA,$F1,$48
 $7DE2 DEFB $34,$00,$C2,$C3,$55,$BD,$00,$A6,$46,$73
 $7DEC DEFB $37,$00,$00,$79,$25,$68,$60,$00,$46,$4E
 $7DF6 DEFB $34,$00,$79,$25,$B2,$63,$D8,$64,$B6,$48
 $7E00 DEFB $37,$2D,$00,$A3,$A8,$AB,$A9,$A9,$A8,$29
; ---------------------------------------- Room 22
; ---------------------------------------
; .
; #ROOM22
 $7E0A DEFB $37,$A1,$46,$F3,$7A,$46,$F3,$7A,$46,$48
 $7E14 DEFB $70,$A1,$F4,$F7,$F6,$F4,$F7,$00,$46,$4E
 $7E1E DEFB $6E,$A1,$00,$00,$77,$78,$45,$C6,$46,$48
 $7E28 DEFB $37,$A6,$77,$75,$25,$77,$C6,$00,$74,$73
 $7E32 DEFB $37,$56,$00,$00,$77,$78,$45,$C6,$46,$4E
 $7E3C DEFB $34,$00,$77,$75,$25,$0E,$00,$64,$B6,$48
 $7E46 DEFB $37,$00,$E9,$E9,$60,$C1,$2A,$3B,$27,$29
; ---------------------------------------- Room 23
; ---------------------------------------
; .
; #ROOM23
 $7E50 DEFB $6E,$3D,$5F,$3D,$3D,$AA,$4F,$79,$46,$73
 $7E5A DEFB $37,$00,$00,$00,$00,$A1,$00,$79,$46,$4E
 $7E64 DEFB $70,$56,$00,$00,$00,$A1,$00,$60,$46,$48
 $7E6E DEFB $34,$00,$00,$79,$00,$A6,$00,$79,$46,$48
 $7E78 DEFB $37,$EA,$CE,$00,$00,$F9,$F8,$1F,$46,$4E
 $7E82 DEFB $70,$A1,$77,$03,$06,$46,$48,$37,$46,$73
 $7E8C DEFB $6E,$A4,$F9,$F8,$1F,$46,$48,$37,$46,$4E
; ---------------------------------------- Room 24
; ---------------------------------------
; .
; #ROOM24
 $7E96 DEFB $E5,$01,$01,$01,$01,$0B,$01,$01,$01,$CA
 $7EA0 DEFB $C8,$C7,$C7,$C7,$C7,$C7,$C7,$C7,$C7,$C8
 $7EAA DEFB $CC,$00,$00,$79,$00,$00,$00,$00,$00,$CD
 $7EB4 DEFB $7C,$00,$79,$EF,$CE,$00,$EF,$EA,$CE,$F8
 $7EBE DEFB $6E,$68,$00,$79,$79,$00,$00,$A1,$00,$73
 $7EC8 DEFB $37,$63,$00,$00,$00,$79,$00,$A6,$00,$4E
 $7ED2 DEFB $32,$A8,$2A,$5E,$27,$28,$43,$E9,$E9,$48
; ---------------------------------------- Room 25
; ---------------------------------------
; .
; #ROOM25
 $7EDC DEFB $C7,$C7,$C7,$C7,$C7,$C7,$C7,$C7,$C7,$C7
 $7EE6 DEFB $E3,$E3,$E3,$85,$E3,$D4,$01,$01,$CA,$E3
 $7EF0 DEFB $E3,$E5,$9A,$E1,$DB,$01,$01,$01,$CA,$85
 $7EFA DEFB $85,$D4,$D3,$E0,$DE,$E4,$01,$01,$01,$E3
 $7F04 DEFB $E3,$E5,$01,$DF,$DD,$01,$01,$0B,$D3,$D5
 $7F0E DEFB $E3,$01,$01,$01,$E2,$01,$10,$01,$D2,$E3
 $7F18 DEFB $D4,$01,$01,$01,$01,$0C,$10,$D3,$D5,$85

; Unused - Remnant Room Layout from Rex (Side A)
s$7F22 DEFB $BA,$91,$92,$86,$91,$92,$86,$91,$92,$92
 $7F2C DEFB $B5,$19,$00,$00,$00,$00,$00,$00,$CE,$2C
 $7F36 DEFB $BA,$A9,$00,$00,$9F,$00,$00,$52,$00,$C8
 $7F40 DEFB $8C,$A8,$A9,$00,$A2,$A1,$53,$00,$2B,$9A
 $7F4A DEFB $BA,$00,$A8,$A7,$A7,$A6,$00,$B8,$90,$9B
 $7F54 DEFB $BA,$8F,$84,$00,$B8,$00,$B8,$00,$2B,$8F
 $7F5E DEFB $BA,$8E,$A4,$A9,$95,$95,$95,$95,$A5,$D3
 $7F68 DEFB $91,$BA,$92,$B7,$92,$86,$91,$92,$86,$8B
 $7F72 DEFB $2D,$8C,$00,$B7,$00,$00,$00,$00,$00,$B9
 $7F7C DEFB $27,$BA,$00,$B7,$00,$8A,$00,$00,$00,$B9
 $7F86 DEFB $FB,$8C,$00,$B7,$00,$9C,$00,$8A,$00,$B9
 $7F90 DEFB $FA,$BA,$00,$B7,$00,$00,$00,$B7,$00,$B9
 $7F9A DEFB $9B,$8C,$00,$9C,$00,$00,$00,$B7,$00,$B9
 $7FA4 DEFB $D3,$BA,$00,$00,$00,$00,$00,$B7,$00,$B9
 $7FAE DEFB $BA,$86,$91,$92,$91,$92,$91,$92,$BA,$92
 $7FB8 DEFB $BA,$00,$00,$00,$00,$00,$00,$A0,$BA,$00
 $7FC2 DEFB $BA,$9F,$00,$00,$00,$A5,$93,$A4,$BA,$00
 $7FCC DEFB $BA,$A7,$A9,$00,$A4,$A3,$00,$00,$BA,$00
 $7FD6 DEFB $BA,$84,$A8,$A6,$00,$00,$00,$00,$BA,$00
 $7FE0 DEFB $BA,$A7,$A7,$A7,$8A,$A7,$A9,$00,$B5,$18
 $7FEA DEFB $BA,$00,$00,$00,$B7,$00,$A8,$A7,$BA,$A7
 $7FF4 DEFB $00,$00,$00,$00,$1A,$A5,$A3,$00,$2C,$27
 $7FFE DEFB $00,$00,$00,$00,$A5,$A3,$CB,$2D,$27,$9B
 $8008 DEFB $84,$00,$00,$A4,$A3,$2D,$27,$9A,$9B,$9A
 $8012 DEFB $87,$87,$A6,$B8,$00,$3B,$4D,$85,$85,$3B
 $801C DEFB $00,$00,$00,$00,$B8,$4B,$4E,$00,$00,$00
 $8026 DEFB $00,$00,$00,$00,$00,$B8,$00,$00,$2D,$9B
 $8030 DEFB $A7,$A6,$00,$A4,$A6,$00,$A4,$A6,$9A,$8E
 $803A DEFB $9B,$9A,$27,$28,$27,$4D,$27,$8F,$90,$8E
 $8044 DEFB $9A,$27,$D8,$DB,$85,$00,$56,$28,$8E,$9B
 $804E DEFB $4D,$DC,$00,$00,$00,$5F,$00,$D7,$85,$DC
 $8058 DEFB $3C,$00,$A4,$93,$A6,$00,$00,$00,$00,$00
 $8062 DEFB $27,$A4,$A9,$00,$00,$08,$08,$00,$00,$00
 $806C DEFB $9B,$24,$A8,$A9,$00,$03,$9D,$00,$00,$18
 $8076 DEFB $9A,$27,$23,$A8,$A9,$95,$95,$95,$95,$95
 $8080 DEFB $9A,$9B,$9A,$D8,$B7,$56,$27,$28,$8E,$8F
 $808A DEFB $27,$D5,$4D,$00,$B7,$00,$DB,$D3,$27,$8E
 $8094 DEFB $D2,$DC,$00,$00,$B7,$00,$00,$00,$4F,$D3
 $809E DEFB $83,$00,$00,$00,$9C,$00,$B8,$00,$B8,$00
 $80A8 DEFB $A4,$A6,$00,$A4,$87,$A6,$00,$00,$B8,$00
 $80B2 DEFB $00,$00,$00,$00,$00,$00,$00,$B8,$00,$00
 $80BC DEFB $02,$02,$89,$02,$02,$89,$02,$02,$89,$02
 $80C6 DEFB $9B,$27,$27,$8F,$8F,$8D,$8E,$9A,$9B,$27
 $80D0 DEFB $27,$D8,$DC,$85,$85,$D3,$9A,$9B,$9A,$D8
 $80DA DEFB $3C,$00,$83,$00,$00,$00,$85,$85,$85,$00
 $80E4 DEFB $00,$00,$A4,$93,$A4,$A9,$00,$00,$00,$00
 $80EE DEFB $19,$00,$00,$08,$08,$A8,$A9,$00,$00,$00
 $80F8 DEFB $A6,$00,$00,$03,$9D,$A4,$A7,$A6,$00,$A4
 $8102 DEFB $02,$89,$02,$02,$02,$02,$02,$89,$02,$02
 $810C DEFB $D8,$27,$9B,$9B,$9A,$8D,$27,$8F,$8F,$27
 $8116 DEFB $2B,$28,$8F,$9B,$9A,$9A,$8F,$28,$9A,$28
 $8120 DEFB $00,$85,$D3,$27,$9A,$8E,$27,$D8,$85,$3B
 $812A DEFB $00,$34,$3A,$9B,$9A,$27,$DC,$00,$00,$00
 $8134 DEFB $19,$00,$00,$85,$D3,$DA,$00,$00,$00,$00
 $813E DEFB $A6,$00,$00,$00,$00,$00,$00,$00,$00,$A4
 $8148 DEFB $02,$02,$02,$02,$89,$02,$02,$02,$02,$02
 $8152 DEFB $9B,$D5,$9A,$3C,$2C,$9A,$28,$8E,$8F,$D8
 $815C DEFB $28,$D6,$3B,$27,$9B,$9B,$27,$D8,$27,$24
 $8166 DEFB $D8,$00,$00,$DC,$85,$85,$D7,$00,$D3,$27
 $8170 DEFB $00,$00,$00,$00,$00,$00,$0D,$3A,$27,$8F
 $817A DEFB $19,$00,$00,$00,$A4,$A6,$00,$00,$D3,$28
 $8184 DEFB $A4,$A9,$A4,$A6,$00,$00,$00,$00,$00,$D9
 $818E DEFB $00,$A8,$A9,$95,$95,$95,$95,$A5,$A6,$27

; Graphics data for player, enemies, hud and room objects
b$8198 DEFB $00,$00,$00,$43,$00,$00,$04,$00 ; {#UDGARRAY3,$47,,3;$8198-$8257-1-24(footman_walking)
 $81A0 DEFB $00,$24,$40,$00,$03,$C0,$00,$28 ;
 $81A8 DEFB $00,$00,$12,$80,$00,$10,$B4,$00 ;
 $81B0 DEFB $2E,$40,$00,$20,$68,$00,$02,$00 ;
 $81B8 DEFB $00,$13,$00,$00,$01,$00,$00,$20 ;
 $81C0 DEFB $00,$00,$40,$A0,$00,$20,$40,$00 ;
 $81C8 DEFB $00,$00,$00,$10,$C0,$00,$01,$00 ;
 $81D0 DEFB $00,$09,$10,$00,$00,$F0,$00,$0A ;
 $81D8 DEFB $00,$00,$04,$A0,$00,$04,$2D,$00 ;
 $81E0 DEFB $0B,$10,$00,$08,$1A,$00,$00,$C0 ;
 $81E8 DEFB $00,$02,$60,$00,$00,$20,$00,$08 ;
 $81F0 DEFB $00,$00,$10,$40,$00,$10,$60,$00 ;
 $81F8 DEFB $00,$00,$00,$00,$8C,$00,$00,$10 ;
 $8200 DEFB $00,$00,$91,$00,$00,$4F,$00,$00 ;
 $8208 DEFB $80,$00,$00,$2A,$00,$00,$42,$D0 ;
 $8210 DEFB $00,$B1,$00,$00,$85,$A0,$00,$30 ;
 $8218 DEFB $00,$00,$10,$00,$01,$20,$00,$02 ;
 $8220 DEFB $00,$00,$02,$40,$00,$00,$60,$00 ;
 $8228 DEFB $00,$46,$00,$00,$08,$00,$00,$48 ;
 $8230 DEFB $80,$00,$27,$80,$00,$40,$00,$00 ;
 $8238 DEFB $15,$00,$00,$21,$68,$00,$58,$80 ;
 $8240 DEFB $00,$40,$D0,$00,$0C,$00,$00,$08 ;
 $8248 DEFB $00,$00,$19,$00,$00,$00,$00,$00 ;
 $8250 DEFB $22,$00,$00,$44,$00,$00,$62,$00 ; }
 $8258 DEFB $02,$00,$00,$00,$00,$00,$08,$80 ; {#UDGARRAY3,$47,,3;$8258-$8317-1-24(footman_dying)
 $8260 DEFB $00,$1C,$C0,$00,$06,$00,$00,$04 ;
 $8268 DEFB $C0,$00,$18,$30,$00,$01,$08,$00 ;
 $8270 DEFB $00,$80,$00,$00,$20,$00,$04,$C0 ;
 $8278 DEFB $00,$0D,$80,$00,$03,$00,$00,$20 ;
 $8280 DEFB $80,$00,$08,$40,$00,$00,$80,$00 ;
 $8288 DEFB $00,$00,$00,$00,$64,$00,$00,$30 ;
 $8290 DEFB $00,$01,$34,$00,$01,$E8,$00,$0A ;
 $8298 DEFB $04,$00,$01,$90,$00,$04,$48,$00 ;
 $82A0 DEFB $00,$94,$00,$00,$02,$00,$00,$62 ;
 $82A8 DEFB $00,$00,$80,$00,$01,$00,$00,$00 ;
 $82B0 DEFB $80,$00,$00,$80,$00,$01,$00,$00 ;
 $82B8 DEFB $01,$00,$00,$00,$00,$00,$01,$40 ;
 $82C0 DEFB $00,$00,$69,$00,$00,$89,$80,$00 ;
 $82C8 DEFB $07,$00,$06,$52,$10,$29,$40,$C0 ;
 $82D0 DEFB $11,$B5,$80,$03,$04,$00,$02,$12 ;
 $82D8 DEFB $00,$04,$02,$00,$04,$00,$00,$18 ;
 $82E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $82E8 DEFB $00,$10,$00,$00,$00,$00,$00,$14 ;
 $82F0 DEFB $00,$00,$06,$90,$00,$08,$98,$00 ;
 $82F8 DEFB $00,$70,$00,$65,$21,$02,$94,$0C ;
 $8300 DEFB $01,$1B,$58,$00,$30,$40,$00,$21 ;
 $8308 DEFB $20,$00,$40,$20,$00,$40,$00,$01 ;
 $8310 DEFB $80,$00,$00,$00,$00,$00,$00,$00 ; }
 $8318 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8318-$8337-1-16(footman_crouched)
 $8320 DEFB $00,$00,$08,$C0,$01,$00,$09,$10 ;
 $8328 DEFB $04,$F0,$09,$09,$01,$24,$08,$CA ;
 $8330 DEFB $01,$A0,$04,$80,$0A,$A0,$09,$B0 ; }
 $8338 DEFB $00,$00,$08,$C0,$01,$00,$09,$10 ; {#UDGARRAY2,$47,,2;$8338-$8357-1-16(footman_standby)
 $8340 DEFB $04,$F0,$08,$00,$02,$80,$02,$40 ;
 $8348 DEFB $01,$00,$08,$C0,$01,$50,$00,$88 ;
 $8350 DEFB $00,$92,$00,$08,$01,$00,$01,$C0 ; }
 $8358 DEFB $04,$80,$00,$02,$80,$00,$01,$64 ; {#UDGARRAY3,$47,,3;$8358-$8417-1-24(rex_walking)
 $8360 DEFB $00,$1A,$C8,$00,$39,$7C,$00,$70 ;
 $8368 DEFB $E0,$00,$68,$5C,$00,$34,$08,$00 ;
 $8370 DEFB $4B,$C1,$00,$6C,$68,$00,$03,$32 ;
 $8378 DEFB $00,$01,$80,$00,$0D,$80,$00,$18 ;
 $8380 DEFB $D0,$00,$18,$E0,$00,$0C,$40,$00 ;
 $8388 DEFB $00,$00,$00,$00,$48,$00,$00,$28 ;
 $8390 DEFB $00,$01,$96,$40,$03,$AC,$80,$07 ;
 $8398 DEFB $17,$C0,$06,$8E,$00,$02,$45,$C0 ;
 $83A0 DEFB $05,$A0,$80,$06,$BC,$10,$00,$46 ;
 $83A8 DEFB $80,$01,$73,$20,$01,$98,$00,$07 ;
 $83B0 DEFB $18,$00,$0C,$30,$00,$0C,$38,$00 ;
 $83B8 DEFB $00,$00,$00,$00,$24,$00,$00,$14 ;
 $83C0 DEFB $00,$00,$CB,$20,$01,$D6,$40,$03 ;
 $83C8 DEFB $8B,$E0,$03,$47,$00,$01,$22,$E0 ;
 $83D0 DEFB $02,$D0,$40,$03,$5E,$08,$00,$23 ;
 $83D8 DEFB $40,$00,$39,$90,$00,$D8,$00,$01 ;
 $83E0 DEFB $98,$00,$01,$B0,$00,$00,$38,$00 ;
 $83E8 DEFB $00,$12,$00,$00,$0A,$00,$00,$65 ;
 $83F0 DEFB $90,$00,$EB,$20,$01,$C5,$F0,$01 ;
 $83F8 DEFB $A3,$80,$00,$91,$70,$01,$6C,$20 ;
 $8400 DEFB $01,$A3,$04,$00,$09,$A0,$00,$0E ;
 $8408 DEFB $C8,$00,$06,$80,$00,$1D,$00,$00 ;
 $8410 DEFB $1A,$00,$00,$37,$00,$00,$38,$00 ; }
 $8418 DEFB $04,$80,$00,$02,$80,$00,$19,$64 ; {#UDGARRAY3,$47,,3;$8418-$84D7-1-24(rex_falling)
 $8420 DEFB $00,$3A,$C8,$00,$71,$7C,$00,$68 ;
 $8428 DEFB $E0,$00,$24,$5C,$00,$5A,$08,$00 ;
 $8430 DEFB $69,$C1,$00,$00,$68,$00,$03,$B2 ;
 $8438 DEFB $00,$01,$A0,$00,$07,$40,$00,$06 ;
 $8440 DEFB $80,$00,$0D,$C0,$00,$0E,$00,$00 ;
 $8448 DEFB $01,$20,$00,$00,$A0,$00,$06,$59 ;
 $8450 DEFB $00,$0E,$B2,$00,$1C,$5F,$00,$1A ;
 $8458 DEFB $38,$00,$09,$17,$00,$16,$82,$00 ;
 $8460 DEFB $1A,$70,$40,$00,$1A,$00,$00,$EC ;
 $8468 DEFB $80,$00,$68,$00,$01,$D0,$00,$01 ;
 $8470 DEFB $A0,$00,$03,$70,$00,$03,$80,$00 ;
 $8478 DEFB $00,$48,$00,$00,$28,$00,$01,$96 ;
 $8480 DEFB $40,$03,$AC,$80,$07,$17,$C0,$06 ;
 $8488 DEFB $8E,$00,$02,$45,$C0,$05,$A0,$80 ;
 $8490 DEFB $06,$9C,$10,$00,$06,$80,$00,$3B ;
 $8498 DEFB $20,$00,$1A,$00,$00,$74,$00,$00 ;
 $84A0 DEFB $68,$00,$00,$DC,$00,$00,$E0,$00 ;
 $84A8 DEFB $00,$12,$00,$00,$0A,$00,$00,$65 ;
 $84B0 DEFB $90,$00,$EB,$20,$01,$C5,$F0,$01 ;
 $84B8 DEFB $A3,$80,$00,$91,$70,$01,$68,$20 ;
 $84C0 DEFB $01,$A7,$04,$00,$01,$A0,$00,$0E ;
 $84C8 DEFB $C8,$00,$06,$80,$00,$1D,$00,$00 ;
 $84D0 DEFB $1A,$00,$00,$37,$00,$00,$38,$00 ; }
 $84D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY3,$47,,3;$84D8-$8717-1-24(explosion)
 $84E0 DEFB $00,$02,$06,$10,$00,$00,$04,$20 ;
 $84E8 DEFB $45,$80,$00,$3E,$02,$01,$78,$08 ;
 $84F0 DEFB $18,$23,$68,$11,$B8,$F0,$20,$45 ;
 $84F8 DEFB $70,$0B,$3C,$30,$28,$CB,$06,$05 ;
 $8500 DEFB $EB,$00,$01,$EC,$32,$0C,$C2,$CE ;
 $8508 DEFB $00,$11,$F0,$03,$7D,$E8,$06,$A8 ;
 $8510 DEFB $D0,$20,$A6,$00,$05,$39,$08,$00 ;
 $8518 DEFB $00,$40,$40,$00,$02,$00,$04,$00 ;
 $8520 DEFB $00,$02,$00,$01,$00,$00,$00,$00 ;
 $8528 DEFB $00,$10,$00,$40,$01,$14,$00,$2D ;
 $8530 DEFB $8E,$00,$03,$88,$70,$03,$22,$A8 ;
 $8538 DEFB $80,$40,$3C,$0C,$0C,$BC,$06,$9E ;
 $8540 DEFB $18,$05,$BE,$00,$28,$1E,$06,$0B ;
 $8548 DEFB $1C,$60,$20,$04,$F0,$11,$89,$C0 ;
 $8550 DEFB $19,$C0,$C8,$03,$C8,$10,$03,$CE ;
 $8558 DEFB $02,$88,$85,$90,$00,$60,$00,$10 ;
 $8560 DEFB $E6,$00,$00,$80,$40,$00,$00,$00 ;
 $8568 DEFB $00,$00,$00,$00,$82,$00,$01,$10 ;
 $8570 DEFB $00,$00,$08,$C2,$01,$81,$E0,$21 ;
 $8578 DEFB $C2,$20,$07,$90,$04,$86,$B4,$70 ;
 $8580 DEFB $00,$7D,$B0,$20,$EB,$80,$09,$C1 ;
 $8588 DEFB $A0,$09,$E1,$C9,$18,$C1,$C0,$01 ;
 $8590 DEFB $E3,$84,$00,$CF,$B0,$30,$3F,$00 ;
 $8598 DEFB $00,$BC,$0C,$26,$41,$9C,$07,$13 ;
 $85A0 DEFB $C8,$5B,$1C,$80,$02,$28,$30,$00 ;
 $85A8 DEFB $00,$80,$80,$82,$10,$00,$00,$00 ;
 $85B0 DEFB $00,$00,$80,$08,$80,$00,$00,$A9 ;
 $85B8 DEFB $08,$6C,$4A,$1C,$02,$FF,$08,$03 ;
 $85C0 DEFB $BF,$00,$2E,$C5,$E5,$1C,$01,$E0 ;
 $85C8 DEFB $0A,$00,$70,$38,$00,$39,$1C,$00 ;
 $85D0 DEFB $70,$B8,$00,$38,$00,$00,$30,$2C ;
 $85D8 DEFB $00,$18,$78,$00,$54,$18,$00,$60 ;
 $85E0 DEFB $16,$00,$F0,$2D,$A7,$A2,$07,$FC ;
 $85E8 DEFB $44,$22,$29,$A0,$74,$60,$08,$A0 ;
 $85F0 DEFB $0D,$00,$08,$21,$01,$00,$00,$00 ;
 $85F8 DEFB $00,$00,$00,$01,$43,$42,$40,$42 ;
 $8600 DEFB $00,$04,$55,$08,$23,$3B,$40,$11 ;
 $8608 DEFB $41,$A8,$22,$00,$5A,$8C,$00,$78 ;
 $8610 DEFB $A0,$00,$1E,$68,$00,$08,$20,$00 ;
 $8618 DEFB $05,$40,$00,$0E,$68,$00,$0C,$08 ;
 $8620 DEFB $00,$0C,$28,$00,$02,$00,$00,$08 ;
 $8628 DEFB $08,$00,$0A,$2C,$00,$64,$03,$60 ;
 $8630 DEFB $D0,$8D,$0B,$A8,$01,$7C,$20,$04 ;
 $8638 DEFB $04,$00,$48,$10,$80,$00,$80,$04 ;
 $8640 DEFB $80,$04,$04,$02,$00,$00,$20,$08 ;
 $8648 DEFB $00,$00,$00,$08,$00,$00,$00,$00 ;
 $8650 DEFB $00,$00,$20,$00,$02,$00,$00,$00 ;
 $8658 DEFB $00,$00,$00,$00,$00,$00,$80,$00 ;
 $8660 DEFB $00,$00,$00,$00,$00,$00,$01,$00 ;
 $8668 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8670 DEFB $00,$00,$02,$20,$00,$00,$80,$00 ;
 $8678 DEFB $00,$10,$08,$02,$00,$00,$00,$02 ;
 $8680 DEFB $00,$20,$80,$00,$00,$00,$40,$08 ;
 $8688 DEFB $80,$04,$04,$00,$00,$00,$00,$00 ;
 $8690 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8698 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86A8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86B8 DEFB $00,$00,$00,$80,$00,$00,$00,$00 ;
 $86C0 DEFB $00,$00,$00,$02,$00,$00,$00,$00 ;
 $86C8 DEFB $00,$00,$00,$00,$00,$00,$40,$08 ;
 $86D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $86F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8700 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8708 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8710 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8718 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8718-$87D7-1-16(bubble_large)
 $8720 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8728 DEFB $00,$00,$00,$00,$07,$F0,$18,$0C ;
 $8730 DEFB $26,$02,$20,$02,$18,$0C,$07,$F0 ;
 $8738 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8740 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8748 DEFB $00,$00,$03,$E0,$0C,$18,$13,$04 ;
 $8750 DEFB $13,$04,$10,$04,$0C,$18,$03,$E0 ;
 $8758 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8760 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8768 DEFB $03,$E0,$04,$10,$0B,$88,$0B,$08 ;
 $8770 DEFB $08,$08,$08,$08,$04,$10,$03,$E0 ;
 $8778 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8780 DEFB $00,$00,$00,$00,$03,$E0,$04,$10 ;
 $8788 DEFB $0B,$88,$0B,$08,$08,$08,$08,$08 ;
 $8790 DEFB $04,$10,$03,$E0,$00,$00,$00,$00 ;
 $8798 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87A0 DEFB $03,$E0,$04,$10,$0B,$88,$0B,$08 ;
 $87A8 DEFB $08,$08,$08,$08,$04,$10,$03,$E0 ;
 $87B0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87B8 DEFB $00,$00,$00,$00,$00,$00,$03,$E0 ;
 $87C0 DEFB $04,$10,$0B,$88,$0B,$08,$08,$08 ;
 $87C8 DEFB $08,$08,$04,$10,$03,$E0,$00,$00 ;
 $87D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $87D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$87D8-$8897-1-16(bubble_small)
 $87E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87E8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $87F0 DEFB $00,$00,$00,$00,$0F,$F0,$0F,$F0 ;
 $87F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8800 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8808 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8810 DEFB $00,$00,$03,$C0,$04,$20,$03,$C0 ;
 $8818 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8820 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8828 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8830 DEFB $01,$80,$02,$40,$02,$40,$01,$80 ;
 $8838 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8840 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8848 DEFB $00,$00,$01,$80,$02,$40,$02,$40 ;
 $8850 DEFB $01,$80,$00,$00,$00,$00,$00,$00 ;
 $8858 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8860 DEFB $00,$00,$00,$00,$00,$00,$01,$80 ;
 $8868 DEFB $02,$40,$02,$40,$01,$80,$00,$00 ;
 $8870 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8878 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8880 DEFB $00,$00,$00,$00,$01,$80,$02,$40 ;
 $8888 DEFB $02,$40,$01,$80,$00,$00,$00,$00 ;
 $8890 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8898 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8898-$8917-1-16(bubble_burst)
 $88A0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88A8 DEFB $00,$00,$04,$20,$00,$00,$00,$00 ;
 $88B0 DEFB $04,$20,$00,$00,$00,$00,$00,$00 ;
 $88B8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88C0 DEFB $00,$00,$00,$00,$00,$00,$08,$08 ;
 $88C8 DEFB $00,$00,$00,$00,$00,$00,$04,$10 ;
 $88D0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88D8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88E0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88E8 DEFB $20,$04,$00,$00,$00,$00,$10,$08 ;
 $88F0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $88F8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8900 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8908 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8910 DEFB $00,$00,$40,$04,$00,$00,$00,$00 ; }
 $8918 DEFB $00,$6A,$00,$00,$01,$01,$80,$00 ; {#UDGARRAY4,$47,,4;$8918-$8A67-1-32{0,0,64,168}(shield)
 $8920 DEFB $04,$00,$60,$00,$08,$00,$00,$00 ;
 $8928 DEFB $00,$00,$08,$00,$20,$00,$04,$00 ;
 $8930 DEFB $40,$00,$00,$00,$40,$00,$02,$00 ;
 $8938 DEFB $80,$00,$00,$00,$00,$00,$01,$00 ;
 $8940 DEFB $80,$00,$00,$00,$80,$00,$01,$00 ;
 $8948 DEFB $00,$00,$01,$00,$40,$00,$02,$00 ;
 $8950 DEFB $00,$00,$00,$00,$20,$00,$04,$00 ;
 $8958 DEFB $10,$00,$00,$00,$00,$00,$10,$00 ;
 $8960 DEFB $04,$00,$20,$00,$01,$81,$80,$00 ;
 $8968 DEFB $00,$56,$00,$00,$00,$1A,$80,$00 ;
 $8970 DEFB $00,$40,$60,$00,$01,$00,$18,$00 ;
 $8978 DEFB $02,$00,$00,$00,$00,$00,$02,$00 ;
 $8980 DEFB $08,$00,$01,$00,$10,$00,$00,$00 ;
 $8988 DEFB $10,$00,$00,$80,$20,$00,$00,$00 ;
 $8990 DEFB $00,$00,$00,$40,$20,$00,$00,$00 ;
 $8998 DEFB $20,$00,$00,$40,$00,$00,$00,$40 ;
 $89A0 DEFB $10,$00,$00,$80,$00,$00,$00,$00 ;
 $89A8 DEFB $08,$00,$01,$00,$04,$00,$00,$00 ;
 $89B0 DEFB $00,$00,$04,$00,$01,$00,$08,$00 ;
 $89B8 DEFB $00,$60,$60,$00,$00,$15,$80,$00 ;
 $89C0 DEFB $00,$06,$A0,$00,$00,$10,$18,$00 ;
 $89C8 DEFB $00,$40,$06,$00,$00,$80,$00,$00 ;
 $89D0 DEFB $00,$00,$00,$80,$02,$00,$00,$40 ;
 $89D8 DEFB $04,$00,$00,$00,$04,$00,$00,$20 ;
 $89E0 DEFB $08,$00,$00,$00,$00,$00,$00,$10 ;
 $89E8 DEFB $08,$00,$00,$00,$08,$00,$00,$10 ;
 $89F0 DEFB $00,$00,$00,$10,$04,$00,$00,$20 ;
 $89F8 DEFB $00,$00,$00,$00,$02,$00,$00,$40 ;
 $8A00 DEFB $01,$00,$00,$00,$00,$00,$01,$00 ;
 $8A08 DEFB $00,$40,$02,$00,$00,$18,$18,$00 ;
 $8A10 DEFB $00,$05,$60,$00,$00,$01,$A8,$00 ;
 $8A18 DEFB $00,$04,$06,$00,$00,$10,$01,$80 ;
 $8A20 DEFB $00,$20,$00,$00,$00,$00,$00,$20 ;
 $8A28 DEFB $00,$80,$00,$10,$01,$00,$00,$00 ;
 $8A30 DEFB $01,$00,$00,$08,$02,$00,$00,$00 ;
 $8A38 DEFB $00,$00,$00,$04,$02,$00,$00,$00 ;
 $8A40 DEFB $02,$00,$00,$04,$00,$00,$00,$04 ;
 $8A48 DEFB $01,$00,$00,$08,$00,$00,$00,$00 ;
 $8A50 DEFB $00,$80,$00,$10,$00,$40,$00,$00 ;
 $8A58 DEFB $00,$00,$00,$40,$00,$10,$00,$80 ;
 $8A60 DEFB $00,$06,$06,$00,$00,$01,$58,$00 ; }
 $8A68 DEFB $18,$34,$34,$99,$81,$3C,$34,$18 ; {#UDGARRAY1,$47,,1;$8A68-$8A8F-1-8(respawn)
 $8A70 DEFB $00,$18,$34,$B5,$99,$24,$18,$00 ;
 $8A78 DEFB $00,$00,$18,$B5,$B5,$18,$00,$00 ;
 $8A80 DEFB $00,$18,$24,$99,$B5,$34,$18,$00 ;
 $8A88 DEFB $18,$34,$34,$81,$99,$34,$34,$18 ; }
 $8A90 DEFB $00,$57,$3F,$57,$00,$15,$00,$01 ; {#UDGARRAY2,$47,,1;$8A90,$04;$8A98,$45;$8AA0,$04;$8AA8,$45;$8AB0,$04;$8AB8,$45(energy_charger)
 $8A98 DEFB $00,$7A,$FC,$7A,$00,$F8,$00,$80 ;
 $8AA0 DEFB $00,$57,$3F,$57,$00,$00,$15,$00 ;
 $8AA8 DEFB $00,$7A,$FC,$7A,$00,$00,$D8,$00 ;
 $8AB0 DEFB $00,$57,$3F,$57,$00,$01,$00,$15 ;
 $8AB8 DEFB $00,$7A,$FC,$7A,$00,$80,$00,$F8 ; }
 $8AC0 DEFB $00,$00,$3F,$F8,$3F,$F8,$3F,$F8 ; {#UDGARRAY2,$47,,2;$8AC0-$8ADF-1-16(weapon_apa_150_mk1)
 $8AC8 DEFB $3C,$D8,$0B,$00,$F5,$36,$A0,$80 ;
 $8AD0 DEFB $8A,$98,$36,$B8,$1A,$38,$2D,$F8 ;
 $8AD8 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8AE0 DEFB $00,$00,$3F,$F8,$3F,$F8,$3F,$F8 ; {#UDGARRAY2,$47,,2;$8AE0-$8AFF-1-16(weapon_apa_150_mk2)
 $8AE8 DEFB $3F,$F8,$03,$F8,$6C,$03,$09,$68 ;
 $8AF0 DEFB $71,$83,$64,$78,$0B,$F8,$2D,$F8 ;
 $8AF8 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8B00 DEFB $00,$00,$21,$F8,$0C,$38,$24,$88 ; {#UDGARRAY2,$47,,2;$8B00-$8B1F-1-16(weapon_tusk_laser_mk4)
 $8B08 DEFB $2C,$A0,$0C,$A8,$64,$26,$6C,$A8 ;
 $8B10 DEFB $0C,$A0,$44,$88,$0D,$78,$21,$F8 ;
 $8B18 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8B20 DEFB $00,$00,$3F,$F8,$3F,$F8,$38,$40 ; {#UDGARRAY2,$47,,2;$8B20-$8B3F-1-16(weapon_remote_drone)
 $8B28 DEFB $33,$98,$24,$AC,$29,$BC,$2B,$D8 ;
 $8B30 DEFB $2B,$E0,$27,$C8,$13,$98,$28,$38 ;
 $8B38 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8B40 DEFB $00,$00,$23,$A8,$28,$22,$26,$84 ; {#UDGARRAY2,$47,,2;$8B40-$8B5F-1-16(weapon_multispray)
 $8B48 DEFB $0B,$68,$41,$00,$76,$2B,$71,$60 ;
 $8B50 DEFB $26,$37,$0C,$48,$18,$80,$02,$78 ;
 $8B58 DEFB $30,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8B60 DEFB $00,$00,$3F,$F8,$3F,$F8,$3F,$F8 ; {#UDGARRAY2,$47,,2;$8B60-$8B7F-1-16(weapon_empty)
 $8B68 DEFB $3F,$F8,$3F,$F8,$3F,$F8,$1F,$F8 ;
 $8B70 DEFB $2F,$F8,$37,$F8,$1B,$F8,$2D,$F8 ;
 $8B78 DEFB $36,$F8,$00,$00,$36,$F8,$00,$00 ; }
 $8B80 DEFB $00,$70,$3E,$E0,$3D,$C8,$3B,$98 ; {#UDGARRAY2,$47,,2;$8B80-$8B9F-1-16(smartbomb_ui)
 $8B88 DEFB $37,$38,$2E,$78,$1E,$00,$1F,$F8 ;
 $8B90 DEFB $15,$78,$00,$70,$1A,$E0,$2D,$C8 ;
 $8B98 DEFB $33,$98,$07,$00,$2E,$78,$00,$00 ; }
 $8BA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8BA0-$8BBF-1-16(smartbomb)
 $8BA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8BB0 DEFB $00,$60,$00,$30,$00,$18,$00,$FC ;
 $8BB8 DEFB $00,$D4,$00,$60,$00,$30,$00,$18 ; }
 $8BC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8BC0-$8BDF-1-16(question)
 $8BC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8BD0 DEFB $00,$78,$00,$FC,$00,$CC,$00,$E0 ;
 $8BD8 DEFB $00,$70,$00,$30,$00,$00,$00,$30 ; }
 $8BE0 DEFB $01,$00,$03,$B0,$0D,$50,$1E,$E4 ; {#UDGARRAY2,$47,,2;$8BE0-$8D1F-1-16(brain)
 $8BE8 DEFB $1E,$EE,$6C,$CE,$43,$14,$37,$BA ;
 $8BF0 DEFB $77,$B7,$73,$0A,$2C,$5C,$1E,$EC ;
 $8BF8 DEFB $1D,$E8,$0D,$E0,$00,$C0,$00,$00 ;
 $8C00 DEFB $01,$00,$03,$B0,$0D,$50,$1E,$E4 ;
 $8C08 DEFB $1E,$E8,$2C,$C4,$03,$10,$37,$BA ;
 $8C10 DEFB $77,$B7,$73,$0A,$28,$5C,$04,$EC ;
 $8C18 DEFB $01,$E8,$01,$E0,$00,$C0,$00,$00 ;
 $8C20 DEFB $01,$00,$03,$B0,$01,$50,$04,$E4 ;
 $8C28 DEFB $0A,$E8,$24,$C4,$03,$10,$37,$BA ;
 $8C30 DEFB $77,$B7,$73,$0A,$28,$50,$04,$E8 ;
 $8C38 DEFB $01,$E0,$01,$E0,$00,$C0,$00,$00 ;
 $8C40 DEFB $01,$00,$03,$B0,$01,$50,$04,$E4 ;
 $8C48 DEFB $0A,$E8,$24,$C4,$02,$10,$35,$3A ;
 $8C50 DEFB $72,$37,$71,$0A,$28,$10,$05,$48 ;
 $8C58 DEFB $00,$80,$01,$40,$00,$00,$00,$00 ;
 $8C60 DEFB $00,$00,$00,$30,$01,$50,$04,$E4 ;
 $8C68 DEFB $0A,$E8,$24,$C4,$02,$10,$25,$3A ;
 $8C70 DEFB $12,$37,$21,$0A,$08,$10,$05,$48 ;
 $8C78 DEFB $00,$80,$01,$40,$00,$00,$00,$00 ;
 $8C80 DEFB $00,$00,$00,$00,$01,$50,$04,$E4 ;
 $8C88 DEFB $0A,$E8,$24,$C4,$02,$10,$25,$38 ;
 $8C90 DEFB $12,$32,$21,$08,$08,$10,$05,$48 ;
 $8C98 DEFB $00,$80,$01,$40,$00,$00,$00,$00 ;
 $8CA0 DEFB $00,$00,$00,$00,$01,$10,$04,$44 ;
 $8CA8 DEFB $0A,$88,$24,$24,$02,$80,$25,$50 ;
 $8CB0 DEFB $12,$22,$21,$08,$08,$10,$05,$48 ;
 $8CB8 DEFB $00,$80,$01,$40,$00,$00,$00,$00 ;
 $8CC0 DEFB $00,$00,$00,$00,$01,$10,$04,$44 ;
 $8CC8 DEFB $0A,$88,$24,$24,$00,$80,$25,$D0 ;
 $8CD0 DEFB $10,$82,$20,$08,$00,$90,$00,$48 ;
 $8CD8 DEFB $00,$00,$01,$00,$00,$00,$00,$00 ;
 $8CE0 DEFB $00,$00,$00,$00,$01,$00,$04,$40 ;
 $8CE8 DEFB $02,$80,$00,$20,$00,$80,$05,$D0 ;
 $8CF0 DEFB $10,$82,$00,$08,$00,$90,$00,$48 ;
 $8CF8 DEFB $00,$00,$01,$00,$00,$00,$00,$00 ;
 $8D00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D08 DEFB $00,$80,$00,$00,$00,$80,$05,$D0 ;
 $8D10 DEFB $00,$80,$00,$00,$00,$80,$00,$00 ;
 $8D18 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; }
 $8D20 DEFB $05,$A0,$03,$C0,$03,$40,$01,$80 ; {#UDGARRAY2,$47,,2;$8D20-$8E1F-1-16(drop)
 $8D28 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D38 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D40 DEFB $00,$00,$00,$00,$00,$00,$01,$80 ;
 $8D48 DEFB $01,$80,$03,$C0,$03,$40,$01,$80 ;
 $8D50 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D58 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D68 DEFB $00,$80,$00,$00,$00,$80,$01,$00 ;
 $8D70 DEFB $03,$C0,$03,$40,$01,$80,$00,$00 ;
 $8D78 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8D88 DEFB $00,$00,$00,$00,$00,$80,$00,$00 ;
 $8D90 DEFB $00,$00,$01,$80,$00,$00,$00,$80 ;
 $8D98 DEFB $01,$00,$03,$C0,$03,$40,$01,$80 ;
 $8DA0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DA8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DB0 DEFB $00,$80,$00,$00,$01,$80,$00,$80 ;
 $8DB8 DEFB $01,$80,$13,$48,$07,$E0,$03,$40 ;
 $8DC0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DC8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DD0 DEFB $00,$00,$00,$00,$00,$00,$00,$80 ;
 $8DD8 DEFB $01,$80,$07,$E0,$2D,$F4,$07,$60 ;
 $8DE0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DE8 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DF0 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8DF8 DEFB $00,$00,$03,$C0,$0E,$F0,$1B,$FA ;
 $8E00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8E08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8E10 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8E18 DEFB $00,$00,$01,$80,$0E,$F0,$35,$FC ; }
 $8E20 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY2,$47,,2;$8E20-$8EFF-1-16(plant)
 $8E28 DEFB $02,$40,$09,$30,$12,$78,$15,$38 ;
 $8E30 DEFB $22,$7C,$25,$3C,$23,$7C,$25,$FC ;
 $8E38 DEFB $10,$F8,$16,$F0,$6B,$2C,$66,$4C ;
 $8E40 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8E48 DEFB $00,$00,$08,$10,$10,$38,$14,$38 ;
 $8E50 DEFB $22,$7C,$25,$3C,$23,$7C,$25,$FC ;
 $8E58 DEFB $10,$F8,$16,$F0,$6B,$2C,$66,$4C ;
 $8E60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8E68 DEFB $00,$00,$01,$80,$13,$C8,$15,$98 ;
 $8E70 DEFB $22,$BC,$24,$1C,$23,$7C,$25,$FC ;
 $8E78 DEFB $10,$F8,$16,$F0,$6B,$2C,$66,$4C ;
 $8E80 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8E88 DEFB $01,$80,$03,$C0,$03,$C0,$05,$B0 ;
 $8E90 DEFB $20,$34,$24,$8C,$22,$3C,$25,$5C ;
 $8E98 DEFB $10,$F8,$16,$F0,$6B,$2C,$66,$4C ;
 $8EA0 DEFB $00,$00,$00,$00,$00,$00,$01,$80 ;
 $8EA8 DEFB $03,$C0,$03,$C0,$0D,$B0,$0C,$30 ;
 $8EB0 DEFB $02,$80,$09,$50,$03,$80,$23,$44 ;
 $8EB8 DEFB $28,$1C,$16,$F0,$6B,$2C,$66,$4C ;
 $8EC0 DEFB $00,$00,$00,$00,$00,$00,$01,$80 ;
 $8EC8 DEFB $02,$40,$0A,$50,$15,$A8,$14,$28 ;
 $8ED0 DEFB $02,$80,$09,$50,$03,$80,$01,$C0 ;
 $8ED8 DEFB $01,$80,$06,$C0,$6B,$2C,$66,$4C ;
 $8EE0 DEFB $00,$00,$00,$00,$01,$80,$02,$40 ;
 $8EE8 DEFB $12,$48,$29,$94,$28,$14,$11,$48 ;
 $8EF0 DEFB $02,$80,$09,$50,$03,$80,$01,$40 ;
 $8EF8 DEFB $01,$80,$06,$C0,$6B,$2C,$66,$4C ; }
 $8F00 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ; {#UDGARRAY3,$47,,3;$8F00-$8FBF-1-24(caterpillar)
 $8F08 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8F10 DEFB $00,$00,$01,$00,$00,$11,$08,$00 ;
 $8F18 DEFB $91,$08,$00,$89,$10,$00,$49,$10 ;
 $8F20 DEFB $00,$06,$60,$00,$6F,$76,$00,$F7 ;
 $8F28 DEFB $6D,$00,$F7,$6F,$00,$62,$26,$00 ;
 $8F30 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8F38 DEFB $00,$00,$00,$00,$00,$40,$00,$00 ;
 $8F40 DEFB $40,$00,$00,$40,$00,$10,$41,$00 ;
 $8F48 DEFB $08,$02,$00,$05,$B4,$00,$43,$B8 ;
 $8F50 DEFB $00,$2B,$B8,$00,$1D,$2B,$00,$1C ;
 $8F58 DEFB $96,$80,$1C,$07,$80,$08,$03,$00 ;
 $8F60 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8F68 DEFB $00,$00,$10,$00,$00,$10,$00,$00 ;
 $8F70 DEFB $10,$00,$00,$10,$00,$0C,$00,$60 ;
 $8F78 DEFB $03,$65,$80,$00,$EE,$00,$00,$AE ;
 $8F80 DEFB $00,$00,$4A,$00,$1E,$85,$80,$01 ;
 $8F88 DEFB $C3,$40,$01,$A3,$C0,$00,$C1,$80 ;
 $8F90 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $8F98 DEFB $00,$00,$02,$00,$00,$02,$00,$00 ;
 $8FA0 DEFB $02,$00,$00,$02,$00,$03,$02,$18 ;
 $8FA8 DEFB $00,$D8,$60,$00,$3D,$80,$00,$3B ;
 $8FB0 DEFB $C0,$00,$1B,$C0,$0F,$41,$B0,$00 ;
 $8FB8 DEFB $F0,$68,$00,$F0,$78,$00,$60,$30 ; }
 $8FC0 DEFB $00,$00,$00,$00,$03,$40,$0E,$70 ; {#UDGARRAY2,$47,,2;$8FC0-$903F-1-16(pine)
 $8FC8 DEFB $15,$28,$19,$58,$3A,$84,$31,$74 ;
 $8FD0 DEFB $36,$8C,$08,$70,$1D,$B8,$0B,$D0 ;
 $8FD8 DEFB $03,$C0,$00,$00,$00,$00,$00,$00 ;
 $8FE0 DEFB $00,$00,$00,$40,$03,$70,$0E,$24 ;
 $8FE8 DEFB $25,$4C,$31,$70,$70,$84,$66,$B4 ;
 $8FF0 DEFB $61,$4C,$0A,$80,$1C,$38,$09,$90 ;
 $8FF8 DEFB $03,$C0,$03,$C0,$00,$00,$00,$00 ;
 $9000 DEFB $00,$20,$03,$38,$0E,$12,$05,$06 ;
 $9008 DEFB $41,$20,$62,$A0,$E4,$52,$DB,$0A ;
 $9010 DEFB $C0,$86,$03,$40,$14,$38,$38,$1C ;
 $9018 DEFB $11,$88,$03,$C0,$03,$C0,$00,$00 ;
 $9020 DEFB $00,$00,$00,$40,$03,$70,$0E,$24 ;
 $9028 DEFB $25,$4C,$31,$70,$70,$84,$66,$B4 ;
 $9030 DEFB $61,$4C,$0A,$80,$1C,$38,$09,$90 ;
 $9038 DEFB $03,$C0,$03,$C0,$00,$00,$00,$00 ; }
 $9040 DEFB $24,$48,$09,$08,$1A,$B0,$1B,$70 ; {#UDGARRAY2,$47,,2;$9040-$90FF-1-16(bulb)
 $9048 DEFB $06,$A0,$19,$90,$0B,$20,$00,$00 ;
 $9050 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $9058 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $9060 DEFB $24,$48,$09,$28,$18,$80,$3D,$90 ;
 $9068 DEFB $1D,$B8,$23,$B8,$19,$50,$1A,$E8 ;
 $9070 DEFB $06,$E0,$02,$00,$00,$00,$00,$00 ;
 $9078 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $9080 DEFB $24,$48,$21,$28,$1C,$A0,$3E,$98 ;
 $9088 DEFB $3E,$7C,$1D,$BC,$49,$18,$60,$24 ;
 $9090 DEFB $07,$74,$1B,$70,$08,$E0,$03,$40 ;
 $9098 DEFB $00,$00,$00,$00,$00,$00,$00,$00 ;
 $90A0 DEFB $24,$48,$29,$28,$3C,$80,$7E,$BC ;
 $90A8 DEFB $76,$7E,$3C,$76,$99,$3C,$83,$9A ;
 $90B0 DEFB $ED,$86,$57,$34,$38,$78,$38,$D8 ;
 $90B8 DEFB $12,$70,$07,$00,$00,$00,$00,$00 ;
 $90C0 DEFB $24,$48,$29,$28,$5E,$38,$77,$3C ;
 $90C8 DEFB $62,$66,$B4,$66,$BD,$3C,$90,$BA ;
 $90D0 DEFB $6C,$8A,$97,$34,$38,$58,$28,$C8 ;
 $90D8 DEFB $12,$70,$05,$00,$00,$00,$00,$00 ;
 $90E0 DEFB $24,$48,$29,$28,$16,$38,$21,$24 ;
 $90E8 DEFB $41,$42,$21,$42,$D6,$22,$A8,$B4 ;
 $90F0 DEFB $A8,$8A,$55,$74,$28,$88,$28,$88 ;
 $90F8 DEFB $12,$50,$07,$00,$00,$00,$00,$00 ; }
 $9100 DEFB $00,$00,$C0,$00,$F8,$00,$FF,$00 ; {#UDGARRAY2,$47,,2;$9100-$917F-1-16(triangle)
 $9108 DEFB $FF,$00,$F8,$00,$C0,$00,$00,$00 ;
 $9110 DEFB $00,$00,$30,$00,$3C,$00,$3F,$00 ;
 $9118 DEFB $3F,$00,$3C,$00,$30,$00,$00,$00 ;
 $9120 DEFB $08,$00,$0C,$00,$0E,$00,$0F,$00 ;
 $9128 DEFB $0F,$00,$0E,$00,$0C,$00,$08,$00 ;
 $9130 DEFB $03,$00,$03,$00,$03,$00,$03,$00 ;
 $9138 DEFB $03,$00,$03,$00,$03,$00,$03,$00 ;
 $9140 DEFB $00,$40,$00,$C0,$01,$C0,$03,$C0 ;
 $9148 DEFB $03,$C0,$01,$C0,$00,$C0,$00,$40 ;
 $9150 DEFB $00,$00,$00,$30,$00,$F0,$03,$F0 ;
 $9158 DEFB $03,$F0,$00,$F0,$00,$30,$00,$00 ;
 $9160 DEFB $00,$00,$00,$0C,$00,$7C,$03,$FC ;
 $9168 DEFB $03,$FC,$00,$7C,$00,$0C,$00,$00 ;
 $9170 DEFB $00,$00,$00,$00,$01,$FE,$01,$FE ;
 $9178 DEFB $01,$FE,$01,$FE,$00,$00,$00,$00 ; }
 $9180 DEFB $43,$00,$00,$04,$00,$00,$24,$40 ; {#UDGARRAY3,$47,,3;$9180-$923F-1-24(footman_falling)
 $9188 DEFB $00,$13,$C0,$00,$20,$00,$00,$0A ;
 $9190 DEFB $80,$00,$10,$B4,$00,$2C,$40,$00 ;
 $9198 DEFB $20,$68,$00,$06,$00,$00,$04,$00 ;
 $91A0 DEFB $00,$0C,$80,$00,$00,$00,$00,$11 ;
 $91A8 DEFB $00,$00,$22,$00,$00,$31,$00,$00 ;
 $91B0 DEFB $10,$C0,$00,$01,$00,$00,$09,$10 ;
 $91B8 DEFB $00,$04,$F0,$00,$08,$00,$00,$02 ;
 $91C0 DEFB $A0,$00,$04,$2D,$00,$0B,$10,$00 ;
 $91C8 DEFB $08,$1A,$00,$01,$80,$00,$01,$00 ;
 $91D0 DEFB $00,$03,$20,$00,$00,$00,$00,$04 ;
 $91D8 DEFB $40,$00,$08,$80,$00,$0C,$40,$00 ;
 $91E0 DEFB $04,$30,$00,$00,$40,$00,$02,$44 ;
 $91E8 DEFB $00,$01,$3C,$00,$02,$00,$00,$00 ;
 $91F0 DEFB $A8,$00,$01,$0B,$40,$02,$C4,$00 ;
 $91F8 DEFB $02,$06,$80,$00,$60,$00,$00,$40 ;
 $9200 DEFB $00,$00,$C8,$00,$00,$00,$00,$01 ;
 $9208 DEFB $10,$00,$02,$20,$00,$03,$10,$00 ;
 $9210 DEFB $01,$0C,$00,$00,$10,$00,$00,$91 ;
 $9218 DEFB $00,$00,$4F,$00,$00,$80,$00,$00 ;
 $9220 DEFB $2A,$00,$00,$42,$D0,$00,$B1,$00 ;
 $9228 DEFB $00,$81,$A0,$00,$18,$00,$00,$10 ;
 $9230 DEFB $00,$00,$32,$00,$00,$00,$00,$00 ;
 $9238 DEFB $44,$00,$00,$88,$00,$00,$C4,$00 ; }

; Unused
s$9240 DEFS $0230

; The game has just loaded
c$9470 DI            ; Disable interrupts
 $9471 XOR A         ; #REGa=0
 $9472 LD ($A247),A  ; Initialise input device type to $00
 $9475 LD ($A25B),A  ; Initialise to 0 the number of room to display in
                     ; attract-mode
 $9478 CALL $DAC0    ; Main loop for the tile screen
 $947B LD HL,$E4FF   ; {Clear the attribute buffer for HUD and room
 $947E LD DE,$E500   ;
 $9481 LD BC,$02FF   ;
 $9484 LD (HL),$00   ;
 $9486 LDIR          ; }
 $9488 LD HL,$000A   ; {Set the minimum score for the game to 1000 = $0A * 100
 $948B LD ($A224),HL ; }
; Initialise data buffers and game states variables. This entry point is used
; by the routine at #R$9D68.
*$948E CALL $A793    ; Initialise drones configuration data buffer
 $9491 LD A,$08      ; {Initialise laser duration to 8
 $9493 LD ($A201),A  ; }
 $9496 XOR A         ; Set #REGa=0
 $9497 OUT ($FE),A   ; Reset keyboard reading
 $9499 LD ($A20A),A  ; Set Rex to be mortal
 $949C LD A,$00      ; {Set current room number
 $949E LD ($A251),A  ; }
 $94A1 XOR A         ; Set #REGa=0
 $94A2 LD ($A268),A  ; Set FINAL BOSS alive
 $94A5 LD ($A202),A  ; Set the respawn indicator index value for animatio
 $94A8 LD ($A203),A  ; Set the shield recharger index value for animation
 $94AB LD ($A215),A  ; Initialized but never used
 $94AE LD ($A202),A  ; Duplicated code
 $94B1 LD ($A204),A  ; Initialized but never used
 $94B4 LD ($A1F4),A  ; Number of room in the last saved respawn
 $94B7 LD ($A1F5),A  ; Set current room not configured
 $94BA LD ($A20B),A  ; {Set Rex speed to normal
 $94BD LD ($A20C),A  ; }
 $94C0 LD ($AC5D),A  ; Initialize variable related to DOUBLE FIRE weapon
                     ; selection windows
 $94C3 LD ($AC6E),A  ; Initialize variable related to LASER weapon selection
                     ; windows
 $94C6 LD ($AC79),A  ; Initialize variable related to MULTIPLE weapon selection
                     ; windows
 $94C9 LD ($AC87),A  ; Initialize variable related to SPRAY weapon selection
                     ; windows
 $94CC LD ($A1EE),A  ; Set Rex alive
 $94CF XOR A         ;
 $94D0 LD ($A1FD),A  ; Set time bar update slot index
 $94D3 LD ($A1FF),A  ; Set time bar update direction to right
 $94D6 LD HL,$0313   ; {Initialise seed for pseudo random number generator
 $94D9 LD ($A23A),HL ;
 $94DC LD A,$11      ;
 $94DE LD ($A23C),A  ; }
 $94E1 LD HL,($A263) ; Set #REGhl the score from Rex (Side A)
 $94E4 LD ($A1D7),HL ; Set the initial score
 $94E7 LD ($A222),HL ; Set the initial number of humans killed
 $94EA LD A,($A267)  ; Set #REGa the number of lives from Rex (Side A)
 $94ED LD ($A1FC),A  ; Set the initial number of lives
 $94F0 LD A,($A266)  ; Set #REGa the number of smartbombs from Rex (Side A)
 $94F3 LD ($A205),A  ; Set the initial number of smartbombs
 $94F6 CALL $BAC6    ; Initialise weapon data (laser in use)
 $94F9 LD A,($A265)  ; Set #REGa the shield power
 $94FC LD ($A1E6),A  ; Set the initial shield power
 $94FF LD A,$02      ; {Set shield loss counter
 $9501 LD ($A1E7),A  ; }
 $9504 LD HL,($A1D7) ; {Computes and set the increment lives score counter.
 $9507 LD DE,$0064   ; Lives score counter = Score counter from Rex (Side A)
*$950A AND A         ; mod 100
 $950B SBC HL,DE     ;
 $950D JP NC,$950A   ;
 $9510 ADD HL,DE     ;
 $9511 LD ($A20F),HL ; }
 $9514 LD A,$01      ; {Set machine gun weapon available
 $9516 LD ($A1E8),A  ; }
 $9519 XOR A         ; {Set rapid shots inactive
 $951A LD ($A1D9),A  ; }
 $951D LD ($A1D1),A  ; Initialized but never used
 $9520 LD ($A1C9),A  ; Set to not destroy all enemies
 $9523 LD ($A24C),A  ; Initialized but never used
 $9526 LD ($A1E2),A  ; Set shield power inactive
 $9529 LD A,$70      ; {Set initial Rex x-position
 $952B LD ($A24F),A  ; }
 $952E LD ($A1F2),A  ; Set initial respawn x-position
 $9531 LD A,$30      ; {Set initial Rex y-position
 $9533 LD ($A250),A  ; }
 $9536 LD ($A1F3),A  ; Set initial respawn y-position
 $9539 XOR A         ;
 $953A LD ($A254),A  ; Set Rex facing right
 $953D LD ($A256),A  ; Set Rex to not jumping
 $9540 LD ($A22A),A  ; Set speed of Rex
 $9543 LD ($A255),A  ; Set Rex to not falling
 $9546 XOR A         ;
 $9547 LD ($A1B1),A  ; Set weapon energy quantity
 $954A LD A,$FF      ; {Set HUD flash ianctive
 $954C LD ($A1DB),A  ; }
 $954F LD A,$00      ;
 $9551 CALL $A556    ; Reset display and attribute file
 $9554 CALL $A34D    ; Draw HUD
 $9557 CALL $98D9    ; Draws lives number on HUD
 $955A CALL $98C9    ; Draw score on HUD
 $955D CALL $BC0B    ; Copy the attribute file of the HUD to the attribute
                     ; buffer
 $9560 LD IX,$AAF7   ; Point #REGix to text definition for game start
 $9564 LD B,$03      ; Set #REGb the number of lines to show
 $9566 CALL $A2E6    ; Draws windows for game start
 $9569 CALL $97AB    ; Reset sound buffer, volume channels and check for FIRE
                     ; key
 $956C LD IX,$ABE2   ; Point #REGix to text definition for press key
 $9570 LD B,$02      ; Set #REGb the number of lines to show
 $9572 CALL $A2E6    ; Draws windows for press key
 $9575 CALL $97AB    ; Reset sound data and wait some time for FIRE key
 $9578 LD A,($A22C)  ; {Check if FIRE key ispressed
 $957B OR A          ; }
 $957C JP Z,$A98E    ; Jump to attract-mode if FIRE key not pressed
 $957F CALL $D346    ; Reset sound data buffer
 $9582 CALL $9E15    ; Configure data for Rex teleporting when game begins
; Main loop for the game. This entry point is used by the routines at #R$9D68
; and #R$C9CD.
*$9585 CALL $A939    ; Configure current room
*$9588 CALL $B694    ; Draw Rex projectiles
 $958B CALL $B68B    ; Draw enemy projectiles
 $958E CALL $A7A4    ; Draw drones for multiple weapon
 $9591 CALL $9683    ; Draw Rex and shield
 $9594 CALL $9E67    ; Handle Rex visibility during teleporting
 $9597 CALL $9F9B    ; Handle Rex atoms flush during teleporting
 $959A CALL $BC48    ; Draw enemies
 $959D CALL $D424    ; Play sound channels
 $95A0 CALL $B384    ; Copy tile graphic into room graphic data
 $95A3 LD A,($A268)  ; {Jump to handle explosions if FINAL BOSS is dead
 $95A6 OR A          ;
 $95A7 CALL NZ,$99E3 ; }
 $95AA CALL $A432    ; Copy room graphic buffer to display file
 $95AD CALL $B243    ; Reset room graphic buffer
 $95B0 CALL $D424    ; Play sound channels
 $95B3 CALL $CF59    ; Handle enemy projectile collision with Rex
 $95B6 CALL $B9E6    ; Update color attribute for weapon icon on HUD
 $95B9 CALL $C9E3    ; Generate train parts: front, middle or rear wagon. No
                     ; trains in Rex (Side B)
 $95BC CALL $CA35    ; Creates a new mobile enemy on room
 $95BF CALL $976E    ; Destroy an enemy if smartbomb released or Rex dead
 $95C2 CALL $98B0    ; Update attribute color for score points in HUD
 $95C5 CALL $996A    ; HUD flash
 $95C8 CALL $A26C    ; Update timer bar in HUD
 $95CB CALL $A683    ; Check if DOWN key pressed
 $95CE CALL Z,$9667  ; Active/inactive shield power if keypressed
 $95D1 CALL $A683    ; Check if DOWN key pressed
 $95D4 JP Z,$95DB    ; Jump forward if DOWN key is still pressed
 $95D7 XOR A         ; {Set Shield power key not hold down
 $95D8 LD ($A1E5),A  ; }
*$95DB LD BC,$BFFE   ; {Check if RESET key (ENTER) is pressed
 $95DE IN A,(C)      ;
 $95E0 BIT 0,A       ; }
 $95E2 JP Z,$948E    ; Jump back to reset game
 $95E5 LD BC,$BFFE   ; {Check if PAUSE key (H) is pressed
 $95E8 IN A,(C)      ;
 $95EA BIT 4,A       ; }
 $95EC CALL Z,$A68F  ; Pause game if pressed
 $95EF LD BC,$7FFE   ; {Check if SMARTBOMB key (SPACE) is pressed
 $95F2 IN A,(C)      ;
 $95F4 BIT 0,A       ; }
 $95F6 CALL Z,$9739  ; Release a smartbomb if pressed
 $95F9 LD A,($A24F)  ; {Copy x-position of Rex into #R$A248
 $95FC LD ($A248),A  ; }
 $95FF LD A,($A250)  ; {Copy y-position of Rex into #R$A250
 $9602 LD ($A249),A  ; }
 $9605 LD A,($A254)  ; Set #REGa the face direction of Rex
 $9608 CALL $A6AB    ; Computes address position in tile type buffer based on
                     ; (x,y) position on screen
 $960B LD ($A1B2),HL ; Set this address into #R$A1EE
 $960E LD A,($A1EE)  ; {Jump forward if Rex is dead
 $9611 OR A          ;
 $9612 JP NZ,$9655   ; }
; Rex is alive
 $9615 LD A,($A1D9)  ; {Jump forward if no rapid shots
 $9618 OR A          ;
 $9619 JP Z,$9620    ; }
 $961C XOR A         ; {Set FIRE key not hold down
 $961D LD ($A1AB),A  ; }
*$9620 CALL $A61F    ; Check if FIRE key is pressed
 $9623 CALL Z,$B3B8  ; Fire weapon if pressed
 $9626 CALL $A61F    ; Check if FIRE key is pressed
 $9629 JP Z,$9630    ; Jump forward if key is still pressed
 $962C XOR A         ; {Set FIRE key not hold down
 $962D LD ($A1AB),A  ; }
*$9630 LD A,($A268)  ; {Jump forward if FINAL BOSS is dead
 $9633 OR A          ;
 $9634 JP NZ,$9643   ; }
 $9637 CALL $A651    ; Check if RIGHT key is pressed
 $963A CALL Z,$CD52  ; Jump to move Rex right if key pressed
 $963D CALL $A638    ; Check if LEFT key is pressed
 $9640 CALL Z,$CD6E  ; Jump to move Rex left is key pressed
*$9643 CALL $A66A    ; Check if UP key is pressed
 $9646 CALL Z,$CE52  ; Jump to set Rex jump is key pressed
 $9649 CALL $CE74    ; Handle Rex jumping
 $964C CALL $CEE5    ; Handle Rex falling
 $964F CALL $CD8B    ; Handle Rex lateral movement
 $9652 CALL $A0F8    ; Handle Rex over special tiles
*$9655 CALL $A706    ; Update arrow tiles, shield recharger and respawn
                     ; indicator
 $9658 LD A,($A1B0)  ; {Change tilt arrow tiles indicator
 $965B XOR $01       ;
 $965D LD ($A1B0),A  ; }
 $9660 JP $9588      ; Jump back to main loop game

; Routine not used
s$9663 CALL $D36F
 $9666 RET

; Active/inactive shield
;
; Used by the routine at #R$9470.
c$9667 LD A,($A1F9)  ; {Return if Rex is teleporting
 $966A OR A          ;
 $966B RET NZ        ; }
 $966C LD A,($A1E5)  ; {Return if shield key is hold down
 $966F OR A          ;
 $9670 RET NZ        ; }
 $9671 LD A,($A1E6)  ; {Return if shield power is zero
 $9674 OR A          ;
 $9675 RET Z         ; }
 $9676 LD A,$01      ; {Set shield key is hold down
 $9678 LD ($A1E5),A  ; }
 $967B LD A,($A1E2)  ; {Invert shield status active/inactive
 $967E CPL           ;
 $967F LD ($A1E2),A  ; }
 $9682 RET           ;

; Draw Rex and shield
;
; Used by the routine at #R$9470.
c$9683 LD A,($A1F6)  ; {Return if Rex is not visible
 $9686 OR A          ;
 $9687 RET Z         ; }
 $9688 LD A,($A1EE)  ; {Jump to handle dead animation if Rex is dead
 $968B OR A          ;
 $968C JP NZ,$9BA7   ; }
; This entry point is used by the routine at #R$9BA7.
*$968F LD A,($A24F)  ; {Set #R$A248 the x-position of Rex
 $9692 LD ($A248),A  ; }
 $9695 LD A,($A250)  ; {Set #R$A249 the y-position of Rex
 $9698 LD ($A249),A  ; }
 $969B LD A,$03      ; {Set #R$A24A the width in bytes of Rex
 $969D LD ($A24A),A  ; }
 $96A0 LD A,$10      ; {Set #R$A24B the height in pixels of Rex
 $96A2 LD ($A24B),A  ; }
 $96A5 XOR A         ; {Set the entity type for Rex
 $96A6 LD ($A1CC),A  ; }
 $96A9 LD HL,$AF52   ; Set #REGhl the address for the offset animation for Rex
 $96AC LD DE,$8418   ; Set #REGde the address for graphic data of Rex
                     ; falling/jumping
 $96AF LD A,($A213)  ; {Jump forward if Rex on elevator
 $96B2 OR A          ;
 $96B3 JP NZ,$96C4   ; }
 $96B6 LD A,($A256)  ; {Jump forward if Rex is jumping
 $96B9 OR A          ;
 $96BA JP NZ,$96CA   ; }
 $96BD LD A,($A255)  ; {Jump forward if Rex is falling
 $96C0 OR A          ;
 $96C1 JP NZ,$96CA   ; }
*$96C4 LD HL,$AF52   ; Set #REGhl the address for the offset animation for Rex
 $96C7 LD DE,$8358   ; Set #REGde the address for graphic data of Rex walking
; Rex is falling or jumping
*$96CA LD A,($A254)  ; Set #REGa the facing direction of Rex
 $96CD CALL $B296    ; Draw Rex
 $96D0 LD A,($A1E2)  ; {Return if shield not active
 $96D3 OR A          ;
 $96D4 RET Z         ; }
; draw shield
 $96D5 LD A,($D5D2)  ; {Jump forward if channel 2 is playing
 $96D8 CP $FF        ;
 $96DA JP NZ,$96F2   ; }
 $96DD CALL $A51D    ; {Set #REGa to a pseudo random number between 0-31
 $96E0 AND $1F       ; }
 $96E2 LD E,A        ; {Configure random fine/noise pitch into shield sound
 $96E3 LD D,$00      ; data
 $96E5 LD HL,$04B0   ;
 $96E8 ADD HL,DE     ;
 $96E9 LD ($D538),HL ; }
 $96EC LD DE,$D534   ; Set #REGde to play shield sound
 $96EF CALL $D37F    ; Configure sound channel and mixer register
*$96F2 LD L,$01      ; {Decrease 1 shield point
 $96F4 CALL $98F1    ; }
 $96F7 LD A,($A24F)  ; {Set #R$A248 the x-position for the shield
 $96FA SUB $04       ;
 $96FC LD ($A248),A  ; }
 $96FF LD A,($A254)  ; {Jump forward if Rex facing right
 $9702 OR A          ;
 $9703 JP Z,$970E    ; }
 $9706 LD A,($A248)  ; {Increment x-position of shield if Rex is facing left
 $9709 ADD A,$08     ;
 $970B LD ($A248),A  ; }
*$970E LD A,($A250)  ; {Set #R$A249 the y-position for the shield
 $9711 SUB $02       ;
 $9713 LD ($A249),A  ; }
 $9716 LD A,$04      ; {Set #R$A24A the width in bytes of the shield
 $9718 LD ($A24A),A  ; }
 $971B LD A,$15      ; {Set #R$A24B the height in pixels of the shield
 $971D LD ($A24B),A  ; }
 $9720 XOR A         ; {Set entity type of #0
 $9721 LD ($A1CC),A  ; }
 $9724 LD HL,$AF5A   ; Set #REGhl the address pointer for shield offsets
 $9727 LD DE,$8918   ; Set #REGhl the address pointer for shield graphic data
 $972A LD A,($A254)  ; Set #REGa the face direction of Rex
 $972D CALL $B296    ; Draw shield
 $9730 RET           ;

; Destroy all enemy projectiles
;
; Used by the routine at #R$9CC5.
c$9731 LD A,($A1C9)  ; {Return if not destroy all enemies active
 $9734 OR A          ;
 $9735 RET NZ        ; }
 $9736 JP $974B      ; Destroy all enemy projectiles

; Release a smartbomb
;
; Used by the routine at #R$9470.
c$9739 LD A,($A1C9)  ; {Return if not destroy all enemies active
 $973C OR A          ;
 $973D RET NZ        ; }
 $973E LD A,($A205)  ; {Decrement smartbomb inventory
 $9741 DEC A         ;
 $9742 CP $FF        ;
 $9744 RET Z         ;
 $9745 LD ($A205),A  ; }
 $9748 CALL $A371    ; Draw smartbombs in HUD
; Destroy all enemies / projectiles flying. This entry point is used by the
; routine at #R$9731.
*$974B LD A,$01      ; {Active destroy all enemies
 $974D LD ($A1C9),A  ; }
 $9750 LD A,$0E      ; {Set the max number of enemies to be killed equal to 16
 $9752 LD ($A1C8),A  ; }
 $9755 LD HL,$5E66   ; {Set address pointer fot the data buffer of enemies
 $9758 LD ($A1CA),HL ; configuration}
 $975B LD HL,$5D28   ; Set #REGhl to the address for the projectile status
 $975E LD B,$14      ; Set #REGb to the max number of projectiles on screen
*$9760 LD A,(HL)     ; Set #REGa to the status of the projectile
 $9761 OR A          ; {Jump to the next projectile if projectile is destroyed
 $9762 JP Z,$9767    ; }
 $9765 LD (HL),$02   ; Set projectile status to Impact #1
*$9767 LD DE,$000F   ; {Set #REGhl to pint to the next projectile status
 $976A ADD HL,DE     ; }
 $976B DJNZ $9760    ; Jump back until all projectiles checked
 $976D RET           ;

; Destroy an enemy if smartbomb released or Rex dead
;
; Used by the routine at #R$9470.
c$976E LD A,($A1C9)  ; {Return if Destroy all enemies not activated
 $9771 OR A          ;
 $9772 RET Z         ; }
 $9773 LD IX,($A1CA) ; Set #REGix the address pointer into enemy configuration
                     ; buffer for the next enemy to be destroyed
 $9777 LD A,(IX+$09) ; Check enemy type
 $977A CP $FE        ; {Jump to check next enemy if enemy type is bubble,
 $977C JP Z,$9791    ; smartbomb, question or boss. BOSS enemy not used in Rex
 $977F CP $FD        ; (Side B)
 $9781 JP Z,$9791    ;
 $9784 CP $FC        ;
 $9786 JP Z,$9791    ;
 $9789 CP $90        ;
 $978B JP Z,$9791    ; }
 $978E CALL $9807    ; Destroy enemy
*$9791 LD DE,$001B   ; {Point address to the next enemy
 $9794 ADD IX,DE     ;
 $9796 LD ($A1CA),IX ; }
 $979A LD A,($A1C8)  ; {Decrement the max number of enemies to be destroyed
 $979D DEC A         ;
 $979E LD ($A1C8),A  ; }
 $97A1 OR A          ; {Return if is not zero
 $97A2 RET NZ        ; }
 $97A3 XOR A         ; {Inactive destroy all enemies if max number of enemies
 $97A4 LD ($A1C9),A  ; destroyed has been reached}
 $97A7 CALL $C932    ; Copy room color attribute buffer to attribute file
 $97AA RET           ;

; Reset sound buffer, volume channels and check for FIRE key
;
; Used by the routine at #R$9470.
c$97AB XOR A         ; {Reset temporal buffer at #R$A22C
 $97AC LD ($A22C),A  ; }
 $97AF CALL $D36F    ; Reset channel volumes of the AY-3-8912
 $97B2 LD DE,$C350   ; Set #REGde to count 50.000 loops
*$97B5 DEC DE        ; Decrement counter
 $97B6 LD A,D        ; {Counter is 0?
 $97B7 OR E          ; }
 $97B8 RET Z         ; Return if so
 $97B9 LD B,$1E      ; {Wait some time
*$97BB DJNZ $97BB    ; }
 $97BD CALL $A61F    ; Check for FIRE key press
 $97C0 JP NZ,$97B5   ; Jump back if not pressed
*$97C3 CALL $A61F    ; Check for FIRE key press
 $97C6 JP Z,$97C3    ; Jump back until FIRE key not pressed
 $97C9 CALL $D346    ; Reset sound data buffer
 $97CC LD A,$01      ; {Set $01 to temporal buffer at #R$A22C meaning fire
 $97CE LD ($A22C),A  ; pressed}
 $97D1 RET           ;

; Reset sound data and wait for FIRE key press
;
; Used by the routine at #R$9D68.
c$97D2 CALL $D36F    ; Reset sound volume channels
*$97D5 CALL $A61F    ; Check for FIRE key pressed
 $97D8 JP NZ,$97D5   ; Jump back until keypressed
*$97DB CALL $A61F    ; Check for FIRE key pressed
 $97DE JP Z,$97DB    ; Jump back until key released
 $97E1 CALL $D346    ; Reset sound data buffer
 $97E4 RET           ;

; Routine not used
s$97E5 LD HL,$84D8
 $97E8 LD (IX+$04),L
 $97EB LD (IX+$05),H
 $97EE LD (IX+$0D),$08
 $97F2 LD (IX+$0F),$18
 $97F6 LD (IX+$0E),$03
 $97FA LD (IX+$09),$FF
 $97FE LD (IX+$02),$00
 $9802 LD (IX+$03),$00
 $9806 RET

; Destroy enemy
;
; Used by the routines at #R$976E, #R$C3C1, #R$C433, #R$C691, #R$C721, #R$C78C,
; #R$CFB5 and #R$D15A.
c$9807 LD HL,$E9FF     ; {Set #R$A1D2 the base address for attribute buffer
 $980A LD ($A1D2),HL   ; pointing to score points}
 $980D LD HL,$0000     ; {Set #R$A1D5 the score points for enemy dying
 $9810 LD ($A1D5),HL   ; }
 $9813 LD A,(IX+$09)   ; Check enemy type
 $9816 CP $83          ; is BRAIN?
 $9818 CALL Z,$9876    ; Handle BRAIN destruction
 $981B LD A,(IX+$01)   ; {Return if y-position of enemy is greater than $B0
 $981E CP $B0          ;
 $9820 RET NC          ; }
 $9821 CP $10          ; {Return if y-position of enemy is less than $10
 $9823 RET C           ; }
 $9824 LD HL,$84D8     ; {Set base address for explosion graphic data
 $9827 LD (IX+$04),L   ;
 $982A LD (IX+$05),H   ; }
 $982D LD (IX+$0D),$08 ; Set explosion counter
 $9831 LD (IX+$0F),$18 ; Set height of explosion
 $9835 LD (IX+$0E),$03 ; Set width of explosion
 $9839 LD A,(IX+$09)   ; Check enemy
 $983C OR A            ; {Increment dead counter if not FOOT MAN
 $983D CALL NZ,$986E   ; }
 $9840 AND $0F         ; {Set into #REGhl to the address into the enemy points
 $9842 LD E,A          ; table
 $9843 LD D,$00        ;
 $9845 LD HL,$9896     ;
 $9848 ADD HL,DE       ; }
 $9849 LD E,(HL)       ; {Set #REGde to the points obtained
 $984A LD D,$00        ; }
 $984C LD A,E          ; {Check number of points
 $984D OR A            ; }
 $984E CALL NZ,$9945   ; if points greater than 0 then increment score
 $9851 LD DE,$D528     ; Set address for explosion sound
 $9854 CALL $D37F      ; Configure sound channel and mixer register
 $9857 LD (IX+$09),$FF ; Set entity type explosion
 $985B LD (IX+$02),$00 ; Reset sprite direction
 $985F LD A,(IX+$01)   ; {Set explosion y-position (fixed grid)
 $9862 SUB $08         ;
 $9864 AND $F8         ;
 $9866 LD (IX+$01),A   ; }
 $9869 LD (IX+$03),$00 ; Reset explosion debris expansion counter
 $986D RET             ;
; Increment enemy dead counter
*$986E LD HL,($A222)   ; {Increment BIO GROWTH DEATH counter
 $9871 INC HL          ;
 $9872 LD ($A222),HL   ; }
 $9875 RET             ;
; Handle the destroy of Brain enemy
*$9876 LD A,(IX+$11)   ; {Increase wound counter
 $9879 INC A           ;
 $987A LD (IX+$11),A   ; }
 $987D CP $0A          ; {Return if counter is 10
 $987F RET Z           ; }
 $9880 LD L,(IX+$04)   ; {Point to the next BRAIN graphic data
 $9883 LD H,(IX+$05)   ;
 $9886 LD DE,$0020     ;
 $9889 ADD HL,DE       ;
 $988A LD (IX+$04),L   ;
 $988D LD (IX+$05),H   ; }
 $9890 LD (IX+$14),$02 ; Reset BRAIN health
 $9894 POP BC          ; Restore #REGbc
 $9895 RET             ;

; Table points based on enemy types. Score = points * 100
b$9896 DEFB $02,$03,$05,$03,$06,$01,$01,$01
 $989E DEFB $06,$04,$01,$01,$01,$01,$00,$01
 $98A6 DEFB $01,$01,$01,$01,$01,$01,$01,$01
 $98AE DEFB $01,$01

; Update attribute color for score points in HUD
;
; Used by the routine at #R$9470.
c$98B0 LD HL,$5840   ; Set #REGhl the base address into attribute file to score
                     ; points in HUD
 $98B3 LD B,$1E      ; Set the number of color attributes to modify
*$98B5 LD A,(HL)     ; Set #REGa the color attribute
 $98B6 DEC A         ; Decrement color attribute
 $98B7 CP $FF        ; {If color attribute is black then jump forward
 $98B9 JP Z,$98BD    ; }
 $98BC LD (HL),A     ; Set the new color attribute
*$98BD INC HL        ; Increment address into attribute file
 $98BE DJNZ $98B5    ; Jump back and update color attribute for next byte
 $98C0 LD HL,($A1D2) ; Set #REGhl to the address into attribute file for the
                     ; current score points
 $98C3 LD (HL),$07   ; {Set color attribute to white for this
 $98C5 INC HL        ;
 $98C6 LD (HL),$07   ; }
 $98C8 RET           ;

; Draw score on HUD
;
; Used by the routines at #R$9470 and #R$9945.
c$98C9 LD HL,($A1D7) ; Set #REGhl to the score
 $98CC CALL $A5AA    ; Computes the charcode digit of the score
 $98CF LD E,$10      ; Set #REGe to the horizontal position of the unit digit
 $98D1 LD L,$00      ; Set #REGl to the vertical position of the number to draw
 $98D3 LD B,$05      ; Set #REGb to the number of digits to draw
 $98D5 CALL $A570    ; Draw the score at HUD into display file
 $98D8 RET           ;

; Draws lives number on HUD
;
; Used by the routines at #R$9470, #R$9D68 and #R$D338.
c$98D9 LD A,($A1FC)  ; Set #REGa to the number of lives of rex
 $98DC LD L,A        ; {Copy number of lives to #REGhl
 $98DD LD H,$00      ; }
 $98DF CALL $A5AA    ; Computes the charcode digit of the number of lives
 $98E2 LD E,$17      ; Set #REGe to the horizontal position of the unit digit
 $98E4 LD L,$00      ; Set #REGl to the vertical position of the number to draw
 $98E6 LD B,$01      ; Set #REGb to the number of digits to draw
 $98E8 CALL $A570    ; Draw the number at lives at HUD into display file
 $98EB RET           ;

; Handle shield loss
;
; Used by the routines at #R$CF59 and #R$CFB5.
;
; I:L Shield loss quantity
c$98EC LD A,$01      ; {Set shield loss counter to 1
 $98EE LD ($A1E7),A  ; }
; This entry point is used by the routine at #R$9683.
*$98F1 LD A,($A1E7)  ; {Decrement shield loss counter
 $98F4 DEC A         ;
 $98F5 LD ($A1E7),A  ; }
 $98F8 OR A          ; {Return is shield loss counter is not zero
 $98F9 RET NZ        ; }
 $98FA LD A,$04      ; {Reset shield loss counter
 $98FC LD ($A1E7),A  ; }
 $98FF LD A,($A1E6)  ; {Decrement shield power
 $9902 SUB L         ; }
 $9903 JP C,$990D    ; Jump forward if shield loss is less than 0
 $9906 LD ($A1E6),A  ; Set new shield power value
 $9909 CALL $9918    ; Draw shield power in HUD
 $990C RET           ;
*$990D XOR A         ; {Set shield power to zero
 $990E LD ($A1E6),A  ; }
 $9911 LD ($A1E2),A  ; Deactivite shield
 $9914 CALL $9918    ; Draw shield power in HUD
 $9917 RET           ;

; Draw shield power
;
; Used by the routines at #R$98EC, #R$9D68, #R$A0F8 and #R$A939.
c$9918 LD A,($A1E6)  ; Set #REGa to shield power
 $991B LD L,A        ; {Copy shield power to #REGhl
 $991C LD H,$00      ; }
 $991E CALL $A5AA    ; Convert shield power to charcode digits
 $9921 LD E,$15      ; {Draw shield power into display file
 $9923 LD L,$00      ;
 $9925 LD B,$02      ;
 $9927 CALL $A570    ; }
 $992A LD A,($A1E6)  ; {Computes color attribute of digits based on shield
 $992D SRL A         ; power Color attribute is bit6-4 of shield power + 1
 $992F SRL A         ;
 $9931 SRL A         ;
 $9933 SRL A         ;
 $9935 AND $07       ;
 $9937 INC A         ; }
 $9938 LD ($5815),A  ; {Set color attribute into attribute file
 $993B LD ($5814),A  ; }
 $993E LD ($E514),A  ; {Set color attribute into attribute buffer for HUD
 $9941 LD ($E513),A  ; }
 $9944 RET           ;

; Increment score
;
; Used by the routines at #R$9807, #R$D15A and #R$D1B7.
;
; I:DE Points to increment
c$9945 LD A,($A1EE)  ; {Return if Rex is dead
 $9948 OR A          ;
 $9949 RET NZ        ; }
 $994A LD HL,($A1D7) ; {Increment score
 $994D ADD HL,DE     ;
 $994E LD ($A1D7),HL ; }
 $9951 LD HL,($A20F) ; {Increment lives score
 $9954 ADD HL,DE     ;
 $9955 LD ($A20F),HL ; }
 $9958 LD DE,$0064   ; {If lives score greather than 100 then increment live
 $995B AND A         ;
 $995C SBC HL,DE     ;
 $995E JP C,$9967    ; }
 $9961 LD ($A20F),HL ; Reset lives score
 $9964 CALL $D338    ; Increment number of lives
*$9967 JP $98C9      ; Draw score on HUD

; HUD flash
;
; Used by the routine at #R$9470.
c$996A LD A,($A1DB)  ; {Return if HUD flash is not active
 $996D CP $FF        ;
 $996F RET Z         ; }
 $9970 LD E,A        ; {Set #REGhl to the address into commands table for HUD
 $9971 LD D,$00      ; flash based on flash index value
 $9973 LD HL,$99D1   ;
 $9976 ADD HL,DE     ; }
 $9977 LD A,(HL)     ; Set #REGa to the value of the commands table for HUD
                     ; flash
 $9978 CP $FF        ; {Jump forward if command value is not equal to $FF
 $997A JP NZ,$9983   ; }
 $997D LD A,$FF      ; {inactive HUD flash
 $997F LD ($A1DB),A  ; }
 $9982 RET           ;
*$9983 LD ($A22C),A  ; Save into #R$A093 the value of the command
 $9986 LD HL,$5800   ; Set #REGhl the base address of the attribute file
 $9989 LD DE,$E4FF   ; Set #REGde the base address of the attribute buffer
 $998C LD B,$40      ; Set #REGb the number of bytes to flash
*$998E LD A,($A22C)  ; Set #REGa to the value of the command
 $9991 CP $01        ; command 1?
 $9993 JP Z,$99B8    ; Jump to handle flash command 1
 $9996 OR A          ; command 0?
 $9997 JP Z,$99C5    ; Jump to handle flash command 0
 $999A CP $02        ; command 2?
 $999C JP Z,$99AB    ; Jump to handle flash command 2
; handle the next byte
*$999F INC HL        ; Increase address into attribute file
 $99A0 INC DE        ; Increase address into attribute buffer
 $99A1 DJNZ $998E    ; Jump to process the next byte
 $99A3 LD A,($A1DB)  ; {Increment flash index into commands table
 $99A6 INC A         ;
 $99A7 LD ($A1DB),A  ; }
 $99AA RET           ;
; handle flash command #2
*$99AB LD A,(DE)     ; Set #REGa the color attribute from attribute buffer
 $99AC CP (HL)       ; Compare with attribute file
 $99AD JP Z,$999F    ; Jump to the next byte if equal
 $99B0 LD A,(HL)     ; {Increment attribute color in attribute file
 $99B1 INC A         ;
 $99B2 AND $07       ;
 $99B4 LD (HL),A     ; }
 $99B5 JP $999F      ; Jump to process next byte
; handle flash command #1
*$99B8 LD A,(HL)     ; Set #REGa the color attribute
 $99B9 INC A         ; Increase color attribute
 $99BA CP $07        ; {Jump to the next byte if color attribute is $07
 $99BC JP Z,$999F    ; }
 $99BF AND $07       ; {Set the new color attribute
 $99C1 LD (HL),A     ; }
 $99C2 JP $999F      ; Jump to the next byte
; handle flash command #0
*$99C5 LD A,(HL)     ; Set #REGa the color attribute
 $99C6 DEC A         ; Decrease color attribute
 $99C7 OR A          ; {Jump to the next byte if color attribute is $00
 $99C8 JP Z,$999F    ; }
 $99CB AND $07       ; {Set the new color attribute
 $99CD LD (HL),A     ; }
 $99CE JP $999F      ; Jump to the next byte

; Commands table for HUD flash
;
; Commands: $01 increase color attribute $00 decrease color attribute $02
; increase color attribute until original color
b$99D1 DEFB $01,$01,$01,$01,$01,$01,$00,$00
 $99D9 DEFB $00,$00,$00,$02,$02,$02,$02,$02
 $99E1 DEFB $02,$FF

; Handle FINAL BOSS destruction
;
; Used by the routine at #R$9470.
c$99E3 LD IY,$9CFD     ; Set #REGiy to the address for explosion data position
                       ; and index graphic data
 $99E7 LD B,$10        ; Set #REGb the number of explosions
*$99E9 PUSH BC         ; Save #REGbc
 $99EA LD A,(IY+$00)   ; Set #REGa the index of explosion graphic data
 $99ED OR A            ; {if index = 0 jump forward to configure explosion
 $99EE JP Z,$9A6B      ; position}
 $99F1 LD B,A          ; {Multiply index number by 72 (length of graphic data
 $99F2 LD DE,$0048     ; explosion)
 $99F5 CALL $C95B      ; }
 $99F8 LD DE,$8490     ; {Set #R$A1CD to the address point for the current
 $99FB ADD HL,DE       ; graphic data explosion
 $99FC LD ($A1CD),HL   ; }
 $99FF LD A,(IY+$01)   ; {Set #R$A248 the x-position for the explosion
 $9A02 LD ($A248),A    ; }
 $9A05 LD A,(IY+$02)   ; Set #REGa the y-position for the explosion
 $9A08 CP $A8          ; {Jump forward to configure (x-y) position if
 $9A0A JP NC,$9A6B     ; y-position is greater than 168 or less than 24
 $9A0D CP $18          ;
 $9A0F JP C,$9A6B      ; }
 $9A12 LD ($A249),A    ; Set #R$A249 the y-position of explosion
 $9A15 LD A,$03        ; {Set #R$A24A the width in bytes for the sprite
 $9A17 LD ($A24A),A    ; }
 $9A1A LD A,$18        ; {Set #R$A24B the height in pixels of the sprite
 $9A1C LD ($A24B),A    ; }
 $9A1F LD A,$FF        ; {Set #R$A1CC the entity type for explosion
 $9A21 LD ($A1CC),A    ; }
 $9A24 XOR A           ; Set #REGa the facing direction to right
 $9A25 CALL $9AE5      ; Draw the explosion
 $9A28 LD A,(IY+$01)   ; {Set #R$A248 the x-position for the explosion
 $9A2B LD ($A248),A    ; }
 $9A2E LD A,(IY+$02)   ; {Set #R$A249 the y-position of explosion
 $9A31 LD ($A249),A    ; }
 $9A34 CALL $9B4D      ; Compute address into attribute file based on (x,y)
                       ; position
 $9A37 LD A,(IY+$00)   ; {Increment index of explosion
 $9A3A INC A           ;
 $9A3B LD (IY+$00),A   ; }
 $9A3E CP $09          ; {Jump forward and process next explosion if index is
 $9A40 JP NZ,$9A51     ; less than 9}
 $9A43 LD (IY+$00),$00 ; Set index to 0
 $9A47 LD HL,($A22C)   ; Set #REGhl to the address into the attribute file for
                       ; the explosion
 $9A4A LD DE,($A22E)   ; Set #REGde to the address into the attribute buffer
                       ; for the explosion
 $9A4E CALL $BBEA      ; Reset attribute color when explosion ended
; handle next explosion
*$9A51 LD DE,$0003     ; {Point #REGiy to the next explosion data
 $9A54 ADD IY,DE       ; }
 $9A56 POP BC          ; Restore #REGbc
 $9A57 DJNZ $99E9      ; Jump back and process next explosion
 $9A59 LD A,($A269)    ; {Decrement explosion counter
 $9A5C DEC A           ;
 $9A5D LD ($A269),A    ; }
 $9A60 CP $82          ; {If explosion counter is 130 then decrement data pairs
 $9A62 CALL Z,$9CBC    ; for offset position}
 $9A65 CP $64          ; {If explosion counter is 100 then jump to draw final
 $9A67 JP Z,$9AD5      ; windows}
 $9A6A RET             ;
; configure explosion position
*$9A6B LD A,($A269)    ; {If explosion counter is less than 120 then jump to
 $9A6E CP $78          ; process next explosion
 $9A70 JP C,$9A51      ; }
 $9A73 CALL $A51D      ; {If generated random number is less than 150 then jump
 $9A76 CP $96          ; to process next explosion
 $9A78 JP C,$9A51      ; }
; computes x-position of explosion
 $9A7B LD HL,($A26A)   ; Set #REGhl to the address into table offset for
                       ; compute explosion location
 $9A7E LD A,$68        ; {Substract x-offset to x-position of FINAL BOSS (104)
 $9A80 SUB (HL)        ; }
 $9A81 LD E,A          ; Set #REGe the x-position for explosion
 $9A82 CALL $A530      ; Set #REGa a pseudo random number
 $9A85 LD HL,($A26A)   ; {Increment address into explosion data offsets
 $9A88 INC HL          ; }
 $9A89 AND (HL)        ; And pattern for random number
 $9A8A SLA A           ; {Multiply by 8 this number and add to the previous
 $9A8C SLA A           ; partial computed position x-position of explosion =
 $9A8E SLA A           ; x-position of FINAL BOSS - offset #1 + (random &
 $9A90 ADD A,E         ; offset #2)*8}
 $9A91 AND $F8         ; Set new position grid fixed
 $9A93 CP $F0          ; {If x-position of explosion is greater than 230 jump
 $9A95 JP NC,$9A51     ; forward and handle next explosion}
 $9A98 LD (IY+$01),A   ; Set the new x-position into explosion data buffer
 $9A9B LD ($A248),A    ; Set #R$A248 the x-position of the explosion
; computes y-position of explosion
 $9A9E LD A,$68        ; {Substract y-offset to y-position of FINAL BOSS (104)
 $9AA0 LD HL,($A26A)   ;
 $9AA3 SUB (HL)        ; }
 $9AA4 LD E,A          ; Set #REGe the x-position for explosion
 $9AA5 CALL $A530      ; Set #REGa a pseudo random number
 $9AA8 LD HL,($A26A)   ; {Increment address into explosion data offsets
 $9AAB INC HL          ; }
 $9AAC AND (HL)        ; And pattern for random number
 $9AAD SLA A           ; {Multiply by 8 this number and add to the previous
 $9AAF SLA A           ; partial computed position y-position of explosion =
 $9AB1 SLA A           ; y-position of Rex - offset #1 + (random & offset #2)*8
 $9AB3 ADD A,E         ; }
 $9AB4 AND $F8         ; Set new position grid fixed
 $9AB6 LD (IY+$02),A   ; Set the new y-position into explosion data buffer
 $9AB9 LD ($A249),A    ; Set #R$A249 the y-position of the explosion
 $9ABC LD (IY+$00),$01 ; Increment graphic data index of explosion
; configure sound explosion
*$9AC0 CALL $A51D      ; {Generate a random number between 1 and 3 for channel
 $9AC3 AND $03         ; sound
 $9AC5 OR A            ;
 $9AC6 JP Z,$9AC0      ; }
 $9AC9 LD ($D528),A    ; Set the random channel used for explosion
 $9ACC LD DE,$D528     ; Set #REGde to address for explosion sound
 $9ACF CALL $D37F      ; Configure sound channel and mixer register
 $9AD2 JP $9A51        ; Jump back and process next explosion
; Draw final windows
*$9AD5 LD IX,$AB6E     ; Set #REGix tht text definition for end game text
 $9AD9 LD B,$05        ; Set #REGb the number of lines to drae
 $9ADB CALL $A2E6      ; Draws end game windows
*$9ADE JP $9ADE        ; Infinite loop

; Unused
s$9AE1 DEFB $CD,$D2,$97,$C1

; Draw explosion for FINAL BOSS
;
; Used by the routine at #R$99E3.
c$9AE5 PUSH DE       ; Save #REGde
 $9AE6 LD A,($A248)  ; Set #REGa to the x-position of explosion
 $9AE9 AND $07       ; Set #REGa to the bit position of the explosion (bits2-0)
                     ; {
 $9AEB LD E,A        ; {Set #REGhl to the address pointer of offset for sprite
 $9AEC LD D,$00      ; movement
 $9AEE ADD HL,DE     ; }
 $9AEF LD E,(HL)     ; {Set #REGde to the corresponding offset based on the
 $9AF0 LD D,$00      ; position of the sprite}
 $9AF2 POP HL        ; Recover #REGhl (graphics data of the sprite)
 $9AF3 ADD HL,DE     ; Set #REGhl to the address of the corresponding sprite
                     ; based on the offset
 $9AF4 LD A,($A248)  ; {Computes at #REGhl the address into room graphic data
 $9AF7 SRL A         ; buffer for the entity
 $9AF9 SRL A         ;
 $9AFB SRL A         ;
 $9AFD LD ($A248),A  ;
 $9B00 PUSH HL       ;
 $9B01 LD A,($A249)  ;
 $9B04 LD L,A        ;
 $9B05 LD H,$00      ;
 $9B07 ADD HL,HL     ;
 $9B08 ADD HL,HL     ;
 $9B09 ADD HL,HL     ;
 $9B0A ADD HL,HL     ;
 $9B0B ADD HL,HL     ;
 $9B0C LD DE,$E8FF   ;
 $9B0F ADD HL,DE     ;
 $9B10 LD A,($A248)  ;
 $9B13 LD E,A        ;
 $9B14 LD D,$00      ;
 $9B16 ADD HL,DE     ; }
 $9B17 EX DE,HL      ; Exchange #REGde and #REGhl
 $9B18 POP HL        ; Recover #REGhl (the address of the corresponding sprite
                     ; based on the offset)
 $9B19 PUSH DE       ; Save #REGde
 $9B1A LD A,($A24A)  ; Set #REGa to the width of the sprite (in bytes)
 $9B1D LD ($9B3D),A  ; Configure LD opcode at 9B3C to set #REGb register to the
                     ; width of the sprite
 $9B20 LD A,($A24B)  ; Set #REGa to the height of the sprite (in pixels)
 $9B23 LD ($9B39),A  ; Configure LD opcode at 9B38 to set #REGb register to the
                     ; height of the sprite
 $9B26 EX DE,HL      ; Exchange #REGde and #REGhl
 $9B27 LD A,($A1CC)  ; {Check bit for Graphic Data Select
 $9B2A BIT 7,A       ; }
 $9B2C JP Z,$9B33    ; Jump if graphic data is based in animation offsets
 $9B2F LD DE,($A1CD) ; Set #REGde to the graphic data for static (non animated)
                     ; sprite
; Draw the sprite
*$9B33 LD ($A25E),DE ;
 $9B37 POP HL        ; Restore #REGhl
 $9B38 LD B,$00      ; Set #REGb to the width of the sprite
*$9B3A PUSH BC       ; {Save #REGbc and #REGhl
 $9B3B PUSH HL       ; }
 $9B3C LD B,$00      ; Set #REGb to the height of the sprite
*$9B3E LD A,(DE)     ; Set #REGa to the graphic data to copy
 $9B3F LD (HL),A     ; Copy graphics data to the room buffer
 $9B40 INC DE        ; {Increment sprite graphic data and room graphic data
 $9B41 INC HL        ; destination}
 $9B42 DJNZ $9B3E    ; Jump back if the are more sprite rows o draw
 $9B44 POP HL        ; Restore #REGhl
 $9B45 LD BC,$0020   ; {Increment one row for the room graphic data
 $9B48 ADD HL,BC     ; }
 $9B49 POP BC        ; Restore #REGbc
 $9B4A DJNZ $9B3A    ; Jump back until all rows drawn
 $9B4C RET           ;

; Draw random attribute color for FINAL BOSS explosion
;
; Used by the routine at #R$99E3.
c$9B4D CALL $A6DD    ; Computes into #REGhl the address into the attribute file
                     ; for the explosion position
 $9B50 LD DE,$0020   ; {Set this address to the next row
 $9B53 ADD HL,DE     ; }
 $9B54 LD ($A22C),HL ; Save at #R$A22C the address into the attribute file
 $9B57 LD DE,$5800   ; Set #REGde the base address for the attribute file
 $9B5A AND A         ; Reset carry flag
 $9B5B SBC HL,DE     ; {Computes the equivalent address of the attribute file
 $9B5D LD DE,$E4FF   ; into the attribute buffer
 $9B60 ADD HL,DE     ; }
 $9B61 EX DE,HL      ; {Point #R$A22E to the address into the attribute buffer
 $9B62 LD ($A22E),DE ; }
 $9B66 LD A,R        ; {Set into #REGde a pseudo-random number from 0 to 7
 $9B68 AND $07       ;
 $9B6A LD E,A        ;
 $9B6B LD D,$00      ; }
 $9B6D LD HL,$C2DF   ; {Set #REGhl to the address into attribute color for
 $9B70 ADD HL,DE     ; explosion}
 $9B71 LD A,(HL)     ; {Set #REGc to the attribute color
 $9B72 LD C,A        ; }
 $9B73 LD HL,($A22C) ; Set #REGhl to the address into the attribute file
 $9B76 LD DE,($A22E) ; Set #REGde to the address into the attribute buffer
 $9B7A CALL $9B7E    ; Draw attribute color for explosion
 $9B7D RET           ;
; Draw attribute color for explosion
*$9B7E CALL $9B88    ; Draw a row of attribute color to attribute file
 $9B81 CALL $9B88    ; Draw a row of attribute color to attribute file
 $9B84 CALL $9B88    ; Draw a row of attribute color to attribute file
 $9B87 RET           ;
; Draw a row of attribute color to attribute file
*$9B88 LD A,(HL)     ; {Set the attribute (INK) color over (PAPER) color
 $9B89 AND $38       ;
 $9B8B OR C          ;
 $9B8C LD (HL),A     ; }
 $9B8D INC HL        ; Increase address
 $9B8E LD A,(HL)     ; {Set the attribute (INK) color over (PAPER) color
 $9B8F AND $38       ;
 $9B91 OR C          ;
 $9B92 LD (HL),A     ; }
 $9B93 INC HL        ; Increase address
 $9B94 LD A,(HL)     ; {Set the attribute (INK) color over (PAPER) color
 $9B95 AND $38       ;
 $9B97 OR C          ;
 $9B98 LD (HL),A     ; }
 $9B99 PUSH DE       ; Save #REGde
 $9B9A LD DE,$001E   ; {Point address into attribute file and buffer to the
 $9B9D ADD HL,DE     ; next row
 $9B9E POP DE        ;
 $9B9F PUSH HL       ;
 $9BA0 LD HL,$001E   ;
 $9BA3 ADD HL,DE     ;
 $9BA4 EX DE,HL      ;
 $9BA5 POP HL        ; }
 $9BA6 RET           ;

; Handle Rex Dead - Last live explossion
;
; Used by the routine at #R$9683.
c$9BA7 LD A,($A1FC)    ; {Jump back if not the last live
 $9BAA OR A            ;
 $9BAB JP NZ,$968F     ; }
 $9BAE LD IY,$9CFD     ; Set #REGiy to the address for explosion data position
                       ; and index graphic data
 $9BB2 LD B,$10        ; Set #REGb the number of explosions
*$9BB4 PUSH BC         ; Save #REGbc
 $9BB5 LD A,(IY+$00)   ; Set #REGa the index of explosion graphic data
 $9BB8 OR A            ; {if index = 0 jump forward to configure explosion
 $9BB9 JP Z,$9C44      ; position}
 $9BBC LD B,A          ; {Multiply index number by 72 (length of graphic data
 $9BBD LD DE,$0048     ; explosion)
 $9BC0 CALL $C95B      ; }
 $9BC3 LD DE,$8490     ; {Set #R$A1CD to the address point for the current
 $9BC6 ADD HL,DE       ; graphic data explosion
 $9BC7 LD ($A1CD),HL   ; }
 $9BCA LD A,(IY+$01)   ; {Set #R$A248 the x-position for the explosion
 $9BCD LD ($A248),A    ; }
 $9BD0 LD A,(IY+$02)   ; Set #REGa the y-position for the explosion
 $9BD3 CP $A8          ; {Jump forward to configure (x-y) position if
 $9BD5 JP NC,$9C44     ; y-position is greater than 168 or less than 24
 $9BD8 CP $18          ;
 $9BDA JP C,$9C44      ; }
 $9BDD LD ($A249),A    ; Set #R$A249 the y-position of explosion
 $9BE0 LD A,$03        ; {Set #R$A24A the width in bytes for the sprite
 $9BE2 LD ($A24A),A    ; }
 $9BE5 LD A,$18        ; {Set #R$A24B the height in pixels of the sprite
 $9BE7 LD ($A24B),A    ; }
 $9BEA LD A,$FF        ; {Set #R$A1CC the entity type for explosion
 $9BEC LD ($A1CC),A    ; }
 $9BEF XOR A           ; Set #REGa the facing direction to right
 $9BF0 CALL $B296      ; Draw the explosion
 $9BF3 LD A,(IY+$01)   ; {Set #R$A248 the x-position for the explosion
 $9BF6 LD ($A248),A    ; }
 $9BF9 LD A,(IY+$02)   ; {Set #R$A249 the y-position of explosion
 $9BFC LD ($A249),A    ; }
 $9BFF CALL $BC17      ; Compute address into attribute file based on (x,y)
                       ; position
 $9C02 LD A,(IY+$00)   ; {Increment index of explosion
 $9C05 INC A           ;
 $9C06 LD (IY+$00),A   ; }
 $9C09 CP $09          ; {Jump forward and process next explosion if index is
 $9C0B JP NZ,$9C1C     ; less than 9}
 $9C0E LD (IY+$00),$00 ; Set index to 0
 $9C12 LD HL,($A22C)   ; Set #REGhl to the address into the attribute file for
                       ; the explosion
 $9C15 LD DE,($A22E)   ; Set #REGde to the address into the attribute buffer
                       ; for the explosion
 $9C19 CALL $BBEA      ; Reset attribute color when explosion ended
; handle next explosion
*$9C1C LD DE,$0003     ; {Point #REGiy to the next explosion data
 $9C1F ADD IY,DE       ; }
 $9C21 POP BC          ; Restore #REGbc
 $9C22 DJNZ $9BB4      ; Jump back and process next explosion
 $9C24 LD A,($A1EF)    ; {Decrement explosion counter
 $9C27 DEC A           ;
 $9C28 LD ($A1EF),A    ; }
 $9C2B CP $2F          ; {If explosion counter is 47 or 34 jump to change
 $9C2D CALL Z,$9CAA    ; offset pair
 $9C30 CP $22          ;
 $9C32 CALL Z,$9CAA    ; }
 $9C35 CP $19          ; {If explosion counter is 25 or 23 jump to change
 $9C37 CALL Z,$9CB3    ; offset pair
 $9C3A CP $17          ;
 $9C3C CALL Z,$9CB3    ; }
 $9C3F OR A            ; {If counter is zero jump to handle finish game
 $9C40 JP Z,$9D68      ; }
 $9C43 RET             ;
; configure explosion position
*$9C44 LD A,($A1EF)    ; {If counter equals 16 jump to process next explosion
 $9C47 CP $10          ;
 $9C49 JP C,$9C1C      ; }
 $9C4C CALL $A51D      ; Set #REGa a pseudo random number
 $9C4F CP $96          ; {If number is less than $96 then jump to process next
 $9C51 JP C,$9C1C      ; explosion}
; computes x-position of explosion
 $9C54 LD HL,($A1F0)   ; {Substract offset to x-position of Rex
 $9C57 LD A,($A24F)    ;
 $9C5A SUB (HL)        ; }
 $9C5B LD E,A          ; Set #REGe the x-position for explosion
 $9C5C CALL $A530      ; Set #REGa a pseudo random number
 $9C5F LD HL,($A1F0)   ; {Increment address into explosion data offsets
 $9C62 INC HL          ; }
 $9C63 AND (HL)        ; And pattern for random number
 $9C64 SLA A           ; {Multiply by 8 this number and add to the previous
 $9C66 SLA A           ; partial computed position x-position of explosion =
 $9C68 SLA A           ; x-position of Rex - offset #1 + (random & offset #2)*8
 $9C6A ADD A,E         ; }
 $9C6B AND $F8         ; Set new position grid fixed
 $9C6D CP $F0          ; {If x-position of explosion is greater than 230 jump
 $9C6F JP NC,$9C1C     ; forward and handle next explosion}
 $9C72 LD (IY+$01),A   ; Set the new x-position into explosion data buffer
; computes y-position of explosion
 $9C75 LD A,($A250)    ; {Substract offset to y-position of Rex
 $9C78 LD HL,($A1F0)   ;
 $9C7B SUB (HL)        ; }
 $9C7C LD E,A          ; Set #REGe the x-position for explosion
 $9C7D CALL $A530      ; Set #REGa a pseudo random number
 $9C80 LD HL,($A1F0)   ; {Increment address into explosion data offsets
 $9C83 INC HL          ; }
 $9C84 AND (HL)        ; And pattern for random number
 $9C85 SLA A           ; {Multiply by 8 this number and add to the previous
 $9C87 SLA A           ; partial computed position y-position of explosion =
 $9C89 SLA A           ; y-position of Rex - offset #1 + (random & offset #2)*8
 $9C8B ADD A,E         ; }
 $9C8C AND $F8         ; Set new position grid fixed
 $9C8E LD (IY+$02),A   ; Set the new y-position into explosion data buffer
 $9C91 LD (IY+$00),$01 ; Increment graphic data index of explosion
; configure sound explosion
*$9C95 CALL $A51D      ; {Generate a random number between 1 and 3 for channel
 $9C98 AND $03         ; sound
 $9C9A OR A            ;
 $9C9B JP Z,$9C95      ; }
 $9C9E LD ($D528),A    ; Set the random channel used for explosion
 $9CA1 LD DE,$D528     ; Set #REGde to address for explosion sound
 $9CA4 CALL $D37F      ; Configure sound channel and mixer register
 $9CA7 JP $9C1C        ; Jump back and process next explosion
; Increment address into data pairs for Rex explosion
*$9CAA LD HL,($A1F0)   ; {Point #R$A1F0 to the next pair of data to compute
 $9CAD INC HL          ; position
 $9CAE INC HL          ;
 $9CAF LD ($A1F0),HL   ; }
 $9CB2 RET             ;
; Decrement address into data pairs for Rex explosion
*$9CB3 LD HL,($A1F0)   ; {Point #R$A1F0 to the previous pair of data to compute
 $9CB6 DEC HL          ; position
 $9CB7 DEC HL          ;
 $9CB8 LD ($A1F0),HL   ; }
 $9CBB RET             ;
; Decrement address into data pairs for FINAL BOSS explosion Used by the
; routine at #R$99E3.
*$9CBC LD HL,($A26A)   ; {Point #R$A26A to the previous pair of data to compute
 $9CBF DEC HL          ; position
 $9CC0 DEC HL          ;
 $9CC1 LD ($A26A),HL   ; }
 $9CC4 RET             ;

; Handle Rex dead - Main routine
;
; Used by the routines at #R$A26C, #R$CDD2, #R$CE74, #R$CEE5, #R$CF59 and
; #R$CFB5.
c$9CC5 LD A,($A20A)  ; {Return if Rex is inmortal
 $9CC8 OR A          ;
 $9CC9 RET NZ        ; }
 $9CCA CALL $A2DB    ; Initialize time bar loop counters
 $9CCD LD A,$01      ; {Set Rex dead
 $9CCF LD ($A1EE),A  ; }
 $9CD2 LD A,$32      ; {Set Rex explosion counter
 $9CD4 LD ($A1EF),A  ; }
 $9CD7 LD HL,$9CF7   ; {Set address pointer for Rex explosion data to compute
 $9CDA LD ($A1F0),HL ; position}
 $9CDD LD A,($A268)  ; {Jump forward if FINAL BOSS dead
 $9CE0 OR A          ;
 $9CE1 JP NZ,$9CE7   ; }
 $9CE4 CALL $9731    ; Destroy all enemy projectiles
*$9CE7 CALL $BAB8    ; Handle weapon energy loss
 $9CEA LD A,$63      ; {Reset shield power
 $9CEC LD ($A1E6),A  ; }
 $9CEF LD A,($A1FC)  ; {Jump forward to configure teleporting Rex if lives > 0
 $9CF2 OR A          ;
 $9CF3 CALL NZ,$9E3D ; }
 $9CF6 RET           ;

; Rex and FINAL BOSS offsets for compute explosion position
;
; Three pairs of data used to compute position. Byte $00 : offset substracted
; to x/y-position of Rex or FINAL BOSS - Byte $01 : pattern(&) for random
; number added to x/y-position of Rex or FINAL BOSS
b$9CF7 DEFB $10,$03,$20,$07,$40,$0F

; Rex and FINAL BOSS explosion position and index for graphic data
;
; Byte $00: index for graphic data Byte $01: x-position of explosion Byte $02:
; y-position of explosion
b$9CFD DEFB $00,$00,$00,$01,$00,$00,$02,$00
 $9D05 DEFB $00,$03,$00,$00,$04,$00,$00,$05
 $9D0D DEFB $00,$00,$06,$00,$00,$07,$00,$00
 $9D15 DEFB $00,$00,$00,$08,$00,$00,$02,$00
 $9D1D DEFB $00,$03,$00,$00,$04,$00,$00,$05
 $9D25 DEFB $00,$00,$06,$00,$00,$07,$00,$00

; Handle respawn
;
; Used by the routine at #R$A0F8.
c$9D2D INC HL        ; Increment address of tile type buffer
 $9D2E LD A,($A254)  ; {Jump forward if Rex is facing right
 $9D31 OR A          ;
 $9D32 JP Z,$9D37    ; }
 $9D35 DEC HL        ; {Rex is facing left, decrement address into til type
 $9D36 DEC HL        ; buffer to check for tile type}
*$9D37 LD A,(HL)     ; {Return if tile type is not respawn
 $9D38 CP $07        ;
 $9D3A RET NZ        ; }
 $9D3B LD DE,$D59D   ; Set #REGde to point to respawn sound data
 $9D3E LD A,($D5D2)  ; {Configure sound channel and mixer register if sound
 $9D41 CP $FF        ; channel 2 is free
 $9D43 CALL Z,$D37F  ; }
 $9D46 CALL $A740    ; Update graphic data of respawn indicators
 $9D49 LD A,($A24F)  ; {Return if x-position of Rex bits 2-0 is not 2
 $9D4C AND $07       ;
 $9D4E CP $02        ;
 $9D50 RET NZ        ; }
; save respawn point
 $9D51 LD A,($A24F)  ; {Save fixed grid x-position of Rex into #R$A1F2
 $9D54 AND $F8       ;
 $9D56 LD ($A1F2),A  ; }
 $9D59 LD A,($A250)  ; {Save fixed grid y-position of Rex into #R$A1F3
 $9D5C AND $F8       ;
 $9D5E LD ($A1F3),A  ; }
 $9D61 LD A,($A251)  ; {Save room number into #R$A1F4
 $9D64 LD ($A1F4),A  ; }
 $9D67 RET           ;

; Handle Rex dead - Resume or finish game
;
; Used by the routines at #R$9BA7 and #R$9FEB.
c$9D68 XOR A         ; {Set FINAL BOSS alive
 $9D69 LD ($A268),A  ; }
 $9D6C LD A,($A1FC)  ; {Decrement Rex lives
 $9D6F DEC A         ;
 $9D70 LD ($A1FC),A  ; }
 $9D73 CP $FF        ; {Jump forward if Rex has no more lives
 $9D75 JP Z,$9DB5    ; }
 $9D78 CALL $98D9    ; Draw lives in HUD
 $9D7B LD A,($A1F2)  ; {Set the x-position of respawn
 $9D7E LD ($A24F),A  ; }
 $9D81 LD A,($A1F3)  ; {Set the y-position of respawn
 $9D84 LD ($A250),A  ; }
 $9D87 XOR A         ;
 $9D88 LD ($A24C),A  ; Not used
 $9D8B LD ($A1E2),A  ; Set shield inactive
 $9D8E LD ($A254),A  ; Set face direction to right
 $9D91 LD ($A256),A  ; Set Rex not jumping
 $9D94 LD ($A22A),A  ; Reset falling y-speed
 $9D97 LD ($A255),A  ; Set Rex not falling
 $9D9A LD ($A1EE),A  ; Set Rex alive
 $9D9D CALL $9E15    ; Configure data for Rex teleporting when game resume
 $9DA0 LD A,($A1F4)  ; {If current room equals to respawn room jump to draw
 $9DA3 LD HL,$A251   ; shield power
 $9DA6 CP (HL)       ;
 $9DA7 JP Z,$9DB1    ; }
 $9DAA LD ($A251),A  ; Set the new current room
 $9DAD POP BC        ; Restore #REGbc
 $9DAE JP $9585      ; Jump to the main loop for the game
*$9DB1 CALL $9918    ; Draw shield power on HUD
 $9DB4 RET           ;
; no more lives
*$9DB5 LD DE,($A1D7) ; {Set #R$A224 the final score. Final score will be the
 $9DB9 LD HL,($A224) ; value initialised on #R$A224 if this value is greater
 $9DBC AND A         ; than the actual score on #R$A1D7
 $9DBD SBC HL,DE     ;
 $9DBF JP NC,$9DC6   ;
 $9DC2 LD ($A224),DE ; }
*$9DC6 LD IX,$AB31   ; {Show GAME OVER windows
 $9DCA LD B,$01      ;
 $9DCC CALL $A2E6    ; }
 $9DCF LD IX,$AB3E   ; {Show HI SCORE windows
 $9DD3 LD B,$01      ;
 $9DD5 CALL $A2E6    ; }
 $9DD8 LD IX,$AB52   ; {Show BIO GROWTHS KILLED windows
 $9DDC LD B,$01      ;
 $9DDE CALL $A2E6    ; }
 $9DE1 LD HL,($A222) ; {Convert BIO GROWTHS KILLED value into a list of
 $9DE4 CALL $A5AA    ; charcodes}
 $9DE7 LD E,$1E      ; {Draw the number of BIO GROWTHS KILLED
 $9DE9 LD L,$80      ;
 $9DEB LD B,$05      ;
 $9DED CALL $A570    ; }
 $9DF0 LD HL,($A224) ; {Convert the score into a list of charcodes
 $9DF3 CALL $A5AA    ; }
 $9DF6 LD E,$12      ; {Draw the score into the windows
 $9DF8 LD L,$60      ;
 $9DFA LD B,$05      ;
 $9DFC CALL $A570    ; }
 $9DFF CALL $97D2    ; Reset sound data and wait for FIRE key press
 $9E02 JP $948E      ; Jump to init game

; Rex visibility active
;
; Used by the routine at #R$A070.
c$9E05 LD A,($A1F6)  ; {Return if Rex visible
 $9E08 OR A          ;
 $9E09 RET NZ        ; }
 $9E0A LD A,$01      ; {Set Rex visible
 $9E0C LD ($A1F6),A  ; }
 $9E0F LD A,$12      ; {Set teleporting hide lines counter to 18 (height of
 $9E11 LD ($A1F7),A  ; Rex)}
 $9E14 RET           ;

; Configure data for Rex teleporting when game begins or resume
;
; Used by the routines at #R$9470 and #R$9D68.
c$9E15 LD A,$01      ;
 $9E17 LD ($A1F8),A  ; Set Rex atoms flushing active
 $9E1A LD ($A1F9),A  ; Set Rex teleporting active
 $9E1D XOR A         ;
 $9E1E LD ($A1FB),A  ; Set Rex teleporting on init game
 $9E21 LD ($A1F6),A  ; Set Rex invisible
 $9E24 LD A,$64      ; {Set teleporting counter loop to 100
 $9E26 LD ($A1FA),A  ; }
; Reset buffer data for teleporting and configure sound
*$9E29 LD HL,$A0AD   ; {Reset teleporting buffer data
 $9E2C LD DE,$A0AE   ;
 $9E2F LD BC,$003B   ;
 $9E32 LD (HL),$00   ;
 $9E34 LDIR          ; }
 $9E36 LD DE,$D546   ; Set #REGde to teleporting sound
 $9E39 CALL $D37F    ; Configure sound channel and mixer register
 $9E3C RET           ;

; Configure data for Rex teleporting when dead
;
; Used by the routine at #R$9CC5.
c$9E3D LD DE,$D552   ; Set #REGde sound data for Rex dead
 $9E40 CALL $D37F    ; Configure sound channel and mixer register
 $9E43 XOR A         ; {Deactivate shield
 $9E44 LD ($A1E2),A  ; }
 $9E47 LD A,$01      ;
 $9E49 LD ($A1F8),A  ; Set Rex atoms flushing active
 $9E4C LD ($A1F9),A  ; Set teleporting active
 $9E4F LD ($A1FB),A  ; Set teleporting after Rex dead
 $9E52 LD A,($A1F6)  ; {Set Rex visible
 $9E55 LD L,A        ;
 $9E56 LD ($A1F6),A  ; }
 $9E59 LD ($A1F7),A  ; Set Rex visibility counter to 1
 $9E5C LD A,$64      ; {Set teleporting counter loop to 100
 $9E5E LD ($A1FA),A  ; }
 $9E61 LD A,L        ; {Return if Rex visible
 $9E62 OR A          ;
 $9E63 RET NZ        ; }
 $9E64 JP $9E29      ; Jump to reset teleporting buffer data and sound play

; Handle Rex visibility during teleporting
;
; Used by the routine at #R$9470.
c$9E67 LD A,($A1F9)  ; {Return if Rex is not teleporting
 $9E6A OR A          ;
 $9E6B RET Z         ; }
 $9E6C LD A,($A1F6)  ; {Return if Rex not visible
 $9E6F OR A          ;
 $9E70 RET Z         ; }
 $9E71 LD A,($A250)  ; {Computes into #REGhl the address pointer into room
 $9E74 LD L,A        ; graphic data for Rex position
 $9E75 LD H,$00      ;
 $9E77 ADD HL,HL     ;
 $9E78 ADD HL,HL     ;
 $9E79 ADD HL,HL     ;
 $9E7A ADD HL,HL     ;
 $9E7B ADD HL,HL     ;
 $9E7C LD A,($A24F)  ;
 $9E7F SRL A         ;
 $9E81 SRL A         ;
 $9E83 SRL A         ;
 $9E85 LD E,A        ;
 $9E86 LD D,$00      ;
 $9E88 ADD HL,DE     ;
 $9E89 LD DE,$E89F   ;
 $9E8C ADD HL,DE     ; }
 $9E8D LD C,$00      ; Set #REGc the graphic data to draw
 $9E8F LD A,($A1F7)  ; {Set #REGb to the number of lines to hide from Rex
 $9E92 LD B,A        ; sprite}
 $9E93 CALL $9F8F    ; Hide a portion of Rex to simulate teleporting
 $9E96 LD DE,$001D   ; {Garble randomly the last three lines of the Rex sprite
 $9E99 LD B,$03      ; not hidden
*$9E9B PUSH BC       ;
 $9E9C LD B,$03      ;
*$9E9E PUSH BC       ;
 $9E9F CALL $A51D    ;
 $9EA2 AND (HL)      ;
 $9EA3 LD (HL),A     ;
 $9EA4 INC HL        ;
 $9EA5 POP BC        ;
 $9EA6 DJNZ $9E9E    ;
 $9EA8 ADD HL,DE     ;
 $9EA9 POP BC        ;
 $9EAA DJNZ $9E9B    ; }
 $9EAC LD A,($A1FB)  ; {Jump forward if teleporting Rex dead
 $9EAF OR A          ;
 $9EB0 JP NZ,$9EC4   ; }
 $9EB3 LD A,($A1F7)  ; {Decrement number of lines to hide
 $9EB6 DEC A         ;
 $9EB7 LD ($A1F7),A  ; }
 $9EBA OR A          ; {Return if number of lines is not zero
 $9EBB RET NZ        ; }
 $9EBC JP $9ED5      ; Jump to finish teleporting
; Code not reached
 $9EBF LD A,$64      ;
 $9EC1 LD ($A1FA),A  ;
; Handle teleporting Rex after dead.
*$9EC4 LD A,($A1F7)  ; {Increment the number of lines to hide
 $9EC7 INC A         ;
 $9EC8 LD ($A1F7),A  ; }
 $9ECB CP $12        ; {Return if number of lines is not 18
 $9ECD RET NZ        ; }
 $9ECE XOR A         ; {Set Rex invisible
 $9ECF LD ($A1F6),A  ; }
 $9ED2 JP $9EDE      ; Jump to reset teleporting counter
; Rex has teleported completely
*$9ED5 XOR A         ; {Stop teleporting
 $9ED6 LD ($A1F9),A  ; }
 $9ED9 LD A,$01      ; {Set Rex visible
 $9EDB LD ($A1F6),A  ; }
; Reset teleporting loop counter
*$9EDE LD A,$1E      ; {Reset the teleporting loop counter
 $9EE0 LD ($A1FA),A  ; }
 $9EE3 RET           ;

; Initialize teleporting into room data
;
; Used by the routine at #R$CA69.
c$9EE4 LD (IX+$1A),$01 ; Set teleporting into the room
 $9EE8 LD (IX+$18),$01 ; Set teleporting active
 $9EEC LD (IX+$19),$00 ; Reset teleporting mask index
 $9EF0 RET             ;

; Configure teleporting out of the room
;
; Used by the routine at #R$C5B4.
c$9EF1 LD A,(IX+$18)   ; {Return if enemy is teleporting
 $9EF4 OR A            ;
 $9EF5 RET NZ          ; }
 $9EF6 LD (IX+$1A),$00 ; Set teleporting out of the room
 $9EFA LD (IX+$18),$01 ; Active teleporting
 $9EFE LD (IX+$19),$0A ; Set teleporting index
 $9F02 LD A,(IX+$09)   ; {Return if enemy type is not FOOT MAN
 $9F05 OR A            ;
 $9F06 RET NZ          ; }
 $9F07 CALL $C60D      ; Configure FOOT MAN for stand-by position
 $9F0A RET             ;

; Table of teleporting mask data for FOOT MAN
b$9F0B DEFB $10,$22,$89,$65,$AB,$DB,$F7,$FF
 $9F13 DEFB $FF,$FF

; Handle FOOT MAN teleporting
;
; Used by the routine at #R$BC48.
c$9F15 LD A,(IX+$18)   ; {Return if enemy is not teleporting
 $9F18 OR A            ;
 $9F19 RET Z           ; }
 $9F1A LD A,(IX+$01)   ; {Computes in #REGhl the address into room graphic data
 $9F1D LD L,A          ; buffer for the enemy
 $9F1E LD H,$00        ;
 $9F20 ADD HL,HL       ;
 $9F21 ADD HL,HL       ;
 $9F22 ADD HL,HL       ;
 $9F23 ADD HL,HL       ;
 $9F24 ADD HL,HL       ;
 $9F25 LD A,(IX+$00)   ;
 $9F28 SRL A           ;
 $9F2A SRL A           ;
 $9F2C SRL A           ;
 $9F2E LD E,A          ;
 $9F2F LD D,$00        ;
 $9F31 ADD HL,DE       ;
 $9F32 LD DE,$E8FF     ;
 $9F35 ADD HL,DE       ; }
 $9F36 LD A,(IX+$02)   ; {Check enemy direction and jump forward if facing
 $9F39 OR A            ; right
 $9F3A JP Z,$9F3E      ; }
 $9F3D INC HL          ; Increase address into room graphic data buffer if
                       ; enemy facing left
*$9F3E LD C,$00        ; {Remnant code. #REGb overwritten in next instructions
 $9F40 LD B,(IX+$19)   ; }
 $9F43 LD IY,$9F0B     ; Set #REGiy to point to the address for teleporting
                       ; mask data
 $9F47 LD A,(IX+$19)   ; {Set #REGiy to point to the correspondent mask based
 $9F4A LD E,A          ; on mask index from enemy configuration buffer
 $9F4B LD D,$00        ;
 $9F4D ADD IY,DE       ; }
; scramble FOOT MAN graphic data to simulate teleporting
 $9F4F LD B,(IX+$0F)   ; Set #REGb to the height of the sprite
*$9F52 PUSH BC         ; Save #REGbc
 $9F53 LD B,(IX+$0E)   ; Set #REGb to the width of the sprite
 $9F56 PUSH HL         ; {Save #REGhl and #REGbc
*$9F57 PUSH BC         ; }
 $9F58 CALL $A530      ; {Scramble graphic data deom FOOT MAN sprite based on
 $9F5B AND (HL)        ; pseudo random number and mask
 $9F5C AND (IY+$00)    ; }
 $9F5F LD (HL),A       ; Set the new scrambled data
 $9F60 INC HL          ; Point to the next address into room graphic data
                       ; buffer
 $9F61 POP BC          ; Restore #REGbc
 $9F62 DJNZ $9F57      ; Jump back until all the width of the sprite scrambled
 $9F64 POP HL          ; Restore #REGhl
 $9F65 LD DE,$0020     ; {Point #REGhl to the next row
 $9F68 ADD HL,DE       ; }
 $9F69 POP BC          ; Restore #REGbc
 $9F6A DJNZ $9F52      ; Jump back until all the height of the sprite scrambled
 $9F6C LD A,(IX+$1A)   ; {Check type of teleporting
 $9F6F OR A            ; }
 $9F70 JP NZ,$9F80     ; Jump forward if teleporting into the room
; teleporting out of the room
 $9F73 DEC (IX+$19)    ; Decrement teleporting index
 $9F76 RET NZ          ; Return if teleporting index is not zero
 $9F77 LD (IX+$18),$00 ; End teleporting out of the room
 $9F7B LD (IX+$0C),$00 ; Set sprite not visible
 $9F7F RET             ;
; teleporting into the room
*$9F80 LD A,(IX+$19)   ; {Increase teleporting index
 $9F83 INC A           ;
 $9F84 LD (IX+$19),A   ; }
 $9F87 CP $0A          ; {Return if teleporting has not finished
 $9F89 RET NZ          ; }
 $9F8A LD (IX+$18),$00 ; End teleporting into the room
 $9F8E RET             ;

; Hide a portion of Rex to simulate teleporting
;
; Used by the routine at #R$9E67.
c$9F8F LD DE,$001E   ; Set #REGde to the increment for point to the next line
                     ; of pixels
*$9F92 LD (HL),C     ; {Copy the graphic data from #REGc into room graphic data
 $9F93 INC HL        ;
 $9F94 LD (HL),C     ;
 $9F95 INC HL        ;
 $9F96 LD (HL),C     ; }
 $9F97 ADD HL,DE     ; Increment #REGhl to the next line
 $9F98 DJNZ $9F92    ; Jump back until all the lines of Rex are hidden
 $9F9A RET           ;

; Handle Rex atoms flush during teleporting
;
; Used by the routine at #R$9470.
c$9F9B LD A,($A1F8)    ; {Return if atoms are not flushing on teleporting
 $9F9E OR A            ;
 $9F9F RET Z           ; }
 $9FA0 LD IY,$A0AD     ; Set #REGiy to the address for the Rex atoms data
                       ; buffer during teleporting
 $9FA4 LD B,$14        ; Set #REGbc to the number of 'Rex atoms' (20)
; This entry point is used by the routine at #R$9FEB.
*$9FA6 PUSH BC         ; Save #REGbc
 $9FA7 LD A,(IY+$00)   ; {If atom is not configured jump to iniciatise atom
 $9FAA OR A            ; data
 $9FAB JP Z,$A023      ; }
 $9FAE LD A,($A24F)    ; {Set #R$A093 the x-position of the atom, based on
 $9FB1 ADD A,(IY+$01)  ; x-offset of atom and x-position of Rex
 $9FB4 LD ($A22C),A    ; }
 $9FB7 AND $07         ; {Set #REGa the graphic data for atom based on bit2-0
 $9FB9 LD E,A          ; x-position of atom
 $9FBA LD D,$00        ;
 $9FBC LD HL,$A0A5     ;
 $9FBF ADD HL,DE       ;
 $9FC0 LD A,(HL)       ; }
 $9FC1 PUSH AF         ; Save #REGaf
 $9FC2 LD A,(IY+$02)   ; {Computes into #REGhl the address into room graphic
 $9FC5 LD L,A          ; data of the atom
 $9FC6 LD H,$00        ;
 $9FC8 ADD HL,HL       ;
 $9FC9 ADD HL,HL       ;
 $9FCA ADD HL,HL       ;
 $9FCB ADD HL,HL       ;
 $9FCC ADD HL,HL       ;
 $9FCD LD A,($A22C)    ;
 $9FD0 SRL A           ;
 $9FD2 SRL A           ;
 $9FD4 SRL A           ;
 $9FD6 LD E,A          ;
 $9FD7 LD D,$00        ;
 $9FD9 ADD HL,DE       ;
 $9FDA LD DE,$EAFF     ;
 $9FDD ADD HL,DE       ; }
 $9FDE POP AF          ; Restore #REGaf
 $9FDF OR (HL)         ; {Put the graphic data atom in this location
 $9FE0 LD (HL),A       ; }
 $9FE1 LD A,($A1FB)    ; {if teleporting Rex at game begin jump to update atom
 $9FE4 OR A            ; position
 $9FE5 JP Z,$A070      ; }
 $9FE8 JP $A08D        ; Jump to update atom position
; Process another atom
*$9FEB LD DE,$0003     ; {Point #REGiy to the next atom into Rex atom data
 $9FEE ADD IY,DE       ; table}
 $9FF0 POP BC          ; Restore #REGbc
 $9FF1 DJNZ $9FA6      ; Jump back until all atoms has been processed
; All atoms processed
 $9FF3 LD A,($A1FB)    ; {Jump forward if Rex is teleporing on init game
 $9FF6 OR A            ;
 $9FF7 JP Z,$A006      ; }
 $9FFA LD A,($A250)    ; {Decrement y-position of Rex if y-position less than
 $9FFD DEC A           ; 24
 $9FFE CP $18          ;
 $A000 JP C,$A006      ;
 $A003 LD ($A250),A    ; }
*$A006 LD A,($A1FA)    ; {Decrement teleporting loop counter
 $A009 DEC A           ;
 $A00A LD ($A1FA),A    ; }
 $A00D OR A            ; {Return if loop counter is not zero
 $A00E RET NZ          ; }
; Loop counter for teleporting finished
 $A00F LD A,$01        ; {Set Rex visible
 $A011 LD ($A1F6),A    ; }
 $A014 XOR A           ; {Finish teleporting
 $A015 LD ($A1F8),A    ;
 $A018 LD ($A1F9),A    ; }
 $A01B LD A,($A1EE)    ; {Jump to resume game after Rex is dead
 $A01E OR A            ;
 $A01F JP NZ,$9D68     ; }
 $A022 RET             ;
; Initialise data for Rex atoms during teleporting
*$A023 LD A,($A1FB)    ; {Jump forward if teleporting Rex after dead
 $A026 OR A            ;
 $A027 JP NZ,$A04B     ; }
; Rex is teleporting on game begin
 $A02A LD A,($A1FA)    ; {If teleporting loop counter < 50 jump to process next
 $A02D CP $32          ; atom
 $A02F JP C,$9FEB      ; }
 $A032 CALL $A530      ; {Set #REGa a random number between 4 and 19
 $A035 AND $0F         ;
 $A037 ADD A,$04       ; }
 $A039 LD (IY+$00),A   ; Set this number as y-delta into data buffer for atom
                       ; y-position variation
 $A03C CALL $A530      ; {Set #REGa a random number between 0 and 15
 $A03F AND $0F         ; }
 $A041 LD (IY+$01),A   ; Set this number as x-offset into the teleporting data
                       ; buffer
 $A044 LD (IY+$02),$00 ; Set 0 as y-position of Rex atoms into the teleporting
                       ; data buffer
 $A048 JP $9FEB        ; Jump to process next atom
; Rex is teleporting after dead
*$A04B LD A,($A1FA)    ; {If teleporting loop counter < 50 jump to process next
 $A04E CP $32          ; atom
 $A050 JP C,$9FEB      ; }
 $A053 CALL $A530      ; {Set #REGa a random number between 4 and 19
 $A056 AND $0F         ;
 $A058 ADD A,$04       ; }
 $A05A LD (IY+$00),A   ; Set this number as y-delta into data buffer for atom
                       ; y-position variation
 $A05D CALL $A530      ; {Set #REGa a random number between 0 and 15
 $A060 AND $0F         ; }
 $A062 LD (IY+$01),A   ; Set this number as x-offset into the teleporting data
                       ; buffer
 $A065 LD A,($A250)    ; {Set the y-position of Rex minus 4 the y-position for
 $A068 SUB $04         ; Rex atoms during teleporting
 $A06A LD (IY+$02),A   ; }
 $A06D JP $9FEB        ; Jump to process next atom
; Update data for the atom when teleporting Rex at game begin
*$A070 LD A,(IY+$02)   ; Set #REGa the y-position of atom
 $A073 ADD A,(IY+$00)  ; Add to #REGa the y-offset of atom
 $A076 LD HL,$A250     ; {Compare atom y-position with Rex y-position
 $A079 CP (HL)         ; }
 $A07A JP C,$A087      ; Jump forward if Rex y-position is greater than
                       ; y-position of atom
 $A07D LD (IY+$00),$00 ; Reset y-offset
 $A081 CALL $9E05      ; Set Rex visible
 $A084 JP $9FEB        ; Jump to process next atom
*$A087 LD (IY+$02),A   ; Set the new y-position for the atom
 $A08A JP $9FEB        ; Jump to process next atom
; Update data for the atom when teleporting Rex afer dead
*$A08D LD A,(IY+$02)   ; Set #REGa the y-position of atom
 $A090 SUB (IY+$00)    ; substract to #REGa the y-offset of atom
 $A093 CP $DF          ; {Jump forward if atom y-position greater than 32
 $A095 JP C,$A09F      ; }
 $A098 LD (IY+$00),$00 ; Reset y-offset
 $A09C JP $9FEB        ; Jump to process next atom
*$A09F LD (IY+$02),A   ; Set the new y-position for the atom
 $A0A2 JP $9FEB        ; Jump to process next atom

; Graphic data for atoms based on bits2-0 x-position of atom
b$A0A5 DEFB $80,$40,$20,$10,$08,$04,$02,$01

; Rex atoms data during teleporting
;
; Three bytes for every atom. $00 y-delta $01 x-offset $02 y-position
g$A0AD DEFS $4B

; Handle Rex over special tiles
;
; Used by the routine at #R$9470.
c$A0F8 XOR A         ; {Reset Rex on elevtor
 $A0F9 LD ($A213),A  ; }
 $A0FC LD HL,($A1B2) ; {Set #REGhl to point into tile type buffer data under
 $A0FF LD DE,$0060   ; Rex feet
 $A102 ADD HL,DE     ; }
 $A103 LD A,(HL)     ; Check tile type
 $A104 CP $12        ; {Jump forward to handle elevator
 $A106 JP Z,$A130    ; }
 $A109 LD HL,($A1B2) ; {Set #REGhl to point into tile type buffer data in
 $A10C LD DE,$0061   ; front-under Rex feet
 $A10F ADD HL,DE     ; }
 $A110 LD A,(HL)     ; Check tile type
 $A111 CP $07        ; {Jump to handle respawn
 $A113 JP Z,$9D2D    ; }
 $A116 CP $08        ; {Jump to handle shield recharging
 $A118 JP Z,$A187    ; }
 $A11B CP $0D        ; {Jump to handle Double fire weapon bonus
 $A11D JP Z,$A14B    ; }
 $A120 CP $0A        ; {Jump to handle laser weapon bonus
 $A122 JP Z,$A15A    ; }
 $A125 CP $0B        ; {Jump to handle multiple weapon bonus
 $A127 JP Z,$A169    ; }
 $A12A CP $0C        ; {Jump to handle spray weapon bonus
 $A12C JP Z,$A178    ; }
 $A12F RET           ;
; handle Rex on elevator
*$A130 XOR A         ; {Reset speed Rex
 $A131 LD ($A22A),A  ; }
 $A134 LD A,$01      ; {Set Rex on elevator
 $A136 LD ($A213),A  ; }
 $A139 LD A,($A250)  ; {Return if Rex is not grid fixed
 $A13C AND $07       ;
 $A13E OR A          ;
 $A13F RET NZ        ; }
 $A140 XOR A         ; {Set falling speed to zero
 $A141 LD ($A255),A  ; }
 $A144 CALL $CEB2    ; Configure Rex for falling - Does nothing
 $A147 CALL $CE52    ; Configure Rex for jump
 $A14A RET           ;
; handle double fire weapon bonus
*$A14B INC HL        ; {Return if next tile is not the same type
 $A14C LD A,(HL)     ;
 $A14D CP $0D        ;
 $A14F RET NZ        ; }
 $A150 CALL $A8F6    ; Update weapon in inventory (HUD)
 $A153 LD HL,$AC5D   ; Set #REGhl the base address for text definition of
                     ; DOUBLE FIRE weapon
 $A156 CALL $D609    ; Show weapon bonus windows
 $A159 RET           ;
; handle laser weapon bonus
*$A15A INC HL        ; {Return if next tile is not the same type
 $A15B LD A,(HL)     ;
 $A15C CP $0A        ;
 $A15E RET NZ        ; }
 $A15F CALL $A8FC    ; Update weapon in inventory (HUD)
 $A162 LD HL,$AC6E   ; Set #REGhl the base address for text definition of LASER
                     ; weapon
 $A165 CALL $D609    ; Show weapon bonus windows
 $A168 RET           ;
; handle multiple weapon bonus
*$A169 INC HL        ; {Return if next tile is not the same type
 $A16A LD A,(HL)     ;
 $A16B CP $0B        ;
 $A16D RET NZ        ; }
 $A16E CALL $A902    ; Update weapon in inventory (HUD)
 $A171 LD HL,$AC79   ; Set #REGhl the base address for text definition of
                     ; MULTIPLE weapon
 $A174 CALL $D609    ; Show weapon bonus windows
 $A177 RET           ;
; handle spray weapon bonus
*$A178 INC HL        ; {Return if next tile is not the same type
 $A179 LD A,(HL)     ;
 $A17A CP $0C        ;
 $A17C RET NZ        ; }
 $A17D CALL $A908    ; Update weapon in inventory (HUD)
 $A180 LD HL,$AC87   ; Set #REGhl the base address for text definition of SPRAY
                     ; weapon
 $A183 CALL $D609    ; Show weapon bonus windows
 $A186 RET           ;
; handle shield recharging
*$A187 INC HL        ; {Return if next tile is not the same type
 $A188 LD A,(HL)     ;
 $A189 CP $08        ;
 $A18B RET NZ        ; }
 $A18C LD A,($A1E2)  ; {Return if shield active
 $A18F OR A          ;
 $A190 RET NZ        ; }
 $A191 LD A,($A1E6)  ; {Increment shield power
 $A194 INC A         ; }
 $A195 CP $64        ; {Return if shield power = 100
 $A197 RET Z         ; }
 $A198 LD ($A1E6),A  ; Set the new shield power
 $A19B CALL $9918    ; Draw shield power
 $A19E LD A,($D5D2)  ; {Return if channel 2 in use
 $A1A1 CP $FF        ;
 $A1A3 RET NZ        ; }
 $A1A4 LD DE,$D5BE   ; Set #REGde to the shield recharging sound
 $A1A7 CALL $D37F    ; Configure sound channel and mixer register
 $A1AA RET           ;

; FIRE key hold down
;
; Variable used to prevent multiple shots while FIRE key is hold down. FIRE key
; hold down is only available when rapid shots bonus is active
g$A1AB DEFS $01

; Rex weapon in use
;
; 0-Basic Laser, 1-Double fire, 2-Laser, 3-Multiple, 4-Spray. Used to compute
; BOSS health
g$A1AC DEFS $01

; Weapon energy level. Value on init $01
g$A1AD DEFS $01

; Attribute file pointer to current weapon icon in HUD
g$A1AE DEFS $02

; Tilt arrow tiles
;
; $00 or $01 select distints graphic data
g$A1B0 DEFS $01

; Weapon energy quantity - Value $00 on init
;
; Values from 0 to 120
g$A1B1 DEFS $01

; Address pointer into tile type buffer based on Rex position
g$A1B2 DEFS $02

; Address pointer into tile buffer of the tile under the entity
g$A1B4 DEFS $02

; Counter for tile drawn on room graphic buffer
g$A1B6 DEFS $01

; Pointer to the tile type buffer for the currently draw tile
g$A1B7 DEFS $02

; Addres pointer to static enemy definition for the current room
g$A1B9 DEFS $02

; Nou used
g$A1BB DEFS $06

; Horizontal position for windows
g$A1C1 DEFS $01

; Vertical position for windows
g$A1C2 DEFS $01

; Length of the longest line for the windows
g$A1C3 DEFS $01

; Number of lines for the windows
g$A1C4 DEFS $01

; Enemy enters the room from left
;
; $00 No / $FF Yes
g$A1C5 DEFS $01

; Enemy enters the room from right
;
; $00 No / $FF Yes
g$A1C6 DEFS $01

; Enemy enters the room from top
;
; $00 No / $FF Yes
g$A1C7 DEFS $01

; Max number of enemies to be destroyed when Destroy all enemies indicator
; active
g$A1C8 DEFS $01

; Destroy all enemies indicator
;
; $00 Not destroy all - $01 Destroy all. Value $00 on init
g$A1C9 DEFS $01

; Address pointer into the enemy configuration buffer for the enemy to be
; destroyed when Destroy all enemies indicator is active
g$A1CA DEFS $02

; Entity type
;
; Used in routine #R$B258
g$A1CC DEFS $01

; Address for the graphic data of entity
;
; Used in routine #R$B258
g$A1CD DEFS $02

; Unused
s$A1CF DEFS $02

; Initialized but never used
g$A1D1 DEFS $01

; Address pointer into attribute file/buffers for score points
g$A1D2 DEFS $02

; Loop counter for score points
;
; From 9 to 0
g$A1D4 DEFS $01

; Score points value
g$A1D5 DEFS $02

; Score - Value $0000 on init
;
; Real score = score * 100
g$A1D7 DEFS $02

; Rapid shots active - Value $00 on init
;
; $00 inactive - $01 active
g$A1D9 DEFS $01

; Number of rapid shots
g$A1DA DEFS $01

; HUD flash index - Value $FF on init
;
; $FF inactive. Otherwise the value is the index into the table for flash
; commands at #R$99D1
g$A1DB DEFS $01

; Counter for enemy enter the room (updated)
g$A1DC DEFS $01

; Counter for enemy enter the room (original)
g$A1DD DEFS $01

; Train is generating on current room. Used at routine #R$C9E3
;
; $00 train not generating $01 Generating train. Always $00 in Rex (Side B)
g$A1DE DEFS $01

; Address into train definition buffer. Used at routine #R$C9E3
;
; Really not used because there are no trains in Rex (Side B)
g$A1DF DEFS $02

; Counter for train appearance. Used at routine #R$C9E3
;
; Really not used because there are no trains in Rex (Side B)
g$A1E1 DEFS $01

; Shield power active - Value $00 on init
;
; $00 not active $01 active
g$A1E2 DEFS $01

; Unused
s$A1E3 DEFS $02

; Shield power key hold down
;
; Variable used to prevent activate and inactivate of shield if DOWN key is
; hold down
g$A1E5 DEFS $01

; Shield power - Value $63 on init
g$A1E6 DEFS $01

; Shield loss counter - Value $02 on init
;
; Shield decrement when counter reaches zero
g$A1E7 DEFS $01

; Machine gun weapon on inventory indicator
;
; $00: Not available / $01: Available. Available on init
g$A1E8 DEFS $01

; Double Fire weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A1E9 DEFS $01

; Laser weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A1EA DEFS $01

; Multiple weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A1EB DEFS $01

; Spray weapon on inventory indicator
;
; $00: Not available / $01: Available. Not available on init
g$A1EC DEFS $01

; Projectile type of enemy
g$A1ED DEFS $01

; Rex status - Value $00 on init
;
; $00 Rex alive $01 Rex dead
g$A1EE DEFS $01

; Rex explosion counter
g$A1EF DEFS $01

; Address pointer into Rex explosion data buffer to compute explosion position
g$A1F0 DEFS $02

; x-position of last respawn saved - Value $A0 on init
g$A1F2 DEFS $01

; y-position of last respawn saved - Value $60 on init
g$A1F3 DEFS $01

; room number of last respawn saved - Value $00 on init
g$A1F4 DEFS $01

; Room configured - Value $00 on init
;
; $00 room not configured $01 room configured
g$A1F5 DEFS $01

; Rex visibility
;
; $00 invisible $01 visible
g$A1F6 DEFS $01

; Number of lines of Rex to hide (used in teleporting animation)
g$A1F7 DEFS $01

; Atoms flush during teleporting
;
; $00 not atom flushing $01 atoms flushing
g$A1F8 DEFS $01

; Rex teleporting
;
; $00 not teleporting $01 teleporting
g$A1F9 DEFS $01

; Teleporting counter
g$A1FA DEFS $01

; Teleporting (begin game or dead)
;
; $00 teleporting on game begin $01 teleporting after dead
g$A1FB DEFS $01

; Number of lives
;
; $04 on init
g$A1FC DEFS $01

; Time bar update slot index - Value $00 on init
g$A1FD DEFS $01

; Loop counter used for time bar in HUD
;
; Initialized with value $05 for time bar: number of zig-zag to remove a timer
; slot
g$A1FE DEFS $01

; Time bar update direction - Value $00 on init
;
; $00 right $01 left
g$A1FF DEFS $01

; Number of time slots availables
;
; Timer bar: 12 slots of time
g$A200 DEFS $01

; Laser duration - Value $00 on init
;
; Used as well for index into laser template graphic table at #R$B9BE
g$A201 DEFS $01

; Respawn indicator index value - Value $00 on init
g$A202 DEFS $01

; Shield recharger index value - Value $00 on init
g$A203 DEFS $01

; Initialized but never used
g$A204 DEFS $01

; Number of smartbombs in the inventory
;
; 3 smartbombs on init
g$A205 DEFS $01

; Unused
s$A206 DEFS $01

; Number of weapon that has energy
;
; Every time that energy quantity in #R$A018
g$A207 DEFS $01

; Bonus windows number
;
; (0-speed up 1-shield loss 2-1000 bonus 3-energy loss 4-100 rapid shots)
g$A208 DEFS $01

; Unused
s$A209 DEFS $01

; Rex inmortal - Value $00 on init
;
; $00 inmortal $01 mortal
g$A20A DEFS $01

; Rex speed - Value $00 on init
;
; $00 normal speed - $01 fast speed
g$A20B DEFS $01

; Rex speed up duration - Value $00 on init
g$A20C DEFS $01

; Unused
s$A20D DEFS $02

; Lives Score - Value $0000 on init
;
; Every 100 points increment a lives. Reset on every live awarded
g$A20F DEFS $02

; Unused
s$A211 DEFS $02

; Rex on elevator
g$A213 DEFS $01

; Actor firing indicator
;
; $01 enemy fired weapon  / $00 Rex fired weapon
g$A214 DEFS $01

; Initialized but never used
g$A215 DEFS $01

; Bonus Windows Loop Counter
g$A216 DEFS $02

; Unused
s$A218 DEFS $09

; Type of mobile enemy for the current room
g$A221 DEFS $01

; Bio Growths killed - Value $0000 on init
g$A222 DEFS $02

; Minimum score for the game - Value $000A on init
g$A224 DEFS $02

; Room connection - right room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B1A7
g$A226 DEFS $01

; Room connection - top room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B1A7
g$A227 DEFS $01

; Room connection - bottom room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B1A7
g$A228 DEFS $01

; Room connection - left room number
;
; Value copied from Room connections and enemy configuration pointer at #R$B1A7
g$A229 DEFS $01

; Speed of Rex - Value $00 on init
g$A22A DEFS $01

; Max number of enemies in the current room
;
; Value copied from the corresponding Enemy room configuration at #R$AFC2
g$A22B DEFS $01

; Used in multiple routines as temporal variable
;
; Used as: length of the current processing line for windows setup, color
; attribute for windows border, color attribute for text content of the
; windows, ...
g$A22C DEFS $02

; Used in multiple routines as temporal variable
;
; Used as: max length of the lines processed for windows setup, number of
; columns of the windows, horizontal position of the windows, ...
g$A22E DEFS $02

; Used in multiple routines as temporal variable
;
; Vertical position of the windows. As tile color attribute and laser direction
g$A230 DEFS $02

; Used in multiple routines as temporal variable
;
; Used as increment for laser y-position
g$A232 DEFS $01

; Unused
s$A233 DEFS $03

; Charcode for the digit introduced in password code
g$A236 DEFS $01

; Unused
s$A237 DEFS $01

; Multiple uses
;
; As Color attribute for windows body (MSB) As Pointer to the address for the
; current input digit for the password
g$A238 DEFS $02

; Seed for pseudo-random number generator.
;
; Value $0313 on init. Used at routine #R$A51D.
g$A23A DEFS $02

; Seed status variable
;
; Value $11 on init
g$A23C DEFS $01

; Charcode buffer for number conversion
g$A23D DEFS $02      ; Number to convert
 $A23F DEFS $01      ; Charcode for units
 $A240 DEFS $01      ; Charcode for tens
 $A241 DEFS $01      ; Charcode for hundreds
 $A242 DEFS $01      ; Charcode for thousands
 $A243 DEFS $01      ; Charcode for ten thousands

; Port used to read the key pressed
g$A244 DEFS $02

; Opcode of the corresponent BIT operation to check key presses
;
; Is used to configure the routines at #R$A46A to check for key presses of the
; defined keys
g$A246 DEFS $01

; Input device type
;
; $FF Kempston | $00 Cursor, Sinclair or Defined keys. $00 on init. Not used in
; game
g$A247 DEFS $01

; X-position of entity
;
; As x-pixel-position of entity. As x-byte-position of debris
g$A248 DEFS $01

; Y-position of entity
;
; As y-pixel-position of entity . As y-pixel-position of debris
g$A249 DEFS $01

; Width of entity sprite (in bytes)
g$A24A DEFS $01

; Height of entity sprite (in pixels)
g$A24B DEFS $01

; Initialized in game, but not used
g$A24C DEFS $01

; Unused
s$A24D DEFS $02

; Rex x-position (in pixels) - Value $A0 on init
g$A24F DEFS $01

; Rex y-position (in pixels) - Value $60 on init
g$A250 DEFS $01

; Current room number
;
; Value $00 on init
g$A251 DEFS $01

; Pointer to the address mapping table of tile graphics data and room graphics
; buffer
g$A252 DEFS $02

; Rex facing direction ($00 right / $01 left) - Value $00 on init
g$A254 DEFS $01

; Rex falling speed - Value $00 on init
;
; $00 not falling / otherwise falling speed ($02 or $04)
g$A255 DEFS $01

; Rex is jumping - Value $00 on init
g$A256 DEFS $01

; Unused
s$A257 DEFS $02

; Address pointer into table for Rex jumping y-offsets
g$A259 DEFS $02

; List number of the room displayed on attract-mode
;
; The list of rooms are stored into table at #R$A986. Value $00 on init
g$A25B DEFS $01

; Loop counter for run the displayed room on attract-mode
;
; Value $C8 on init. Equals to 200 loops to run.
g$A25C DEFS $01

; Tile type found checking the list of tile types (background or wall)
g$A25D DEFS $01

; Address for the graphic data of entity to draw
g$A25E DEFS $02

; Number of digits entered in password
g$A260 DEFS $01

; Checksum code for password
g$A261 DEFS $02

; Score (LSB) and humans killed (MSB) from Rex (Side A)
g$A263 DEFS $02

; Shield power from Rex (Side A)
g$A265 DEFS $01

; Smartbombs from Rex (Side A)
g$A266 DEFS $01

; Number of lives from Rex (Side A)
g$A267 DEFS $01

; FINAL BOSS live status
;
; $00 FINAL BOSS alive $01 FINAL BOSS dead
g$A268 DEFS $01

; FINAL BOSS explosion counter
g$A269 DEFS $01

; FINAL BOSS addres pointer to table offset for compute explosions position
g$A26A DEFS $02

; Update timer bar in HUD
;
; Used by the routine at #R$9470.
c$A26C LD A,($A1DB)  ; {Return if HDU flash active
 $A26F CP $FF        ;
 $A271 RET NZ        ; }
 $A272 LD A,($A1FD)  ; {Set #REGde the timer bar update slot
 $A275 LD E,A        ;
 $A276 LD D,$00      ; }
 $A278 LD HL,$582B   ; {Set #REGhl to the address into attribute file for the
 $A27B ADD HL,DE     ; time bar position}
 $A27C LD (HL),$46   ; Set color attribute to bright yellow
 $A27E INC HL        ; Increase to the next time bar slot
 $A27F LD A,(HL)     ; {Jump forward if slot is green
 $A280 CP $04        ;
 $A282 JP Z,$A287    ; }
 $A285 LD (HL),$06   ; Set color attribute to normal yellow
*$A287 LD A,($A1FF)  ; Check for time bar update direction
 $A28A OR A          ; {Jump forward to increase slot if direction is right
 $A28B JP Z,$A291    ; }
 $A28E JP $A2A3      ; Jump forward to decrease slot if direction is left
*$A291 LD A,($A1FD)  ; {Increase time bar update slot
 $A294 INC A         ;
 $A295 LD ($A1FD),A  ; }
 $A298 LD HL,$A200   ; {Return if current update slot is less than the number
 $A29B CP (HL)       ; of slots availables
 $A29C RET NZ        ; }
 $A29D LD A,$01      ; {Change update direction to left
 $A29F LD ($A1FF),A  ; }
 $A2A2 RET           ;
*$A2A3 LD A,($A1FD)  ; {Decrease timer bar update slot
 $A2A6 DEC A         ;
 $A2A7 LD ($A1FD),A  ; }
 $A2AA OR A          ; {Return if slot is not zero
 $A2AB RET NZ        ; }
 $A2AC XOR A         ; {Change direction to right
 $A2AD LD ($A1FF),A  ; }
 $A2B0 LD A,($A1FE)  ; {Decrement time bar counter
 $A2B3 DEC A         ;
 $A2B4 LD ($A1FE),A  ; }
 $A2B7 OR A          ; {if time bar counter is not zero return
 $A2B8 RET NZ        ; }
 $A2B9 LD A,$05      ; {Reset time bar counter
 $A2BB LD ($A1FE),A  ; }
 $A2BE LD A,($A200)  ; {Decrement a time slot
 $A2C1 DEC A         ; }
 $A2C2 OR A          ; {Jump to kill rex if no time slots availables
 $A2C3 JP Z,$9CC5    ; }
 $A2C6 LD ($A200),A  ; Set the number of availables time slots
 $A2C9 LD E,A        ; {Set this slot to green color in attribute file
 $A2CA LD D,$00      ;
 $A2CC PUSH DE       ;
 $A2CD LD HL,$582C   ;
 $A2D0 ADD HL,DE     ;
 $A2D1 LD (HL),$04   ; }
 $A2D3 POP DE        ; {Set this slot to green color in attribute buffer
 $A2D4 LD HL,$E52B   ;
 $A2D7 ADD HL,DE     ;
 $A2D8 LD (HL),$04   ; }
 $A2DA RET           ;

; Initialize time bar loop counters
;
; Used by the routines at #R$9CC5 and #R$A939.
c$A2DB LD A,$0C      ; {Number of time slots availables
 $A2DD LD ($A200),A  ; }
 $A2E0 LD A,$05      ; {Loop counter for time bar - number of zig-zag updates
 $A2E2 LD ($A1FE),A  ; to remove an slot}
 $A2E5 RET           ;

; Draws a windows in the display file
;
; Reads the text definition data format and draws the border and content of the
; windows. Used by the routines at #R$9470, #R$99E3, #R$9D68 and #R$DF59.
;
; IX Address of the text definition data
; B Number of lines of the windows
c$A2E6 PUSH IX       ; {Save #REGix and #REGbc
 $A2E8 PUSH BC       ; }
 $A2E9 LD A,$01      ; {Initialise the width of the popup at #R$A22E
 $A2EB LD ($A22E),A  ; }
; First compute the width of the windows based on the max length of all the
; lines of text plus 2 Special case: the first line of text computes a width of
; length of text plus 1
*$A2EE LD A,$01      ; {Initialise the temporal computed width of the windows
 $A2F0 LD ($A22C),A  ; at #R$A22C}
 $A2F3 LD DE,$0003   ; {In the first iteration, point #REGix to the first
 $A2F6 ADD IX,DE     ; character of the line. Subsequent iterations points to
                     ; the vertical position}
*$A2F8 LD A,(IX+$00) ; Pick up the character at #REGix
 $A2FB OR A          ; Is the character an end of marker ($00)?
 $A2FC JP Z,$A308    ; Jump if so
 $A2FF LD HL,$A22C   ; {Increment the temporal computed width at #R$A22C
 $A302 INC (HL)      ; }
 $A303 INC IX        ; Increment the address pointer to read the next character
 $A305 JP $A2F8      ; Jump back and repeat the process
*$A308 LD A,($A22C)  ; {Compare the width computed in the last iteration with
 $A30B LD HL,$A22E   ; the max width previously saved
 $A30E CP (HL)       ; }
 $A30F JP C,$A315    ; Jump if the max width is greater or equal than the
                     ; current computed width
 $A312 LD ($A22E),A  ; Update the max width of the windows at #R$A095 with the
                     ; new computed value
*$A315 DJNZ $A2EE    ; Jump back while there are lines to process
; The next section of code obtain the position and color attributes of the
; windows
 $A317 POP BC        ; {Restore #REGbc and #REGix
 $A318 POP IX        ; }
 $A31A PUSH IX       ; {Save #REGbc and #REGix
 $A31C PUSH BC       ; }
 $A31D LD A,B        ; {Is there only one line of text?
 $A31E CP $01        ; }
 $A320 JP NZ,$A327   ; Jump if not
 $A323 LD HL,$A22E   ; {Increment the width of the windows by one at #R$A22E.
 $A326 INC (HL)      ; This account for the special case described above}
*$A327 LD A,(IX+$01) ; Pick up the horizontal position of the first line of
                     ; text
 $A32A SUB $03       ; Substract 3 to obtain the horizontal position of the
                     ; windows: one for the border and two for the left margin.
 $A32C LD H,A        ; Save the horizontal position of the windows at #REGh
 $A32D LD A,(IX+$02) ; Pick up the vertical position of the first line of text
 $A330 SRL A         ; {The position is defined in bits 7-3 so move this value
 $A332 SRL A         ; to bits 4-0
 $A334 SRL A         ; }
 $A336 DEC A         ; Decrement by one to account for the top border
 $A337 LD L,A        ; Save the vertical position of the windows at #REGl
 $A338 LD E,B        ; Save the number of lines of the windows in register E
 $A339 LD A,($A22E)  ; Pick up the width of the windows saved at #R$A22E
 $A33C SUB $02       ; Substract 2 for the borders
 $A33E LD D,A        ; Save the width of the windows (minus borders) at #REGd
 $A33F LD A,$47      ; Save at #REGa the color attributes for the windows
                     ; border
 $A341 LD C,$07      ; Save at #REGc the color attributes for the windows body
 $A343 CALL $BADC    ; Draws the windows borders in the display file
 $A346 POP BC        ; {Save #REGbc and #REGix
 $A347 POP IX        ; }
 $A349 CALL $A487    ; Print the text content of the windows in the display
                     ; file
 $A34C RET           ;

; Draw HUD
;
; Draw Scores, shield power, lives, bonus points, timer bar and weapon icons.
; Used by the routine at #R$9470.
c$A34D LD B,$03      ; Set #REGb to the number of lines of text to print
 $A34F LD IX,$A3F4   ; Set #REGix to the text definition data for the HUD
 $A353 CALL $A487    ; Draw HUD text/icons: score, shield power, lives, time
                     ; bar and points.
 $A356 LD HL,$5801   ; {Fill into attribute file the attribute color for HUD
 $A359 LD B,$02      ; weapon icons
 $A35B LD E,$0A      ;
 $A35D LD A,$01      ;
 $A35F CALL $D6A1    ; }
 $A362 LD HL,$5819   ; {Fill into attribute file the attribute color for
 $A365 LD B,$02      ; smartbombs icons
 $A367 LD E,$06      ;
 $A369 LD A,$02      ;
 $A36B CALL $D6A1    ; }
 $A36E CALL $A3BA    ; Draw the sprites for the weapon icons in HUD
; Draw smartbombs. This entry point is used by the routines at #R$9739 and
; #R$D22C.
*$A371 LD A,($A205)  ; Set #REGa to the number of smartbombs availables
 $A374 SLA A         ; {Computes address in #R$A3AA for obtain the offset of
 $A376 SLA A         ; the graphics data of the corresponents smartbomb icons
 $A378 LD E,A        ;
 $A379 LD D,$00      ;
 $A37B LD HL,$A3AA   ;
 $A37E ADD HL,DE     ; }
 $A37F CALL $A383    ; Draw the sprites for the smartbomb icons in HUD
 $A382 RET           ;

; Draw the sprites for the smartbomb icons in HUD (1/2)
;
; Used by the routine at #R$A34D.
c$A383 LD B,$03      ; Set #REGb to the number of smartbomb icons
 $A385 LD A,$19      ; {Set horizontal position of first smartbomb icon in data
 $A387 LD ($A39B),A  ; buffer at #R$A399}
; This entry point is used by the routine at #R$A39F.
*$A38A PUSH BC       ; Save #REGbc
 $A38B LD E,(HL)     ; Set #REGe to the offset of the graphics data for the
                     ; corresponent smartbomb icon
 $A38C PUSH HL       ; Save #REGhl
 $A38D LD D,$00      ; {Add the offset to the base addres of the graphics data
 $A38F LD HL,$8AC0   ; and set #REGhl to point to the graphcis data of the
 $A392 ADD HL,DE     ; smartbomb icon}
 $A393 LD ($A399),HL ; Save this addres to the data buffer
 $A396 CALL $D658    ; Draw the smarbomb icon

; Data buffer for the smartbomb icons in HUD
;
; Used in routine #R$A383
; .
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00-0x01 | Address pointer to sprite graphics data }
; { 0x02 | Horitzontal position of sprite }
; { 0x03 | Vertical position of sprite. Always $00 }
; { 0x04 | Width of sprite (in bytes). Always $02 }
; { 0x05 | Height of sprite (in pixels). Always $10 }
; TABLE#
g$A399 DEFB $80,$8B,$19,$00,$02,$10

; Draw the sprites for the smartbomb icons in HUD (2/2)
c$A39F LD HL,$A39B   ; {Increment the horizontal position in data buffer to
 $A3A2 INC (HL)      ; point to the next icon
 $A3A3 INC (HL)      ; }
 $A3A4 POP HL        ; Restore #REGhl
 $A3A5 INC HL        ; Increment #REGhl to point the addres to the next
                     ; graphics data offset at #R$A3AA
 $A3A6 POP BC        ; Restore #REGbc
 $A3A7 DJNZ $A38A    ; Jump back until all three smartbomb icons has been
                     ; displayed
 $A3A9 RET           ;

; Offsets graphics data for smartbombs in HUD
;
; Values $A0 and $C0 are added to $8C0A to obtain the corresponent smartbomb
; icon. Value $A0 is for empty smartbomb icon Value $C0 is for smartbomb icon
b$A3AA DEFB $A0,$A0,$A0,$00 ; No smartbomb available in inventory
 $A3AE DEFB $C0,$A0,$A0,$00 ; One smartbomb available in inventory
 $A3B2 DEFB $C0,$C0,$A0,$00 ; Two smartbomb available in inventory
 $A3B6 DEFB $C0,$C0,$C0,$00 ; Three smartbomb available in inventory

; Draw the sprites for the weapon icons in HUD (1/2)
;
; Used by the routine at #R$A34D.
c$A3BA LD A,$01      ; {Set horizontal position of the first weapon icon in
 $A3BC LD ($A3DD),A  ; data buffer at #R$A3DB}
 $A3BF LD DE,$A1E8   ; Point #REGde to the weapon inventory status.
 $A3C2 LD HL,$8AC0   ; Point #REGhl to the graphics data of weapon sprites
 $A3C5 LD B,$05      ; Set #REGb to the number of weapons availables
; Check if Rex got the weapon and draw the corresponent sprite
*$A3C7 PUSH BC       ; {Save #REGbc, #REGde and #REGhl
 $A3C8 PUSH DE       ;
 $A3C9 PUSH HL       ; }
 $A3CA LD ($A3DB),HL ; Set address of the graphics data for the weapon in data
                     ; buffer at #R$A3DB
 $A3CD LD A,(DE)     ; Set #REGa to the status inventory of the corresponent
                     ; weapon
 $A3CE OR A          ; Is the weapon in the inventory of Rex?
 $A3CF JP NZ,$A3D8   ; Jump if so
 $A3D2 LD HL,$8B60   ; Set #REGhl to the empty weapon graphics data
 $A3D5 LD ($A3DB),HL ; Set address of the graphics data for the empty weapon in
                     ; data buffer at #R$A3DB
*$A3D8 CALL $D658    ; Draw the sprite of the weapon icon to display file

; Data buffer for the weapon icons in HUD
;
; Used in routine #R$A3BA
; .
; #TABLE(default)
; { =h Bytes | =h Meaning }
; { 0x00-0x01 | Address pointer to sprite graphics data }
; { 0x02 | Horitzontal position of sprite }
; { 0x03 | Vertical position of sprite. Always $00 }
; { 0x04 | Width of sprite (in bytes). Always $02 }
; { 0x05 | Height of sprite (in pixels). Always $10 }
; TABLE#
g$A3DB DEFB $C0,$8A,$01,$00,$02,$10

; Draw the sprites for the weapon icons in HUD (2/2)
c$A3E1 LD A,($A3DD)  ; {Increment the horizontal position in the data buffer
 $A3E4 ADD A,$02     ; for the next icon
 $A3E6 LD ($A3DD),A  ; }
 $A3E9 POP HL        ; Restore #REGhl
 $A3EA LD DE,$0020   ; {Increment the address of the graphics data to point to
 $A3ED ADD HL,DE     ; the next weapon icon}
 $A3EE POP DE        ; Restore #REGde
 $A3EF INC DE        ; Point to the next weapon in the weapon inventory status
 $A3F0 POP BC        ; Restore #REGbc
 $A3F1 DJNZ $A3C7    ; Jump back until all the 5 weapon icons are displayed
 $A3F3 RET           ;

; Text definition for HUD
;
; Time bar
b$A3F4 DEFB $06,$0C,$08                     ; Color attributes and position of
                                            ; text
 $A3F7 DEFB $23,$23,$23,$23,$23,$23,$23,$23 ; {#MESSAGE($A3F7,$A402)(time_bar)
 $A3FF DEFB $23,$23,$23,$23                 ; }
 $A403 DEFB $00                             ; End marker
; Score, shield and lives
 $A404 DEFB $06,$0C,$00                     ; Color attributes and position of
                                            ; text
 $A407 DEFM "0000000:99:3"                  ; #MESSAGE($A407,$A412)(score)
 $A413 DEFB $00                             ; End marker
; Points bar
 $A414 DEFB $07,$03,$10                     ; Color attributes and position of
                                            ; text
 $A417 DEFB $5D,$5C,$20,$5E,$5C,$20,$5F,$5C ; {#MESSAGE($A417,$A430)(points_bar)
 $A41F DEFB $20,$40,$5C,$20,$22,$5C,$20,$24 ;
 $A427 DEFB $5C,$20,$25,$5C,$20,$26,$5C,$20 ;
 $A42F DEFB $27,$5C                         ; }
 $A431 DEFB $00                             ; End marker

; Copy room graphic buffer to display file
;
; Used by the routines at #R$9470 and #R$A939.
c$A432 LD ($A22C),SP ; Save #REGsp to temporal variable #R$A22C
 $A436 LD SP,$ACCA   ; Set #REGsp to point to display file lookup table at
                     ; position (0,24)
 $A439 LD HL,$EAFF   ; Set #REGhl to the base address for the room graphics
                     ; buffer
 $A43C LD BC,$13B0   ; Set #REGbc to the number of bytes to copy
*$A43F POP DE        ; Set #REGde to the corresponent addres into display file
 $A440 INC DE        ; Increment display file to the next byte (first and last
                     ; column of room screen are not
 $A441 INC HL        ; Increment base address for the room graphics buffer
 $A442 LDI           ; {Copy the 30 bytes for this scanline
 $A444 LDI           ;
 $A446 LDI           ;
 $A448 LDI           ;
 $A44A LDI           ;
 $A44C LDI           ;
 $A44E LDI           ;
 $A450 LDI           ;
 $A452 LDI           ;
 $A454 LDI           ;
 $A456 LDI           ;
 $A458 LDI           ;
 $A45A LDI           ;
 $A45C LDI           ;
 $A45E LDI           ;
 $A460 LDI           ;
 $A462 LDI           ;
 $A464 LDI           ;
 $A466 LDI           ;
 $A468 LDI           ;
 $A46A LDI           ;
 $A46C LDI           ;
 $A46E LDI           ;
 $A470 LDI           ;
 $A472 LDI           ;
 $A474 LDI           ;
 $A476 LDI           ;
 $A478 LDI           ;
 $A47A LDI           ;
 $A47C LDI           ; }
 $A47E INC HL        ; Increment base address for the room graphics buffer
                     ; (next line)
 $A47F JP PE,$A43F   ; Jump back if not all bytes are copied
 $A482 LD SP,($A22C) ; Recover #REGsp
 $A486 RET           ;

; Print the text content of the windows
;
; Used by the routines at #R$A2E6 and #R$A34D.
;
; B Number of lines of text to print
; IX Address of the text definition data
c$A487 PUSH BC       ; Save #REGbc
 $A488 CALL $A4AF    ; Print a line of text
 $A48B INC IX        ; Point #REGix to the address of the first byte of the
                     ; next line
 $A48D POP BC        ; Save #REGbc
 $A48E DJNZ $A487    ; Jump back while there are lines left to print
 $A490 RET           ;
; Compute the address at the lookup table of the display file and the address
; of the graphic data for the character to display
*$A491 LD A,($A230)  ; {Set #REGhl to the vertical position of the text
 $A494 LD L,A        ;
 $A495 LD H,$00      ; }
 $A497 ADD HL,HL     ; Vertical position is in bit 7-3 so it's only necessari
                     ; multiply by two
 $A498 LD DE,$AC9A   ; {Point #REGhl to the display file lookup table
 $A49B ADD HL,DE     ; }
 $A49C PUSH HL       ; Save #REGhl
 $A49D LD L,(IX+$00) ; {Set #REGhl to the character to display
 $A4A0 LD H,$00      ; }
 $A4A2 ADD HL,HL     ; {Computes the address of the graphic data of the
 $A4A3 ADD HL,HL     ; character into the charset data tabla at $6206
 $A4A4 ADD HL,HL     ;
 $A4A5 LD DE,$6206   ;
 $A4A8 ADD HL,DE     ; }
 $A4A9 EX DE,HL      ; Exchange #REGde and #REGhl
 $A4AA POP IY        ; Restore #REGiy
 $A4AC LD B,$08      ; Set #REGb=8
 $A4AE RET           ;
; Prints a line of text
*$A4AF LD A,(IX+$00) ; {Save color attribute of text at #R$A22C
 $A4B2 LD ($A22C),A  ; }
 $A4B5 LD A,(IX+$01) ; {Save horizontal position of text at #R$A22E
 $A4B8 LD ($A22E),A  ; }
 $A4BB LD A,(IX+$02) ; {Save vertical position of text at #R$A230
 $A4BE LD ($A230),A  ; }
 $A4C1 LD DE,$0003   ; {Point #REGix to the first character
 $A4C4 ADD IX,DE     ; }
*$A4C6 CALL $A491    ; Computes addres into lookup table and address of the
                     ; graphics data for the character
; Prints a character
*$A4C9 LD L,(IY+$00) ; {Point at #REGhl the address into the display file from
 $A4CC LD H,(IY+$01) ; the lookup table}
 $A4CF PUSH DE       ; Save #REGde
 $A4D0 LD A,($A22E)  ; {Save the horizontal position of text at #REGde
 $A4D3 LD E,A        ;
 $A4D4 LD D,$00      ; }
 $A4D6 ADD HL,DE     ; Adds the horizontal position to the address into the
                     ; display file
 $A4D7 POP DE        ; Restore #REGde
 $A4D8 LD A,(DE)     ; Read the next byte of the graphic data for the character
 $A4D9 LD (HL),A     ; Puts the byte in to the display file
 $A4DA INC DE        ; Points to the next byte of the graphic data for the
                     ; character
 $A4DB INC IY        ; {Points to the next address of the display file lookup
 $A4DD INC IY        ; table}
 $A4DF DJNZ $A4C9    ; Jump back until displayed all of the eight bytes of the
                     ; character
 $A4E1 LD A,(IX+$00) ; {The character is an space ($20)?
 $A4E4 CP $20        ; }
 $A4E6 JR Z,$A501    ; Jump if so
; Set the color attribute for the character if is not an SPACE ($20)
 $A4E8 LD A,($A230)  ; {Set #REGhl to the vertical position of the text (only
 $A4EB AND $F8       ; bits 7-3)
 $A4ED LD L,A        ;
 $A4EE LD H,$00      ; }
 $A4F0 ADD HL,HL     ; {And computes the patial offset to the attribute file
 $A4F1 ADD HL,HL     ; }
 $A4F2 LD A,($A22E)  ; {Set #REGde to the horizontal position
 $A4F5 LD E,A        ;
 $A4F6 LD D,$00      ; }
 $A4F8 ADD HL,DE     ; And computes the offset to the attribute file
 $A4F9 LD DE,$5800   ; {Add the offset to the base address of the attribute
 $A4FC ADD HL,DE     ; file}
 $A4FD LD A,($A22C)  ; Pick up the color attribute for the text
 $A500 LD (HL),A     ; And put this color attribute into the attribute file
; Prepares to print the next character until the end of marker (character $00)
*$A501 INC IX        ; Point #REGix to the next character
 $A503 LD HL,$A22E   ; {Increment the horizontal position for the next
 $A506 INC (HL)      ; character}
 $A507 LD A,(IX+$00) ; Pick up the next character
 $A50A OR A          ; is an end of marker ($00)?
 $A50B JR Z,$A50F    ; Jump if so
 $A50D JR $A4C6      ; Jump back and repeat for the next character
*$A50F RET           ;

; Routine not used
s$A510 LD HL,($A23A)
 $A513 INC HL
 $A514 LD A,H
 $A515 AND $3F
 $A517 LD H,A
 $A518 LD A,(HL)
 $A519 LD ($A23A),HL
 $A51C RET

; Pseudo-random number generator
;
; Seed from $A23A, $A23B and $A23C. Used by the routines at #R$9683, #R$99E3,
; #R$9BA7, #R$9E67, #R$BC48, #R$BEAD, #R$BEF1, #R$BF95, #R$BFA8, #R$C059,
; #R$C598, #R$C5A7, #R$C5B4, #R$C5BE, #R$C5E8 and #R$CA69.
;
; O:A Pseudo-random number
c$A51D PUSH HL       ;
 $A51E LD A,($A23A)  ;
 $A521 SLA A         ;
 $A523 SLA A         ;
 $A525 LD HL,$A23A   ;
 $A528 ADD A,(HL)    ;
 $A529 ADD A,$15     ;
 $A52B LD ($A23A),A  ;
 $A52E POP HL        ;
 $A52F RET           ;
; Used by the routines at #R$99E3, #R$9BA7, #R$9F15, #R$A023, #R$BEF1, #R$CA69
; and #R$CC75.
*$A530 PUSH HL       ;
 $A531 LD ($A22C),BC ;
 $A535 LD B,$08      ;
*$A537 LD A,($A23A)  ;
 $A53A AND $48       ;
 $A53C ADC A,$38     ;
 $A53E RLA           ;
 $A53F RLA           ;
 $A540 LD HL,$A23C   ;
 $A543 RL (HL)       ;
 $A545 DEC HL        ;
 $A546 RL (HL)       ;
 $A548 DEC HL        ;
 $A549 RL (HL)       ;
 $A54B DJNZ $A537    ;
 $A54D LD A,($A23A)  ;
 $A550 LD BC,($A22C) ;
 $A554 POP HL        ;
 $A555 RET           ;

; Reset display and attribute file
;
; Used by the routine at #R$9470.
c$A556 LD HL,$4000   ; {Reset display file
 $A559 LD DE,$4001   ;
 $A55C LD BC,$1AFF   ;
 $A55F LD (HL),$00   ;
 $A561 LDIR          ; }
 $A563 LD HL,$5800   ; {Reset attribute file
 $A566 LD DE,$5801   ;
 $A569 LD BC,$02FF   ;
 $A56C LD (HL),A     ;
 $A56D LDIR          ; }
 $A56F RET           ;

; Draw the number saved in charcode buffer at $A23D into display file
;
; Used by the routines at #R$98C9, #R$98D9, #R$9918 and #R$9D68.
;
; E Horizontal position of the unit digit
; L Vertical position of the number to draw
; B Number of digits to draw
c$A570 PUSH IX       ; Save #REGix
 $A572 LD IX,$A23F   ; Point #REGix to the unit charcode to draw
 $A576 LD H,$00      ; {Computes offset for vertical position
 $A578 ADD HL,HL     ; }
 $A579 LD D,$00      ; {Save #REGde
 $A57B PUSH DE       ; }
 $A57C LD DE,$AC9A   ; {Set #REGhl to point to address of first digit into
 $A57F ADD HL,DE     ; display file lookup table}
 $A580 LD E,(HL)     ; {Set #REGde to the corresponding address into display
 $A581 INC HL        ; file
 $A582 LD D,(HL)     ; }
 $A583 POP HL        ; Restore #REGhl
 $A584 ADD HL,DE     ; Adds horizontal position to address on display file
 $A585 EX DE,HL      ; Exchange #REGde and #REGhl
*$A586 PUSH BC       ; Save #REGbc
 $A587 PUSH DE       ; Save #REGde
 $A588 LD L,(IX+$00) ; {Set #REGhl to the charcode digit pointed by #REGix
 $A58B LD H,$00      ; }
 $A58D ADD HL,HL     ; {Computes offset of the charcode into charset table to
 $A58E ADD HL,HL     ; set #REGhl to the graphics data for the digit
 $A58F ADD HL,HL     ;
 $A590 LD BC,$6206   ;
 $A593 ADD HL,BC     ; }
 $A594 CALL $A5A1    ; Draw digit into display file
 $A597 INC IX        ; Point #REGix to the next charcode digit
 $A599 POP DE        ; Restore #REGde
 $A59A DEC DE        ; Point #REGde to the position of the previous digit into
                     ; display file
 $A59B POP BC        ; Restore #REGbc
 $A59C DJNZ $A586    ; Jump back until all digits copied
 $A59E POP IX        ; Restore #REGix
 $A5A0 RET           ;
; Draw digit into display file
*$A5A1 LD B,$08      ; Set #REGb to the number of bytes to draw
*$A5A3 LD A,(HL)     ; {Copy graphics data from #REGhl to display file
 $A5A4 LD (DE),A     ; }
 $A5A5 INC HL        ; Increment address of graphic data
 $A5A6 INC D         ; Increment address of display file (next line)
 $A5A7 DJNZ $A5A3    ; Jump back until the digit is draw
 $A5A9 RET           ;

; Convert a number into a list of digits charcodes
;
; Computes the charcode of the number in #REGhl and puts every digit charcode
; into $A23F-$A243 (in reverse order) $A23F units, $A240 tens, $A241 hundreds,
; $A242 thousands and $A243 ten thousands. Used by the routines at #R$98C9,
; #R$98D9, #R$9918 and #R$9D68.
;
; HL Number to convert
c$A5AA PUSH IX       ; Save #REGix
 $A5AC LD ($A23D),HL ; Save the number into $A23D
 $A5AF XOR A         ; Set #REGa=0
 $A5B0 LD ($A243),A  ; {Init the charcode buffer
 $A5B3 LD ($A242),A  ;
 $A5B6 LD ($A241),A  ;
 $A5B9 LD ($A240),A  ;
 $A5BC LD ($A23F),A  ; }
 $A5BF LD DE,$2710   ; Set #REGde=10.000
 $A5C2 CALL $A5EF    ; Computes the charcode for the digit in the ten thousands
 $A5C5 LD ($A243),A  ; Set this charcode into $A243
 $A5C8 LD DE,$03E8   ; Set #REGde=1.000
 $A5CB CALL $A5EF    ; Computes the charcode for the digit in the thousands
 $A5CE LD ($A242),A  ; Set this charcode into $A242
 $A5D1 LD DE,$0064   ; Set #REGde=100
 $A5D4 CALL $A5EF    ; Computes the charcode for the digit in the hundreds
 $A5D7 LD ($A241),A  ; Set this charcode into $A241
 $A5DA LD DE,$000A   ; Set #REGde=10
 $A5DD CALL $A5EF    ; Computes the charcode for the digit in the tens
 $A5E0 LD ($A240),A  ; Set this charcode into $A240
 $A5E3 LD DE,$0001   ; Set #REGde=1
 $A5E6 CALL $A5EF    ; Computes the charcode for the digit in the units
 $A5E9 LD ($A23F),A  ; Set this charcode into $A23F
 $A5EC POP IX        ; Restore #REGix
 $A5EE RET           ;
; Computes the charcode for the digit in the units, tens, hundreds, thousands o
; ten toushands
*$A5EF LD HL,($A23D) ; Set #REGhl to the number to convert
 $A5F2 LD IX,$0000   ; Set #REGix=0. The part of the number that has been
                     ; converted [ x0.000, x.000, x00, x0 or x ]
 $A5F6 LD B,$00      ; Set #REGb=0. The digit number that we need to convert to
                     ; charcode [x]
*$A5F8 AND A         ; Reset carry bit
 $A5F9 SBC HL,DE     ; Substract #REGde [10.000, 1.000, 100, 10 or 1] to #REGhl
 $A5FB JR C,$A602    ; Jump if the result in #REGhl is a negative number
                     ; (#REGde is greater than the number to convert)
 $A5FD ADD IX,DE     ; Add #REGde to #REGix
 $A5FF INC B         ; Increment the digit number
 $A600 JR $A5F8      ; Jump back and repeat the process until obtain the digit
                     ; number
*$A602 PUSH IX       ; {Copy in #REGde the value of #REGix
 $A604 POP DE        ; }
 $A605 LD HL,($A23D) ; Set #REGhl to the number to convert
 $A608 AND A         ; Reset carry bit
 $A609 SBC HL,DE     ; Substract to the number to convert the part just
                     ; converted
 $A60B LD ($A23D),HL ; Set into $A23D the remaining number to convert
 $A60E LD A,B        ; Copy into #REGa the digit number to convert
 $A60F ADD A,$30     ; Set #REGa to the charcode of the digit ($30 is the base
                     ; charcode for digit, i.e. is the 0 digit charcode)
 $A611 RET           ;

; Configure and check key pressed routines for Rex movement
;
; Configure check FIRE key pressed routine. Used by the routines at #R$DF20 and
; #R$DF59.
c$A612 LD HL,($A244) ; {Configure port for key read in routine $A61F
 $A615 LD ($A620),HL ; }
 $A618 LD A,($A246)  ; {Configure operand BIT to check for key press in routine
 $A61B LD ($A629),A  ; $A61F}
 $A61E RET           ;
; Check FIRE key pressed. Default key is O. Used by the routines at #R$9470,
; #R$97AB, #R$97D2 and #R$A68F.
*$A61F LD BC,$DFFE   ; {Read port for FIRE key
 $A622 IN A,(C)      ; }
 $A624 LD HL,$A247   ; {Reset input device type
 $A627 XOR (HL)      ; }
 $A628 BIT 1,A       ; Execute specific BIT operand to test if bit of key FIRE
                     ; is set
 $A62A RET           ;
; Configure check LEFT key pressed routine. Used by the routines at #R$DF20 and
; #R$DF59.
*$A62B LD HL,($A244) ; {Configure port for key read in routine $A638
 $A62E LD ($A639),HL ; }
 $A631 LD A,($A246)  ; {Configure operand BIT to check for key press in routine
 $A634 LD ($A642),A  ; $A638}
 $A637 RET           ;
; Check LEFT key pressed. Default key is Q.  Used by the routine at #R$9470.
*$A638 LD BC,$FBFE   ; {Read port for LEFT key
 $A63B IN A,(C)      ; }
 $A63D LD HL,$A247   ; {Reset input device type
 $A640 XOR (HL)      ; }
 $A641 BIT 0,A       ; Execute specific BIT operand to test if bit of key LEFT
                     ; is set
 $A643 RET           ;
; Configure check RIGHT key pressed routine. Used by the routines at #R$DF20
; and #R$DF59.
*$A644 LD HL,($A244) ; {Configure port for key read in routine $A651
 $A647 LD ($A652),HL ; }
 $A64A LD A,($A246)  ; {Configure operand BIT to check for key press in routine
 $A64D LD ($A65B),A  ; $A651}
 $A650 RET           ;
; Check RIGHT key pressed. Default key is W. Used by the routine at #R$9470.
*$A651 LD BC,$FBFE   ; {Read port for RIGHT key
 $A654 IN A,(C)      ; }
 $A656 LD HL,$A247   ; {Reset input device type
 $A659 XOR (HL)      ; }
 $A65A BIT 1,A       ; Execute specific BIT operand to test if bit of key RIGHT
                     ; is set
 $A65C RET           ;
; Configure check UP key pressed routine. Used by the routines at #R$DF20 and
; #R$DF59.
*$A65D LD HL,($A244) ; {Configure port for key read in routine $A66A
 $A660 LD ($A66B),HL ; }
 $A663 LD A,($A246)  ; {Configure operand BIT to check for key press in routine
 $A666 LD ($A674),A  ; $A66A}
 $A669 RET           ;
; Check UP key pressed. Default key is I. Used by the routine at #R$9470.
*$A66A LD BC,$DFFE   ; {Read port for UP key
 $A66D IN A,(C)      ; }
 $A66F LD HL,$A247   ; {Reset input device type
 $A672 XOR (HL)      ; }
 $A673 BIT 2,A       ; Execute specific BIT operand to test if bit of key UP is
                     ; set
 $A675 RET           ;
; Configure check DOWN key pressed routine. Used by the routines at #R$DF20 and
; #R$DF59.
*$A676 LD HL,($A244) ; {Configure port for key read in routine $A683
 $A679 LD ($A684),HL ; }
 $A67C LD A,($A246)  ; {Configure operand BIT to check for key press in routine
 $A67F LD ($A68D),A  ; $A683}
 $A682 RET           ;
; Check DOWN key pressed. Default key is J. Used by the routine at #R$9470.
*$A683 LD BC,$BFFE   ; {Read port for DOWN key
 $A686 IN A,(C)      ; }
 $A688 LD HL,$A247   ; {Reset input device type
 $A68B XOR (HL)      ; }
 $A68C BIT 3,A       ; Execute specific BIT operand to test if bit of key DOWN
                     ; is set
 $A68E RET           ;

; Pause game
;
; Used by the routine at #R$9470.
c$A68F CALL $D36F    ; Reset sound volume chanels
 $A692 CALL $A61F    ; Check for FIRE key pressed
 $A695 JP NZ,$A68F   ; Jump back if key not pressed
 $A698 CALL $D346    ; Reset sound data buffer
 $A69B RET           ;

; Draw explosion debris
;
; Used by the routine at #R$C25E.
c$A69C LD B,$08      ; Set #REGb to the number of bytes to copy
*$A69E LD A,(DE)     ; Set #REGb to the graphic data byte
 $A69F OR (HL)       ; Blend graphic data of debris with graphic data of room
 $A6A0 LD (HL),A     ; Copy graphic data to room graphic data buffer
 $A6A1 INC DE        ; Increment graphic data address
 $A6A2 PUSH DE       ; Save #REGde
 $A6A3 LD DE,$0020   ; {Increment address room graphic data to the next line
 $A6A6 ADD HL,DE     ; }
 $A6A7 POP DE        ; Restore #REGde
 $A6A8 DJNZ $A69E    ; Jump back until all bytes copied
 $A6AA RET           ;

; Computes address position in tile type buffer based on (x,y) position on
; screen
;
; X-position is stored in $A248 and y-position in $A249. Used by the routines
; at #R$9470, #R$B694, #R$C691, #R$C794, #R$CAF6 and #R$CEE5.
;
; I:A Tile position $00 Previous tile (x,y) - $01 Tile in (x,y)
; O:HL Address position into tile type buffer
c$A6AB PUSH AF       ; Save #REGaf
 $A6AC LD A,($A249)  ; Set #REGa the y-position
 $A6AF LD L,A        ; {Computes the offset of the tile based on the y-position
 $A6B0 LD H,$00      ; y-offset = (y-position / 8) * 32 (32 tiles per row and 8
 $A6B2 SRL H         ; pixels height per row)
 $A6B4 RR L          ;
 $A6B6 SRL H         ;
 $A6B8 RR L          ;
 $A6BA SRL H         ;
 $A6BC RR L          ;
 $A6BE ADD HL,HL     ;
 $A6BF ADD HL,HL     ;
 $A6C0 ADD HL,HL     ;
 $A6C1 ADD HL,HL     ;
 $A6C2 ADD HL,HL     ; }
 $A6C3 LD A,($A248)  ; Set #REGa the x-position
 $A6C6 SRL A         ; {Computes the offset of the tile based on the x-position
 $A6C8 SRL A         ; x-offset = x-position / 8
 $A6CA SRL A         ; }
 $A6CC LD E,A        ; {Adds the two offsets
 $A6CD LD D,$00      ;
 $A6CF ADD HL,DE     ; }
 $A6D0 LD DE,$E19F   ; Set #REGde the base address to the tile type buffer
 $A6D3 POP AF        ; Recover #REGa
 $A6D4 OR A          ; Is 0?
 $A6D5 JP NZ,$A6DB   ; Jump if not
 $A6D8 LD DE,$E19E   ; If it's 0 then change the base address of tile type
                     ; buffer to get the previous tile
*$A6DB ADD HL,DE     ; Set #REGhl to the base address of the location of the
                     ; tile in tile buffer
 $A6DC RET           ;

; Computes address into attribute file based of (x,y)-pixel-position on screen
;
; Used by the routines at #R$9B4D and #R$BC17.
;
; I:$A248 x-pixel-position
; I:$A249 y-pixel-position
; O:HL Address into attribute file
c$A6DD LD A,($A249)  ; {Computes into #REGhl the address offset for the
 $A6E0 LD L,A        ; y-position
 $A6E1 LD H,$00      ;
 $A6E3 SRL H         ;
 $A6E5 RR L          ;
 $A6E7 SRL H         ;
 $A6E9 RR L          ;
 $A6EB SRL H         ;
 $A6ED RR L          ;
 $A6EF ADD HL,HL     ;
 $A6F0 ADD HL,HL     ;
 $A6F1 ADD HL,HL     ;
 $A6F2 ADD HL,HL     ;
 $A6F3 ADD HL,HL     ; }
 $A6F4 LD A,($A248)  ; {Computes into #REGde the address offset for the
 $A6F7 SRL A         ; x-position
 $A6F9 SRL A         ;
 $A6FB SRL A         ;
 $A6FD LD E,A        ;
 $A6FE LD D,$00      ; }
 $A700 ADD HL,DE     ; {Set #REGhl to the address into attribute file
 $A701 LD DE,$5800   ;
 $A704 ADD HL,DE     ; }
 $A705 RET           ;

; Update arrow tiles, shield recharger and respawn indicator
;
; Used by the routine at #R$9470.
; .
; Update arrow tiles
c$A706 LD HL,$AF82     ; Set #REGhl to the offset address for arrows (tilt #0)
 $A709 LD A,($A1B0)    ; {Jump forward if tilt #0 frame
 $A70C OR A            ;
 $A70D JP Z,$A713      ; }
 $A710 LD HL,$AFA2     ; Set #REGhl to the base address for the animated arrows
                       ; (tilt #1)
*$A713 LD DE,$6DE6     ; Set #REGde to the base address for the arrows tiles
 $A716 LD BC,$0020     ; Set #REGbc to the number of bytes
*$A719 LDI             ; {Copy graphic data to tile address until all the bytes
 $A71B LDI             ; copied
 $A71D LDI             ;
 $A71F LDI             ;
 $A721 LDI             ;
 $A723 LDI             ;
 $A725 LDI             ;
 $A727 LDI             ;
 $A729 JP PE,$A719     ; }
 $A72C CALL $A730      ; Update shield recharger
 $A72F RET             ;
; Update shield recharger
*$A730 LD IY,$A203     ; Set #REGiy to the shield recharger index value
 $A734 LD DE,$A789     ; Set #REGde to the base address for the graphic data
                       ; address table of shield recharger
 $A737 LD HL,$6DD6     ; Set #REGhl to the base address for the shield
                       ; recharger tile graphic data
 $A73A LD BC,$0010     ; Set #REGbc to the number of bytes to copy
 $A73D JP $A74D        ; Jump to handle shield recharger animation
; Update respawn indicators
*$A740 LD IY,$A202     ; Set #REGiy to the respawn indicator index value
 $A744 LD DE,$A77D     ; Set #REGde to the base address for the graphic data
                       ; address table of respawn indicator
 $A747 LD HL,$684E     ; Set #REGhl to the base address for the respawn
                       ; indicator tile graphic data
 $A74A LD BC,$0008     ; Set #REGbc to the number of bytes to copy
; Animate tile graphic
*$A74D LD ($A22C),DE   ; Set #R$A22C the base address for the table of graphic
                       ; data address
 $A751 LD ($A22E),HL   ; Set #R$A22E the base address for the tile graphic data
 $A754 INC (IY+$00)    ; {Increase loop value
 $A757 INC (IY+$00)    ; }
*$A75A LD L,(IY+$00)   ; {Point into #REGde the address for the corresponent
 $A75D LD H,$00        ; index
 $A75F LD DE,($A22C)   ;
 $A763 ADD HL,DE       ;
 $A764 EX DE,HL        ; }
 $A765 LD A,(DE)       ; {if value is $FF then reset the index
 $A766 CP $FF          ;
 $A768 JP NZ,$A772     ;
 $A76B LD (IY+$00),$00 ; }
 $A76F JP $A75A        ; Jump to handle next address
*$A772 LD L,A          ; {Set into #REGhl the base address for the next graphic
 $A773 INC DE          ; data of the tile animation
 $A774 LD A,(DE)       ;
 $A775 LD H,A          ; }
 $A776 LD DE,($A22E)   ; Set #REGde to the base address for the tile graphic
                       ; data
 $A77A LDIR            ; Copy all the bytes of the tiles
 $A77C RET             ;

; Table of graphic data addresses for tile animation
b$A77D DEFB $68,$8A,$70,$8A,$78,$8A,$80,$8A ; {Graphic data addresses for
 $A785 DEFB $88,$8A,$FF,$FF                 ; respawn indicators}
 $A789 DEFB $90,$8A,$A0,$8A,$B0,$8A,$A0,$8A ; {Graphic data addresses for
 $A791 DEFB $FF,$FF                         ; recharger animation}

; Initialise drones configuration data buffer
;
; Used by the routines at #R$9470 and #R$BA09.
c$A793 LD HL,$5E50   ; Set #REGhl to point to index byte for drone
                     ; configuration data buffer
 $A796 LD B,$08      ; Set #REGb to the max number of drones to configure
 $A798 LD A,$00      ; Set #REGa to the initial index into offset position
                     ; table for this drone
*$A79A LD (HL),A     ; Copy value of #REGa to address pointed by #REGhl
 $A79B LD DE,$0003   ; {Increment address pointer by 3
 $A79E ADD HL,DE     ; }
 $A79F ADD A,$08     ; Increment by 8 the index into offset position table for
                     ; the next drone
 $A7A1 DJNZ $A79A    ; Jump back and init data for next drone
 $A7A3 RET           ;

; Draw drones for multiple weapon
;
; Used by the routine at #R$9470.
c$A7A4 LD A,($A1EE)    ; {Return if Rex is dead
 $A7A7 OR A            ;
 $A7A8 RET NZ          ; }
 $A7A9 LD A,($A1AC)    ; {Return is weapon of Rex isn't multiple
 $A7AC CP $03          ;
 $A7AE RET NZ          ; }
 $A7AF LD A,($A1F9)    ; {Return if Rex is teleporting
 $A7B2 OR A            ;
 $A7B3 RET NZ          ; }
 $A7B4 LD IY,$5E4E     ; Set #REGiy the base address for drone configuration
 $A7B8 LD A,($A1AD)    ; {Set #REGb the number of drones. Number of drones = 3
 $A7BB ADD A,$03       ; + multiple weapon energy level
 $A7BD LD B,A          ; }
*$A7BE PUSH BC         ; Save #REGbc
 $A7BF LD A,(IY+$02)   ; Set #REGa to the index into the offset position for
                       ; drones
 $A7C2 SLA A           ; {Point #REGhl to the address for the offset position
 $A7C4 LD E,A          ;
 $A7C5 LD D,$00        ;
 $A7C7 LD HL,$A836     ;
 $A7CA ADD HL,DE       ; }
 $A7CB LD A,($A24F)    ; Set #REGa to the x-position of Rex
 $A7CE DEC A           ; {Computes x-position of drone based on x-offset and
 $A7CF ADD A,(HL)      ; x-position of Rex Drone x-position = Rex x-position +
                       ; x-offset - 1}
 $A7D0 LD (IY+$00),A   ; Set x-position of drone in table configuration buffer
 $A7D3 INC HL          ; Increment address into offset position table
 $A7D4 LD A,($A250)    ; Set #REGa to the y-position of Rex
 $A7D7 ADD A,$02       ; {Computes y-position of drone based on x-offset and
 $A7D9 ADD A,(HL)      ; y-position of Rex Drone y-position = Rex y-position +
                       ; y-offset + 2}
 $A7DA LD (IY+$01),A   ; Set y-position of drone in table configuration buffer
 $A7DD LD L,A          ; {Computes in #REGhl the address into room graphic data
 $A7DE LD H,$00        ; for the drone position
 $A7E0 ADD HL,HL       ;
 $A7E1 ADD HL,HL       ;
 $A7E2 ADD HL,HL       ;
 $A7E3 ADD HL,HL       ;
 $A7E4 ADD HL,HL       ;
 $A7E5 LD DE,$E7FF     ;
 $A7E8 ADD HL,DE       ;
 $A7E9 LD E,(IY+$00)   ;
 $A7EC SRL E           ;
 $A7EE SRL E           ;
 $A7F0 SRL E           ;
 $A7F2 LD D,$00        ;
 $A7F4 ADD HL,DE       ; }
 $A7F5 PUSH HL         ; Save #REGhl
 $A7F6 LD A,(IY+$00)   ; {Computes in #REGde the graphic data of drone based on
 $A7F9 AND $07         ; his x-position (x-position & 0x7) * 8 = index into
 $A7FB SLA A           ; graphic data table
 $A7FD SLA A           ;
 $A7FF SLA A           ;
 $A801 LD E,A          ;
 $A802 LD D,$00        ;
 $A804 LD HL,$A8B6     ;
 $A807 ADD HL,DE       ;
 $A808 EX DE,HL        ; }
 $A809 POP HL          ; Restore #REGhl
 $A80A LD B,$04        ; Set #REGb to the height of the drone sprite
*$A80C PUSH BC         ; Save #REGbc
 $A80D LD A,(DE)       ; {Copy into room graphic data the drone graphic data
 $A80E OR (HL)         ;
 $A80F LD (HL),A       ; }
 $A810 INC DE          ; {Increase address for graphic data of drone and room
 $A811 INC HL          ; graphic data}
 $A812 LD A,(DE)       ; {Copy into room graphic data the drone graphic data
 $A813 OR (HL)         ;
 $A814 LD (HL),A       ; }
 $A815 INC DE          ; Increment address for graphic data of drone
 $A816 LD BC,$001F     ; {Point #REGhl to the next row in room graphic data
 $A819 ADD HL,BC       ; }
 $A81A POP BC          ; Restore #REGbc
 $A81B DJNZ $A80C      ; Jump until drone is drawn
 $A81D LD A,(IY+$02)   ; {Increment index into the offset position table for
 $A820 INC A           ; the drone
 $A821 LD (IY+$02),A   ; }
 $A824 CP $40          ; {Reset the index position if has reached to the end
 $A826 JP NZ,$A82D     ;
 $A829 LD (IY+$02),$00 ; }
*$A82D LD DE,$0003     ; {Point #REGiy to the next drone configuration
 $A830 ADD IY,DE       ; }
 $A832 POP BC          ; Restore #REGbc
 $A833 DJNZ $A7BE      ; Jump back and process next drone
 $A835 RET             ;

; Offset position table for drones
;
; 64 positions circling Rex (x-offset, y-offset)
b$A836 DEFB $05,$00,$06,$00,$07,$00,$08,$00
 $A83E DEFB $09,$00,$0A,$00,$0B,$01,$0C,$01
 $A846 DEFB $0D,$02,$0E,$02,$0F,$03,$10,$04
 $A84E DEFB $11,$05,$11,$06,$12,$07,$12,$08
 $A856 DEFB $13,$09,$13,$0A,$13,$0B,$13,$0C
 $A85E DEFB $13,$0D,$13,$0E,$12,$0F,$12,$10
 $A866 DEFB $11,$11,$11,$12,$10,$13,$0F,$14
 $A86E DEFB $0E,$15,$0D,$15,$0C,$16,$0B,$16
 $A876 DEFB $0A,$17,$09,$17,$08,$17,$07,$17
 $A87E DEFB $06,$17,$05,$17,$04,$16,$03,$16
 $A886 DEFB $02,$15,$01,$15,$00,$14,$FF,$13
 $A88E DEFB $FE,$12,$FE,$11,$FD,$10,$FD,$0F
 $A896 DEFB $FC,$0E,$FC,$0D,$FC,$0C,$FC,$0B
 $A89E DEFB $FC,$0A,$FC,$09,$FD,$08,$FD,$07
 $A8A6 DEFB $FE,$06,$FE,$05,$FF,$04,$00,$03
 $A8AE DEFB $01,$02,$02,$02,$03,$01,$04,$01

; Graphic data for drones
;
; Drones are 16x4 pixels. 8 frames animation
b$A8B6 DEFB $60,$00,$C0,$00,$10,$00,$20,$00 ; {#UDGARRAY2,$47,,2;$A8B6-$A8F5-1-16(drone)
 $A8BE DEFB $20,$00,$68,$00,$48,$00,$20,$00 ;
 $A8C6 DEFB $08,$00,$24,$00,$34,$00,$10,$00 ;
 $A8CE DEFB $0C,$00,$02,$00,$18,$00,$0C,$00 ;
 $A8D6 DEFB $06,$00,$08,$00,$03,$00,$06,$00 ;
 $A8DE DEFB $02,$00,$04,$80,$05,$80,$01,$00 ;
 $A8E6 DEFB $00,$80,$02,$C0,$02,$40,$01,$00 ;
 $A8EE DEFB $00,$C0,$00,$60,$01,$00,$00,$C0 ; }

; Update weapon in inventory (HUD)
;
; Double fire weapon. Used by the routine at #R$A0F8.
c$A8F6 LD HL,$A1E9   ; Set #REGhl to the variable address for inventory
                     ; indicator
 $A8F9 JP $A90B      ;
; Laser. This entry point is used by the routine at #R$A0F8.
*$A8FC LD HL,$A1EA   ; Set #REGhl to the variable address for inventory
                     ; indicator
 $A8FF JP $A90B      ;
; Multiple. This entry point is used by the routine at #R$A0F8.
*$A902 LD HL,$A1EB   ; Set #REGhl to the variable address for inventory
                     ; indicator
 $A905 JP $A90B      ;
; Spray. This entry point is used by the routine at #R$A0F8.
*$A908 LD HL,$A1EC   ; Set #REGhl to the variable address for inventory
                     ; indicator
*$A90B LD (HL),$01   ; Set weapon available
 $A90D CALL $A3BA    ; Draw weapon icon in HUD
 $A910 CALL $BA52    ; Change the current weapon of Rex
 $A913 RET           ;

; Routine not used - Simulate conveyor belt going up from Rex (Side A)
;
; HL Address pointer for tile graphic data
s$A914 PUSH HL
 $A915 LD C,(HL)
 $A916 LD E,L
 $A917 LD D,H
 $A918 INC HL
 $A919 LD B,$07
*$A91B LD A,(HL)
 $A91C LD (DE),A
 $A91D INC DE
 $A91E INC HL
 $A91F DJNZ $A91B
 $A921 LD A,C
 $A922 LD (DE),A
 $A923 POP HL
 $A924 RET

; Routine not used - Simulate conveyor belt going down from Rex (Side A)
;
; HL Address pointer for tile graphic data
s$A925 PUSH HL
 $A926 LD DE,$0007
 $A929 ADD HL,DE
 $A92A LD C,(HL)
 $A92B LD E,L
 $A92C LD D,H
 $A92D DEC HL
 $A92E LD B,$07
*$A930 LD A,(HL)
 $A931 LD (DE),A
 $A932 DEC DE
 $A933 DEC HL
 $A934 DJNZ $A930
 $A936 POP HL
 $A937 LD (HL),C
 $A938 RET

; Configure current room
;
; Used by the routine at #R$9470.
c$A939 LD A,$03      ; {Reset channel 3 for explosion sound (modified in Rex
 $A93B LD ($D528),A  ; explosion at routine #R$99E3)}
 $A93E CALL $A2DB    ; Initialise time bar loops counter
 $A941 LD HL,$E9FF   ; Set #R$A1D2 to the base address of attribute buffer for
                     ; score points
 $A944 LD ($A1D2),HL ;
 $A947 CALL $C962    ; Configure room connections and enemies of the room
 $A94A LD HL,$5B60   ; {Reset projectiles configuration data buffer
 $A94D LD DE,$5B61   ;
 $A950 LD BC,$02ED   ;
 $A953 LD (HL),$00   ;
 $A955 LDIR          ; }
 $A957 CALL $C7AE    ; Initialize graphic and attribute data buffers for
                     ; current room
 $A95A LD HL,$5860   ; {Reset attribute file for room
 $A95D LD DE,$5861   ;
 $A960 LD BC,$029F   ;
 $A963 LD (HL),$00   ;
 $A965 LDIR          ; }
 $A967 CALL $B243    ; Reset room graphic buffer
 $A96A CALL $B384    ; Copy tile graphic into room graphic data
 $A96D CALL $A432    ; Copy room graphic buffer to display file
 $A970 CALL $C932    ; Copy room color attribute buffer to attribute file
 $A973 CALL $CB41    ; Configure static enemies for the current room
 $A976 XOR A         ; Set #REGa=0
 $A977 LD ($A1B0),A  ; Set tilt #0 for arrow keys in room
 $A97A LD ($A1DE),A  ; No train generating on room
 $A97D CALL $9918    ; Draw shield power
 $A980 LD A,$01      ; {Set current room configured
 $A982 LD ($A1F5),A  ; }
 $A985 RET           ;

; List of rooms in attract-mode
b$A986 DEFB $05,$11,$01,$14,$0A,$17,$13,$FF

; Main loop for attract-mode
;
; Until a key is pressed, show the list of rooms defined at #R$A986. Used by
; the routine at #R$9470.
c$A98E LD A,$C8      ; {Set #R$A25C the loop counter for the showed room = 200
 $A990 LD ($A25C),A  ; }
*$A993 LD A,($A25B)  ; Pick up the list number for the next room to show
 $A996 LD E,A        ; {Set #REGa the room number to show
 $A997 LD D,$00      ;
 $A999 LD HL,$A986   ;
 $A99C ADD HL,DE     ;
 $A99D LD A,(HL)     ; }
 $A99E CP $FF        ; the room number is $FF?
 $A9A0 JP NZ,$A9AA   ; Jump if it isn't
 $A9A3 XOR A         ; {Reset the list number at R$A25B
 $A9A4 LD ($A25B),A  ; }
 $A9A7 JP $A993      ; Jump back
*$A9AA LD ($A251),A  ; Set #R$A251 to the room number to display
 $A9AD LD A,($A25B)  ; {Point $A25B to the next room on the list
 $A9B0 INC A         ;
 $A9B1 LD ($A25B),A  ; }
 $A9B4 CALL $A939    ; Configure current room
*$A9B7 LD A,($A25C)  ; Pick up loop counter
 $A9BA DEC A         ; Decrement loop counter
 $A9BB OR A          ; is zero?
 $A9BC JP Z,$A98E    ; Jump back if so and show next room
 $A9BF LD ($A25C),A  ; Save loop counter at #R$A25C
 $A9C2 CALL $B68B    ; Draw enemy projectiles
 $A9C5 CALL $BC48    ; Draw enemies
 $A9C8 CALL $D424    ; Play sound channels
 $A9CB CALL $B384    ; Copy tile graphic into room graphic data
 $A9CE CALL $A432    ; Copy room graphic buffer to display file
 $A9D1 CALL $B243    ; Reset room graphic buffer
 $A9D4 CALL $D424    ; Play sound channels
 $A9D7 CALL $CF59    ; Handle enemy projectile collision with Rex
 $A9DA CALL $B9E6    ; Update color attribute for weapon icon on HUD
 $A9DD CALL $C9E3    ; Generate train wagons: front, middle or rear wagon. No
                     ; used
 $A9E0 CALL $CA35    ; Creates a new mobile enemy on room
 $A9E3 CALL $98B0    ; Update attribute color for score points in HUD
 $A9E6 CALL $996A    ; HUD flash
 $A9E9 CALL $A26C    ; Update timer bar in HUD
 $A9EC CALL $A61F    ; Check for FIRE key pressed
 $A9EF JP Z,$948E    ; Jump to init game if pressed
 $A9F2 CALL $A706    ; Update arrow tiles, shield recharger and respawn
                     ; indicator
 $A9F5 LD A,($A1B0)  ; {Change tilt arrow tiles
 $A9F8 XOR $01       ;
 $A9FA LD ($A1B0),A  ; }
 $A9FD JP $A9B7      ; Jump back to main loop game

; Table of trajectories for seed plant projectiles
;
; List of y-offsets for every trajectory. Every trajectory ends with marker $1E
b$AA00 DEFB $FB,$FC,$FD,$FE,$FF,$00,$01,$02 ; {Trajectory #1
 $AA08 DEFB $03,$04,$05,$06,$07,$08,$1E     ; }
 $AA0F DEFB $F0,$F4,$F8,$FA,$FE,$00,$02,$06 ; {Trajectory #2
 $AA17 DEFB $08,$0C,$10,$10,$1E             ; }
 $AA1C DEFB $F7,$F8,$F9,$FA,$FB,$FC,$FD,$FE ; {Trajectory #3
 $AA24 DEFB $FF,$00,$01,$02,$03,$04,$05,$06 ;
 $AA2C DEFB $07,$08,$09,$0A,$1E             ; }
 $AA31 DEFB $FC,$FC,$FE,$FE,$FF,$FF,$00,$00 ; {Trajectory #4
 $AA39 DEFB $01,$01,$02,$02,$03,$03,$04,$04 ;
 $AA41 DEFB $05,$1E                         ; }

; Graphic data for seed plant projectile
;
; -##----- #--#---- ##-#---- -##-----
b$AA43 DEFB $60,$90,$D0,$60

; Table for address pointers into table of trajectories for seed plant
; projectiles
;
; Four pair of addresses: Every two addresses defines init address and end
; address into table of trajectories at #R$AA00 1st trajectory: $AA00 to $AA0D
; 2nd trajectory: $AA0F to $AA1A 3rd trajectory: $AA1C to $AA2F 4th trajectory:
; $AA31 to $AA41
b$AA47 DEFB $00,$AA,$0D,$AA,$0F,$AA,$1A,$AA
 $AA4F DEFB $1C,$AA,$2F,$AA,$31,$AA,$41,$AA

; Position offsets for explosion debris
;
; Two pair (x-byte-position, y-pixel-position) offset position for 8 frames
; explosion
b$AA57 DEFB $0A,$1C,$0B,$18,$0C,$16,$0D,$14 ; {Offsets for debris 1
 $AA5F DEFB $0E,$15,$0F,$16,$10,$17,$11,$18 ; }
 $AA67 DEFB $06,$1C,$05,$1A,$04,$18,$03,$16 ; {Offsets for debris 2
 $AA6F DEFB $02,$17,$01,$18,$00,$19,$FF,$1A ; }
 $AA77 DEFB $0A,$2C,$0B,$30,$0C,$34,$0D,$38 ; {Offsets for debris 3
 $AA7F DEFB $0E,$40,$0F,$48,$10,$50,$11,$58 ; }
 $AA87 DEFB $06,$2C,$05,$30,$04,$34,$03,$38 ; {Offsets for debris 4
 $AA8F DEFB $02,$40,$01,$48,$00,$50,$FF,$58 ; }
 $AA97 DEFB $08,$20,$08,$1A,$08,$14,$08,$10 ; {Offsets for debris 5
 $AA9F DEFB $08,$0C,$08,$0A,$08,$08,$08,$07 ; }
 $AAA7 DEFB $09,$3A,$09,$3C,$09,$40,$09,$46 ; {Offsets for debris 6
 $AAAF DEFB $09,$4E,$09,$56,$09,$5E,$09,$64 ; }

; Graphic data for explosion debris
b$AAB7 DEFB $00,$00,$28,$7C,$38,$7C,$28,$00 ; #UDG$AAB7,$47,2
 $AABF DEFB $00,$00,$38,$6C,$44,$6C,$38,$00 ; #UDG$AABF,$47,2
 $AAC7 DEFB $00,$00,$28,$44,$00,$44,$28,$00 ; #UDG$AAC7,$47,2
 $AACF DEFB $00,$24,$42,$00,$00,$42,$24,$00 ; #UDG$AACF,$47,2
 $AAD7 DEFB $42,$81,$00,$00,$00,$00,$81,$42 ; #UDG$AAD7,$47,2
 $AADF DEFB $81,$00,$00,$00,$00,$00,$00,$81 ; #UDG$AADF,$47,2
 $AAE7 DEFB $00,$01,$80,$00,$00,$00,$00,$00 ; #UDG$AAE7,$47,2
 $AAEF DEFB $00,$00,$00,$00,$40,$00,$00,$00 ; #UDG$AAEF,$47,2

; Text Definition Data - Start game, game over and in-game windows
;
; START GAME
b$AAF7 DEFB $46,$07,$50                ; Color attribute and position of text
 $AAFA DEFM "PHASE TWO:ENTER"          ; #MESSAGE($AAFA,$AB08)(phase_2)
 $AB09 DEFB $00                        ; End marker
 $AB0A DEFB $46,$07,$58                ; Color attribute and position of text
 $AB0D DEFM "THE LIVING TOWER"         ; #MESSAGE($AB0D,$AB1C)(tower)
 $AB1D DEFB $00                        ; End marker
 $AB1E DEFB $46,$07,$60                ; Color attribute and position of text
 $AB21 DEFM "TO REACH ZENITH"          ; #MESSAGE($AB21,$AB2F)(zenith)
 $AB30 DEFB $00                        ; End marker
; GAME OVER
 $AB31 DEFB $43,$03,$40                ; Color attribute and position of text
 $AB34 DEFM "GAME OVER"                ; #MESSAGE($AB34,$AB3C)(game_over)
 $AB3D DEFB $00                        ; End marker
 $AB3E DEFB $45,$05,$60                ; Color attribute and position of text
 $AB41 DEFM "HI:SCORE 0000000"         ; #MESSAGE($AB41,$AB50)(hi_score)
 $AB51 DEFB $00                        ; End marker
 $AB52 DEFB $45,$07,$80                ; Color attribute and position of text
 $AB55 DEFM "BIO GROWTHS KILLED:00000" ; #MESSAGE($AB55,$AB6C)(bio_killed)
 $AB6D DEFB $00                        ; End marker
; END GAME
 $AB6E DEFB $45,$06,$50                ; Color attribute and position of text
 $AB71 DEFM "WITH THE BIG SQUIDGY"     ; #MESSAGE($AB71,$AB84)(squidgy)
 $AB85 DEFB $00                        ; End marker
 $AB86 DEFB $45,$06,$58                ; Color attribute and position of text
 $AB89 DEFM "THING DESTROYED REX "     ; #MESSAGE($AB89,$AB9C)(destroyed)
 $AB9D DEFB $00                        ; End marker
 $AB9E DEFB $45,$06,$60                ; Color attribute and position of text
 $ABA1 DEFM "CAN GO HOME AND HAVE"     ; #MESSAGE($ABA1,$ABB4)(go_home)
 $ABB5 DEFB $00                        ; End marker
 $ABB6 DEFB $45,$06,$68                ; Color attribute and position of text
 $ABB9 DEFM "A NICE CUP OF TEA"        ; #MESSAGE($ABB9,$ABC9)(cup_tea)
 $ABCA DEFB $00                        ; End marker
 $ABCB DEFB $45,$06,$70                ; Color attribute and position of text
 $ABCE DEFM "AND PUT HIS FEET UP"      ; #MESSAGE($ABCE,$ABE0)(feet_up)
 $ABE1 DEFB $00                        ; End marker
; PRESS FIRE TO BEGIN
 $ABE2 DEFB $44,$04,$70                ; Color attribute and position of text
 $ABE5 DEFM "PRESS FIRE"               ; #MESSAGE($ABE5,$ABEE)(press_fire)
 $ABEF DEFB $00                        ; End marker
 $ABF0 DEFB $44,$04,$78                ; Color attribute and position of text
 $ABF3 DEFM "TO BEGIN  "               ; #MESSAGE($ABF3,$ABFC)(to_begin)
 $ABFD DEFB $00                        ; End marker
; IN GAME BONUS
 $ABFE DEFB $46,$03,$28                ; Color attribute and position of text
 $AC01 DEFM "    SPEED UP   "          ; #MESSAGE($AC01,$AC0F)(speed_up)
 $AC10 DEFB $00                        ; End marker
 $AC11 DEFB $42,$03,$28                ; Color attribute and position of text
 $AC14 DEFM "  SHIELD LOSS  "          ; #MESSAGE($AC14,$AC22)(shield_loss)
 $AC23 DEFB $00                        ; End marker
 $AC24 DEFB $46,$03,$28                ; Color attribute and position of text
 $AC27 DEFM "   1000 BONUS  "          ; #MESSAGE($AC27,$AC35)(1000_bonus)
 $AC36 DEFB $00                        ; End marker
 $AC37 DEFB $42,$03,$28                ; Color attribute and position of text
 $AC3A DEFM "  ENERGY LOSS  "          ; #MESSAGE($AC3A,$AC48)(energy_loss)
 $AC49 DEFB $00                        ; End marker
 $AC4A DEFB $46,$03,$28                ; Color attribute and position of text
 $AC4D DEFM "100 RAPID SHOTS"          ; #MESSAGE($AC4D,$AC5B)(rapid_shots)
 $AC5C DEFB $00                        ; End marker
; IN GAME WEAPON
 $AC5D DEFB $00                        ; Weapon on inventory: $FF Available $00
                                       ; Not available
 $AC5E DEFB $01                        ; Number of lines
 $AC5F DEFB $45,$12,$28                ; Color attribute and position of text
 $AC62 DEFM "DOUBLE FIRE"              ; #MESSAGE($AC62,$AC6C)(double_fire)
 $AC6D DEFB $00                        ; End marker
 $AC6E DEFB $00                        ; Weapon on inventory: $FF Available $00
                                       ; Not available
 $AC6F DEFB $01                        ; Number of lines
 $AC70 DEFB $45,$03,$28                ; Color attribute and position of text
 $AC73 DEFM "LASER"                    ; #MESSAGE($AC73,$AC77)(laser)
 $AC78 DEFB $00                        ; End marker
 $AC79 DEFB $00                        ; Weapon on inventory: $FF Available $00
                                       ; Not available
 $AC7A DEFB $01                        ; Number of lines
 $AC7B DEFB $45,$14,$28                ; Color attribute and position of text
 $AC7E DEFM "MULTIPLE"                 ; #MESSAGE($AC7E,$AC85)(multiple)
 $AC86 DEFB $00                        ; End marker
 $AC87 DEFB $00                        ; Weapon on inventory: $FF Available $00
                                       ; Not available
 $AC88 DEFB $01                        ; Number of lines
 $AC89 DEFB $45,$12,$28                ; Color attribute and position of text
 $AC8C DEFM "SPRAY"                    ; #MESSAGE($AC8C,$AC90)(spray)
 $AC91 DEFB $00                        ; End marker

; Unused
s$AC92 DEFB $80,$40,$20,$10,$08,$04,$02,$01

; Display file lookup table
;
; The value of the Nth entry (0<=N<=191) in this lookup table is the screen
; buffer address for the point with pixel coordinates (x,y)=(0,N), with the
; origin (0,0) at the top-left corner.
b$AC9A DEFB $00,$40,$00,$41,$00,$42,$00,$43
 $ACA2 DEFB $00,$44,$00,$45,$00,$46,$00,$47
 $ACAA DEFB $20,$40,$20,$41,$20,$42,$20,$43
 $ACB2 DEFB $20,$44,$20,$45,$20,$46,$20,$47
 $ACBA DEFB $40,$40,$40,$41,$40,$42,$40,$43
 $ACC2 DEFB $40,$44,$40,$45,$40,$46,$40,$47
 $ACCA DEFB $60,$40,$60,$41,$60,$42,$60,$43
 $ACD2 DEFB $60,$44,$60,$45,$60,$46,$60,$47
 $ACDA DEFB $80,$40,$80,$41,$80,$42,$80,$43
 $ACE2 DEFB $80,$44,$80,$45,$80,$46,$80,$47
 $ACEA DEFB $A0,$40,$A0,$41,$A0,$42,$A0,$43
 $ACF2 DEFB $A0,$44,$A0,$45,$A0,$46,$A0,$47
 $ACFA DEFB $C0,$40,$C0,$41,$C0,$42,$C0,$43
 $AD02 DEFB $C0,$44,$C0,$45,$C0,$46,$C0,$47
 $AD0A DEFB $E0,$40,$E0,$41,$E0,$42,$E0,$43
 $AD12 DEFB $E0,$44,$E0,$45,$E0,$46,$E0,$47
 $AD1A DEFB $00,$48,$00,$49,$00,$4A,$00,$4B
 $AD22 DEFB $00,$4C,$00,$4D,$00,$4E,$00,$4F
 $AD2A DEFB $20,$48,$20,$49,$20,$4A,$20,$4B
 $AD32 DEFB $20,$4C,$20,$4D,$20,$4E,$20,$4F
 $AD3A DEFB $40,$48,$40,$49,$40,$4A,$40,$4B
 $AD42 DEFB $40,$4C,$40,$4D,$40,$4E,$40,$4F
 $AD4A DEFB $60,$48,$60,$49,$60,$4A,$60,$4B
 $AD52 DEFB $60,$4C,$60,$4D,$60,$4E,$60,$4F
 $AD5A DEFB $80,$48,$80,$49,$80,$4A,$80,$4B
 $AD62 DEFB $80,$4C,$80,$4D,$80,$4E,$80,$4F
 $AD6A DEFB $A0,$48,$A0,$49,$A0,$4A,$A0,$4B
 $AD72 DEFB $A0,$4C,$A0,$4D,$A0,$4E,$A0,$4F
 $AD7A DEFB $C0,$48,$C0,$49,$C0,$4A,$C0,$4B
 $AD82 DEFB $C0,$4C,$C0,$4D,$C0,$4E,$C0,$4F
 $AD8A DEFB $E0,$48,$E0,$49,$E0,$4A,$E0,$4B
 $AD92 DEFB $E0,$4C,$E0,$4D,$E0,$4E,$E0,$4F
 $AD9A DEFB $00,$50,$00,$51,$00,$52,$00,$53
 $ADA2 DEFB $00,$54,$00,$55,$00,$56,$00,$57
 $ADAA DEFB $20,$50,$20,$51,$20,$52,$20,$53
 $ADB2 DEFB $20,$54,$20,$55,$20,$56,$20,$57
 $ADBA DEFB $40,$50,$40,$51,$40,$52,$40,$53
 $ADC2 DEFB $40,$54,$40,$55,$40,$56,$40,$57
 $ADCA DEFB $60,$50,$60,$51,$60,$52,$60,$53
 $ADD2 DEFB $60,$54,$60,$55,$60,$56,$60,$57
 $ADDA DEFB $80,$50,$80,$51,$80,$52,$80,$53
 $ADE2 DEFB $80,$54,$80,$55,$80,$56,$80,$57
 $ADEA DEFB $A0,$50,$A0,$51,$A0,$52,$A0,$53
 $ADF2 DEFB $A0,$54,$A0,$55,$A0,$56,$A0,$57
 $ADFA DEFB $C0,$50,$C0,$51,$C0,$52,$C0,$53
 $AE02 DEFB $C0,$54,$C0,$55,$C0,$56,$C0,$57
 $AE0A DEFB $E0,$50,$E0,$51,$E0,$52,$E0,$53
 $AE12 DEFB $E0,$54,$E0,$55,$E0,$56,$E0,$57

; List of ports for read the keys
;
; Port list: $FEFE - $FDFE - $FBFE - $DFFE - $BFFE - $7FFE - $EFFE - $F7FE
b$AE1A DEFB $FE,$FE,$FE,$FD,$FE,$FB,$FE,$DF
 $AE22 DEFB $FE,$BF,$FE,$7F,$FE,$EF,$FE,$F7

; Charset for the corresponding key pressed
;
; The list is ordered based on the port and bit reading to detect the key
; pressed, in the following order:
; .
; Port $FEFE - Port $FDFE - Port $FBFE - Port $DFFE - Port $BFFE - Port $7FFE -
; Port $EFFE - Port $F7FE
t$AE2A DEFM "-ZXCVASDFGQWERTPOIUY+LKJH .MNB0987612345"

; Invert byte lookup table
b$AE52 DEFB $00,$80,$40,$C0,$20,$A0,$60,$E0
 $AE5A DEFB $10,$90,$50,$D0,$30,$B0,$70,$F0
 $AE62 DEFB $08,$88,$48,$C8,$28,$A8,$68,$E8
 $AE6A DEFB $18,$98,$58,$D8,$38,$B8,$78,$F8
 $AE72 DEFB $04,$84,$44,$C4,$24,$A4,$64,$E4
 $AE7A DEFB $14,$94,$54,$D4,$34,$B4,$74,$F4
 $AE82 DEFB $0C,$8C,$4C,$CC,$2C,$AC,$6C,$EC
 $AE8A DEFB $1C,$9C,$5C,$DC,$3C,$BC,$7C,$FC
 $AE92 DEFB $02,$82,$42,$C2,$22,$A2,$62,$E2
 $AE9A DEFB $12,$92,$52,$D2,$32,$B2,$72,$F2
 $AEA2 DEFB $0A,$8A,$4A,$CA,$2A,$AA,$6A,$EA
 $AEAA DEFB $1A,$9A,$5A,$DA,$3A,$BA,$7A,$FA
 $AEB2 DEFB $06,$86,$46,$C6,$26,$A6,$66,$E6
 $AEBA DEFB $16,$96,$56,$D6,$36,$B6,$76,$F6
 $AEC2 DEFB $0E,$8E,$4E,$CE,$2E,$AE,$6E,$EE
 $AECA DEFB $1E,$9E,$5E,$DE,$3E,$BE,$7E,$FE
 $AED2 DEFB $01,$81,$41,$C1,$21,$A1,$61,$E1
 $AEDA DEFB $11,$91,$51,$D1,$31,$B1,$71,$F1
 $AEE2 DEFB $09,$89,$49,$C9,$29,$A9,$69,$E9
 $AEEA DEFB $19,$99,$59,$D9,$39,$B9,$79,$F9
 $AEF2 DEFB $05,$85,$45,$C5,$25,$A5,$65,$E5
 $AEFA DEFB $15,$95,$55,$D5,$35,$B5,$75,$F5
 $AF02 DEFB $0D,$8D,$4D,$CD,$2D,$AD,$6D,$ED
 $AF0A DEFB $1D,$9D,$5D,$DD,$3D,$BD,$7D,$FD
 $AF12 DEFB $03,$83,$43,$C3,$23,$A3,$63,$E3
 $AF1A DEFB $13,$93,$53,$D3,$33,$B3,$73,$F3
 $AF22 DEFB $0B,$8B,$4B,$CB,$2B,$AB,$6B,$EB
 $AF2A DEFB $1B,$9B,$5B,$DB,$3B,$BB,$7B,$FB
 $AF32 DEFB $07,$87,$47,$C7,$27,$A7,$67,$E7
 $AF3A DEFB $17,$97,$57,$D7,$37,$B7,$77,$F7
 $AF42 DEFB $0F,$8F,$4F,$CF,$2F,$AF,$6F,$EF
 $AF4A DEFB $1F,$9F,$5F,$DF,$3F,$BF,$7F,$FF

; Offsets table for animated sprites
;
; This offset are added to the graphic data base address of the sprite based on
; x-position bits 2-0
b$AF52 DEFB $00,$00,$30,$30,$60,$60,$90,$90 ; Offsets for Rex, Foot Man and
                                            ; Caterpillar
 $AF5A DEFB $00,$00,$54,$54,$A8,$A8,$FC,$FC ; Offsets for shield
 $AF62 DEFB $00,$00,$24,$24,$48,$48,$6C,$6C ; Offsets not used
 $AF6A DEFB $00,$10,$20,$30,$40,$50,$60,$70 ; Offsets for Triangle
 $AF72 DEFB $00,$16,$2C,$42,$58,$6E,$84,$9A ; Offsets not used
 $AF7A DEFB $00,$00,$00,$00,$30,$30,$30,$30 ; Offsets for FOOT MAN dying

; Graphic data for arrows tiles
;
; Tilt #0 graphic data (used in even frames)
b$AF82 DEFB $3E,$3E,$3E,$7F,$3E,$1C,$08,$00 ; #UDG$AF82,$4E,2
 $AF8A DEFB $00,$08,$1C,$3E,$7F,$3E,$3E,$3E ; #UDG$AF8A,$4E,2
 $AF92 DEFB $08,$1F,$3F,$7F,$3F,$1F,$08,$00 ; #UDG$AF92,$4E,2
 $AF9A DEFB $10,$F8,$FC,$FE,$FC,$F8,$10,$00 ; #UDG$AF9A,$4E,2
; Tilt #1 graphic data (used in odd frames)
 $AFA2 DEFB $00,$3E,$3E,$3E,$7F,$3E,$1C,$08 ; #UDG$AFA2,$4E,2
 $AFAA DEFB $08,$1C,$3E,$7F,$3E,$3E,$3E,$00 ; #UDG$AFAA,$4E,2
 $AFB2 DEFB $10,$3E,$7E,$FE,$7E,$3E,$10,$00 ; #UDG$AFB2,$4E,2
 $AFBA DEFB $08,$7C,$7E,$7F,$7E,$7C,$08,$00 ; #UDG$AFBA,$4E,2

; Enemy configuration for every room (26 rooms)
;
; Every room spans 3 + 3*n + 1 ($FF) byte. The first 3 bytes defines the mobile
; enemies. The next block of 3 bytes repeats for every static enemy in the
; room.
; #TABLE(default)
; { =h Byte  | =h Content }
; { =r5 $00  | Data for the mobile enemy }
; {            Bit 7: the enemy enters the room from the top }
; {            Bit 6: the enemy enters the room from the right }
; {            Bit 5: the enemy enters the room from the left }
; {            Bits 4-0: max number of enemies on room }
; {     $01  | Enemy enter counter }
; { =r2 $02  | Bits 7: if set, FOOT MAN enters randomly }
; {            Bits 6-0: type of enemy who enters room }
; { =r3 $03  | Bit 7: reverse sprite if set }
; {            Bit 6-0: type of static enemy }
; {            If the value of this byte is $FF there is no more static enemies
; on this room }
; {     $04  | Bits 7-3: horizontal position of sprite in tiles(bytes) }
; {     $05  | Bits 3-0: vertical position of sprote in tiles(bytes) }
; TABLE#
b$AFC2 DEFB $4A,$05,$00,$05,$E8,$11,$FF
 $AFC9 DEFB $47,$04,$00,$02,$20,$04,$02,$68,$04,$02,$E0,$04,$04,$88,$0A,$FF
 $AFD9 DEFB $09,$06,$00,$09,$38,$08,$04,$A0,$05,$04,$A0,$07,$04,$A0,$09,$04,$A0,$0B,$FF
 $AFEC DEFB $09,$03,$00,$09,$20,$04,$02,$B0,$04,$04,$10,$05,$04,$10,$10,$FF
 $AFFC DEFB $0A,$05,$8E,$05,$40,$12,$09,$68,$04,$05,$70,$0D,$03,$28,$0A,$02,$20,$0D,$FF
 $B00F DEFB $09,$04,$0E,$09,$20,$04,$02,$B0,$04,$02,$B0,$04,$02,$B0,$04,$02,$B0,$04,$04,$78,$04,$04,$60,$04,$FF
 $B028 DEFB $0A,$03,$0E,$05,$58,$0A,$04,$28,$05,$03,$A0,$0B,$FF
 $B035 DEFB $09,$01,$0E,$04,$60,$0A,$04,$78,$05,$04,$A8,$0C,$04,$C0,$07,$03,$40,$0A,$03,$50,$07,$FF
 $B04B DEFB $0A,$04,$00,$01,$28,$0A,$01,$70,$0D,$09,$50,$04,$09,$08,$04,$06,$40,$07,$FF
 $B05E DEFB $0A,$03,$00,$09,$98,$04,$01,$68,$0D,$06,$68,$09,$01,$50,$06,$FF
 $B06E DEFB $0A,$05,$8E,$09,$68,$04,$09,$98,$04,$09,$C8,$04,$05,$C8,$0A,$05,$B0,$0A,$05,$98,$0A,$FF
 $B084 DEFB $0A,$01,$00,$03,$A0,$0B,$03,$70,$0A,$04,$28,$0A,$04,$40,$05,$FF
 $B094 DEFB $0A,$02,$00,$05,$28,$11,$09,$40,$08,$01,$60,$04,$01,$48,$0C,$05,$88,$04,$02,$88,$07,$FF
 $B0AA DEFB $0A,$02,$0E,$05,$50,$13,$05,$98,$13,$02,$40,$07,$02,$28,$0D,$01,$78,$03,$FF
 $B0BD DEFB $0B,$01,$00,$FF
 $B0C1 DEFB $0A,$03,$0E,$02,$38,$09,$03,$28,$04,$04,$88,$02,$04,$80,$05,$04,$88,$08,$04,$80,$0B,$04,$88,$0E,$04,$80,$11,$04,$88,$14,$FF
 $B0E0 DEFB $07,$02,$8E,$02,$40,$0A,$04,$B8,$0D,$04,$A0,$0A,$04,$40,$04,$FF
 $B0F0 DEFB $0C,$01,$0E,$02,$A0,$09,$02,$A0,$09,$02,$A0,$09,$04,$C0,$09,$04,$C0,$0B,$04,$C0,$0D,$04,$C0,$0F,$04,$28,$0A,$86,$98,$04,$FF
 $B10F DEFB $0C,$03,$0E,$09,$50,$03,$05,$30,$0F,$05,$40,$0F,$03,$A8,$0D,$06,$40,$07,$86,$80,$0F,$FF
 $B125 DEFB $0D,$01,$00,$02,$A0,$0C,$02,$58,$09,$04,$28,$0A,$06,$40,$0D,$FF
 $B135 DEFB $0A,$02,$8E,$04,$80,$0E,$86,$C8,$06,$86,$98,$07,$86,$B0,$0A,$01,$50,$07,$FF
 $B148 DEFB $08,$02,$00,$01,$B0,$06,$03,$58,$06,$05,$A0,$0D,$05,$58,$0D,$04,$D0,$05,$FF
 $B15B DEFB $0A,$04,$00,$02,$A0,$06,$02,$90,$10,$09,$58,$06,$86,$80,$0D,$86,$98,$0A,$81,$B8,$07,$01,$80,$07,$FF
 $B174 DEFB $0E,$03,$00,$03,$B8,$04,$03,$B8,$07,$03,$B8,$0A,$01,$A0,$0D,$05,$58,$0A,$04,$A0,$09,$FF
 $B18A DEFB $0A,$03,$0E,$05,$A0,$09,$05,$B0,$09,$05,$C0,$09,$05,$D0,$09,$01,$50,$12,$01,$78,$12,$09,$40,$0D,$FF
 $B1A3 DEFB $0F,$FF,$00,$FF

; Room directions and enemy pointers
;
; Every room spans 6 bytes. The first four bytes indicates the connections of
; the room (top, left, bottom and right). A value of $00 indicates no room
; connection
; #TABLE(default)
; { =h Byte  | =h Content }
; {  $00  | Top room }
; {  $01  | Right room }
; {  $02  | Bottom room }
; {  $03  | Left room }
; {  $04 - $05 | Address pointer for enemy configuration on this room }
; TABLE#
b$B1A7 DEFB $00,$01,$00,$00
 $B1AB DEFW $AFC2
 $B1AD DEFB $00,$02,$00,$00
 $B1B1 DEFW $AFC9
 $B1B3 DEFB $03,$00,$00,$00
 $B1B7 DEFW $AFD9
 $B1B9 DEFB $00,$00,$00,$04
 $B1BD DEFW $AFEC
 $B1BF DEFB $00,$00,$00,$05
 $B1C3 DEFW $AFFC
 $B1C5 DEFB $06,$00,$00,$00
 $B1C9 DEFW $B00F
 $B1CB DEFB $00,$07,$00,$00
 $B1CF DEFW $B028
 $B1D1 DEFB $08,$00,$00,$00
 $B1D5 DEFW $B035
 $B1D7 DEFB $00,$00,$00,$09
 $B1DB DEFW $B04B
 $B1DD DEFB $0A,$00,$00,$00
 $B1E1 DEFW $B05E
 $B1E3 DEFB $00,$0B,$00,$00
 $B1E7 DEFW $B06E
 $B1E9 DEFB $0C,$00,$00,$00
 $B1ED DEFW $B084
 $B1EF DEFB $0D,$00,$00,$00
 $B1F3 DEFW $B094
 $B1F5 DEFB $0E,$00,$00,$00
 $B1F9 DEFW $B0AA
 $B1FB DEFB $0F,$00,$00,$00
 $B1FF DEFW $B0BD
 $B201 DEFB $10,$00,$00,$00
 $B205 DEFW $B0C1
 $B207 DEFB $11,$00,$00,$00
 $B20B DEFW $B0E0
 $B20D DEFB $12,$00,$00,$00
 $B211 DEFW $B0F0
 $B213 DEFB $13,$00,$00,$00
 $B217 DEFW $B10F
 $B219 DEFB $14,$00,$00,$00
 $B21D DEFW $B125
 $B21F DEFB $15,$00,$00,$00
 $B223 DEFW $B135
 $B225 DEFB $16,$00,$00,$00
 $B229 DEFW $B148
 $B22B DEFB $17,$00,$00,$00
 $B22F DEFW $B15B
 $B231 DEFB $18,$00,$00,$00
 $B235 DEFW $B174
 $B237 DEFB $19,$00,$00,$00
 $B23B DEFW $B18A
 $B23D DEFB $00,$00,$00,$00
 $B241 DEFW $B1A3

; Reset room graphic buffer
;
; Used by the routines at #R$9470 and #R$A939.
c$B243 LD ($A22C),SP ;
 $B247 LD SP,$FFFF   ;
 $B24A LD B,$2A      ;
 $B24C LD HL,$0000   ;
*$B24F PUSH HL       ;
 $B250 PUSH HL       ;
 $B251 PUSH HL       ;
 $B252 PUSH HL       ;
 $B253 PUSH HL       ;
 $B254 PUSH HL       ;
 $B255 PUSH HL       ;
 $B256 PUSH HL       ;
 $B257 PUSH HL       ;
 $B258 PUSH HL       ;
 $B259 PUSH HL       ;
 $B25A PUSH HL       ;
 $B25B PUSH HL       ;
 $B25C PUSH HL       ;
 $B25D PUSH HL       ;
 $B25E PUSH HL       ;
 $B25F PUSH HL       ;
 $B260 PUSH HL       ;
 $B261 PUSH HL       ;
 $B262 PUSH HL       ;
 $B263 PUSH HL       ;
 $B264 PUSH HL       ;
 $B265 PUSH HL       ;
 $B266 PUSH HL       ;
 $B267 PUSH HL       ;
 $B268 PUSH HL       ;
 $B269 PUSH HL       ;
 $B26A PUSH HL       ;
 $B26B PUSH HL       ;
 $B26C PUSH HL       ;
 $B26D PUSH HL       ;
 $B26E PUSH HL       ;
 $B26F PUSH HL       ;
 $B270 PUSH HL       ;
 $B271 PUSH HL       ;
 $B272 PUSH HL       ;
 $B273 PUSH HL       ;
 $B274 PUSH HL       ;
 $B275 PUSH HL       ;
 $B276 PUSH HL       ;
 $B277 PUSH HL       ;
 $B278 PUSH HL       ;
 $B279 PUSH HL       ;
 $B27A PUSH HL       ;
 $B27B PUSH HL       ;
 $B27C PUSH HL       ;
 $B27D PUSH HL       ;
 $B27E PUSH HL       ;
 $B27F PUSH HL       ;
 $B280 PUSH HL       ;
 $B281 PUSH HL       ;
 $B282 PUSH HL       ;
 $B283 PUSH HL       ;
 $B284 PUSH HL       ;
 $B285 PUSH HL       ;
 $B286 PUSH HL       ;
 $B287 PUSH HL       ;
 $B288 PUSH HL       ;
 $B289 PUSH HL       ;
 $B28A PUSH HL       ;
 $B28B PUSH HL       ;
 $B28C PUSH HL       ;
 $B28D PUSH HL       ;
 $B28E PUSH HL       ;
 $B28F DJNZ $B24F    ;
 $B291 LD SP,($A22C) ;
 $B295 RET           ;

; Draw an entity (enemy, object or player)
;
; Used by the routines at #R$9683, #R$9BA7 and #R$BC48.
c$B296 PUSH DE       ; Save #REGde
 $B297 OR A          ; is entity facing left?
 $B298 JP NZ,$B303   ; Jump if so
; Entity facing right. Computes address of graphic data for entity and address
; destination on room buffer
 $B29B LD A,($A248)  ; Set #REGa to the x-position of entity
 $B29E AND $07       ; Set #REGa to the bit position of the entity (bits2-0)
 $B2A0 LD E,A        ; {Set #REGhl to the address pointer of offset for sprite
 $B2A1 LD D,$00      ; movement
 $B2A3 ADD HL,DE     ; }
 $B2A4 LD E,(HL)     ; {Set #REGde to the corresponding offset based on the
 $B2A5 LD D,$00      ; position of the sprite}
 $B2A7 POP HL        ; Recover #REGhl (graphics data of the sprite)
 $B2A8 ADD HL,DE     ; Set #REGhl to the address of the corresponding sprite
                     ; based on the offset
 $B2A9 LD A,($A248)  ; {Computes at #REGhl the address into room graphic data
 $B2AC SRL A         ; buffer for the entity
 $B2AE SRL A         ;
 $B2B0 SRL A         ;
 $B2B2 LD ($A248),A  ;
 $B2B5 PUSH HL       ;
 $B2B6 LD A,($A249)  ;
 $B2B9 LD L,A        ;
 $B2BA LD H,$00      ;
 $B2BC ADD HL,HL     ;
 $B2BD ADD HL,HL     ;
 $B2BE ADD HL,HL     ;
 $B2BF ADD HL,HL     ;
 $B2C0 ADD HL,HL     ;
 $B2C1 LD DE,$E8FF   ;
 $B2C4 ADD HL,DE     ;
 $B2C5 LD A,($A248)  ;
 $B2C8 LD E,A        ;
 $B2C9 LD D,$00      ;
 $B2CB ADD HL,DE     ; }
 $B2CC EX DE,HL      ; Exchange #REGde and #REGhl
 $B2CD POP HL        ; Recover #REGhl (the address of the corresponding sprite
                     ; based on the offset)
 $B2CE PUSH DE       ; Save #REGde
 $B2CF LD A,($A24A)  ; Set #REGa to the width of the sprite (in bytes)
 $B2D2 LD ($B2F2),A  ; Configure LD opcode at B2F1 to set #REGb register to the
                     ; width of the sprite
 $B2D5 LD A,($A24B)  ; Set #REGa to the height of the sprite (in pixels)
 $B2D8 LD ($B2EE),A  ; Configure LD opcode at B2ED to set #REGb register to the
                     ; height of the sprite
 $B2DB EX DE,HL      ; Exchange #REGde and #REGhl
 $B2DC LD A,($A1CC)  ; {Check bit for Graphic Data Select
 $B2DF BIT 7,A       ; }
 $B2E1 JP Z,$B2E8    ; Jump if graphic data is based in animation offsets
 $B2E4 LD DE,($A1CD) ; Set #REGde to the graphic data for static (non animated)
                     ; sprite
; Entity facing right. Draw entity (enemy, object or Rex)
*$B2E8 LD ($A25E),DE ; Set the address for the graphic data of the entity
 $B2EC POP HL        ; Restore #REGhl
 $B2ED LD B,$00      ; Set #REGb to the width of the sprite
*$B2EF PUSH BC       ; {Save #REGbc and #REGhl
 $B2F0 PUSH HL       ; }
 $B2F1 LD B,$00      ; Set #REGb to the height of the sprite
*$B2F3 LD A,(DE)     ; Set #REGa to the graphic data to copy
 $B2F4 OR (HL)       ; Blend the graphic data with the graphic data on the room
 $B2F5 LD (HL),A     ; Copy graphics data to the room buffer
 $B2F6 INC DE        ; {Increment sprite graphic data and room graphic data
 $B2F7 INC HL        ; destination}
 $B2F8 DJNZ $B2F3    ; Jump back if the are more sprite rows o draw
 $B2FA POP HL        ; Restore #REGhl
 $B2FB LD BC,$0020   ; {Increment one row for the room graphic data
 $B2FE ADD HL,BC     ; }
 $B2FF POP BC        ; Restore #REGbc
 $B300 DJNZ $B2EF    ; Jump back until all rows drawn
 $B302 RET           ;
; Entity facing left. Computes address of graphic data for entity and address
; destination on room buffer
*$B303 LD A,($A248)  ; Set #REGa to the x-position
 $B306 LD DE,$0007   ; {Set #REGhl to point to the last byte of the offset
 $B309 ADD HL,DE     ; animation}
 $B30A AND $07       ; {And substract the position bit2-0 for the sprite
 $B30C LD E,A        ; x-position to point to the correspondent offset
 $B30D LD D,$00      ;
 $B30F AND A         ;
 $B310 SBC HL,DE     ; }
 $B312 LD E,(HL)     ; {Set #REGde to the offset animation value
 $B313 LD D,$00      ; }
 $B315 POP HL        ; Recover #REGhl (address pointer for graphic data of
                     ; sprite)
 $B316 ADD HL,DE     ; And adds the offset
 $B317 LD A,($A248)  ; {Computes at #REGhl the address into room graphic data
 $B31A SRL A         ; buffer for the entity
 $B31C SRL A         ;
 $B31E SRL A         ;
 $B320 LD ($A248),A  ;
 $B323 PUSH HL       ;
 $B324 LD A,($A249)  ;
 $B327 LD L,A        ;
 $B328 LD H,$00      ;
 $B32A ADD HL,HL     ;
 $B32B ADD HL,HL     ;
 $B32C ADD HL,HL     ;
 $B32D ADD HL,HL     ;
 $B32E ADD HL,HL     ;
 $B32F LD DE,$E8FF   ;
 $B332 ADD HL,DE     ;
 $B333 LD A,($A248)  ;
 $B336 LD E,A        ;
 $B337 LD D,$00      ;
 $B339 ADD HL,DE     ; }
 $B33A EX DE,HL      ; Exchange #REGde an #REGhl
 $B33B POP HL        ; Restore #REGhl
 $B33C PUSH DE       ; Save #REGde
 $B33D LD A,($A24A)  ; Set #REGa to the width of the sprite (in bytes)
 $B340 LD ($B362),A  ; Configure LD opcode at B361 to set #REGb register to the
                     ; width of the sprite
 $B343 LD A,($A24B)  ; Set #REGa to the height of the sprite (in pixels)
 $B346 LD ($B35E),A  ; Configure LD opcode at B35D to set #REGb register to the
                     ; height of the sprite
 $B349 EX DE,HL      ; Exchange #REGde and #REGhl
 $B34A LD A,($A1CC)  ; {Check bit for Graphic Data Select
 $B34D BIT 7,A       ; }
 $B34F JP Z,$B356    ; Jump if graphic data is based in animation offsets
 $B352 LD DE,($A1CD) ; Set #REGde to the graphic data for static (non animated)
                     ; sprite
; Entity facing left. Draw entity (enemy, object or Rex)
*$B356 LD ($A25E),DE ; Set the address for the graphic data of the entity
 $B35A POP HL        ; Restore #REGhl (address pointer to room graphic buffer)
 $B35B INC HL        ; {Increment address pointer to draw backwards from here
 $B35C INC HL        ; }
 $B35D LD B,$00      ; Set #REGb to the width of the sprite
*$B35F PUSH BC       ; {Save #REGbc and REGhl
 $B360 PUSH HL       ; }
 $B361 LD B,$00      ; Set #REGb to the height of the sprite
*$B363 LD A,(DE)     ; Set #REGa to the byte of the graphic data
 $B364 PUSH DE       ; {Save #REGde and #REGhl
 $B365 PUSH HL       ; }
 $B366 LD E,A        ; {Point graphic value into Invert byte lookup table
 $B367 LD D,$00      ;
 $B369 LD HL,$AE52   ;
 $B36C ADD HL,DE     ; }
 $B36D LD A,(HL)     ; Set #REGa to the corresponent inverted byte
 $B36E POP HL        ; {Restore #REGhl and #REGde
 $B36F POP DE        ; }
 $B370 OR (HL)       ; Blend byte with graphic data of room
 $B371 LD (HL),A     ; Set graphic data into room
 $B372 INC DE        ; Increment address to graphic data
 $B373 DEC HL        ; Decrement address to room graphic buffer
 $B374 DJNZ $B363    ; Jump back until the row is completed
 $B376 POP HL        ; Restore #REGhl
 $B377 LD BC,$0020   ; {Add one row to the address pointer for the room graphic
 $B37A ADD HL,BC     ; data}
 $B37B POP BC        ; Restore #REGbc
 $B37C DJNZ $B35F    ; Jump back until all the rows has been draw
 $B37E RET           ;

; Copy tile graphic into room graphic data
;
; Used by the routine at #R$B384.
c$B37F LD SP,($A22E) ; Recover #REGsp
 $B383 RET           ;
; Copy tile graphic into room graphic data. Used by the routines at #R$9470 and
; #R$A939.
*$B384 LD ($A22E),SP ; Save #REGsp to temporal variable #R$A095
 $B388 LD SP,$D962   ; Set #REGsp to point to base address for mapping table of
                     ; tile graphics and room graphic buffer
*$B38B POP HL        ; Point #REGhl to the address in the room graphic buffer
                     ; for the tile
 $B38C POP DE        ; Point #REGde to the tile graphics address
 $B38D LD A,L        ; {Jump back and return from routine if LSB of HL is $FF
 $B38E INC A         ; (end marker)
 $B38F JP Z,$B37F    ; }
 $B392 LD BC,$0020   ; Set #REGbc to the increment in room graphics buffer of
                     ; every byte copied Copy the eight bytes of the tile
                     ; graphics data to the corresponent room graphic buffer
                     ; location
 $B395 LD A,(DE)     ; {Copy byte 1, increment tile graphics address and room
 $B396 LD (HL),A     ; graphics address
 $B397 INC DE        ;
 $B398 ADD HL,BC     ; }
 $B399 LD A,(DE)     ; {Copy byte 2, increment tile graphics address and room
 $B39A LD (HL),A     ; graphics address
 $B39B INC DE        ;
 $B39C ADD HL,BC     ; }
 $B39D LD A,(DE)     ; {Copy byte 3, increment tile graphics address and room
 $B39E LD (HL),A     ; graphics address
 $B39F INC DE        ;
 $B3A0 ADD HL,BC     ; }
 $B3A1 LD A,(DE)     ; {Copy byte 4, increment tile graphics address and room
 $B3A2 LD (HL),A     ; graphics address
 $B3A3 INC DE        ;
 $B3A4 ADD HL,BC     ; }
 $B3A5 LD A,(DE)     ; {Copy byte 5, increment tile graphics address and room
 $B3A6 LD (HL),A     ; graphics address
 $B3A7 INC DE        ;
 $B3A8 ADD HL,BC     ; }
 $B3A9 LD A,(DE)     ; {Copy byte 6, increment tile graphics address and room
 $B3AA LD (HL),A     ; graphics address
 $B3AB INC DE        ;
 $B3AC ADD HL,BC     ; }
 $B3AD LD A,(DE)     ; {Copy byte 7, increment tile graphics address and room
 $B3AE LD (HL),A     ; graphics address
 $B3AF INC DE        ;
 $B3B0 ADD HL,BC     ; }
 $B3B1 LD A,(DE)     ; {Copy byte 8, increment tile graphics address and room
 $B3B2 LD (HL),A     ; graphics address
 $B3B3 INC DE        ;
 $B3B4 ADD HL,BC     ; }
 $B3B5 JP $B38B      ; Jump back and copy the next tile

; Rex fires weapon
;
; Used by the routine at #R$9470.
c$B3B8 LD A,($A1AB)    ; {Return if FIRE key is hold down
 $B3BB OR A            ;
 $B3BC RET NZ          ; }
 $B3BD LD A,($A1F6)    ; {Return if Rex not visible
 $B3C0 OR A            ;
 $B3C1 RET Z           ; }
 $B3C2 LD A,$01        ; {Set FIRE key hold down active
 $B3C4 LD ($A1AB),A    ; }
 $B3C7 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B3CA LD A,($A1AC)    ; Check Rex weapon type
 $B3CD OR A            ; is basic laser?
 $B3CE JP Z,$B3D3      ; Jump forward if so (no energy loss on fire)
 $B3D1 LD A,$01        ; Set energy loss quantity to 1
*$B3D3 CALL $BA6A      ; Handle weapon energy loss
 $B3D6 LD A,($A1D9)    ; {Jump forward if not rapid shot active
 $B3D9 OR A            ;
 $B3DA JP Z,$B3EC      ; }
; rapid shot active
 $B3DD LD A,($A1DA)    ; {Decrement rapid shots quantity
 $B3E0 DEC A           ;
 $B3E1 LD ($A1DA),A    ; }
 $B3E4 OR A            ; {Jump forward if rapid shot not depleted
 $B3E5 JP NZ,$B3EC     ; }
 $B3E8 XOR A           ; {Rapid shots depleted, inactive rapid shots
 $B3E9 LD ($A1D9),A    ; }
; check type of weapon
*$B3EC LD A,($A1AC)    ; Set #REGa the type of weapon
 $B3EF CP $04          ; is spray?
 $B3F1 JP Z,$B49C      ; Jump to handle spray weapon fire
 $B3F4 CP $02          ; is laser?
 $B3F6 JP Z,$B463      ; Jump to handle laser fire
; create projectile for basic laser, double fire and multiple
 $B3F9 CALL $B5EB      ; Create a new projectile for basic laser
 $B3FC LD (IY+$05),$00 ; Set projectile y-delta to 0
 $B400 LD A,($A1AC)    ; Check weapon type
 $B403 CP $01          ; is double fire?
 $B405 JP Z,$B452      ; Jump to handle double fire weapon
 $B408 CP $03          ; {Return if weapon type is not multiple
 $B40A RET NZ          ; }
 $B40B LD A,($A1F9)    ; {Return if Rex is teleporting
 $B40E OR A            ;
 $B40F RET NZ          ; }
; handle fire for multiple
 $B410 LD A,($A1AD)    ; {Set #REGb the number of drones based on weapon energy
 $B413 ADD A,$03       ; level
 $B415 LD B,A          ; }
 $B416 LD HL,$5E4E     ; Set #REGhl the address for the drone configuration
                       ; data table
*$B419 PUSH BC         ; Save #REGbc
 $B41A CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B41D LD A,(HL)       ; {Set #R$A22C the x-position of the drone
 $B41E LD ($A22C),A    ; }
 $B421 LD A,($A254)    ;
 $B424 LD A,$01        ; {Set #R$A230 direction of projectile left
 $B426 LD ($A230),A    ; }
 $B429 LD A,($A24F)    ; {If x-position of drone is greater than x-position of
 $B42C CP (HL)         ; Rex then set projectile to move right
 $B42D JP NC,$B434     ;
 $B430 XOR A           ;
 $B431 LD ($A230),A    ; }
*$B434 LD A,(HL)       ; {if x-position of drone is greater than 240 or less
 $B435 INC HL          ; than 16 then jump to process the next drone
 $B436 CP $F0          ;
 $B438 JP NC,$B44A     ; }
 $B43B LD A,(HL)       ; {Set #R$A22E the y-position of drone
 $B43C LD ($A22E),A    ; }
 $B43F LD A,$03        ; {Set the y-position increment at #R$A232
 $B441 LD ($A232),A    ; }
 $B444 XOR A           ; Set #REGa the projectile type to 0
 $B445 PUSH HL         ; Save #REGhl
 $B446 CALL $B607      ; Create a new projectile
 $B449 POP HL          ; Restore #REGhl
*$B44A LD DE,$0002     ; {Point #REGhl to the next drone
 $B44D ADD HL,DE       ; }
 $B44E POP BC          ; Restore #REGbc
 $B44F DJNZ $B419      ; Jump back and process next drone
 $B451 RET             ;
; Handle double fire weapon
*$B452 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B455 LD A,$13        ; {Set into #R$A232 the increment (19) in y-position for
 $B457 LD ($A232),A    ; the new projectile}
 $B45A LD A,($A1AC)    ; {Reset weapon projectile subtype
 $B45D RES 7,A         ; }
 $B45F CALL $B607      ; Create a new projectile
 $B462 RET             ;
; Configure laser projectile
*$B463 CALL $B5EB      ; Create a new projectile
 $B466 LD (IY+$05),$00 ; Set y-delta to 0
 $B46A LD (IY+$0C),$08 ; Set laser counter to create laser #6
 $B46E LD A,(IY+$00)   ; {Set x-position for laser #6
 $B471 LD (IY+$0D),A   ; }
 $B474 LD A,($A201)    ; {Set the laser duration counter
 $B477 DEC A           ;
 $B478 LD (IY+$0E),A   ; }
 $B47B RET             ;

; Configuration data for REX spray weapon
;
; 4 bytes for every bullet (8 bullets) Bytes $00-$01: offset of the address
; pointer into room buffer data Byte $03: x-delta of projectile Bute $04:
; y-delta of projectile
b$B47C DEFB $01,$00,$08,$00,$FF,$FF,$F8,$00
 $B484 DEFB $00,$00,$00,$08,$00,$00,$00,$F8
 $B48C DEFB $01,$00,$08,$08,$01,$00,$08,$F8
 $B494 DEFB $FF,$FF,$F8,$08,$FF,$FF,$F8,$F8

; Handle spray weapon fire
;
; Used by the routine at #R$B3B8.
c$B49C LD A,($A1AD)    ; Set #REGa the energy level of the weapon
 $B49F CP $04          ; {Jump forward if energy level less than 4
 $B4A1 JP C,$B4C3      ; }
 $B4A4 LD B,$04        ; Set #REGb the number of spray bullets
 $B4A6 LD HL,$B47C     ; Set #REGhl to the address point for data configuration
                       ; of spray projectiles
 $B4A9 LD A,($A1AD)    ; {Jump forward if energy level is 4
 $B4AC CP $04          ;
 $B4AE JP Z,$B4B3      ; }
 $B4B1 LD B,$08        ; If energy level is 5 then the number of bullets to
                       ; fire is 8
*$B4B3 PUSH BC         ; {Save #REGbc and #REGhl
 $B4B4 PUSH HL         ; }
 $B4B5 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B4B8 CALL $B5EB      ; Create a new projectile for spray
 $B4BB POP HL          ; Restore #REGhl
 $B4BC CALL $B519      ; Configure spray weapon projectile based on #REGhl data
                       ; pointer
 $B4BF POP BC          ; Restore #REGbc
 $B4C0 DJNZ $B4B3      ; Jump until all the spray projectiles configured
 $B4C2 RET             ;
; create spray projectiles based on energy level
*$B4C3 CALL $B5EB      ; Create a new projectile for spray
 $B4C6 LD (IY+$05),$00 ; Set y-delta to 0
 $B4CA CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B4CD CALL $B5EB      ; Create a new projectile for spray
 $B4D0 LD A,$01        ; Set #REGa y-delta for projectile
 $B4D2 CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4D5 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B4D8 CALL $B5EB      ; Create a new projectile for spray
 $B4DB LD A,$FF        ; Set #REGa y-delta for projectile
 $B4DD CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4E0 LD A,($A1AD)    ; {Return if weapon energy level is 1
 $B4E3 CP $01          ;
 $B4E5 RET Z           ; }
 $B4E6 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B4E9 CALL $B5EB      ; Create a new projectile for spray
 $B4EC LD A,$02        ; Set #REGa y-delta for projectile
 $B4EE CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4F1 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B4F4 CALL $B5EB      ; Create a new projectile for spray
 $B4F7 LD A,$FE        ; Set #REGa y-delta for projectile
 $B4F9 CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B4FC LD A,($A1AD)    ; {Return if weapon energy level is 2
 $B4FF CP $02          ;
 $B501 RET Z           ; }
 $B502 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B505 CALL $B5EB      ; Create a new projectile for spray
 $B508 LD A,$03        ; Set #REGa y-delta for projectile
 $B50A CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B50D CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B510 CALL $B5EB      ; Create a new projectile for spray
 $B513 LD A,$FD        ; Set #REGa y-delta for projectile
 $B515 CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $B518 RET             ;

; Configure Rex spray weapon projectile
;
; Used by the routine at #R$B49C.
;
; HL Address pointer to the configuration data for projectiles
c$B519 LD E,(HL)     ; {Set into projectile configuration the offset for the
 $B51A INC HL        ; address pointer of the room graphic data
 $B51B LD D,(HL)     ;
 $B51C LD (IY+$07),E ;
 $B51F LD (IY+$08),D ; }
 $B522 INC HL        ; {Set into projectile configuration the x-delta
 $B523 LD A,(HL)     ;
 $B524 LD (IY+$04),A ; }
 $B527 INC HL        ; {Set into #REGa the y-delta
 $B528 LD A,(HL)     ; }
 $B529 INC HL        ; Increment #REGhl
 $B52A PUSH HL       ; Save #REGhl
 $B52B CALL $B530    ; Computes offset into room graphic data based on
                     ; projectile y-delta
 $B52E POP HL        ; Restore #REGhl
 $B52F RET           ;

; Computes offset into the room graphic data based on projectile y-delta
;
; Used by the routines at #R$B49C, #R$B519 and #R$C15B.
;
; A Projectile y-delta
c$B530 LD (IY+$05),A ; Set y-delta
 $B533 LD E,A        ; {Set offset into #REGhl based on y-delta
 $B534 LD L,E        ;
 $B535 RL E          ;
 $B537 SBC A,A       ;
 $B538 LD H,A        ;
 $B539 ADD HL,HL     ;
 $B53A ADD HL,HL     ;
 $B53B ADD HL,HL     ;
 $B53C ADD HL,HL     ;
 $B53D ADD HL,HL     ; }
 $B53E LD E,(IY+$07) ; {Set #REGde to the base offset $FFFF left $0001 right
 $B541 LD D,(IY+$08) ; }
 $B544 ADD HL,DE     ; Adds base offset to #REGhl
 $B545 LD (IY+$07),L ; {Set computed offset into enemy configuration
 $B548 LD (IY+$08),H ; }
 $B54B RET           ;

; Configure weapon sound and check for weapon free slot
;
; Used by the routines at #R$B3B8, #R$B49C and #R$B937.
;
; O:IY Address pointer into projectile configuration for new projectile
c$B54C XOR A         ; {Set #R$A214 to playing sound for Rex weapon
 $B54D LD ($A214),A  ; }
 $B550 LD IY,$5B60   ; Set #REGiy to the address for the rex projectile
                     ; configuration
 $B554 LD E,$1E      ; Set #REGe to the max number of projectiles
 $B556 LD A,($A1AC)  ; Set #REGa to the in use Rex weapon
 $B559 OR A          ; is basic laser?
 $B55A JP Z,$B565    ; Jump forward if so
 $B55D CP $01        ; is double fire?
 $B55F JP Z,$B565    ; Jump forward if so
 $B562 JP $B56E      ; Jump to play sound
*$B565 LD A,($A1AD)  ; {Set #REGe to max number of Rex projectile based on
 $B568 SLA A         ; weapon energy level max num. projectiles = weapon energy
 $B56A SLA A         ; level * 4
 $B56C INC A         ;
 $B56D LD E,A        ; }
; Check if there is a free slot for projectile and configure sound
*$B56E DEC E         ; {Set #REGb to the number of projectiles to check for
 $B56F LD B,E        ; sound play}
*$B570 LD A,(IY+$06) ; Set #REGa to the projectile state
 $B573 OR A          ; is projectile slot free?
 $B574 JP Z,$B583    ; Jump to play sound
 $B577 LD DE,$000F   ; {Point #REGiy to the next projectile
 $B57A ADD IY,DE     ; }
 $B57C DJNZ $B570    ; Jump until all projectiles handled
 $B57E LD IY,$03E8   ; No slot available, point #REGiy to rom address
 $B582 RET           ;
; Configure sound
*$B583 PUSH HL       ; Save #REGhl
 $B584 LD A,($A214)  ; {playing sound for enemy weapon?
 $B587 OR A          ; }
 $B588 JP NZ,$B5A8   ; Jump if so
 $B58B LD DE,$D4FB   ; Set #REGde to the address sound data for basic laser,
                     ; double fire and multiple
 $B58E LD A,($A1AC)  ; {weapon in use is laser?
 $B591 CP $02        ; }
 $B593 CALL Z,$B5A0  ; Configure address for his sound data
 $B596 CP $04        ; weapon in use is spray?
 $B598 CALL Z,$B5A4  ; Configure address for his sound data
 $B59B CALL $D37F    ; Configure sound channel and mixer register
 $B59E POP HL        ; Restore #REGhl
 $B59F RET           ;
; Configure address for laser sound data
*$B5A0 LD DE,$D50D   ;
 $B5A3 RET           ;
; Configure address for spray sound data
*$B5A4 LD DE,$D516   ;
 $B5A7 RET           ;
; Configure address for enemy sound data
*$B5A8 POP HL        ; Restore #REGhl
 $B5A9 LD A,($D5DA)  ; {sound channel 3 in use?
 $B5AC CP $FF        ; }
 $B5AE RET NZ        ; Return if so
 $B5AF LD DE,$D504   ; Configure address for enemy sound data
 $B5B2 CALL $D37F    ; Configure sound channel and mixer register
 $B5B5 RET           ;
; Check for slot to create a new projectile and configure weapon sound if so.
; Used by the routines at #R$BC48, #R$BF4F and #R$BFA8.
*$B5B6 LD A,$01      ; {Set #R$A214 to playing enemy sound data
 $B5B8 LD ($A214),A  ; }
 $B5BB LD IY,$5D22   ; Set #REGiy to the address for the enemy projectile
                     ; configuration
 $B5BF LD E,$14      ; Set #REGe to the max number of projectiles
 $B5C1 JP $B56E      ; Jump back and check if sound need to be played

; Routine not used
;
; Used by the routine at #R$C30A.
s$B5C4 LD A,(IX+$00)
 $B5C7 SUB $10
 $B5C9 JP $B5CF
 $B5CC LD A,(IX+$00)
*$B5CF LD ($A22C),A
 $B5D2 LD A,$0F

; Create a new projectile
;
; Used by the routines at #R$BC48, #R$BF4F, #R$C141, #R$C15B, #R$C181, #R$C19B
; and #R$C1B3.
;
; I:IY Address pointer in the projectile configuration buffer
; I:IX Address pointer in the enemy configuration buffer
c$B5D4 LD ($A232),A    ; Set #R$A232 to the increment for the y-position
 $B5D7 LD A,(IX+$01)   ; {Set #R$A22E to enemy y-position
 $B5DA LD ($A22E),A    ; }
 $B5DD LD A,(IX+$02)   ; {Set #R$A230 to enemy face direction
 $B5E0 LD ($A230),A    ; }
 $B5E3 LD A,($A1ED)    ; {Set the projectile type to #REGa
 $B5E6 SET 7,A         ; }
 $B5E8 JP $B607        ; Jump to create this projectile
; Create a new projectile fired for Rex. Used by the routines at #R$B3B8 and
; #R$B49C.
*$B5EB LD A,($A24F)    ; {Set #R$A22C to Rex x-position
 $B5EE LD ($A22C),A    ; }
 $B5F1 LD A,($A250)    ; {Set #R$A22E to Rex y-position
 $B5F4 LD ($A22E),A    ; }
 $B5F7 LD A,($A254)    ; {Set #R$A230 to Rex face direction
 $B5FA LD ($A230),A    ; }
 $B5FD LD A,$11        ; {Set #R$A232 to the increment for the y-position
 $B5FF LD ($A232),A    ; }
 $B602 LD A,($A1AC)    ; {Set #REGa to Rex weapon number
 $B605 RES 7,A         ; }
; Create a new projectile in the projectile configuration buffer based on
; predefined values. This entry point is used by the routines at #R$B3B8,
; #R$B5D4 and #R$B937.
*$B607 LD (IY+$06),$01 ; Set projectile status to flying
 $B60B LD (IY+$0B),A   ; Set the projectile type
 $B60E LD A,($A22E)    ; Set #REGa to the y-position
 $B611 LD HL,$A232     ; {Increment y-position
 $B614 ADD A,(HL)      ; }
 $B615 LD (IY+$01),A   ; Save y-position of laser to projectile configuration
                       ; buffer
 $B618 LD L,A          ; {Computes offset on room buffer for y-position. NOT
 $B619 LD H,$00        ; NEEDED HERE!
 $B61B ADD HL,HL       ;
 $B61C ADD HL,HL       ;
 $B61D ADD HL,HL       ;
 $B61E ADD HL,HL       ;
 $B61F ADD HL,HL       ; }
 $B620 LD A,($A22C)    ; {Increment x-position and save it at projectile
 $B623 ADD A,$10       ; configuration buffer
 $B625 LD (IY+$00),A   ; }
 $B628 LD A,($A214)    ; {is Rex firing the wepaon?
 $B62B OR A            ; }
 $B62C JP NZ,$B640     ; Jump if not
 $B62F LD A,($A22C)    ; {Check bits 2-0 of x-position
 $B632 AND $07         ; }
 $B634 CP $06          ; {Decrement y-position of laser when Rex is moving Bits
 $B636 JP Z,$B63D      ; 2-0: $06 and $00 decrement y-position
 $B639 OR A            ;
 $B63A JP NZ,$B640     ;
*$B63D DEC (IY+$01)    ; }
*$B640 LD (IY+$04),$08 ; Set x-delta of laser
 $B644 LD HL,$0001     ; {Set offset of 1
 $B647 LD (IY+$07),L   ;
 $B64A LD (IY+$08),H   ; }
 $B64D LD A,($A230)    ; {is Rex direction facing right
 $B650 OR A            ; }
 $B651 JP Z,$B669      ; Jump if so
 $B654 LD A,(IY+$00)   ; {Recompute x-position for facing left
 $B657 SUB $10         ;
 $B659 LD (IY+$00),A   ; }
 $B65C LD HL,$FFFF     ; {Recompute x-offset for facing left (-1)
 $B65F LD (IY+$07),L   ;
 $B662 LD (IY+$08),H   ; }
 $B665 LD (IY+$04),$F8 ; Recompute x-delta for facing left
*$B669 LD L,(IY+$01)   ; {Computes offset on room buffer for y-position
 $B66C LD H,$00        ;
 $B66E ADD HL,HL       ;
 $B66F ADD HL,HL       ;
 $B670 ADD HL,HL       ;
 $B671 ADD HL,HL       ;
 $B672 ADD HL,HL       ; }
 $B673 LD A,(IY+$00)   ; {Computes offset on room buffer for x-position
 $B676 SRL A           ;
 $B678 SRL A           ;
 $B67A SRL A           ; }
 $B67C LD E,A          ; {Computes address into room buffer for draw the
 $B67D LD D,$00        ; projectile and save this address into projectile
 $B67F ADD HL,DE       ; configuration buffer
 $B680 LD DE,$E7FF     ;
 $B683 ADD HL,DE       ;
 $B684 LD (IY+$02),L   ;
 $B687 LD (IY+$03),H   ; }
 $B68A RET             ;

; Draw projectiles
;
; Draw Enemy projectiles. Used by the routine at #R$9470.
c$B68B LD IX,$5D22     ; Set #REGix to the base address for enemy projectile
                       ; configuration
 $B68F LD B,$14        ; Set #REGb to the max number of enemy projectiles on
                       ; screen
 $B691 JP $B69A        ; Jump forward to read projectile data and draw
; Draw Rex projectiles. Used by the routine at #R$9470.
*$B694 LD IX,$5B60     ; Set #REGix to the base addres for enemy projectile
                       ; configuration
 $B698 LD B,$1E        ; Set #REGb to the max number of Rex projectiles
; This entry point is used by the routine at #R$B68B.
*$B69A LD A,(IX+$06)   ; Set #REGa the projectile status
 $B69D OR A            ; is destroyed?
 $B69E JP Z,$B732      ; Jump if so
 $B6A1 CP $02          ; just hit?
 $B6A3 JP Z,$B839      ; Jump if so
 $B6A6 CP $03          ; exploding?
 $B6A8 JP Z,$B854      ; Jump is so The projectile is flying
 $B6AB LD L,(IX+$02)   ; {Set #REGhl to the addres location in room graphic
 $B6AE LD H,(IX+$03)   ; buffer}
 $B6B1 LD A,(IX+$0B)   ; Set REG#a the projectile type
 $B6B4 AND $7F         ;
 $B6B6 OR A            ; is a basic laser?
 $B6B7 JP Z,$B90E      ; draw basic laser sprite
 $B6BA CP $01          ; is a basic laser?
 $B6BC JP Z,$B90E      ; draw basic laser sprite
 $B6BF CP $04          ; is a spray?
 $B6C1 JP Z,$B8E2      ; draw spray sprite
 $B6C4 CP $02          ; is a laser?
 $B6C6 JP Z,$B937      ; draw laser sprite $02
 $B6C9 CP $03          ; is a multiple?
 $B6CB JP Z,$B90E      ; draw basic laser sprite
 $B6CE CP $06          ; is a laser?
 $B6D0 JP Z,$B99B      ; draw laser sprite $06
 $B6D3 CP $07          ; is a seed plant?
 $B6D5 JP Z,$B878      ; draw seed plant
; This entry point is used by the routines at #R$B878, #R$B8E2, #R$B90E,
; #R$B937 and #R$B99B.
*$B6D8 LD A,(IX+$00)   ; Set #REGa the projectile x-position
 $B6DB ADC A,(IX+$04)  ; Adds the projectile x-speed
 $B6DE LD (IX+$00),A   ; Set the new x-position
 $B6E1 LD ($A248),A    ; Save the x-position at #R$A248
 $B6E4 CP $F8          ; Projectile left room from the right?
 $B6E6 JP NC,$B73C     ; Jump if so
 $B6E9 CP $09          ; Projectile left room from the left?
 $B6EB JP C,$B73C      ; Jump if so
 $B6EE LD A,(IX+$01)   ; Set #REGa the projectile y-position
 $B6F1 ADC A,(IX+$05)  ; Add the projectile y-speed
 $B6F4 LD (IX+$01),A   ; Save the new y-position
 $B6F7 LD ($A249),A    ; Save the  y-position at #R$A249
 $B6FA CP $C0          ; Projectile left room from the bottom?
 $B6FC JP NC,$B73C     ; Jump if so
 $B6FF CP $18          ; Projectil left the room from the top?
 $B701 JP C,$B73C      ; Jump if so
 $B704 LD A,$01        ; {Computes address into the tile type buffer based on
 $B706 CALL $A6AB      ; the computed position of the projectile}
 $B709 LD A,(HL)       ; Set #REGa to the tile type impacted by the projectile
 $B70A CP $04          ; Is the FINAL BOSS tile?
 $B70C JP Z,$B743      ; Jump forward to handle FINAL BOSS kill
 $B70F CALL $CE17      ; Check if #REGa is a 'background' type tile
 $B712 JP NZ,$B810     ; Jump if is not a background tile
; the projectile continue flying
*$B715 LD A,(IX+$0B)   ; {the projectile is a seed plant?
 $B718 AND $7F         ;
 $B71A CP $07          ; }
 $B71C JP Z,$B732      ; Jump and check the next projectile if so
 $B71F LD L,(IX+$02)   ; {Computes into #REGhl the addres pointer into room
 $B722 LD H,(IX+$03)   ; graphics buffer for the new position of projectile
 $B725 LD E,(IX+$07)   ;
 $B728 LD D,(IX+$08)   ;
 $B72B ADD HL,DE       ; }
 $B72C LD (IX+$02),L   ; {Set into projectile configuration buffer the new
 $B72F LD (IX+$03),H   ; address}
; This projectile has been handled, go the next one. This entry point is used
; by the routines at #R$B810, #R$B839 and #R$B854.
*$B732 LD DE,$000F     ; Set #REGde to the length of projectile configuration
                       ; buffer
 $B735 ADD IX,DE       ; Adds to the previous base address into #REGix
 $B737 DEC B           ; Decrement #REGb
 $B738 JP NZ,$B69A     ; Jump back if there are projectiles to handle
 $B73B RET             ;
; the projectile has been destroyed
*$B73C LD (IX+$06),$00 ; Set the projectile status to destroyed
 $B740 JP $B732        ; Jump back and check for the next one
; FINAL BOSS kill
*$B743 LD A,($A268)    ; {Jump forward if FINAL BOSS alredy killed
 $B746 OR A            ;
 $B747 JP NZ,$B77E     ; }
 $B74A LD A,$C8        ; {Set the number of explosions (200)
 $B74C LD ($A269),A    ; }
 $B74F LD HL,$9CF9     ; {Set the address into table offset for compute
 $B752 LD ($A26A),HL   ; explosions location}
 $B755 LD A,$01        ; {Set FINAL BOSS dead
 $B757 LD ($A268),A    ; }
 $B75A LD HL,$E55F     ; Point #REGhl to the attribute buffer for room
 $B75D PUSH BC         ; Save #REGbc
 $B75E LD BC,$02A0     ; Set #REGbc to the number of tiles on room (672)
*$B761 LD A,(HL)       ; {If attribute color is $03, $43 or $06 then hide tile.
 $B762 CP $03          ; Hide FINAL BOSS
 $B764 JP Z,$B774      ;
 $B767 CP $43          ;
 $B769 JP Z,$B774      ;
 $B76C CP $06          ;
 $B76E JP Z,$B774      ;
 $B771 JP $B776        ;
*$B774 LD (HL),$00     ; }
*$B776 INC HL          ; Increase address into attribute buffer
 $B777 DEC BC          ; Decrease tile counter
 $B778 LD A,B          ; {Jump back until all the tiles checked
 $B779 OR C            ;
 $B77A JP NZ,$B761     ; }
 $B77D POP BC          ; Restore #REGbc
*$B77E JP $B715        ; Jump back and continue processing projectile
; Remnant code for destructible tiles. Noy used in Rex (Side B)
 $B781 POP HL          ;
 $B782 POP AF          ;
 $B783 BIT 7,(IX+$0B)  ;
 $B787 JP NZ,$B715     ;
 $B78A LD ($A22C),A    ;
 $B78D INC A           ;
 $B78E LD (HL),A       ;
 $B78F LD DE,$E19F     ;
 $B792 AND A           ;
 $B793 SBC HL,DE       ;
 $B795 PUSH HL         ;
 $B796 LD DE,$DE9F     ;
 $B799 ADD HL,DE       ;
 $B79A LD A,(HL)       ;
 $B79B DEC A           ;
 $B79C LD L,A          ;
 $B79D LD H,$00        ;
 $B79F ADD HL,HL       ;
 $B7A0 ADD HL,HL       ;
 $B7A1 LD DE,$D962     ;
 $B7A4 ADD HL,DE       ;
 $B7A5 LD ($A22E),HL   ;
 $B7A8 INC HL          ;
 $B7A9 INC HL          ;
 $B7AA LD E,(HL)       ;
 $B7AB INC HL          ;
 $B7AC LD D,(HL)       ;
 $B7AD PUSH HL         ;
 $B7AE LD HL,$0008     ;
 $B7B1 ADD HL,DE       ;
 $B7B2 EX DE,HL        ;
 $B7B3 POP HL          ;
 $B7B4 DEC HL          ;
 $B7B5 LD (HL),E       ;
 $B7B6 INC HL          ;
 $B7B7 LD (HL),D       ;
 $B7B8 EX DE,HL        ;
 $B7B9 LD DE,$6606     ;
 $B7BC AND A           ;
 $B7BD SBC HL,DE       ;
 $B7BF SRL H           ;
 $B7C1 RR L            ;
 $B7C3 SRL H           ;
 $B7C5 RR L            ;
 $B7C7 SRL H           ;
 $B7C9 RR L            ;
 $B7CB LD DE,$6E06     ;
 $B7CE ADD HL,DE       ;
 $B7CF LD A,(HL)       ;
 $B7D0 LD ($A230),A    ;
 $B7D3 LD A,($A22C)    ;
 $B7D6 CP $06          ;
 $B7D8 JP NZ,$B7E0     ;
 $B7DB LD A,$47        ;
 $B7DD LD ($A230),A    ;
*$B7E0 POP HL          ;
 $B7E1 PUSH HL         ;
 $B7E2 LD DE,$5800     ;
 $B7E5 ADD HL,DE       ;
 $B7E6 LD A,($A230)    ;
 $B7E9 LD (HL),A       ;
 $B7EA POP HL          ;
 $B7EB PUSH HL         ;
 $B7EC LD DE,$E4FF     ;
 $B7EF ADD HL,DE       ;
 $B7F0 LD A,($A230)    ;
 $B7F3 LD (HL),A       ;
 $B7F4 POP HL          ;
 $B7F5 LD A,($A22C)    ;
 $B7F8 CP $04          ;
 $B7FA JP Z,$B810      ;
 $B7FD CP $05          ;
 $B7FF JP Z,$B810      ;
 $B802 LD DE,$E19F     ;
 $B805 ADD HL,DE       ;
 $B806 LD (HL),$00     ;
 $B808 LD DE,($A22E)   ;
 $B80C XOR A           ;
 $B80D LD (DE),A       ;
 $B80E INC DE          ;
 $B80F LD (DE),A       ;
; the projectile has just impacted 1
*$B810 LD L,(IX+$02)   ; {Draw impact 1 projectile
 $B813 LD H,(IX+$03)   ;
 $B816 LD (HL),$10     ; }
 $B818 LD (IX+$06),$00 ; Set state of projectile to destroyed
 $B81C LD A,($A1AC)    ; {Check if weapon used is $02
 $B81F CP $02          ; }
 $B821 JP Z,$B732      ; Jump to handle the next projectile
 $B824 LD (IX+$06),$02 ; Set impact 1 state for projectile
 $B828 LD A,($D5DA)    ; {Sound channel 3 is in use?
 $B82B CP $FF          ; }
 $B82D JP NZ,$B732     ; Jump to the next projectile if in use
 $B830 LD DE,$D51F     ; Set #REGde to impact sound data
 $B833 CALL $D37F      ; Configure sound channel and mixer register
 $B836 JP $B732        ; Jump back to handle next projectile
; the projectile has just impacted 2
*$B839 LD L,(IX+$02)   ; {Draw impact 2 projectile
 $B83C LD H,(IX+$03)   ;
 $B83F LD DE,$0020     ;
 $B842 AND A           ;
 $B843 SBC HL,DE       ;
 $B845 LD (HL),$10     ;
 $B847 ADD HL,DE       ;
 $B848 LD (HL),$38     ;
 $B84A ADD HL,DE       ;
 $B84B LD (HL),$10     ; }
 $B84D LD (IX+$06),$03 ; Set projectile status to impact 2
 $B851 JP $B732        ; Jump back to handle next projectile
; the projectile is exploding
*$B854 LD L,(IX+$02)   ; {Draw projectile exploding
 $B857 LD H,(IX+$03)   ;
 $B85A LD DE,$0040     ;
 $B85D AND A           ;
 $B85E SBC HL,DE       ;
 $B860 LD DE,$0020     ;
 $B863 LD (HL),$10     ;
 $B865 ADD HL,DE       ;
 $B866 LD (HL),$00     ;
 $B868 ADD HL,DE       ;
 $B869 LD (HL),$44     ;
 $B86B ADD HL,DE       ;
 $B86C LD (HL),$00     ;
 $B86E ADD HL,DE       ;
 $B86F LD (HL),$10     ; }
 $B871 LD (IX+$06),$00 ; Set projectile status to destroyed
 $B875 JP $B732        ; Jump back to handle next projectile
; Draw seed plant projectile
*$B878 LD L,(IX+$01)   ; {Computes address into room graphic buffer based on x
 $B87B LD H,$00        ; and y position of projectile
 $B87D ADD HL,HL       ;
 $B87E ADD HL,HL       ;
 $B87F ADD HL,HL       ;
 $B880 ADD HL,HL       ;
 $B881 ADD HL,HL       ;
 $B882 LD E,(IX+$00)   ;
 $B885 SRL E           ;
 $B887 SRL E           ;
 $B889 SRL E           ;
 $B88B LD D,$00        ;
 $B88D ADD HL,DE       ;
 $B88E LD DE,$E7FF     ;
 $B891 ADD HL,DE       ; }
 $B892 LD (IX+$02),L   ; {Puts this address into the projectile configuration
 $B895 LD (IX+$03),H   ; buffer}
 $B898 PUSH HL         ; Save #REGhl
 $B899 LD A,(IX+$0E)   ; Set #REGa to the seed trajectory index into table of
                       ; trajectory addresses
 $B89C LD E,A          ; {Computes the address of the trajectory based on the
 $B89D LD D,$00        ; index
 $B89F LD HL,$AA47     ;
 $B8A2 ADD HL,DE       ; }
 $B8A3 LD ($A22C),HL   ; Save into #R$A22C this address pointer
 $B8A6 LD E,(HL)       ; {Set into #REGhl the initial address for the
 $B8A7 INC HL          ; trajectory
 $B8A8 LD D,(HL)       ;
 $B8A9 EX DE,HL        ; }
 $B8AA LD E,(IX+$0C)   ; {Add to the address the index of the trajectory
 $B8AD LD D,$00        ;
 $B8AF ADD HL,DE       ; }
 $B8B0 LD A,(HL)       ; Set #REGa the y-offset value of the trajectory
 $B8B1 CP $1E          ; is an end marker?
 $B8B3 JP NZ,$B8C4     ; Jump if not
; end of defined trajectory
 $B8B6 DEC (IX+$0C)    ; Decrement trajectory index
 $B8B9 LD HL,($A22C)   ; {Point #REGhl to the end address of the trajectory so
 $B8BC INC HL          ; for the next loop trajectory will continue with the
 $B8BD INC HL          ; value set on the next instruction for y-delta
 $B8BE LD E,(HL)       ;
 $B8BF INC HL          ;
 $B8C0 LD D,(HL)       ;
 $B8C1 EX DE,HL        ; }
 $B8C2 LD A,$08        ; Set y-delta for the projectile to 8
; continue trajectory
*$B8C4 LD (IX+$05),A   ; Set the previously obtained y-delta
 $B8C7 INC HL          ; Increase address into trajectory
 $B8C8 LD E,(HL)       ; Does nothing
 $B8C9 LD DE,$AA43     ; Set #REGde the base address for graphic data of seed
                       ; plant projectile
 $B8CC POP HL          ; Restore #REGhl
 $B8CD PUSH BC         ; Save #REGbc
 $B8CE LD B,$04        ; {Draw into room graphic buffer the graphic data for
*$B8D0 LD A,(DE)       ; the projectile
 $B8D1 LD (HL),A       ;
 $B8D2 INC DE          ;
 $B8D3 PUSH DE         ;
 $B8D4 LD DE,$0020     ;
 $B8D7 ADD HL,DE       ;
 $B8D8 POP DE          ;
 $B8D9 DJNZ $B8D0      ; }
 $B8DB POP BC          ; Restore #REGbc
 $B8DC INC (IX+$0C)    ; Increment index into table of y-offsets trajectory
 $B8DF JP $B6D8        ; Jump to finish projectile configuration
; Used by the routine at #R$B694.
*$B8E2 LD DE,$0040     ; {Computes offset position to draw
 $B8E5 AND A           ;
 $B8E6 SBC HL,DE       ;
 $B8E8 LD DE,$0020     ; }
 $B8EB BIT 7,(IX+$0B)  ; Check subtype of spray bullet
 $B8EF JP NZ,$B900     ; Jump if subtype is 1
; draw spray bullet 0
 $B8F2 LD (HL),$10     ; {Draw spray bullet 0
 $B8F4 ADD HL,DE       ;
 $B8F5 LD (HL),$1C     ;
 $B8F7 ADD HL,DE       ;
 $B8F8 LD (HL),$38     ;
 $B8FA ADD HL,DE       ;
 $B8FB LD (HL),$08     ; }
 $B8FD JP $B6D8        ; Jump back
; draw spray bullet 1
*$B900 LD (HL),$00     ; {Draw spray bullet 1
 $B902 ADD HL,DE       ;
 $B903 LD (HL),$10     ;
 $B905 ADD HL,DE       ;
 $B906 LD (HL),$28     ;
 $B908 ADD HL,DE       ;
 $B909 LD (HL),$10     ; }
 $B90B JP $B6D8        ; Jump back
; draw basic laser-type projectile
*$B90E BIT 7,(IX+$0B)  ; Check laser-type projectile
 $B912 JP NZ,$B926     ; Jump to draw basic laser-type 1
; draw basic laser-type 0
 $B915 LD A,(IX+$04)   ; {Set #REGa direction of projectile
 $B918 DEC A           ; }
 $B919 JP M,$B921      ; Jump if lase direction is left
 $B91C LD (HL),$B7     ; Draw laser sprite
 $B91E JP $B6D8        ; Jump back
*$B921 LD (HL),$ED     ; Draw laser sprite
 $B923 JP $B6D8        ; Jump back
; draw basic laser-type 1
*$B926 LD A,(IX+$04)   ; {Set #REGa direction of projectile
 $B929 DEC A           ; }
 $B92A JP M,$B932      ; Jump if laser direction is left
 $B92D LD (HL),$97     ; Draw laser sprite
 $B92F JP $B6D8        ; Jump back
*$B932 LD (HL),$E9     ; Draw laser sprite
 $B934 JP $B6D8        ; Jump back
; draw laser
*$B937 LD A,(IX+$0E)   ; {Decrement laser duration counter
 $B93A DEC A           ;
 $B93B LD (IX+$0E),A   ; }
 $B93E OR A            ; is 0 ?
 $B93F JP NZ,$B949     ; Jump if not
 $B942 LD (IX+$06),$00 ; Destroy laser
 $B946 JP $B6D8        ; Jump back for next projectile
*$B949 LD A,(IX+$0C)   ; Set #REGa to number of laser type $06 extensions
 $B94C DEC A           ; {if no need to create more laser type $06 jump back
 $B94D OR A            ; and handle next projectile
 $B94E JP Z,$B6D8      ; }
 $B951 LD (IX+$0C),A   ; Decrement the laser type $06 counter on projectile
                       ; configuration buffer
 $B954 LD A,(IX+$0D)   ; {Set #R$A22C to laser type $06 x-position + 1
 $B957 INC A           ;
 $B958 LD ($A22C),A    ; }
 $B95B LD A,(IX+$01)   ; {Set #R$A22E to laser y-position
 $B95E LD ($A22E),A    ; }
 $B961 LD A,$01        ; {Set laser direction to left at #R$A230
 $B963 LD ($A230),A    ; }
 $B966 BIT 7,(IX+$04)  ; laser x-delta is negative (moving left)?
 $B96A JP NZ,$B979     ; Jump if so
 $B96D XOR A           ; {Set laser diretion to right at #R$A230
 $B96E LD ($A230),A    ; }
 $B971 LD A,($A22C)    ; {Substract two byte to x-position of laser
 $B974 SUB $10         ;
 $B976 LD ($A22C),A    ; }
*$B979 XOR A           ; {Set 0 for y-position increment at #R$A232
 $B97A LD ($A232),A    ; }
 $B97D PUSH IX         ; {Save #REGix and #REGbc
 $B97F PUSH BC         ; }
 $B980 CALL $B54C      ; Configure weapon sound and check for weapon free slot
 $B983 XOR A           ; Set #REGa = 0 (used as laser type in nex routine)
 $B984 CALL $B607      ; Create a new laser type $06
 $B987 LD A,($A201)    ; {Set laser duration/graphic index from #R$A201
 $B98A LD (IY+$0E),A   ; }
 $B98D LD (IY+$05),$00 ; Set y-delta to 0
 $B991 LD (IY+$0B),$06 ; Set laser type to $06
 $B995 POP BC          ; {Restore #REGbc and #REGix
 $B996 POP IX          ; }
 $B998 JP $B6D8        ; Jump back and configure next projectile
*$B99B EX DE,HL        ; Exchange #REGde and #REGhl
 $B99C PUSH DE         ; Save #REGde
 $B99D LD A,(IX+$0E)   ; {Point #REGhl to the graphic of laser at #R$B9BE base
 $B9A0 LD E,A          ; on laser graphic index
 $B9A1 LD D,$00        ;
 $B9A3 LD HL,$B9BE     ;
 $B9A6 ADD HL,DE       ; }
 $B9A7 LD A,R          ; Set #REGa to semi-random number (R: memory refresh
                       ; register)
 $B9A9 AND (HL)        ; Apply AND operator to laser graphics
 $B9AA POP DE          ; {Puts this random graphics to room graphics buffer
 $B9AB LD (DE),A       ; }
 $B9AC LD A,(IX+$0E)   ; {Decrement laser graphic index
 $B9AF DEC A           ;
 $B9B0 LD (IX+$0E),A   ; }
 $B9B3 OR A            ; {if graphic index=0 then set projectile status to
 $B9B4 JP NZ,$B6D8     ; destroyed. Then jump back and configure next
 $B9B7 LD (IX+$06),$00 ; projectile
 $B9BB JP $B6D8        ; }

; Laser graphics
;
; Every byte is a graphic template for the laser
b$B9BE DEFB $00,$04,$44,$54,$55,$D5,$DD,$DF
 $B9C6 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B9CE DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B9D6 DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF
 $B9DE DEFB $FF,$FF,$FF,$FF,$FF,$FF,$FF,$FF

; Update color attribute for weapon icon on HUD
;
; Used by the routine at #R$9470.
c$B9E6 LD A,($A1DB)  ; {Return if HDU flash active
 $B9E9 CP $FF        ;
 $B9EB RET NZ        ; }
 $B9EC LD HL,($A1AE) ; Set #REGhl to the pointer into attribute file for the
                     ; weapon icon
 $B9EF CALL $B9F9    ; Handle icon weapon color change
 $B9F2 LD HL,($A1AE) ; {Set #REGhl to the pointer into attribute buffer for the
 $B9F5 LD DE,$8CFF   ; weapon icon
 $B9F8 ADD HL,DE     ; }
*$B9F9 LD A,($A1AD)  ; {Set #REGa the color attribute based on weapon energy
 $B9FC INC A         ; level
 $B9FD INC A         ; }
; Set weapon icon in HUD the color attribute at #REGa
*$B9FE LD (HL),A     ; {Set color attribute for first row
 $B9FF INC HL        ;
 $BA00 LD (HL),A     ; }
 $BA01 LD DE,$001F   ; {Point #REGhl to the next row
 $BA04 ADD HL,DE     ; }
 $BA05 LD (HL),A     ; {Set color attribute for the second row
 $BA06 INC HL        ;
 $BA07 LD (HL),A     ; }
 $BA08 RET           ;

; Handle weapon energy increase
;
; Used by the routine at #R$D204.
;
; I:A The quantity of energy to increase
c$BA09 LD HL,$A22C   ; {Set #R$A22C to the energy to increase
 $BA0C LD (HL),A     ; }
 $BA0D LD A,($A1AD)  ; {Return if weapon energy level equals to 6
 $BA10 CP $06        ;
 $BA12 RET Z         ; }
 $BA13 LD A,($A1B1)  ; {Increment accumulated weapon energy
 $BA16 ADD A,(HL)    ;
 $BA17 LD ($A1B1),A  ; }
 $BA1A CP $78        ; {Return if accumulated energy less than 120
 $BA1C RET C         ; }
 $BA1D SUB $78       ; {Substract 120 to the accumulated energy
 $BA1F LD ($A1B1),A  ; }
 $BA22 LD A,($A1AD)  ; {Increment weapon energy level
 $BA25 INC A         ; }
 $BA26 CP $06        ; {If weapon energy level is equal to 6 jump to increase
 $BA28 JP Z,$BA3B    ; the number of weapon that has energy}
 $BA2B LD ($A1AD),A  ; Set the new weapon energy level
 $BA2E SLA A         ; {Set new laser duration based on energy level duration =
 $BA30 SLA A         ; energy level * 5
 $BA32 ADD A,$04     ;
 $BA34 LD ($A201),A  ; }
 $BA37 CALL $A793    ; Initialise drones configuration data buffer
 $BA3A RET           ;
; increase the number of weapons that has energy
*$BA3B LD A,($A207)  ; {Increase number of weapons that has energy
 $BA3E INC A         ; }
 $BA3F CP $05        ; {Return if number is 5
 $BA41 RET Z         ; }
 $BA42 LD ($A207),A  ; Set the new number into #R$A207
 $BA45 LD HL,($A1AE) ; {Increment address into attribute file to point to the
 $BA48 INC HL        ; next weapon icon in HUD
 $BA49 INC HL        ;
 $BA4A LD ($A1AE),HL ; }
 $BA4D LD A,$01      ; {Set the new weapon energy level to 1
 $BA4F LD ($A1AD),A  ; }
; Change the current weapon for Rex based on accumulated energy. This entry
; point is used by the routines at #R$BA6A and #R$BAB8.
*$BA52 LD HL,$A1E8   ; Set #REGhl to point to data buffer for weapons inventory
 $BA55 LD A,($A207)  ; Set #REGa the accumulated energy weapon
 $BA58 INC A         ; {Set #REGb to the number of weapons that permits the
 $BA59 LD B,A        ; accumulated energy}
 $BA5A LD E,$00      ; Set #REGe the current possible weapon
*$BA5C LD A,(HL)     ; {Rex has this weapon in inventory?
 $BA5D OR A          ; }
 $BA5E JP Z,$BA65    ; Jump forward if not
 $BA61 LD A,E        ; {Set this weapon for the current weapon of Rex
 $BA62 LD ($A1AC),A  ; }
*$BA65 INC E         ; Increase the weapon number
 $BA66 INC HL        ; Increase the addres to point to the next weapon in
                     ; inventory
 $BA67 DJNZ $BA5C    ; Jump back until looped all the permited weapons for the
                     ; accumulated energy
 $BA69 RET           ;

; Handle weapon energy loss
;
; Used by the routines at #R$B3B8 and #R$BAB8.
;
; I:A The quantity of energy to loss
c$BA6A LD HL,$A22C   ; {Set #R$A22C to the energy to loss
 $BA6D LD (HL),A     ; }
 $BA6E LD A,($A1AD)  ; {Return if weapon energy level equals zero
 $BA71 OR A          ;
 $BA72 RET Z         ; }
 $BA73 LD A,($A1B1)  ; {Decrement weapon energy
 $BA76 SUB (HL)      ;
 $BA77 LD ($A1B1),A  ; }
 $BA7A RET P         ; Return if energy still a positive value
; Weapon energy quantity has been depleated
 $BA7B ADD A,$32     ; {Increment weapon energy by 50
 $BA7D LD ($A1B1),A  ; }
 $BA80 LD A,($A1AD)  ; {Decrement weapon energy level
 $BA83 DEC A         ; }
 $BA84 OR A          ; {if weapon energy level reaches zero jump forward
 $BA85 JP Z,$BA8C    ; }
 $BA88 LD ($A1AD),A  ; Set the new weapon energy level
 $BA8B RET           ;
; weapon energy level is zero
*$BA8C LD A,($A207)  ; {Decrement the accumulated energy for weapons
 $BA8F DEC A         ; }
 $BA90 CP $FF        ; {Return if the accumulated energy is alredy zero
 $BA92 RET Z         ; }
 $BA93 LD ($A207),A  ; Set the new number of accumulated energy for weapon
 $BA96 LD A,$01      ; Set color attribute blue for weapon icon
 $BA98 LD HL,($A1AE) ; Set #REGhl to point to the current weapon icon HUD in
                     ; attribute file
 $BA9B CALL $B9FE    ; Set weapon icon in HUD to the color at #REGa (atribute
                     ; file)
 $BA9E LD HL,($A1AE) ; {Point #REGhl to the weapon icon into the attribute
 $BAA1 LD DE,$8CFF   ; buffer
 $BAA4 ADD HL,DE     ; }
 $BAA5 CALL $B9FE    ; Set weapon icon in HUD to the color at #REGa (attribute
                     ; buffer)
 $BAA8 LD HL,($A1AE) ; {Set #R$A015 to point to the previous weapon icon
 $BAAB DEC HL        ;
 $BAAC DEC HL        ;
 $BAAD LD ($A1AE),HL ; }
 $BAB0 LD A,$05      ; {Set weapon energy level to max
 $BAB2 LD ($A1AD),A  ; }
 $BAB5 JP $BA52      ; Jump to change the current weapon for Rex

; Handle double energy loss
;
; Used by the routine at #R$9CC5.
c$BAB8 LD B,$02      ; Set loop counter to 2
*$BABA PUSH BC       ; Save #REGbc
 $BABB LD A,$32      ; Set #REGa to the energy to loss (50)
 $BABD CALL $BA6A    ; Handle weapon energy loss
 $BAC0 POP BC        ; Restore #REGbc
 $BAC1 DJNZ $BABA    ; Jump back and handle next energy loss
 $BAC3 JP $BA52      ;

; Initialise weapon data (Laser)
;
; Used by the routine at #R$9470.
c$BAC6 LD A,$02      ; {Set the current weapon of Rex (laser)
 $BAC8 LD ($A1AC),A  ; }
 $BACB LD A,$03      ; {Set the weapon energy level
 $BACD LD ($A1AD),A  ; }
 $BAD0 LD HL,$5805   ; {Point to the current weapon icon into attribute file
 $BAD3 LD ($A1AE),HL ; }
 $BAD6 LD A,$02      ; {Init the number of weapon thas has energy
 $BAD8 LD ($A207),A  ; }
 $BADB RET           ;

; Draw the windows borders in the display file
;
; Used by the routine at #R$A2E6.
;
; IX Address of the text definition data
; A Color attribute for the windows border
; C Color attribute for the windows body
; H Horizontal position
; L Vertical position
; D Length of the longest line
; E Number of lines
c$BADC PUSH IX       ; Save #REGix
 $BADE LD ($A22C),A  ; Save color attribute for the windows border at #R$A22C
 $BAE1 LD A,D        ; {Save the length of the longest line at #R$A1C3
 $BAE2 LD ($A1C3),A  ; }
 $BAE5 LD A,E        ; {Save number of lines at #R$A1C4
 $BAE6 LD ($A1C4),A  ; }
 $BAE9 LD A,H        ; {Save horizontal position at #R$A1C1
 $BAEA LD ($A1C1),A  ; }
 $BAED LD A,L        ; {Save vertical position at #R$A1C2
 $BAEE LD ($A1C2),A  ; }
 $BAF1 LD A,C        ; {Save color attribute for the windows body at #R$A238
 $BAF2 LD ($A238),A  ; }
 $BAF5 LD A,($A1C2)  ; {Set #REGhl to the vertical position of the windows
 $BAF8 LD L,A        ;
 $BAF9 LD H,$00      ; }
 $BAFB ADD HL,HL     ; {Computes the offset of the horizontal position into the
 $BAFC ADD HL,HL     ; attribute file
 $BAFD ADD HL,HL     ;
 $BAFE ADD HL,HL     ;
 $BAFF ADD HL,HL     ; }
 $BB00 LD A,($A1C1)  ; {Set #REGde to the horizontal position of the windows
 $BB03 LD E,A        ;
 $BB04 LD D,$00      ; }
 $BB06 ADD HL,DE     ; Add the vertical position to the offset previously
                     ; computed
 $BB07 LD DE,$5802   ; {Point #REGhl to the address of the windows location
 $BB0A ADD HL,DE     ; into the attribute file}
 $BB0B PUSH HL       ; Save #REGhl
 $BB0C LD A,($A1C4)  ; Pick up the number of lines
 $BB0F ADD A,$02     ; Adds two to the number of lines (border top and bottom)
                     ; to obtain the height of the windows
 $BB11 LD B,A        ; Set #REGb to the height of the windows
 $BB12 LD A,($A1C3)  ; Pick up the length of the longest line
 $BB15 ADD A,$02     ; Adds two to the height of the longest line (border left
                     ; and right) to obtain the height of the windows
 $BB17 LD E,A        ; Set #REGe to the width of the windows
 $BB18 LD A,($A22C)  ; Pick up the color attribute for the windows border
 $BB1B CALL $D6A1    ; Fill the windows (border included) with the color
                     ; attribute of the borders
 $BB1E POP HL        ; Restore #REGhl
 $BB1F LD DE,$0021   ; {Point #REGhl to the address of the first line of the
 $BB22 ADD HL,DE     ; windows into the attribute file}
 $BB23 LD A,($A1C4)  ; {Set #REGb to the number of lines
 $BB26 LD B,A        ; }
 $BB27 LD A,($A1C3)  ; {Set #REGe to the length of the longest line
 $BB2A LD E,A        ; }
 $BB2B LD A,($A238)  ; Pick up the color attribute for the windows body
 $BB2E CALL $D6A1    ; Fill the windows (only body) with the color attribute of
                     ; the body
 $BB31 LD A,($A1C2)  ; {Set #REGhl to the vertical position
 $BB34 LD L,A        ;
 $BB35 LD H,$00      ; }
 $BB37 ADD HL,HL     ; {Computes the pixel of the vertical position (x8)
 $BB38 ADD HL,HL     ;
 $BB39 ADD HL,HL     ;
 $BB3A ADD HL,HL     ; }
 $BB3B LD DE,$AC9A   ; {Point #REGhl to the display file lookup table
 $BB3E ADD HL,DE     ; corresponding to this vertical pixel}
 $BB3F LD IX,$6346   ; Point #REGix to the graphics data of the top-left border
                     ; windows tile
 $BB43 LD IY,$6366   ; Point #REGiy to the graphics data of the top-middle
                     ; border windows tile
 $BB47 CALL $BB6B    ; Draw the top border of the windows
 $BB4A LD A,($A1C4)  ; {Set #REGb to the number of lines
 $BB4D LD B,A        ; }
*$BB4E PUSH BC       ; Save #REGbc
 $BB4F LD IX,$63DE   ; Point #REGix to the graphics data of the left border
                     ; windows tile
 $BB53 LD IY,$63EE   ; Point #REGiy to the graphics data of the middle border
                     ; windows tile (black tile)
 $BB57 CALL $BB6B    ; Draw the middle border of the windows
 $BB5A POP BC        ; Restore #REGbc
 $BB5B DJNZ $BB4E    ; Jump back while there are lines to draw
 $BB5D LD IX,$6356   ; Point #REGix to the graphics data of the bottom-left
                     ; border windows tile
 $BB61 LD IY,$637E   ; Point #REGiy to the graphics data of the bottom-middle
                     ; border windows tile
 $BB65 CALL $BB6B    ; Draw the bottom border of the windows
 $BB68 POP IX        ; Restore #REGix
 $BB6A RET           ;

; Draw a row of borders for the windows
;
; Computes the pointer on display file and draw a row of borders for the
; windows. Used by the routine at #R$BADC.
;
; IX Point to the address of the graphics data for the left border tile
; IY point to the address of the graphics data for the middle border tile
; HL Point to the addres into the display file look up table corresponding to
; .  the row of pixels to draw
c$BB6B LD B,$08      ; Set #REGb=8
*$BB6D LD E,(HL)     ; {Set #REGde to point to the address on the display file
 $BB6E INC HL        ; to draw the corner
 $BB6F LD D,(HL)     ; }
 $BB70 INC DE        ; {Increment the pointer by 2. All the windows has a
 $BB71 INC DE        ; margin of 2 bytes}
 $BB72 PUSH HL       ; Save #REGhl briefly
 $BB73 LD A,($A1C1)  ; {Set #REGhl to the horizontal position of the windows
 $BB76 LD L,A        ;
 $BB77 LD H,$00      ; }
 $BB79 ADD HL,DE     ; Point #REGhl to the address of this location in display
                     ; file
 $BB7A EX DE,HL      ; Exchange #REGde with #REGhl
 $BB7B POP HL        ; Restore #REGhl
 $BB7C CALL $BB82    ; Draw one row of pixels for this border
 $BB7F DJNZ $BB6D    ; Jump back while there are remaining pixels to draw
 $BB81 RET           ;
; This routine draws the corresponding pixels of the tiles borders into display
; file
*$BB82 PUSH BC       ; Save #REGbc
 $BB83 LD A,(IX+$00) ; {Put the byte of the left border tile into display file
 $BB86 LD (DE),A     ; }
 $BB87 INC DE        ; Increment the pointer to the display file
 $BB88 LD A,($A1C3)  ; {Set #REGb to the length of the longest line
 $BB8B LD B,A        ; }
*$BB8C LD A,(IY+$00) ; {Put the byte of the middle border tile into display
 $BB8F LD (DE),A     ; file}
 $BB90 INC DE        ; Increment the pointer to the display files
 $BB91 DJNZ $BB8C    ; Jump back while there are middle borders to show
 $BB93 LD A,(IX+$08) ; {Put the byte of the right border tile into display file
 $BB96 LD (DE),A     ; }
 $BB97 INC IY        ; Point to the next byte of the middle border tile
 $BB99 INC IX        ; Point to the next byte of the left border tile
 $BB9B INC HL        ; Point to the next address into the display file lookup
                     ; table
 $BB9C POP BC        ; Recover #REGbc
 $BB9D RET           ;

; Draw a 3x3 grid attribute color into attribute file if tile is background
;
; Used by the routine at #R$BC17.
;
; I:C Attribute color
; I:HL Address into the attribute file
; I:DE Address into the attribute buffer
c$BB9E CALL $BBA8    ; Draw a row of attribute color to attribute file
 $BBA1 CALL $BBA8    ; Draw a row of attribute color to attribute file
 $BBA4 CALL $BBA8    ; Draw a row of attribute color to attribute file
 $BBA7 RET           ;
; Draw a row of attribute color into attribute file
*$BBA8 LD A,(DE)     ; {Is attribute byte from attribute buffer a 'background'
 $BBA9 CP $47        ; tile (black background -> $47 or blue background ->
 $BBAB JP Z,$BBB3    ; $0F)?
 $BBAE CP $0F        ;
 $BBB0 JP NZ,$BBB8   ; }
; is a background tile
*$BBB3 LD A,(HL)     ; {Blend color attribute over background color
 $BBB4 AND $38       ;
 $BBB6 OR C          ;
 $BBB7 LD (HL),A     ; }
; next tile
*$BBB8 INC HL        ; {Increment address into attribute file and buffer
 $BBB9 INC DE        ; }
 $BBBA LD A,(DE)     ; {Is attribute byte from attribute buffer a 'background'
 $BBBB CP $47        ;
 $BBBD JP Z,$BBC5    ;
 $BBC0 CP $0F        ;
 $BBC2 JP NZ,$BBCA   ; }
; is background tile
*$BBC5 LD A,(HL)     ; {Blend color attribute over background color
 $BBC6 AND $38       ;
 $BBC8 OR C          ;
 $BBC9 LD (HL),A     ; }
; next tile
*$BBCA INC HL        ; {Increment address into attribute file and buffer
 $BBCB INC DE        ; }
 $BBCC LD A,(DE)     ; {Is attribute byte from attribute buffer a 'background'
 $BBCD CP $47        ;
 $BBCF JP Z,$BBD7    ;
 $BBD2 CP $0F        ;
 $BBD4 JP NZ,$BBDC   ; }
; is background tile
*$BBD7 LD A,(HL)     ; {Blend color attribute over background color
 $BBD8 AND $38       ;
 $BBDA OR C          ;
 $BBDB LD (HL),A     ; }
*$BBDC PUSH DE       ; Save #REGde
 $BBDD LD DE,$001E   ; {Point address into attribute file and buffer to the
 $BBE0 ADD HL,DE     ; next row
 $BBE1 POP DE        ;
 $BBE2 PUSH HL       ;
 $BBE3 LD HL,$001E   ;
 $BBE6 ADD HL,DE     ;
 $BBE7 EX DE,HL      ;
 $BBE8 POP HL        ; }
 $BBE9 RET           ;

; Copy a 3x3 grid of attribute color from attribute buffer to attribute file
;
; Used by the routines at #R$99E3, #R$9BA7 and #R$C059.
;
; HL Address into attribute file
; DE Address into attribute buffer
c$BBEA CALL $BBF9    ; Copy a row of 3 attribute colors
 $BBED LD BC,$001E   ; {Increment address into attribute file to the next row
 $BBF0 ADD HL,BC     ; }
 $BBF1 CALL $BBF9    ; Copy a row of 3 attribute colors
 $BBF4 ADD HL,BC     ; Increment address into attribute file to the next row
 $BBF5 CALL $BBF9    ; Copy a row of 3 attribute colors
 $BBF8 RET           ;
; Copy a row of attribute colors
*$BBF9 LD A,(DE)     ; {Copy an attribute color from attribute buffer to
 $BBFA LD (HL),A     ; attribute file}
 $BBFB INC HL        ; {Increment address into attribute file and buffer
 $BBFC INC DE        ; }
 $BBFD LD A,(DE)     ; {Copy an attribute color from attribute buffer to
 $BBFE LD (HL),A     ; attribute file}
 $BBFF INC HL        ; {Increment address into attribute file and buffer
 $BC00 INC DE        ; }
 $BC01 LD A,(DE)     ; {Copy an attribute color from attribute buffer to
 $BC02 LD (HL),A     ; attribute file}
 $BC03 PUSH HL       ; Save #REGhl
 $BC04 LD HL,$001E   ; {Increment address into attribute buffer to the next row
 $BC07 ADD HL,DE     ;
 $BC08 EX DE,HL      ;
 $BC09 POP HL        ; }
 $BC0A RET           ;

; Copy the attribute file of the HUD (3 first rows) to the attribute buffer of
; the HUD
;
; Used by the routine at #R$9470.
c$BC0B LD DE,$E4FF   ;
 $BC0E LD HL,$5800   ;
 $BC11 LD BC,$0060   ;
 $BC14 LDIR          ;
 $BC16 RET           ;

; Draw random attribute color for explosion
;
; Used by the routines at #R$9BA7 and #R$C059.
c$BC17 CALL $A6DD    ; Computes into #REGhl the address into the attribute file
                     ; for the explosion position
 $BC1A LD DE,$0020   ; {Set this address to the next row
 $BC1D ADD HL,DE     ; }
 $BC1E LD ($A22C),HL ; Save at #R$A22C the address into the attribute file
 $BC21 LD DE,$5800   ; Set #REGde the base address for the attribute file
 $BC24 AND A         ; Reset carry flag
 $BC25 SBC HL,DE     ; {Computes the equivalent address of the attribute file
 $BC27 LD DE,$E4FF   ; into the attribute buffer
 $BC2A ADD HL,DE     ; }
 $BC2B EX DE,HL      ; {Point #R$A22E to the address into the attribute buffer
 $BC2C LD ($A22E),DE ; }
 $BC30 LD A,R        ; {Set into #REGde a pseudo-random number from 0 to 7
 $BC32 AND $07       ;
 $BC34 LD E,A        ;
 $BC35 LD D,$00      ; }
 $BC37 LD HL,$C2DF   ; {Set #REGhl to the address into attribute color for
 $BC3A ADD HL,DE     ; explosion}
 $BC3B LD A,(HL)     ; {Set #REGc to the attribute color
 $BC3C LD C,A        ; }
 $BC3D LD HL,($A22C) ; Set #REGhl to the address into the attribute file
 $BC40 LD DE,($A22E) ; Set #REGde to the address into the attribute buffer
 $BC44 CALL $BB9E    ; Draw attribte color for explosion
 $BC47 RET           ;

; Draw enemies (1/2)
;
; Used by the routine at #R$9470.
c$BC48 LD IX,$5E66     ; Set #REGix to the base address for enemy configuration
 $BC4C LD A,($A22B)    ; {Set #REGb to the max number of enemies in the current
 $BC4F LD B,A          ; room}
*$BC50 PUSH BC         ; Save #REGbc
 $BC51 LD A,(IX+$0C)   ; Check enemy status
 $BC54 OR A            ; Enemy is dead?
 $BC55 JP Z,$BD5C      ; Jump if so
 $BC58 LD A,(IX+$09)   ; check enemy type
 $BC5B AND $7F         ;
 $BC5D OR A            ; Enemy is FOOT MAN?
 $BC5E JP NZ,$BCCA     ; Jump forward if not
; Enemy is FOOT MAN
 $BC61 LD HL,$8198     ; Set #REGhl to address pointer for FOOT MAN graphic
                       ; data
 $BC64 LD A,(IX+$03)   ; Check jumping state for FOOT MAN
 $BC67 OR A            ; is jumping?
 $BC68 JP NZ,$BC72     ; Jump if so?
 $BC6B LD A,(IX+$06)   ; Check falling state for FOOT MAN
 $BC6E OR A            ; is falling?
 $BC6F JP Z,$BC75      ; Jump if not
*$BC72 LD HL,$9180     ; Point #REGhl to address pointer to graphic data for
                       ; FOOTMAN falling or jumping
*$BC75 LD (IX+$16),L   ; {Set address for enemy graphic data
 $BC78 LD (IX+$17),H   ; }
 $BC7B LD A,(IX+$12)   ; {FOOTMAN walker is crouched?
 $BC7E CP $02          ; }
 $BC80 JP Z,$BCCA      ; Jump forward and no fire?
 $BC83 BIT 7,(IX+$09)  ; Check type of FOOT MAN
 $BC87 JP Z,$BC95      ; Jump if FOOT MAN Walking
; FOOT MAN is crouched and check if will fire the weapon
 $BC8A CALL $A51D      ; Computes random number on #REGa
 $BC8D CP $F0          ; {no fire weapon if random number is < $F0
 $BC8F JP C,$BCCA      ; }
 $BC92 JP $BC9D        ; Jump to fire weapon
; FOOT MAN is walking and check if will fire the weapon
*$BC95 CALL $A51D      ; Computes random number on #REGa
 $BC98 CP $FE          ; {no fire weapon if random number is < $FE
 $BC9A JP C,$BCCA      ; }
; FOOT MAN fire the weapon
*$BC9D CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BCA0 LD A,(IX+$00)   ; {Set x-position of enemy in #R$A22C
 $BCA3 LD ($A22C),A    ; }
 $BCA6 XOR A           ; {Set #R$A1ED to the type of projectile for the enemy
 $BCA7 LD ($A1ED),A    ; }
 $BCAA LD A,$0E        ; Set #REGa to the increment of y-position for the
                       ; projectile of FOOT MAN walking
 $BCAC BIT 7,(IX+$09)  ; is FOOT MAN walking?
 $BCB0 JP Z,$BCB5      ; Jump if so
 $BCB3 LD A,$11        ; Set #REGa to the increment of y-position for the
                       ; projectile of FOOT MAN crouched
*$BCB5 PUSH AF         ; Save #REGaf
 $BCB6 CALL $B5D4      ; Create a new laser projectile for FOOT MAN
 $BCB9 LD (IY+$05),$00 ; Set y-delta of projectile to $00
 $BCBD CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BCC0 POP AF          ; Restore #REGaf
 $BCC1 INC A           ; {Increment projectile y-position
 $BCC2 INC A           ; }
 $BCC3 CALL $B5D4      ; Create a new laser projectile for FOOT MAN
 $BCC6 LD (IY+$05),$00 ; Set y-delta of projectile to $00
; Prepares to draw the enemy
*$BCCA LD A,(IX+$00)   ; {Set #R$A248 to the x-position of the enemy
 $BCCD LD ($A248),A    ; }
 $BCD0 LD A,(IX+$01)   ; {Set #R$A249 to the y-position of the enemy
 $BCD3 LD ($A249),A    ; }
 $BCD6 LD A,(IX+$0E)   ; {Set #R$A24A to the width (in bytes) of the enemy
 $BCD9 LD ($A24A),A    ; sprite}
 $BCDC LD A,(IX+$0F)   ; {Set #R$A24B to the height (in pixels) of the enemy
 $BCDF LD ($A24B),A    ; sprite}
 $BCE2 LD A,(IX+$09)   ; {Set #R$A1CC to the enemy type
 $BCE5 LD ($A1CC),A    ; }
 $BCE8 LD L,(IX+$04)   ; {Set #$A1CD to the graphic data address for the enemy
 $BCEB LD H,(IX+$05)   ; (static - not animated)
 $BCEE LD ($A1CD),HL   ; }
 $BCF1 LD L,(IX+$0A)   ; {Set #REGhl to address pointer of base address for
 $BCF4 LD H,(IX+$0B)   ; animated sprite}
 $BCF7 LD E,(IX+$16)   ; {Set #REGde to address pointer for animation offset
 $BCFA LD D,(IX+$17)   ; based on previous address}
 $BCFD LD A,(IX+$09)   ; Set #REGa to enemy type
 $BD00 AND $7F         ; {is enemy type is $08 (UNKNOWN) set #REGa to enemy
 $BD02 CP $08          ; direction to $00 (right) and jump to draw enemy
 $BD04 JP NZ,$BD0B     ;
 $BD07 XOR A           ;
 $BD08 JP $BD0E        ; }
*$BD0B LD A,(IX+$02)   ; Set #REGa to enemy direction
*$BD0E CALL $B296      ; Draw the enemy
 $BD11 CALL $9F15      ; Handle FOOT MAN teleporting
 $BD14 CALL $C627      ; Handle FOOT MAN walking/crouch state change
 $BD17 CALL $C5E8      ; Handle FOOT MAN walking/stand-by state change
 $BD1A LD A,(IX+$09)   ; {Enemy destroyed?
 $BD1D CP $FF          ; }
 $BD1F JP Z,$C059      ; Handle explosion
 $BD22 CP $06          ; Foot Man is dying?
 $BD24 JP Z,$C032      ; Handle dying Foot Man 6
; This entry point is used by the routine at #R$C032.
*$BD27 LD A,(IX+$09)   ; {Object type is bubble?
 $BD2A CP $FE          ; }
 $BD2C CALL Z,$C1CB    ; Handle bubble bouncing and burst
 $BD2F LD A,(IX+$09)   ; {Check enemy type
 $BD32 AND $7F         ; }
 $BD34 CP $09          ; is BULB?
 $BD36 JP Z,$BFA8      ; Handle BULB
 $BD39 CP $04          ; is PINE?
 $BD3B JP Z,$BE22      ; Handle PINE
 $BD3E CP $03          ; is BRAIN?
 $BD40 JP Z,$BDF2      ; Handle BRAIN?
 $BD43 CP $02          ; is DROP?
 $BD45 JP Z,$BD67      ; Handle DROP
 $BD48 CP $05          ; is PLANT?
 $BD4A JP Z,$BEF1      ; Handle PLANT
 $BD4D CALL $C691      ; Handler for FOOT MAN jumping
 $BD50 CALL $C721      ; Handler for FOOT MAN falling
 $BD53 CALL $C794      ; Obtain the tile type address pointer under the entity
 $BD56 CALL $C2E7      ; Handler for lateral movement
; This entry point is used by the routines at #R$BEC1, #R$BEE0, #R$BEF1,
; #R$BF76, #R$BF95 and #R$BFA8.
*$BD59 CALL $CFB5      ; Handle collision detection of enemy with Rex and
                       ; projectiles
; This entry point is used by the routine at #R$C059.
*$BD5C LD DE,$001B     ; {Point #REGix to the next enemy configuration
 $BD5F ADD IX,DE       ; }
 $BD61 POP BC          ; Restore #REGbc
 $BD62 DEC B           ; Decrement enemy counter
 $BD63 JP NZ,$BC50     ; If there are enemies on the room go back and draw them
 $BD66 RET             ; Return if not
; Handle DROP
*$BD67 LD A,(IX+$11)   ; Check DROP state
 $BD6A OR A            ; is DROP in ceil standing-by?
 $BD6B JP Z,$BDDA      ; Jump if so
 $BD6E CP $01          ; is DROP in animation state hanging from ceil?
 $BD70 JP Z,$BDAA      ; Jump if so
 $BD73 CP $02          ; is DROP free falling?
 $BD75 JP Z,$BD80      ; Jump if so
 $BD78 CP $03          ; is DROP in animation state impacting ground?
 $BD7A JP Z,$BDAA      ; Jump if so
 $BD7D JP $BD59        ; Jump back and process next enemy
; DROP is free falling
*$BD80 LD A,(IX+$01)   ; {Increment y-position of DROP
 $BD83 ADD A,$08       ;
 $BD85 LD (IX+$01),A   ; }
 $BD88 CP $B0          ; {if y-position of DROP greater than 176 jump to hide
 $BD8A JP NC,$BDEB     ; DROP}
 $BD8D CALL $C794      ; Obtain the tile type address pointer under the entity
 $BD90 LD A,(HL)       ; {Check if tile type is background
 $BD91 CALL $CE17      ; }
 $BD94 JP NZ,$BD9F     ; Jump if not
 $BD97 INC HL          ; {Increase address into tile type buffer and check next
 $BD98 LD A,(HL)       ; tile type
 $BD99 CALL $CE17      ; }
 $BD9C JP Z,$BD59      ; Jump back and process next enemy if tile type is
                       ; background
; ground impacting
*$BD9F LD (IX+$11),$03 ; Set state to ground impacting
 $BDA3 LD (IX+$12),$04 ; Set state change counter
 $BDA7 JP $BD59        ; Jump back and process next enemy
; DROP in animation state: hanging from ceil or impacting ground
*$BDAA LD L,(IX+$04)   ; {Poin to the next graphic data
 $BDAD LD H,(IX+$05)   ;
 $BDB0 LD DE,$0020     ;
 $BDB3 ADD HL,DE       ;
 $BDB4 LD (IX+$04),L   ;
 $BDB7 LD (IX+$05),H   ; }
 $BDBA DEC (IX+$12)    ; Decrement state change
 $BDBD JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BDC0 LD A,(IX+$11)   ; {Jump forward if DROP is impacting ground
 $BDC3 CP $03          ;
 $BDC5 JP Z,$BDCF      ; }
 $BDC8 LD (IX+$11),$02 ; Set state for free falling
 $BDCC JP $BD59        ; Jump back and process next enemy
*$BDCF LD (IX+$11),$04 ; Set state to DROP in ground
 $BDD3 LD (IX+$12),$03 ; Set state counter
 $BDD7 JP $BD59        ; Jump back and process next enemy
; DROP in ceil standing-by
*$BDDA DEC (IX+$12)    ; Decrement state change counter
 $BDDD JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BDE0 LD (IX+$11),$01 ; Set state to drop animation hanging from ceil
 $BDE4 LD (IX+$12),$03 ; Set state change counter
 $BDE8 JP $BD59        ; Jump back and process next enemy
; Hide DROP
*$BDEB LD (IX+$0C),$00 ; Hide DROP
 $BDEF JP $BD59        ; Jump back and process next enemy
; Handle BRAIN
*$BDF2 LD A,(IX+$12)   ; {Decrement recover counter
 $BDF5 DEC A           ;
 $BDF6 LD (IX+$12),A   ; }
 $BDF9 OR A            ; {Return if recover counter is not zero
 $BDFA JP NZ,$BD59     ; }
; recover BRAIN
 $BDFD LD (IX+$12),$04 ; Reset recover counter
 $BE01 LD A,(IX+$11)   ; {Decrement wound counter if greater than 0 or jump to
 $BE04 DEC A           ; process next enemy if not
 $BE05 CP $FF          ;
 $BE07 JP Z,$BD59      ;
 $BE0A LD (IX+$11),A   ; }
 $BE0D LD L,(IX+$04)   ; {Point to the next graphic data
 $BE10 LD H,(IX+$05)   ;
 $BE13 LD DE,$0020     ;
 $BE16 AND A           ;
 $BE17 SBC HL,DE       ;
 $BE19 LD (IX+$04),L   ;
 $BE1C LD (IX+$05),H   ; }
 $BE1F JP $BD59        ; Jump to process next enemy
; Handle PINE
*$BE22 LD A,(IX+$11)   ; Check PINE state
 $BE25 OR A            ; is PINE moving downwards?
 $BE26 JP Z,$BE43      ; Jump if so
 $BE29 CP $01          ; is PINE moving upwards?
 $BE2B JP Z,$BE6B      ; Jump if so
; check for PINE animation
*$BE2E LD A,(IX+$12)   ; Check animation state
 $BE31 CP $02          ; is expanding?
 $BE33 JP Z,$BE86      ; Jump if so
 $BE36 CP $03          ; is retracting?
 $BE38 JP Z,$BEC1      ; Jump if so
 $BE3B CP $04          ; is holding?
 $BE3D JP Z,$BEE0      ; Jump if so
 $BE40 JP $BD59        ; Jump to process next enemy
; PINE is moving downwards
*$BE43 LD A,(IX+$01)   ; {Increment y-position
 $BE46 INC A           ;
 $BE47 LD (IX+$01),A   ; }
 $BE4A CP $A8          ; {If y-position is greater than 168 then jump to change
 $BE4C JP NC,$BE60     ; direction}
 $BE4F CALL $BEAD      ; Try to active PINE animation
; check for collision
 $BE52 CALL $C794      ; Obtain the tile type address pointer under the entity
*$BE55 INC HL          ; Increase address into tile type buffer
 $BE56 LD A,(HL)       ; {If tile type is not 'background' jump to change
 $BE57 OR A            ; direction
 $BE58 JP NZ,$BE60     ; }
 $BE5B INC HL          ; Increase address into tile type buffer
 $BE5C LD A,(HL)       ; Check for tile type
 $BE5D JP Z,$BE2E      ; Jump back and check for PINE animation if is a
                       ; background tile
; change PINE direction
*$BE60 LD A,(IX+$11)   ; {Change PINE direction
 $BE63 XOR $01         ;
 $BE65 LD (IX+$11),A   ; }
 $BE68 JP $BE2E        ; Jump to handle PINE animation
; PINE is moving upwards
*$BE6B LD A,(IX+$01)   ; {Decrement y-position
 $BE6E DEC A           ;
 $BE6F LD (IX+$01),A   ; }
 $BE72 CP $10          ; {If y-position is less than 16 then jump to change
 $BE74 JP C,$BE60      ; direction}
 $BE77 CALL $BEAD      ; Try to active PINE animation
 $BE7A CALL $C794      ; Obtain the tile type address pointer under the entity
 $BE7D LD DE,$0040     ; {Point to the tile type over the PINE sprite
 $BE80 AND A           ;
 $BE81 SBC HL,DE       ; }
 $BE83 JP $BE55        ; Jump to check for collision
; PINE expanding animation
*$BE86 LD L,(IX+$04)   ; {Point to the next graphic data
 $BE89 LD H,(IX+$05)   ;
 $BE8C LD DE,$0020     ;
 $BE8F ADD HL,DE       ;
 $BE90 LD (IX+$04),L   ;
 $BE93 LD (IX+$05),H   ; }
 $BE96 DEC (IX+$13)    ; Decrement state change counter
 $BE99 JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BE9C LD (IX+$12),$04 ; Change state animation to holding
 $BEA0 CALL $A51D      ; {Computes a random number between 4 and 11
 $BEA3 AND $07         ;
 $BEA5 ADD A,$04       ; }
 $BEA7 LD (IX+$13),A   ; Set this number to the state change counter
 $BEAA JP $BD59        ; Jump back to process next enemy
; Try to active PINE animation
*$BEAD LD A,(IX+$12)   ; {Return if state animation is not standing-by
 $BEB0 OR A            ;
 $BEB1 RET NZ          ; }
 $BEB2 CALL $A51D      ; {Return if generated random number is greater than 20
 $BEB5 CP $14          ;
 $BEB7 RET NC          ; }
 $BEB8 LD (IX+$13),$02 ; Set state change counter
 $BEBC LD (IX+$12),$02 ; Change state animation to expanding
 $BEC0 RET             ;
; PINE is retracting
*$BEC1 LD L,(IX+$04)   ; {Point to the next graphic data
 $BEC4 LD H,(IX+$05)   ;
 $BEC7 LD DE,$0020     ;
 $BECA AND A           ;
 $BECB SBC HL,DE       ;
 $BECD LD (IX+$04),L   ;
 $BED0 LD (IX+$05),H   ; }
 $BED3 DEC (IX+$13)    ; Decrement state change counter
 $BED6 JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BED9 LD (IX+$12),$00 ; Set state animation to standing-by
 $BEDD JP $BD59        ; Jump to process next enemy
; PINE is holding
*$BEE0 DEC (IX+$13)    ; Decrement state change counter
 $BEE3 JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BEE6 LD (IX+$13),$02 ; Reset state change counter
 $BEEA LD (IX+$12),$03 ; Set state animation to retracting
 $BEEE JP $BD59        ; Jump to process next enemy
; Handle PLANT
*$BEF1 LD A,(IX+$11)   ; Check PLANT state
 $BEF4 OR A            ; is stand-by?
 $BEF5 JP Z,$BF95      ; Jump if so
 $BEF8 CP $01          ; is opening?
 $BEFA JP Z,$BF05      ; Jump if so
 $BEFD CP $02          ; is closing?
 $BEFF JP Z,$BF76      ; Jump if so
 $BF02 JP $BD59        ; Jump back and process next enemy
; PLANT is opening
*$BF05 LD L,(IX+$04)   ; {Point address to the next graphic data
 $BF08 LD H,(IX+$05)   ;
 $BF0B LD DE,$0020     ;
 $BF0E ADD HL,DE       ;
 $BF0F LD (IX+$04),L   ;
 $BF12 LD (IX+$05),H   ; }
 $BF15 DEC (IX+$12)    ; Decrement state change counter
 $BF18 JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BF1B LD (IX+$11),$02 ; Set state to closing
 $BF1F LD (IX+$12),$06 ; Set state change counter
; fire seeds
 $BF23 LD A,$04        ; {Set projectile type to spray
 $BF25 LD ($A1ED),A    ; }
 $BF28 CALL $A51D      ; {Generate a random number between 1 and 8 in #REGb to
 $BF2B AND $07         ; determine the number of projectiles to fire
 $BF2D INC A           ;
 $BF2E LD B,A          ; }
*$BF2F PUSH BC         ; Save #REGbc
 $BF30 CALL $A530      ; {Generate a random number between 0 and 3 in #REGde
 $BF33 AND $03         ;
 $BF35 LD E,A          ;
 $BF36 LD D,$00        ; }
 $BF38 LD HL,$BF4B     ; {Use this number to obtain the x-delta of the
 $BF3B ADD HL,DE       ; projectile from x-delta table
 $BF3C LD E,(HL)       ; }
 $BF3D CALL $A530      ; {Generate a random number between 0 and 3. Projectile
 $BF40 AND $03         ; duration?}
 $BF42 CALL $BF4F      ; Create a projectile for the PLANT
 $BF45 POP BC          ; Restore #REGbc
 $BF46 DJNZ $BF2F      ; Jump back until all projectiles created
 $BF48 JP $BD59        ; Jump back and process next enemy

; X-delta table for PLANT projectiles
b$BF4B DEFB $F8,$08,$F8,$00

; Draw enemies (2/2)
;
; Used by the routine at #R$BEF1.
; .
; Create projectile for PLANT
c$BF4F PUSH AF         ; {Save #REGaf and #REGde
 $BF50 PUSH DE         ; }
 $BF51 CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BF54 LD A,(IX+$00)   ; {Set x-position for the projectile
 $BF57 SUB $08         ;
 $BF59 LD ($A22C),A    ; }
 $BF5C LD A,$08        ; Set increment of y-position for the projectile
 $BF5E CALL $B5D4      ; Create a new projectile
 $BF61 LD (IY+$0B),$87 ; Set projectile type to seed plant
 $BF65 LD (IY+$0C),$00 ; Set projectile trajectory index
 $BF69 POP DE          ; Restore #REGde
 $BF6A LD (IY+$04),E   ; Set x-delta for the projectile
 $BF6D POP AF          ; Restore #REGaf
 $BF6E SLA A           ; {Computes index into table of trajectory addresses
 $BF70 SLA A           ;
 $BF72 LD (IY+$0E),A   ; }
 $BF75 RET             ;
; PLANT is closing
*$BF76 LD L,(IX+$04)   ; {Point to the next graphic data
 $BF79 LD H,(IX+$05)   ;
 $BF7C LD DE,$0020     ;
 $BF7F AND A           ;
 $BF80 SBC HL,DE       ;
 $BF82 LD (IX+$04),L   ;
 $BF85 LD (IX+$05),H   ; }
 $BF88 DEC (IX+$12)    ; Decrement state change counter
 $BF8B JP NZ,$BD59     ; Jump back and process next enemy if counter is not
                       ; zero
 $BF8E LD (IX+$11),$00 ; Set state to standing-by
 $BF92 JP $BD59        ; Jump back and process next enemy
; PLANT is standing-by
*$BF95 CALL $A51D      ; Generate a random number
 $BF98 CP $0A          ; {if number greater than 10 then jump back and process
 $BF9A JP NC,$BD59     ; next enemy}
 $BF9D LD (IX+$11),$01 ; Set Plant opening
 $BFA1 LD (IX+$12),$06 ; Set state change counter
 $BFA5 JP $BD59        ; Jump back and process next enemy
; Handle BULB
*$BFA8 LD A,(IX+$11)   ; Check status indicator
 $BFAB OR A            ; BULB state is standing-by?
 $BFAC JP Z,$C01F      ; Jump if so
 $BFAF CP $01          ; BULB state is expanding?
 $BFB1 JP Z,$BFBC      ; Jump if so
 $BFB4 CP $02          ; BULB state is retracting?
 $BFB6 JP Z,$C000      ; Jump if so
 $BFB9 JP $BD59        ; Jump back and continue processing the next enemy
; BULB is expanding
*$BFBC LD L,(IX+$04)   ; {Point to the next graphic data for the sprite
 $BFBF LD H,(IX+$05)   ;
 $BFC2 LD DE,$0020     ;
 $BFC5 ADD HL,DE       ;
 $BFC6 LD (IX+$04),L   ;
 $BFC9 LD (IX+$05),H   ; }
 $BFCC DEC (IX+$12)    ; Decrement state change counter
 $BFCF JP NZ,$BD59     ; Jump back and process next enemy if state change
                       ; counter is not zero
 $BFD2 LD (IX+$11),$02 ; Set state to retract BULB
 $BFD6 LD (IX+$12),$05 ; Set state change counter
; BULB fires weapon
 $BFDA LD A,$04        ; {Set the projectile type to spray
 $BFDC LD ($A1ED),A    ; }
 $BFDF CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BFE2 CALL $C141      ; Configure projectile | extra-left
 $BFE5 CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BFE8 CALL $C15B      ; Configure projectile | left
 $BFEB CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BFEE CALL $C181      ; Configure projectile | middle
 $BFF1 CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BFF4 CALL $C19B      ; Configure projectile | right
 $BFF7 CALL $B5B6      ; Configure weapon sound and check for weapon free slot
 $BFFA CALL $C1B3      ; Configure projectile | extra-right
 $BFFD JP $BD59        ; Jump back and process next enemy
; BULB is retracting
*$C000 LD L,(IX+$04)   ; {Point to the next graphic data for the sprite
 $C003 LD H,(IX+$05)   ;
 $C006 LD DE,$0020     ;
 $C009 AND A           ;
 $C00A SBC HL,DE       ;
 $C00C LD (IX+$04),L   ;
 $C00F LD (IX+$05),H   ; }
 $C012 DEC (IX+$12)    ; Decrement state change counter
 $C015 JP NZ,$BD59     ; Jump back and process next enemy if state change
                       ; counter is not zero
 $C018 LD (IX+$11),$00 ; Set state to stand-by BULB
 $C01C JP $BD59        ; Jump back and process next enemy
; BULB is standing-by
*$C01F CALL $A51D      ; Computes a random number
 $C022 CP $0A          ; {Jump back and process next enemy if random number is
 $C024 JP NC,$BD59     ; greater than 10}
 $C027 LD (IX+$11),$01 ; Change state to expanding
 $C02B LD (IX+$12),$05 ; Set state change counter
 $C02F JP $BD59        ; Jump back and process next enemy
; Handle Foot Man dying 6
*$C032 LD A,(IX+$11)   ; Set #REGa to state change counter
 $C035 CP $04          ; counter is 4?
 $C037 JP NZ,$C04C     ; Jump if not
 $C03A LD HL,$AF7A     ; {Set address for animation offsets of dying foot man
 $C03D LD (IX+$0A),L   ;
 $C040 LD (IX+$0B),H   ; }
 $C043 LD HL,$82B8     ; {Set graphic data for dying Foot man 7
 $C046 LD (IX+$16),L   ;
 $C049 LD (IX+$17),H   ; }
*$C04C DEC (IX+$11)    ; Decrement state change counter
 $C04F JP NZ,$BD27     ; If not zero jump back and continue to process other
                       ; enemies
 $C052 LD (IX+$09),$07 ; Set enemy type to FOOT MAN dying 7
 $C056 JP $BD27        ; Jump back and continue to process other enemies
; Handle explosion and configure gift: bubble, smartbomb or question
; .
; Handle debris expansion
*$C059 LD HL,$AA57     ; Set #REGhl to the offset of positions for debris 1
 $C05C CALL $C25E      ; Handle debris movement and draw it
 $C05F LD HL,$AA67     ; Set #REGhl to the offset of positions for debris 2
 $C062 CALL $C25E      ; Handle debris movement and draw it
 $C065 LD HL,$AA77     ; Set #REGhl to the offset of positions for debris 3
 $C068 CALL $C25E      ; Handle debris movement and draw it
 $C06B LD HL,$AA87     ; Set #REGhl to the offset of positions for debris 4
 $C06E CALL $C25E      ; Handle debris movement and draw it
 $C071 LD HL,$AA97     ; Set #REGhl to the offset of positions for debris 5
 $C074 CALL $C25E      ; Handle debris movement and draw it
 $C077 LD HL,$AAA7     ; Set #REGhl to the offset of positions for debris 6
 $C07A CALL $C25E      ; Handle debris movement and draw it
 $C07D INC (IX+$03)    ; Increment explosion debris counter
; Draw central explosion
 $C080 LD A,(IX+$00)   ; {Set #R$A248 the x-pixel-position of the explosion
 $C083 LD ($A248),A    ; }
 $C086 LD A,(IX+$01)   ; {Set #R$A249 the x-pixel-position of the explosion
 $C089 LD ($A249),A    ; }
 $C08C CALL $BC17      ; Draw random attribute color for explosion
 $C08F LD L,(IX+$04)   ; {Increment the graphic data address for the explosion
 $C092 LD H,(IX+$05)   ;
 $C095 LD DE,$0048     ;
 $C098 ADD HL,DE       ;
 $C099 LD (IX+$04),L   ;
 $C09C LD (IX+$05),H   ; }
 $C09F DEC (IX+$0D)    ; Decrement explosion counter
 $C0A2 JP NZ,$BD5C     ; Jump to the next enemy configuration if not zero
                       ; explosion has ended, configure gift: bubble, smartbomb
                       ; or question
 $C0A5 LD HL,($A22C)   ; Set #REGhl to the address into the attribute file for
                       ; the explosion
 $C0A8 LD DE,($A22E)   ; Set #REGde to the address into the attribute buffer
                       ; for the explosion
 $C0AC CALL $BBEA      ; Reset attribute color when explosion ended
 $C0AF LD A,(IX+$00)   ; {x-pixel-position of sprite is less than 24?
 $C0B2 CP $18          ; }
 $C0B4 JP C,$C11C      ; Jump if so
 $C0B7 LD (IX+$09),$FE ; Set Enemy configuration to energy bubble
 $C0BB LD (IX+$0F),$10 ; Set sprite height
 $C0BF LD (IX+$0E),$02 ; Set sprite width
 $C0C3 LD A,(IX+$01)   ; {Add 8 pixels to y-pixel-position
 $C0C6 ADD A,$08       ;
 $C0C8 LD (IX+$01),A   ; }
; configure big bubble
 $C0CB LD (IX+$03),$00 ; Reset configuration
 $C0CF LD (IX+$06),$00 ; Reset configuration
 $C0D3 LD (IX+$11),$64 ; Set bubble counter to $64
 $C0D7 LD (IX+$10),$00 ; Reset configuration
 $C0DB LD HL,$8718     ; Set #REGhl to graphic data address for big bubble
 $C0DE LD (IX+$12),L   ; {Set graphic data address for bubble
 $C0E1 LD (IX+$13),H   ;
 $C0E4 LD (IX+$04),L   ;
 $C0E7 LD (IX+$05),H   ; }
 $C0EA LD A,(IX+$15)   ; Check bubble type
 $C0ED CP $FF          ; No bubble?
 $C0EF JP Z,$C11C      ; Jump if so
 $C0F2 CALL $A51D      ; Set #REGa to a pseudo-random number
 $C0F5 CP $03          ; is less than 3?
 $C0F7 JP C,$C123      ; you are lucky, you got an smartbomb
 $C0FA CP $06          ; is less than 6?
 $C0FC JP C,$C12D      ; you are lucky, you got a question mark (random gift)
 $C0FF LD A,(IX+$15)   ; {is bubble type big?
 $C102 OR A            ; }
 $C103 JP NZ,$BD5C     ; Jump if so and process next object
; configure small bubble
 $C106 LD HL,$87D8     ; Set #REGhl to graphic data for small bubble
 $C109 LD (IX+$12),L   ; {Set graphic data for the bubble
 $C10C LD (IX+$13),H   ; }
 $C10F LD (IX+$11),$8C ; Set bubble counter to $8C
 $C113 LD (IX+$04),L   ; {Set graphic data for the bubble
 $C116 LD (IX+$05),H   ; }
 $C119 JP $BD5C        ; Jump to the next enemy configuration
; configure no bubble
*$C11C LD (IX+$0C),$00 ; Set object live/visibility to dead/not visible
 $C120 JP $BD5C        ; Jump to the next enemy configuration
; configure smartbomb
*$C123 LD (IX+$09),$FD ; Set object type to smartbomb
 $C127 LD HL,$8BA0     ; Set graphic data for smartbomb
 $C12A JP $C134        ; Jump forward
; configure question
*$C12D LD (IX+$09),$FC ; Set object type to question
 $C131 LD HL,$8BC0     ; Set graphic data for question
*$C134 LD (IX+$04),L   ; {Copy address to object configuration
 $C137 LD (IX+$05),H   ; }
 $C13A LD (IX+$02),$01 ; Set sprite to reverse
 $C13E JP $BD5C        ; Jump to the next enemy configuration

; Configure BULB projectiles
;
; Used by the routine at #R$BFA8.
; .
; Configure extra-left projectile
c$C141 PUSH AF         ; Save #REGaf
 $C142 LD A,(IX+$00)   ; {Set into #R$A22C the x-position of projectile based
 $C145 SUB $18         ; on BULB x-position
 $C147 LD ($A22C),A    ; }
 $C14A LD A,$14        ; Set #REGa the increment for the y-position of the
                       ; projectile
 $C14C CALL $B5D4      ; Create new projectile
 $C14F LD HL,$FFFF     ; Set into #REGhl the offset for the address pointer
                       ; into room data buffer
 $C152 LD (IY+$04),$F8 ; Set the x-delta for the projectile
 $C156 LD A,$02        ; Set the y-delta for the projectile
 $C158 JP $C172        ; Jump to finish configuration
; Configure left projectile
*$C15B PUSH AF         ; Save #REGaf
 $C15C LD A,(IX+$00)   ; {Set into #R$A22C the x-position of projectile based
 $C15F SUB $18         ; on BULB x-position
 $C161 LD ($A22C),A    ; }
 $C164 LD A,$19        ; Set #REGa the increment for the y-position of the
                       ; projectile
 $C166 CALL $B5D4      ; Create new projectile
 $C169 LD HL,$FFFF     ; Set into #REGhl the offset for the address pointer
                       ; into room data buffer
 $C16C LD (IY+$04),$F8 ; Set the x-delta for the projectile
 $C170 LD A,$08        ; Set the y-delta for the projectile
; This entry point is used by the routines at #R$C141, #R$C181, #R$C19B and
; #R$C1B3.
*$C172 LD (IY+$07),L   ; {Set the offset into room graphic data buffer
 $C175 LD (IY+$08),H   ; }
 $C178 LD (IY+$05),$00 ; Set y-delta for projectile
 $C17C CALL $B530      ; Computes offset into the room graphic data based on
                       ; projectile y-delta
 $C17F POP AF          ; Restore #REGaf
 $C180 RET             ;
; Configure middle projectile
*$C181 PUSH AF         ; Save #REGaf
 $C182 LD A,(IX+$00)   ; {Set into #R$A22C the x-position of projectile based
 $C185 SUB $10         ; on BULB x-position
 $C187 LD ($A22C),A    ; }
 $C18A LD A,$19        ; Set #REGa the increment for the y-position of the
                       ; projectile
 $C18C CALL $B5D4      ; Create new projectile
 $C18F LD HL,$0000     ; Set into #REGhl the offset for the address pointer
                       ; into room data buffer
 $C192 LD (IY+$04),$00 ; Set the x-delta for the projectile
 $C196 LD A,$08        ; Set the y-delta for the projectile
 $C198 JP $C172        ; Jump to finish configuration
; Configure right projectile
*$C19B PUSH AF         ; Save #REGaf
 $C19C LD A,(IX+$00)   ; {Set into #R$A22C the x-position of projectile based
 $C19F LD ($A22C),A    ; on BULB x-position}
 $C1A2 LD A,$19        ; Set #REGa the increment for the y-position of the
                       ; projectile
 $C1A4 CALL $B5D4      ; Create new projectile
 $C1A7 LD HL,$0001     ; Set into #REGhl the offset for the address pointer
                       ; into room data buffer
 $C1AA LD (IY+$04),$08 ; Set the x-delta for the projectile
 $C1AE LD A,$06        ; Set the y-delta for the projectile
 $C1B0 JP $C172        ; Jump to finish configuration
; Configure extra-right projectile
*$C1B3 PUSH AF         ; Save #REGaf
 $C1B4 LD A,(IX+$00)   ; {Set into #R$A22C the x-position of projectile based
 $C1B7 LD ($A22C),A    ; on BULB x-position}
 $C1BA LD A,$14        ; Set #REGa the increment for the y-position of the
                       ; projectile
 $C1BC CALL $B5D4      ; Create new projectile
 $C1BF LD HL,$0001     ; Set into #REGhl the offset for the address pointer
                       ; into room data buffer
 $C1C2 LD (IY+$04),$08 ; Set the x-delta for the projectile
 $C1C6 LD A,$04        ; Set the y-delta for the projectile
 $C1C8 JP $C172        ; Jump to finish configuration

; Handle bubble bouncing and burst
;
; Used by the routine at #R$BC48.
c$C1CB LD A,(IX+$10)   ; {Increment graphic data counter for bubble
 $C1CE INC A           ;
 $C1CF LD (IX+$10),A   ; }
 $C1D2 LD E,A          ; {Set #REGhl to the corresponding poisition in graphic
 $C1D3 LD D,$00        ; data offset table for bubble
 $C1D5 LD HL,$C253     ;
 $C1D8 ADD HL,DE       ; }
 $C1D9 LD A,(HL)       ; Set #REGa to the graphic data offset
 $C1DA CP $FF          ; is $FF (end marker)?
 $C1DC JP NZ,$C1E4     ; Jump forward if not
 $C1DF LD (IX+$10),$01 ; Set graphic data offset counter to 1. Reinit counter
 $C1E3 XOR A           ; Set #REGa=0
*$C1E4 LD E,A          ; {Set #REGhl to the graphic data of the bubble
 $C1E5 LD D,$00        ;
 $C1E7 LD L,(IX+$12)   ;
 $C1EA LD H,(IX+$13)   ;
 $C1ED ADD HL,DE       ; }
 $C1EE LD A,(IX+$06)   ; {is bubble falling?
 $C1F1 OR A            ; }
 $C1F2 JP NZ,$C222     ; Jump if so
 $C1F5 LD A,(IX+$11)   ; Check bubble counter
 $C1F8 CP $14          ; is bubble counter < 20?
 $C1FA JP C,$C200      ; Jump forward if so
 $C1FD JP $C22C        ; Jump to finish bubble handler
; check bubble for burst
*$C200 LD A,(IX+$11)   ; check bubble counter
 $C203 CP $02          ; is 2?
 $C205 JP Z,$C24D      ; Jump to set graphic data for bubble final burst (2)
 $C208 CP $03          ; is 3?
 $C20A JP Z,$C247      ; Jump to set graphic data for bubble burst (3)
 $C20D CP $04          ; is 4?
 $C20F JP Z,$C241      ; Jump to set graphic data for bubble burst (4)
 $C212 CP $05          ; is 5?
 $C214 JP Z,$C23B      ; Jump to set graphic data for bubble burst (5)
 $C217 LD A,(IX+$10)   ; check graphic data counter of bubble
 $C21A CP $02          ; is 2?
 $C21C JP NZ,$C22C     ; Jump forward if not
; Bubble stop bouncing
 $C21F DEC (IX+$10)    ; Decrement graphic data counter
*$C222 LD L,(IX+$12)   ; {Increment graphic data to sprite bubble non-bouncing
 $C225 LD H,(IX+$13)   ; (falling or stopped in floor)
 $C228 LD DE,$0040     ;
 $C22B ADD HL,DE       ; }
; Finish configuring bubble
*$C22C LD (IX+$04),L   ; {Set corresponding graphic data of bubble
 $C22F LD (IX+$05),H   ; }
 $C232 DEC (IX+$11)    ; Decrement bubble counter
 $C235 RET NZ          ; Return if not zero
 $C236 LD (IX+$0C),$00 ; Set dead/non-visible bubble
 $C23A RET             ;
*$C23B LD HL,$8898     ; Set #REGhl to graphics data for bubble burst (5)
 $C23E JP $C22C        ; Jump back and finish configuring bubble
*$C241 LD HL,$88B8     ; Set #REGhl to graphics data for bubble burst (4)
 $C244 JP $C22C        ; Jump back and finish configuring bubble
*$C247 LD HL,$88D8     ; Set #REGhl to graphics data for bubble burst (3)
 $C24A JP $C22C        ; Jump back and finish configuring bubble
*$C24D LD HL,$88F8     ; Set #REGhl to graphics data for bubble final burst (2)
 $C250 JP $C22C        ; Jump back and finish configuring bubble

; Bubble graphic data offsets
b$C253 DEFB $00,$20,$40,$60,$80,$A0,$80,$60
 $C25B DEFB $40,$20,$FF

; Handle explosion debris movement and draw it
;
; Used by the routine at #R$C059.
c$C25E LD A,R         ; {Border color to black?
 $C260 SLA A          ;
 $C262 AND $F8        ;
 $C264 OUT ($FE),A    ; }
 $C266 LD A,(IX+$03)  ; Set #REGa to the explosion counter
 $C269 SLA A          ; {Save at #R$A22C the position of the offset for the
 $C26B LD ($A22C),A   ; current explosion counter}
 $C26E LD E,A         ; {Point #REGhl to the corresponent address into offset
 $C26F LD D,$00       ; of debris position
 $C271 ADD HL,DE      ; }
 $C272 LD A,(IX+$00)  ; {Computes the x-byte-position in room of the debris
 $C275 SRL A          ;
 $C277 SRL A          ;
 $C279 SRL A          ;
 $C27B ADD A,(HL)     ;
 $C27C SUB $07        ; }
 $C27E CP $01         ; Position is out of bounds of the screen-left border?
 $C280 JP C,$C2C7     ; Jump forward is so
 $C283 CP $1E         ; Position is out of bounds of the screen-right border?
 $C285 JP NC,$C2C7    ; Jump forward if so
*$C288 LD ($A248),A   ; Set #R$A248 the x-byte-position of the debris
 $C28B INC HL         ; {Computes the y-pixel-position in room of the debris
 $C28C LD A,(HL)      ;
 $C28D ADD A,(IX+$01) ;
 $C290 SUB $30        ; }
 $C292 CP $08         ; Position is out of bounds of the screen-top border?
 $C294 JP C,$C2D3     ; Jump forward is so
 $C297 CP $A0         ; Position is out of bounds of the screen-bottom border?
 $C299 JP NC,$C2D3    ; Jump forward is so
*$C29C LD ($A249),A   ; Set #R$A249 the y-pixel-position of the debris
 $C29F LD L,A         ; {Compute into #REGhl the address of the debris into the
 $C2A0 LD H,$00       ; room graphic data
 $C2A2 ADD HL,HL      ;
 $C2A3 ADD HL,HL      ;
 $C2A4 ADD HL,HL      ;
 $C2A5 ADD HL,HL      ;
 $C2A6 ADD HL,HL      ;
 $C2A7 LD A,($A248)   ;
 $C2AA LD E,A         ;
 $C2AB LD D,$00       ;
 $C2AD ADD HL,DE      ;
 $C2AE LD DE,$EAFF    ;
 $C2B1 ADD HL,DE      ; }
 $C2B2 PUSH HL        ; Save #REGhl
 $C2B3 LD A,($A22C)   ; {Compute into #REGde the address for the graphic data
 $C2B6 SLA A          ; of the debris
 $C2B8 SLA A          ;
 $C2BA LD E,A         ;
 $C2BB LD D,$00       ;
 $C2BD LD HL,$AAB7    ;
 $C2C0 ADD HL,DE      ;
 $C2C1 EX DE,HL       ; }
 $C2C2 POP HL         ; Restore #REGhl
 $C2C3 CALL $A69C     ; Draw the debris
 $C2C6 RET            ;
*$C2C7 XOR A          ; Set #REGa=0
 $C2C8 LD ($A248),A   ; Set x-byte-position of the debris to 0
 $C2CB LD A,$20       ; {Set y-pixel-position of the debris to $20
 $C2CD LD ($A249),A   ; }
 $C2D0 JP $C288       ; Jump back
*$C2D3 LD A,$20       ; {Set y-pixel-position of the debris to $20
 $C2D5 LD ($A249),A   ; }
 $C2D8 XOR A          ; Set #REGa=0
 $C2D9 LD ($A248),A   ; Set x-byte-position of the debris to 0
 $C2DC JP $C29C       ; Jump back

; List of 'random' attribute colors for explosion
b$C2DF DEFB $02,$03,$06,$02,$03,$06,$06,$02

; Handle enemy lateral movement (1/2)
;
; Used by the routine at #R$BC48.
c$C2E7 LD A,(IX+$09) ; Check enemy type
 $C2EA CP $FE        ; {Return if bubble
 $C2EC RET Z         ; }
 $C2ED CP $FD        ; {Return if smartbomb
 $C2EF RET Z         ; }
 $C2F0 CP $FC        ; {Return if question
 $C2F2 RET Z         ; }
 $C2F3 AND $7F       ; {Jump forward to handle TRIANGLE
 $C2F5 CP $08        ;
 $C2F7 CP $0E        ;
 $C2F9 JP Z,$C3C1    ; }
 $C2FC OR A          ; {Does nothing
 $C2FD JP NZ,$C300   ; }
; lateral movement for FOOT MAN and CATERPILLAR
*$C300 LD A,(IX+$02) ; {Jump to handle right movement
 $C303 OR A          ;
 $C304 JP Z,$C433    ; }
 $C307 JP $C503      ; Jump to handle left movement

; Routine not used
s$C30A XOR A
 $C30B LD (IX+$02),A
 $C30E LD A,($A24F)
 $C311 CP (IX+$00)
 $C314 RET NC
 $C315 LD A,$01
 $C317 LD (IX+$02),A
 $C31A RET
 $C31B CALL $A51D
 $C31E CP $23
 $C320 RET NC
 $C321 LD A,$04
 $C323 LD ($A1ED),A
 $C326 LD HL,$B47C
 $C329 LD B,$08
*$C32B PUSH BC
 $C32C PUSH HL
 $C32D CALL $B5B6
 $C330 CALL $B5C4
 $C333 POP HL
 $C334 CALL $B519
 $C337 POP BC
 $C338 DJNZ $C32B
 $C33A RET
 $C33B LD A,(IX+$11)
 $C33E OR A
 $C33F JP NZ,$C3A5
 $C342 LD A,(IX+$01)
 $C345 SUB (IX+$12)
 $C348 LD (IX+$01),A
 $C34B CALL $C794
 $C34E LD DE,$0040
 $C351 AND A
 $C352 SBC HL,DE
 $C354 CALL $CDF5
 $C357 JP Z,$C39C
 $C35A INC HL
 $C35B CALL $CDF5
 $C35E JP Z,$C39C
*$C361 JP Z,$C3A5
 $C364 LD A,(IX+$01)
 $C367 CP $18
 $C369 JP C,$C39C
 $C36C CP $A8
 $C36E JP NC,$C393
 $C371 CALL $A51D
 $C374 CP $07
 $C376 JP C,$C38A
 $C379 LD A,(IX+$09)
 $C37C CP $0D
 $C37E RET Z
 $C37F LD A,(IX+$12)
 $C382 INC A
 $C383 CP $05
 $C385 RET Z
 $C386 LD (IX+$12),A
 $C389 RET
*$C38A LD A,(IX+$02)
 $C38D XOR $01
 $C38F LD (IX+$02),A
 $C392 RET
*$C393 LD (IX+$11),$00
 $C397 LD (IX+$12),$01
 $C39B RET
*$C39C LD (IX+$11),$01
 $C3A0 LD (IX+$12),$01
 $C3A4 RET
*$C3A5 LD A,(IX+$01)
 $C3A8 ADD A,(IX+$12)
 $C3AB LD (IX+$01),A
 $C3AE CALL $C794
 $C3B1 CALL $CDF5
 $C3B4 JP Z,$C393
 $C3B7 INC HL
 $C3B8 CALL $CDF5
 $C3BB JP Z,$C393
 $C3BE JP $C361

; Handle TRIANGLE
;
; Used by the routine at #R$C2E7.
c$C3C1 LD A,(IX+$00)   ; {Computes new TRIANGLE x-position based on x-delta
 $C3C4 ADD A,(IX+$04)  ;
 $C3C7 LD (IX+$00),A   ; }
 $C3CA LD A,(IX+$01)   ; {Computes new TRIANGLE y-position based on y-delta
 $C3CD ADD A,(IX+$05)  ;
 $C3D0 LD (IX+$01),A   ; }
 $C3D3 LD A,(IX+$09)   ; {Enemy type $0F not exist. Never jump
 $C3D6 CP $0F          ;
 $C3D8 JP Z,$C3EA      ; }
 $C3DB LD HL,($A1B4)   ; Set #REGhl the address of the tile type buffer under
                       ; enemy
 $C3DE LD DE,$0020     ; {Check if tile type buffer on enemy position is wall
 $C3E1 AND A           ;
 $C3E2 SBC HL,DE       ;
 $C3E4 CALL $CDF5      ; }
 $C3E7 JP Z,$9807      ; Jump to destroy enemy is tile is wall
*$C3EA DEC (IX+$11)    ; Decrement state change counter
 $C3ED RET NZ          ; Return if not zero
 $C3EE LD A,R          ; {Generate a random number between 2 and 5
 $C3F0 AND $03         ;
 $C3F2 ADD A,$02       ; }
 $C3F4 LD (IX+$11),A   ; Set this number to state change counter
 $C3F7 LD A,(IX+$09)   ; {Enemy type $0F not exist. Never jump
 $C3FA CP $0F          ;
 $C3FC JP Z,$C409      ; }
 $C3FF LD A,(IX+$12)   ; {Change movement state
 $C402 XOR $01         ;
 $C404 LD (IX+$12),A   ; }
 $C407 OR A            ; {Return if no movement change state
 $C408 RET Z           ; }
*$C409 LD A,R          ; {Set #REGa a random number between 8 and 15
 $C40B AND $07         ;
 $C40D ADD A,$08       ; }
 $C40F LD (IX+$11),A   ; Reset state change counter with this number
; Set x/y-delta
 $C412 LD (IX+$04),$01 ; Set x-delta to 1
 $C416 LD A,($A24F)    ; {if x-position of Rex is less than x-position of
 $C419 CP (IX+$00)     ; TRIANGLE then set x-delta to -1
 $C41C JP NC,$C423     ;
 $C41F LD (IX+$04),$FF ; }
*$C423 LD (IX+$05),$01 ; Set y-delta to 1
 $C427 LD A,($A250)    ; {if y-position of Rex is less than y-position of
 $C42A CP (IX+$01)     ; TRIANGLE then set y-delta to -1
 $C42D RET NC          ;
 $C42E LD (IX+$05),$FF ; }
 $C432 RET             ;

; Handle enemy lateral movement (2/2)
;
; Used by the routine at #R$C2E7.
; .
; Handle movement to the right for CATERPILLAR and FOOT MAN
c$C433 LD HL,($A1B4)   ; Set #REGhl to the tile address under entity
 $C436 LD DE,$0040     ; {Set #REGhl point to tile in front-upper of entity
 $C439 AND A           ;
 $C43A SBC HL,DE       ;
 $C43C INC HL          ;
 $C43D INC HL          ; }
 $C43E CALL $CDF5      ; Check if tile is wall
 $C441 JP Z,$C4C6      ; Jump if tile is wall and change direction
 $C444 LD DE,$0020     ; {Set #REGhl point to tile in front-lower of entity
 $C447 ADD HL,DE       ; }
 $C448 CALL $CDF5      ; Check if tile is wall
 $C44B JP Z,$C4C6      ; Jump if tile is wall and change direction
 $C44E LD A,(IX+$09)   ; {Jump forward if enemy is FOOT MAN
 $C451 OR A            ;
 $C452 JP Z,$C463      ; }
 $C455 LD A,(IX+$00)   ; {Computes new x-position based on speed
 $C458 ADD A,(IX+$10)  ; }
 $C45B CP $E8          ; {Jump to handle collision with right border if
 $C45D JP NC,$C4F9     ; x-position greater than 232}
 $C460 JP $C46E        ; Jump to continue the movement
; check collision with border for FOOT MAN
*$C463 LD A,(IX+$00)   ; {Computes new x-position based on speed
 $C466 ADD A,(IX+$10)  ; }
 $C469 CP $F8          ; {Jump to handle collision with right border if
 $C46B JP NC,$C4F9     ; x-position greater than 248}
; no collision, continue movement
*$C46E LD (IX+$00),A   ; Set the new x-position
 $C471 LD (IX+$02),$00 ; Set direction to right
 $C475 LD A,(IX+$03)   ; {Return if FOOT MAN jumping
 $C478 OR A            ;
 $C479 RET NZ          ; }
 $C47A LD A,(IX+$06)   ; {Return if FOOT MAN falling
 $C47D OR A            ;
 $C47E RET NZ          ; }
 $C47F LD A,(IX+$09)   ; {Jump forward if enemy is not FOOT MAN
 $C482 OR A            ;
 $C483 JP NZ,$C4AE     ; }
 $C486 LD HL,($A1B4)   ; {Set #REGhl to the address of the tile buffer in front
 $C489 LD DE,$001E     ; of FOOT MAN
 $C48C AND A           ;
 $C48D SBC HL,DE       ; }
 $C48F LD A,(HL)       ; {if tile type is $0F then jump to handle jump of FOOT
 $C490 CP $0F          ; MAN
 $C492 JP Z,$C673      ; }
 $C495 CP $0E          ; {if tile type is $0E then jump to handle force crouch
 $C497 JP Z,$C5BF      ; of FOOT MAN - Not used in Rex (Side B)}
 $C49A CP $10          ; {if tile type is $10 then jump to handle random crouch
 $C49C CALL Z,$C598    ; of FOOT MAN}
 $C49F CP $11          ; {if tile type is $10 then jump to handle random jump
 $C4A1 CALL Z,$C5A7    ; of FOOT MAN}
 $C4A4 CP $15          ; {if tile type is $10 then jump to handle random
 $C4A6 CALL Z,$C5B4    ; telporting of FOOT MAN}
 $C4A9 CP $16          ; {if tile type is $10 then jump to handle forced
 $C4AB CALL Z,$C5BA    ; telporting of FOOT MAN}
; check the next tile under the foots of enemy
*$C4AE LD HL,($A1B4)   ; {Set #REGhl to the next tile under foots
 $C4B1 INC HL          ;
 $C4B2 INC HL          ; }
 $C4B3 LD A,(HL)       ; {Return if tile is not background
 $C4B4 OR A            ;
 $C4B5 RET NZ          ; }
 $C4B6 LD A,(IX+$09)   ; {Return if enemy is FOOT MAN
 $C4B9 AND $7F         ;
 $C4BB OR A            ;
 $C4BC RET Z           ; }
 $C4BD CP $08          ; {Remnant code. No enemies with this type
 $C4BF RET Z           ;
 $C4C0 CP $0C          ;
 $C4C2 RET Z           ;
 $C4C3 CP $0D          ;
 $C4C5 RET Z           ; }
*$C4C6 LD A,(IX+$09)   ; {Return if FOOT MAN dying
 $C4C9 CP $07          ;
 $C4CB RET Z           ;
 $C4CC CP $06          ;
 $C4CE RET Z           ; }
; change direction of enemy
*$C4CF LD A,(IX+$02)   ; {change enemy direction
 $C4D2 XOR $01         ;
 $C4D4 LD (IX+$02),A   ; }
; special case for FOOT MAN dying
*$C4D7 LD A,(IX+$09)   ; {if FOOT MAN dying then generate explosion
 $C4DA CP $07          ;
 $C4DC JP Z,$9807      ;
 $C4DF CP $06          ;
 $C4E1 JP Z,$9807      ; }
 $C4E4 CP $03          ; {Remnant code for train of Rex (Side A). Nou used in
 $C4E6 JP Z,$C4F4      ; game
 $C4E9 CP $04          ;
 $C4EB JP Z,$C4F4      ;
 $C4EE CP $05          ;
 $C4F0 JP Z,$C4F4      ;
 $C4F3 RET             ; }
; Set enemy to not visible
*$C4F4 LD (IX+$0C),$00 ; Enemy not visible
 $C4F8 RET             ;
; Handle collision with room border
*$C4F9 LD A,(IX+$09)   ; {if enemy type is FOOT MAN then jump to make FOOT MAN
 $C4FC OR A            ; invisible
 $C4FD JP Z,$C4F4      ; }
 $C500 JP $C4CF        ; if not change enemy direction
; Handle movement to the left for CATERPILLAR and FOOT MAN
*$C503 LD HL,($A1B4)   ; Set #REGhl to the tile address under entity
 $C506 LD DE,$0040     ; {Set #REGhl to the tile address in front-upper of
 $C509 AND A           ; enemy
 $C50A SBC HL,DE       ;
 $C50C DEC HL          ; }
 $C50D CALL $CDF5      ; Check if tile type is wall
 $C510 JP Z,$C588      ; Jump if it's a wall
 $C513 LD DE,$0020     ; {Increment address to tile in front-lower of enemy
 $C516 ADD HL,DE       ; }
 $C517 CALL $CDF5      ; Check if tile type is wall
 $C51A JP Z,$C588      ; Jump if it's a wall and change direction
 $C51D LD A,(IX+$00)   ; {Computes new x-position based on speed
 $C520 SUB (IX+$10)    ; }
 $C523 CP $E8          ; {if x-position is less than 24 then jump and handle
 $C525 JP NC,$C4F9     ; left collision with room border}
; no collision, continue moving
 $C528 LD (IX+$00),A   ; Set the new x-position
 $C52B LD (IX+$02),$01 ; Continue in the same direction
 $C52F LD A,(IX+$03)   ; {Return if jumping
 $C532 OR A            ;
 $C533 RET NZ          ; }
 $C534 LD A,(IX+$06)   ; {Return if falling
 $C537 OR A            ;
 $C538 RET NZ          ; }
 $C539 LD A,(IX+$09)   ; Check enemy type
 $C53C OR A            ; {Jump forward if enemy type is not FOOT MAN
 $C53D JP NZ,$C568     ; }
; handle special behavior of FOOT MAN
 $C540 LD HL,($A1B4)   ; Set #REGhl to the tile address under FOOT MAN
 $C543 LD DE,$0021     ; {Check tile type where is FOOT MAN
 $C546 AND A           ;
 $C547 SBC HL,DE       ; }
 $C549 LD A,(HL)       ; {if tile type is $0F then jump to handle jump of FOOT
 $C54A CP $0F          ; MAN
 $C54C JP Z,$C66E      ; }
 $C54F CP $0E          ; {if tile type is $0E then jump to handle force crouch
 $C551 JP Z,$C5BF      ; of FOOT MAN - Not used in Rex (Side B)}
 $C554 CP $10          ; {if tile type is $10 then jump to handle random crouch
 $C556 CALL Z,$C598    ; of FOOT MAN}
 $C559 CP $11          ; {if tile type is $10 then jump to handle random jump
 $C55B CALL Z,$C5A7    ; of FOOT MAN}
 $C55E CP $15          ; {if tile type is $10 then jump to handle random
 $C560 CALL Z,$C5B4    ; telporting of FOOT MAN}
 $C563 CP $16          ; {if tile type is $10 then jump to handle forced
 $C565 CALL Z,$C5BA    ; telporting of FOOT MAN}
; check for space under the feet in next tile
*$C568 LD HL,($A1B4)   ; {Return if next tile under a feet is not space
 $C56B DEC HL          ;
 $C56C LD A,(HL)       ;
 $C56D OR A            ;
 $C56E RET NZ          ; }
 $C56F LD A,(IX+$09)   ; Check enemy type
 $C572 AND $7F         ; {Return if FOOT MAN
 $C574 OR A            ;
 $C575 RET Z           ; }
 $C576 CP $03          ; {Remant code for train of Rex (Side A)
 $C578 RET Z           ;
 $C579 CP $04          ;
 $C57B RET Z           ;
 $C57C CP $05          ;
 $C57E RET Z           ; }
 $C57F CP $08          ; {Remnant code. No enemies with this type
 $C581 RET Z           ;
 $C582 CP $0C          ;
 $C584 RET Z           ;
 $C585 CP $0D          ;
 $C587 RET Z           ; }
; change direction
*$C588 LD A,(IX+$09)   ; {Return if FOOT MAN dying
 $C58B CP $06          ;
 $C58D RET Z           ;
 $C58E CP $07          ;
 $C590 RET Z           ; }
 $C591 LD (IX+$02),$00 ; Change enemy direction
 $C595 JP $C4D7        ; Jump to handle special case for FOOT MAN dying
; Handle random crouch for FOOT MAN
*$C598 PUSH AF         ; Save #REGaf
 $C599 CALL $A51D      ; Set #REGa a pseudo random nummber
 $C59C CP $80          ; is less than 128?
 $C59E JP C,$C5BE      ; Jump to crouch FOOT MAN if so
 $C5A1 LD (IX+$11),$04 ; Reset state change counter
 $C5A5 POP AF          ; Restore #REGaf
 $C5A6 RET             ;
; Handle random jump for FOOT MAN
*$C5A7 CALL $A51D      ; Set #REGa a pseudo random nummber
 $C5AA CP $80          ; is less than 128?
 $C5AC JP C,$C66E      ; Jump to make FOOT MAN jump
 $C5AF LD (IX+$11),$04 ; Reset state change counter
 $C5B3 RET             ;
; Handle random teleporting out of the room for FOOT MAN
*$C5B4 CALL $A51D      ; Set #REGa a pseudo random nummber
 $C5B7 CP $80          ; is less than 128?
 $C5B9 RET C           ; Return if so
; Handle forced teleporting out of the room for FOOT MAN
*$C5BA CALL $9EF1      ; Configure teleporting out of the room
 $C5BD RET             ;

; Enemy configuration for FOOTMAN crouched or stand-by
;
; Used by the routine at #R$C598.
c$C5BE POP DE          ;
; Set enemy configuration for FOOT MAN crouched
*$C5BF LD A,(IX+$11)   ; {Return if state change counter is not zero
 $C5C2 OR A            ;
 $C5C3 RET NZ          ; }
 $C5C4 LD HL,$8318     ; Set #REGhl to the address for the graphic data of
                       ; crouched FOOT MAN
; Set enemy configuration for FOOT MAN. Used to set the type: crouched or
; stand-by
*$C5C7 LD (IX+$10),$00 ; Stop FOOT MAN
 $C5CB LD (IX+$04),L   ; {Set the address for the static sprite graphic data
 $C5CE LD (IX+$05),H   ; }
 $C5D1 LD (IX+$0E),$02 ; Set width of sprite
 $C5D5 LD (IX+$12),$01 ; Set FOOT MAN type to crouched
 $C5D9 CALL $A51D      ; Set #REGa a pseudo-random number
 $C5DC AND $0F         ; {Set the pseudo-rendom number to be between $1F and
 $C5DE ADD A,$10       ; $10}
 $C5E0 LD (IX+$11),A   ; Set this number to the state change counter
 $C5E3 SET 7,(IX+$09)  ; Set the enemy type to select the address for the
                       ; static graphic data
 $C5E7 RET             ;

; Handle FOOT MAN walking/stand-by state change
;
; Used by the routine at #R$BC48.
c$C5E8 LD A,(IX+$09)   ; {Return if enemy type is not FOOT MAN
 $C5EB OR A            ;
 $C5EC RET NZ          ; }
 $C5ED LD A,(IX+$02)   ; {Jump forward if FOOT MAN is facing left
 $C5F0 OR A            ;
 $C5F1 JP NZ,$C5FF     ; }
 $C5F4 LD A,(IX+$00)   ; {FOOT MAN is facing right. Return if x-position of
 $C5F7 AND $07         ; bits2-0 of FOOTMAN is not $02
 $C5F9 CP $02          ;
 $C5FB RET NZ          ; }
 $C5FC JP $C607        ; Jump to check for change state
*$C5FF LD A,(IX+$00)   ; {FOOT MAN is facing left. Return if x-position of
 $C602 AND $07         ; bits2-0 of FOOTMAN is not $04
 $C604 CP $04          ;
 $C606 RET NZ          ; }
*$C607 CALL $A51D      ; Set #REGa a pseudo-random number
 $C60A CP $FA          ; {Return if pseudo-random number if smaller than $FA
 $C60C RET C           ; }
; Configure FOOT MAN for stand-by position
*$C60D LD A,(IX+$06)   ; {Return if FOOT MAN is falling
 $C610 OR A            ;
 $C611 RET NZ          ; }
 $C612 LD A,(IX+$03)   ; {Return if FOOT MAN is jumping
 $C615 OR A            ;
 $C616 RET NZ          ; }
 $C617 LD A,(IX+$11)   ; {Return if state change counter is not zero
 $C61A OR A            ;
 $C61B RET NZ          ; }
 $C61C LD HL,$8338     ; Set #REGhl to the address pointer for the graphic data
                       ; of FOOT MAN stand-by
 $C61F CALL $C5C7      ; Set enemy configuration for FOOT MAN stand-by
 $C622 LD (IX+$12),$02 ; Set FOOT MAN to type Stand-by
 $C626 RET             ;

; Handle FOOT MAN walking/crouching state change
;
; Used by the routine at #R$BC48.
c$C627 LD A,(IX+$09)   ; {Entity type is FOOT MAN?
 $C62A AND $7F         ;
 $C62C OR A            ; }
 $C62D RET NZ          ; Return if it isn't
 $C62E LD A,(IX+$12)   ; {FOOT MAN is walking?
 $C631 OR A            ; }
 $C632 JP Z,$C660      ; Jump to decrement state counter
 $C635 LD A,(IX+$11)   ; SEt #REGa to state counter
 $C638 CP $C8          ; is for fixed crouch foot man?
 $C63A RET Z           ; Return if so
 $C63B DEC (IX+$11)    ; Decrement state counter
 $C63E RET NZ          ; Return if no 0
; State counter reached 0: change state to walking
 $C63F LD (IX+$10),$02 ; Set footman speed
 $C643 RES 7,(IX+$09)  ; Set footman walking type
 $C647 LD (IX+$0E),$03 ; Set width of sprite (in bytes)
 $C64B LD (IX+$11),$09 ; Set state counter
 $C64F LD A,(IX+$12)   ; {is footman stand-by?
 $C652 CP $02          ; }
 $C654 JP NZ,$C65B     ; Jump if walking or crouched
 $C657 LD (IX+$11),$01 ; Set state counter
*$C65B LD (IX+$12),$00 ; Set footman walking
 $C65F RET             ;
*$C660 LD A,(IX+$11)   ; {Decrement counter if counter > 0
 $C663 DEC A           ;
 $C664 CP $FF          ;
 $C666 RET Z           ;
 $C667 LD (IX+$11),A   ; }
 $C66A RET             ;

; Routine not used
s$C66B RET
 $C66C RET
 $C66D RET

; Enemy configuration for FOOT MAN jumping
;
; Used by the routines at #R$C503 and #R$C5A7.
c$C66E LD A,(IX+$11)   ; {Return if state change counter is not zero
 $C671 OR A            ;
 $C672 RET NZ          ; }
; This entry point is used by the routines at #R$C433 and #R$D15A.
*$C673 LD A,(IX+$06)   ; {Return if FOOT MAN falling
 $C676 OR A            ;
 $C677 RET NZ          ; }
 $C678 LD A,(IX+$01)   ; {Return if y-position less than $18
 $C67B CP $18          ;
 $C67D RET C           ; }
 $C67E LD A,(IX+$03)   ; {Return if FOOT MAN is jumping
 $C681 OR A            ;
 $C682 RET NZ          ; }
 $C683 LD (IX+$03),$01 ; Set FOOT MAN jumping
 $C687 LD HL,$CE68     ; {Set y-offset for FOOT MAN jumping
 $C68A LD (IX+$04),L   ;
 $C68D LD (IX+$05),H   ; }
 $C690 RET             ;

; Handler for FOOT MAN jumping
;
; Used by the routine at #R$BC48.
c$C691 LD A,(IX+$09)   ; Check enemy type
 $C694 CP $FE          ; {Return if bubble
 $C696 RET Z           ; }
 $C697 CP $FD          ; {Return if smartbomb
 $C699 RET Z           ; }
 $C69A CP $FC          ; {Return if question
 $C69C RET Z           ; }
 $C69D AND $7F         ; {Return if TRIANGLE
 $C69F CP $0E          ;
 $C6A1 RET Z           ; }
 $C6A2 LD A,(IX+$03)   ; {Return if FOOT MAN not jumping
 $C6A5 OR A            ;
 $C6A6 RET Z           ; }
; FOOT MAN jumping
 $C6A7 LD A,(IX+$00)   ; {Set #R$A248 to the x-position of enemy
 $C6AA LD ($A248),A    ; }
 $C6AD LD A,(IX+$01)   ; {Set #R$A249 to the y-position of enemy
 $C6B0 LD ($A249),A    ; }
 $C6B3 LD A,(IX+$02)   ; Set #REGa to the direction of enemy
 $C6B6 CALL $A6AB      ; Set into #REGhl the address into tile type buffer of
                       ; enemy position
 $C6B9 INC HL          ; Increment #REGhl
 $C6BA CALL $CDF5      ; Check if tile type is a wall
 $C6BD JP Z,$C700      ; Jump if it's a wall
 $C6C0 INC HL          ; Increment #REGhl
 $C6C1 CALL $CDF5      ; Check if tile type is a wall
 $C6C4 JP Z,$C700      ; Jump if it's a wall
 $C6C7 LD A,(IX+$01)   ; Set #REGa to the y-position
 $C6CA LD L,(IX+$04)   ; {Set #REGhl to the address for jumping y-offset
 $C6CD LD H,(IX+$05)   ; }
 $C6D0 LD E,(HL)       ; {Computes the new y-position
 $C6D1 SUB E           ; }
 $C6D2 CP $08          ; {if y-position is less than 8 then start falling
 $C6D4 JP C,$C6EA      ; }
 $C6D7 LD (IX+$01),A   ; Set the new y-position
 $C6DA INC HL          ; {Increment y-offset address
 $C6DB LD (IX+$04),L   ;
 $C6DE LD (IX+$05),H   ; }
 $C6E1 LD A,(HL)       ; {if no end marker for y-offet then return
 $C6E2 CP $FF          ;
 $C6E4 RET NZ          ; }
 $C6E5 LD (IX+$03),$00 ; Finish jumping
 $C6E9 RET             ;
; FOOT MAN start falling
*$C6EA LD (IX+$03),$00 ; Set FOOT MAN not jumping
 $C6EE LD (IX+$06),$02 ; Set FOOT MAN falling (speed 2)
 $C6F2 LD A,(IX+$09)   ; {if FOOT MAN is dying jump back and destroy it
 $C6F5 CP $07          ;
 $C6F7 JP Z,$9807      ;
 $C6FA CP $06          ;
 $C6FC JP Z,$9807      ; }
 $C6FF RET             ;
; FOOT MAN start falling
*$C700 LD A,(IX+$09)   ; {if FOOT MAN is dying jump back and destroy it
 $C703 CP $07          ;
 $C705 JP Z,$9807      ;
 $C708 CP $06          ;
 $C70A JP Z,$9807      ; }
 $C70D LD (IX+$06),$02 ; Set FOOT MAN falling (speed 2)
 $C711 LD (IX+$03),$00 ; Set FOOT MAN not jumping
 $C715 LD A,(IX+$01)   ; {if bits2-0 of y-position are 0 then stop falling
 $C718 AND $07         ;
 $C71A OR A            ;
 $C71B RET NZ          ;
 $C71C LD (IX+$06),$00 ; }
 $C720 RET             ;

; Handler for FOOT MAN falling
;
; Used by the routine at #R$BC48.
c$C721 LD A,(IX+$09)   ; {Return if enemy is TRIANGLE
 $C724 AND $7F         ;
 $C726 CP $0E          ;
 $C728 RET Z           ; }
 $C729 LD A,(IX+$03)   ; {Return if FOOT MAN is jumping
 $C72C OR A            ;
 $C72D RET NZ          ; }
 $C72E LD A,(IX+$01)   ; {Add to y-position the falling speed
 $C731 ADD A,(IX+$06)  ; }
 $C734 CP $B8          ; y-position is greater than 184?
 $C736 JP NC,$C77B     ; Jump to make FOOTMAN invisible
 $C739 LD (IX+$01),A   ; Set the new y-position
 $C73C AND $07         ; {Return if y-position is not grid fixed
 $C73E OR A            ;
 $C73F RET NZ          ; }
 $C740 CALL $C794      ; Obtain into #REGhl the tile type address pointer under
                       ; FOOT MAN
 $C743 LD A,(HL)       ; Set #REGa the tile type under FOOT MAN
 $C744 CALL $CE17      ; Check if tile type is 'background' tile
 $C747 JP NZ,$C76E     ; Jump if wall tile type
 $C74A INC HL          ; Increment #REGhl
 $C74B LD A,(HL)       ; Set #REGa the tile type under FOOT MAN
 $C74C CALL $CE17      ; Check if tile type is 'background' tile
 $C74F JP NZ,$C76E     ; Jump if wall tile type
 $C752 LD A,(IX+$09)   ; {If explosion jump to continue falling
 $C755 CP $FF          ;
 $C757 JP Z,$C762      ; }
 $C75A LD A,($A25D)    ; {If FOOT MAN collides with tile type $03 (tiles of
 $C75D CP $03          ; death) then jump to destroy enemy
 $C75F CALL Z,$C78C    ; }
; continue falling
*$C762 LD A,(IX+$06)   ; {Increment falling speed by 2 if speed less than $04
 $C765 ADD A,$02       ;
 $C767 CP $06          ;
 $C769 RET Z           ;
 $C76A LD (IX+$06),A   ; }
 $C76D RET             ;
; stop falling
*$C76E LD (IX+$06),$00 ; Reset falling
 $C772 LD A,(IX+$09)   ; {if enemy is FOOT MAN dying then destroy it
 $C775 CP $07          ;
 $C777 JP Z,$9807      ; }
 $C77A RET             ;
; enemy falling from screen
*$C77B LD (IX+$0C),$00 ; Set entity invisble
 $C77F LD HL,$E9FF     ; {Set base address into attribute buffer for score
 $C782 LD ($A1D2),HL   ; points}
 $C785 LD HL,$0000     ; {Set score point to zero
 $C788 LD ($A1D5),HL   ; }
 $C78B RET             ;
; enemy collides with tile of death
*$C78C LD (IX+$15),$FF ; Set to not generate bubble
 $C790 CALL $9807      ; Destroy enemy
 $C793 RET             ;

; Obtain the tile type address pointer under the entity
;
; Used by the routines at #R$BC48 and #R$C721.
c$C794 LD A,(IX+$00) ; {Set #R$A248 the x-position of entity
 $C797 LD ($A248),A  ; }
 $C79A LD A,(IX+$01) ; {Set #R$A249 the y-position of entity
 $C79D LD ($A249),A  ; }
 $C7A0 LD A,(IX+$02) ; Set #REGa the direction of entity
 $C7A3 CALL $A6AB    ; {Point #REGhl to the address into tile buffer of the
 $C7A6 LD DE,$0061   ; tile under the entity
 $C7A9 ADD HL,DE     ; }
 $C7AA LD ($A1B4),HL ; Save at #R$A1B4 to the address into tile buffer of the
                     ; tile under the entity
 $C7AD RET           ;

; Initialize graphic and attribute data buffers for current room
;
; Used by the routine at #R$A939.
c$C7AE LD A,($A1F8)    ; {If atoms of Rex are not flushing on teleporting reset
 $C7B1 OR A            ; sound volume
 $C7B2 CALL Z,$D36F    ; }
 $C7B5 LD HL,$DE9F     ; {Reset tile type and tile counter buffer
 $C7B8 LD DE,$DEA0     ;
 $C7BB LD BC,$065F     ;
 $C7BE LD (HL),$00     ;
 $C7C0 LDIR            ; }
 $C7C2 LD A,$01        ; {Initialize counter for tile drawn on room grahics
 $C7C4 LD ($A1B6),A    ; buffer}
 $C7C7 LD IX,$EB00     ; Set #REGix to the base address of room graphic buffer
 $C7CB LD HL,$D962     ; Set #REGhl to the base address of mapping table for
                       ; tile grahic data and room graphic buffer
 $C7CE LD ($A252),HL   ; Copy at #R$A252 this base address
 $C7D1 LD A,($A251)    ; {Set #REGde to the current room number
 $C7D4 LD E,A          ;
 $C7D5 LD D,$00        ; }
 $C7D7 LD B,$46        ; Set #REGb to the number of supertiles in the room
 $C7D9 CALL $C95B      ; Computes the offset in the room layout table for the
                       ; current room (70 x number of room)
 $C7DC LD DE,$7806     ; {Set #REGhl to the base address in the room layout
 $C7DF ADD HL,DE       ; table for the current room}
 $C7E0 PUSH HL         ; {Copy the base address into #REGiy
 $C7E1 POP IY          ; }
 $C7E3 LD B,$07        ; Set #REGb to the number of supertiles row for a room
                       ; (10x7)
*$C7E5 PUSH BC         ; {Save REGbc and REGix
 $C7E6 PUSH IX         ; }
 $C7E8 LD B,$0A        ; Set #REGb to the number of supertiles columns for a
                       ; room (10x7)
*$C7EA PUSH BC         ; Save #REGbc
 $C7EB LD A,(IY+$00)   ; {Pickup into #REGde the number of supertile pointed by
 $C7EE LD E,A          ; #REGiy
 $C7EF LD D,$00        ; }
 $C7F1 LD B,$09        ; Set #REGb to the number of tiles for each supertile
                       ; (3x3)
 $C7F3 CALL $C95B      ; {Computes the base addres for the supertile layout
 $C7F6 LD DE,$6F06     ;
 $C7F9 ADD HL,DE       ; }
 $C7FA CALL $C82E      ; Initialize the supertile
 $C7FD LD DE,$0003     ; {Point #REGix to the next supertile location in the
 $C800 ADD IX,DE       ; room graphic buffer}
 $C802 INC IY          ; Point #REGiy to the next supertile
 $C804 POP BC          ; Restore #REGbc
 $C805 DJNZ $C7EA      ; Jump back until all supertiles in a row are drawn
 $C807 POP IX          ; Restore #REGix
 $C809 LD DE,$0300     ; {Point #REGix to the first supertile of the next row
 $C80C ADD IX,DE       ; in the room graphics buffer}
 $C80E POP BC          ; Restore #REGbc
 $C80F DJNZ $C7E5      ; Jump back until all the seven rows of supertiles are
                       ; drawn
 $C811 LD HL,$5860     ; {Fill the attribute file with color attribute $47 if
 $C814 LD BC,$02A0     ; the current color attribute is $00
*$C817 LD A,(HL)       ;
 $C818 OR A            ;
 $C819 JP NZ,$C81E     ;
 $C81C LD (HL),$47     ;
*$C81E DEC BC          ;
 $C81F INC HL          ;
 $C820 LD A,B          ;
 $C821 OR C            ;
 $C822 JP NZ,$C817     ; }
 $C825 LD A,($A1F8)    ; {Return if Rex atoms are flushing on Rex teleporting
 $C828 OR A            ;
 $C829 RET NZ          ; }
 $C82A CALL $D346      ; Reset sound data buffer
 $C82D RET             ;
; Initialize a supertile
*$C82E PUSH IX         ; Save #REGix
 $C830 LD B,$03        ; Set #REGb to the number of rows per supertile (3x3)
*$C832 PUSH BC         ; Save #REGbc
 $C833 LD B,$03        ; Set #REGb to the number of columns per supertile (3x3)
*$C835 PUSH BC         ; Save #REGbc
 $C836 LD A,(HL)       ; Set #REGa to the value of the tile
 $C837 CALL $C84B      ; Copy color attribute, type and graphic data of the
                       ; tile into corresponding buffers and drawn tile
 $C83A INC HL          ; Point #REGhl to the next tile in the supertile layout
 $C83B INC IX          ; Point #REGix to the next address into room graphic
                       ; buffer
 $C83D POP BC          ; Restore #REGbc
 $C83E DJNZ $C835      ; Jump back until all the tiles in a row are drawn
 $C840 LD DE,$00FD     ; {Point #REGix to the addres into room graphics buffer
 $C843 ADD IX,DE       ; for the next row of tiles}
 $C845 POP BC          ; Restore #REGbc
 $C846 DJNZ $C832      ; Jump back until all three rows of tiles are drawn
 $C848 POP IX          ; Restore #REGix
 $C84A RET             ;
; Copy the color attribute of the file to the attribute buffer, the tile type
; into the tile type buffer, the mapping of the address for the graphic data
; and the address of the location of the tile into graphics data buffer and
; drawn the tile into the room graphics buffer
*$C84B PUSH HL         ; {Save #REGhl and #REGaf
 $C84C PUSH AF         ; }
 $C84D LD ($A22E),A    ; Save the tile value into temporal variable #R$A22E
 $C850 LD E,A          ; {Computes the address into the tile attributes table
 $C851 LD D,$00        ; for the corresponent tile
 $C853 LD HL,$6E06     ;
 $C856 ADD HL,DE       ; }
 $C857 LD A,(HL)       ; Set #REGa to the color attribute for the tile
 $C858 PUSH IX         ; {Copy #REGix into #REGhl
 $C85A POP HL          ; }
 $C85B CALL $C906      ; Computes into #REGhl the position of the tile in the
                       ; attribute buffer
 $C85E LD (HL),A       ; Save the color attribute for the tile into attribute
                       ; buffer
 $C85F LD DE,$E55F     ; {Computes into #REGhl the offset of the tile into the
 $C862 AND A           ; attribute buffer
 $C863 SBC HL,DE       ; }
 $C865 LD DE,$E1FF     ; {And add this offset to the base address of the tile
 $C868 ADD HL,DE       ; type buffer}
 $C869 PUSH HL         ; Save #REGhl
 $C86A LD ($A1B7),HL   ; Save the address into tile type buffer of the tile at
                       ; #R$A1B7
 $C86D LD A,($A22E)    ; Pick up the tile value from #R$A22E
 $C870 LD E,A          ; {Set #REGhl to the address of the tile type table for
 $C871 LD D,$00        ; the tile
 $C873 LD HL,$6506     ;
 $C876 ADD HL,DE       ; }
 $C877 LD A,(HL)       ; Set #REGa to the tile type value of the tile
 $C878 POP HL          ; Restore into #REGhl the address of the tile type
                       ; buffer
 $C879 LD (HL),A       ; Copy the value of the tile type into the tile type
                       ; buffer
 $C87A POP AF          ; Restore #REGaf
 $C87B LD L,A          ; {Computes address for the graphics data of the tile
 $C87C LD H,$00        ; into #REGhl
 $C87E ADD HL,HL       ;
 $C87F ADD HL,HL       ;
 $C880 ADD HL,HL       ;
 $C881 LD DE,$6606     ;
 $C884 ADD HL,DE       ; }
 $C885 EX DE,HL        ; Exchange #REGde and #REGhl
 $C886 LD B,$08        ; Set #REGb to the number of bytes to copy into graphics
                       ; buffer
 $C888 PUSH IX         ; {Copy #REGix into #REGhl
 $C88A POP HL          ; }
; Check if the tile is visible
 $C88B LD A,($A22E)    ; Set #REGa to the tile value
 $C88E OR A            ; is a background (shadow) tile?
 $C88F JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C892 CP $01          ; is a background (blue) tile?
 $C894 JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C897 CP $95          ; unknown R tile meaning?
 $C899 JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C89C CP $96          ; unknown B tile meaning?
 $C89E JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C8A1 CP $C6          ; is a J (always jump - blue) tile?
 $C8A3 JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C8A6 CP $D6          ; is a RJ (random jump - blue) tile?
 $C8A8 JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C8AB CP $10          ; is a RD (random crouch - blue) tile?
 $C8AD JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
 $C8B0 CP $81          ; is a J (always jump - shadow) tile?
 $C8B2 JP Z,$C8F2      ; Jump forward (this will not be drawn in display file)
; Establish mapping between tile graphic data and room graphics buffer
 $C8B5 PUSH IY         ; Save #REGiy
 $C8B7 LD IY,($A252)   ; Set #REGiy to the address pointer into the mapping
                       ; table of tile graphics and room graphics buffer
 $C8BB LD (IY+$00),L   ; {Save into the first word the address of the room
 $C8BE LD (IY+$01),H   ; graphics buffer where tile will be draw}
 $C8C1 LD (IY+$02),E   ; {Save into the second word the address of the tile
 $C8C4 LD (IY+$03),D   ; graphics data for the tile drawn}
 $C8C7 LD (IY+$04),$FF ; Set in the fifth byte the end marker
 $C8CB PUSH HL         ; {Save #REGhl and #REGde
 $C8CC PUSH DE         ; }
 $C8CD LD HL,($A1B7)   ; Set #REGhl to the address pointer into the tile type
                       ; buffer
 $C8D0 LD DE,$E19F     ; {Computes the offset of the current tile into the tile
 $C8D3 AND A           ; type buffer
 $C8D4 SBC HL,DE       ; }
 $C8D6 LD DE,$DE9F     ; {Add the offset to the base address of the tile count
 $C8D9 ADD HL,DE       ; buffer to obtain the address for the current tile}
 $C8DA LD A,($A1B6)    ; {Save the current count tile into this address
 $C8DD LD (HL),A       ; }
 $C8DE INC A           ; {Increment the tile count number
 $C8DF LD ($A1B6),A    ; }
 $C8E2 POP DE          ; {Restore #REGde and #REGhl
 $C8E3 POP HL          ; }
 $C8E4 INC IY          ; {Point to the next address into the mapping table of
 $C8E6 INC IY          ; tile graphics and room graphics buffer
 $C8E8 INC IY          ;
 $C8EA INC IY          ; }
 $C8EC LD ($A252),IY   ; Point #R$A252 to the new address
 $C8F0 POP IY          ; Restore #REGiy
; Copy tile graphics into room graphics buffer
*$C8F2 LD A,(DE)       ; {Copy the tile graphic data into room graphic buffer
 $C8F3 LD (HL),A       ;
 $C8F4 INC DE          ;
 $C8F5 PUSH DE         ;
 $C8F6 LD DE,$0020     ;
 $C8F9 ADD HL,DE       ;
 $C8FA POP DE          ;
 $C8FB DJNZ $C8F2      ; }
 $C8FD LD HL,($A1B7)   ; {Increment the tile type address at #R$A01E
 $C900 INC HL          ;
 $C901 LD ($A1B7),HL   ; }
 $C904 POP HL          ; Restore #REGhl
 $C905 RET             ;
; Computes into #REGhl the position of the tile in the attribute buffer
*$C906 PUSH AF         ; {Save #REGaf and #REGde
 $C907 PUSH DE         ; }
 $C908 LD DE,$EAFF     ; Set #REGde to the address of the room graphics buffer
 $C90B AND A           ; Reset carry bit
 $C90C SBC HL,DE       ; Set #REGhl to the offset of the current tile into
                       ; graphic buffer
 $C90E LD A,L          ; {Computes into #REGa the horizontal position of the
 $C90F AND $1F         ; tile}
 $C911 LD ($A22C),A    ; Save this into #R$A093
 $C914 LD A,L          ; {Computes into #REGhl the offset for the vertical
 $C915 AND $E0         ; position of the tile
 $C917 LD L,A          ;
 $C918 SRL H           ;
 $C91A RR L            ;
 $C91C SRL H           ;
 $C91E RR L            ;
 $C920 SRL H           ;
 $C922 RR L            ; }
 $C924 LD A,($A22C)    ; Restore horizontal position into #REGa
 $C927 LD E,A          ; {And add the horizontal position to the computed
 $C928 LD D,$00        ; offset for the vertical position
 $C92A ADD HL,DE       ; }
 $C92B LD DE,$E55F     ; {Set #REGhl to the address of the tile into the
 $C92E ADD HL,DE       ; attribute buffer}
 $C92F POP DE          ; {Restore #REGde and #REGaf
 $C930 POP AF          ; }
 $C931 RET             ;

; Copy room color attribute buffer to attribute file
;
; Used by the routines at #R$976E and #R$A939.
c$C932 LD DE,$5860   ; {Copy attribute buffer for room intro attribute file
 $C935 LD HL,$E55F   ;
 $C938 LD BC,$02A0   ;
 $C93B LDIR          ; }
 $C93D LD HL,$5860   ; {Set color attribute $47 for the first and last column
 $C940 LD B,$15      ; of the room
*$C942 LD (HL),$47   ;
 $C944 LD DE,$001F   ;
 $C947 ADD HL,DE     ;
 $C948 LD (HL),$47   ;
 $C94A INC HL        ;
 $C94B DJNZ $C942    ; }
 $C94D RET           ;

; Routine not used - Wait some time - Remnant code from Rex (Side A)
;
; Wait 182 t-states for every value on #REGbc.
;
; BC Number of times to wait 182 t-states
s$C94E PUSH BC
 $C94F LD B,$0A
*$C951 DJNZ $C951
 $C953 POP BC
 $C954 DEC BC
 $C955 LD A,B
 $C956 OR C
 $C957 JP NZ,$C94E
 $C95A RET

; Utilities routine - Multiply two values
;
; Used by the routines at #R$99E3, #R$9BA7, #R$C7AE and #R$C962.
;
; I:DE Operand
; I:B Operand
; O:HL Result
c$C95B LD HL,$0000   ;
*$C95E ADD HL,DE     ;
 $C95F DJNZ $C95E    ;
 $C961 RET           ;

; Configure room connection and enemies of the room
;
; Copy the values of room connection and enemy entry from #R$B1A7 and
; corresponent enemy configuration data to the status variables. Used by the
; routine at #R$A939.
c$C962 LD A,($A251)  ; {Set #REGde to the room number to diplay
 $C965 LD E,A        ;
 $C966 LD D,$00      ; }
 $C968 LD B,$06      ; Set #REGb to the length in bytes of the room connections
                     ; data for every room at #R$B1A7
 $C96A CALL $C95B    ; Multiple room number by length of byte of the room
                     ; connections
 $C96D LD DE,$B1A7   ; {Set #REGhl to the point to the first byte into the room
 $C970 ADD HL,DE     ; connection data for the corresponent room number}
 $C971 LD A,(HL)     ; {Set #$A227 to the number of the top room
 $C972 LD ($A227),A  ; }
 $C975 INC HL        ; Point to the next byte
 $C976 LD A,(HL)     ; {Set #$A226 to the number of the right room
 $C977 LD ($A226),A  ; }
 $C97A INC HL        ; Point to the next byte
 $C97B LD A,(HL)     ; {Set #$A228 to the number of the bottom room
 $C97C LD ($A228),A  ; }
 $C97F INC HL        ; Point to the next byte
 $C980 LD A,(HL)     ; {Set #$A229 to the number of the left room
 $C981 LD ($A229),A  ; }
 $C984 INC HL        ; Point to the next byte
 $C985 LD E,(HL)     ; {Copy to #REGde the address pointer for the enemy
 $C986 INC HL        ; configuration of this room
 $C987 LD D,(HL)     ; }
 $C988 LD A,(DE)     ; {Set #R$A22B to the max number of enemies in the room
 $C989 AND $1F       ;
 $C98B LD ($A22B),A  ; }
 $C98E XOR A         ; Set #REGa=0
 $C98F LD ($A1C7),A  ; {Initialise Enemy Entry From indicator, so by default no
 $C992 LD ($A1C6),A  ; enemy enters the room
 $C995 LD ($A1C5),A  ; }
 $C998 LD A,(DE)     ; {Reads bit 7 of first byte of the enemy configuration
 $C999 BIT 7,A       ; data}
 $C99B CALL NZ,$C9BB ; If bit set, configure that enemy enters from the top
 $C99E BIT 6,A       ; Reads bit 6 of first byte of the enemy configuration
                     ; data
 $C9A0 CALL NZ,$C9C1 ; If bit set, configure that enemy enters from the right
 $C9A3 BIT 5,A       ; Reads bit 5 of first byte of the enemy configuration
                     ; data
 $C9A5 CALL NZ,$C9C7 ; If bit set, configure that enemy enters from the left
 $C9A8 INC DE        ; Point to the next byte
 $C9A9 LD A,(DE)     ; {Set #R$A1DC and #R$A1DD to the counter for enemy enters
 $C9AA LD ($A1DC),A  ; the room
 $C9AD LD ($A1DD),A  ; }
 $C9B0 INC DE        ; Point to the next byte
 $C9B1 LD A,(DE)     ; {Set #R$A221 to the type of enemy
 $C9B2 LD ($A221),A  ; }
 $C9B5 INC DE        ; Point to the next byte
 $C9B6 LD ($A1B9),DE ; Point #R$A1B9 to the address where begins the
                     ; configuration for static enemies
 $C9BA RET           ;
; Enemy enters the room from the top
*$C9BB LD HL,$A1C7   ;
 $C9BE LD (HL),$FF   ;
 $C9C0 RET           ;
; Enemy enters the room from the right
*$C9C1 LD HL,$A1C6   ;
 $C9C4 LD (HL),$FF   ;
 $C9C6 RET           ;
; Enemy enters room from the left
*$C9C7 LD HL,$A1C5   ;
 $C9CA LD (HL),$FF   ;
 $C9CC RET           ;

; Check for end game room
;
; Used by the routines at #R$CE30, #R$CE41, #R$CE74 and #R$CEE5.
c$C9CD JP $9585      ; No end game room in Rex (Side B). Jump to main game loop

; Routine not used
;
; Remnant code from Rex (Side A) - Initialize train for the current room
s$C9D0 LD A,($A1DE)
 $C9D3 OR A
 $C9D4 RET NZ
 $C9D5 LD A,(HL)
 $C9D6 LD ($A1E1),A
 $C9D9 INC HL
 $C9DA LD ($A1DF),HL
 $C9DD LD A,$01
 $C9DF LD ($A1DE),A
 $C9E2 RET

; Generate train parts: front, middle or rear wagon
;
; Called but never completely executed. There are no trains in Rex (Side B).
; Used by the routine at #R$9470.
c$C9E3 LD A,($A1DE)  ; {Return if not generating train in current room
 $C9E6 OR A          ;
 $C9E7 RET Z         ; }
; code never executed. Remnant from Rex (Side A)
 $C9E8 LD A,($A1E1)  ;
 $C9EB DEC A         ;
 $C9EC LD ($A1E1),A  ;
 $C9EF OR A          ;
 $C9F0 RET NZ        ;
 $C9F1 LD HL,$5E72   ;
 $C9F4 LD A,($A22B)  ;
 $C9F7 LD B,A        ;
*$C9F8 LD A,(HL)     ;
 $C9F9 OR A          ;
 $C9FA JP Z,$CA08    ;
 $C9FD LD DE,$001B   ;
 $CA00 ADD HL,DE     ;
 $CA01 DJNZ $C9F8    ;
 $CA03 XOR A         ;
 $CA04 LD ($A1DE),A  ;
 $CA07 RET           ;
*$CA08 LD DE,$000C   ;
 $CA0B AND A         ;
 $CA0C SBC HL,DE     ;
 $CA0E PUSH HL       ;
 $CA0F POP IX        ;
 $CA11 LD IY,($A1DF) ;
 $CA15 LD A,(IY+$00) ;
 $CA18 CP $FF        ;
 $CA1A JP Z,$CA30    ;
 $CA1D CALL $CB77    ;
 $CA20 LD A,(IY+$03) ;
 $CA23 LD ($A1E1),A  ;
 $CA26 LD DE,$0004   ;
 $CA29 ADD IY,DE     ;
 $CA2B LD ($A1DF),IY ;
 $CA2F RET           ;
*$CA30 XOR A         ;
 $CA31 LD ($A1DE),A  ;
 $CA34 RET           ;

; Creates a new mobile enemy on room
;
; Used by the routine at #R$9470.
c$CA35 LD A,($A1DE)    ; {Return if generating train in current room
 $CA38 OR A            ;
 $CA39 RET NZ          ; }
 $CA3A LD A,($A1DC)    ; {Decrement enemy room enter counter
 $CA3D DEC A           ;
 $CA3E LD ($A1DC),A    ; }
 $CA41 OR A            ; {Return if counter has not reached zero
 $CA42 RET NZ          ; }
 $CA43 LD A,($A1DD)    ; {Reset counter with the original value
 $CA46 LD ($A1DC),A    ; }
 $CA49 LD HL,$5E72     ; Set #REGhl to the base address for enemy status into
                       ; the enemy configuration table
 $CA4C LD A,($A22B)    ; {Set #REGb to the max number of enemies for the room
 $CA4F LD B,A          ; }
*$CA50 LD A,(HL)       ; Check enemy status
 $CA51 OR A            ; {Jump forward if enemy dead/not visible
 $CA52 JP Z,$CA5C      ; }
 $CA55 LD DE,$001B     ; {Point to the next enemy configuration
 $CA58 ADD HL,DE       ; }
 $CA59 DJNZ $CA50      ; Jump back until all the enemies slots checked
 $CA5B RET             ;
; create a new enemy
*$CA5C LD DE,$000C     ; {Point #REGhl to the base address for the current slot
 $CA5F AND A           ; of enemy configuration
 $CA60 SBC HL,DE       ; }
 $CA62 PUSH HL         ; {Set #REGix to this base address
 $CA63 POP IX          ; }
 $CA65 CALL $CA69      ; Try to create a new enemy
 $CA68 RET             ;
; computes random position
*$CA69 CALL $A530      ; {Set #REGa a pseudo random number between 24 and 224
 $CA6C CP $18          ;
 $CA6E JP C,$CA69      ;
 $CA71 CP $E0          ;
 $CA73 JP NC,$CA69     ; }
 $CA76 AND $F8         ; Set the number grid (8x8) fixed
 $CA78 LD ($A248),A    ; Set this number the x-position for the entity
*$CA7B CALL $A530      ; {Set #REGa a pseudo random number between 32 and 168
 $CA7E CP $20          ;
 $CA80 JP C,$CA7B      ;
 $CA83 CP $A8          ;
 $CA85 JP NC,$CA7B     ; }
 $CA88 AND $F8         ; Set the number grid (8x8) fixed
 $CA8A LD ($A249),A    ; Set this number the y-position for the entity
; check if position collides with Rex position
 $CA8D LD A,($A24F)    ; Set #REGa the Rex x-position
 $CA90 SUB $10         ; {Jump forward if enemy x-position is not in range
 $CA92 LD HL,$A248     ; collision with Rex x-position
 $CA95 CP (HL)         ;
 $CA96 JP NC,$CAB2     ;
 $CA99 ADD A,$30       ;
 $CA9B CP (HL)         ;
 $CA9C JP C,$CAB2      ; }
 $CA9F LD A,($A250)    ; Set #REGa the Rex y-position
 $CAA2 SUB $10         ; {Jump forward if enemy y-position is not in range
 $CAA4 LD HL,$A249     ; collision with Rex y-position
 $CAA7 CP (HL)         ;
 $CAA8 JP NC,$CAB2     ;
 $CAAB ADD A,$30       ;
 $CAAD CP (HL)         ;
 $CAAE JP C,$CAB2      ; }
 $CAB1 RET             ;
*$CAB2 CALL $CAF6      ; Check if enemy can be generated
 $CAB5 OR A            ; {Return if enemy can not be generated
 $CAB6 RET Z           ; }
 $CAB7 LD A,($A221)    ; Set #REGa the type of enemy
 $CABA LD L,A          ; Set #REGl the type of enemy
 $CABB BIT 7,A         ; {Jump forward if generate random FOOT MAN bit is not
 $CABD JP Z,$CACE      ; set}
; try to generate random FOOT MAN
 $CAC0 AND $7F         ; {Set #REGl the type of enemy to generate
 $CAC2 LD L,A          ; }
 $CAC3 CALL $A530      ; {Set #REGa a pseudo random number between 0 an 1
 $CAC6 AND $01         ; }
 $CAC8 OR A            ; {if random number is 1 then generate FOOT MAN
 $CAC9 JP Z,$CACE      ; }
 $CACC LD L,$00        ; Generate FOOT MAN
; generate enemy
*$CACE LD A,L          ; Set #REGa the new enemy type to create
 $CACF CALL $CB7A      ; Configure the new enemy
 $CAD2 LD A,($A248)    ; {Set x-pixel-position for enemy
 $CAD5 LD (IX+$00),A   ; }
 $CAD8 LD A,($A249)    ; {Set y-pixel-position for enemy
 $CADB LD (IX+$01),A   ; }
 $CADE CALL $A51D      ; {Set random face direction
 $CAE1 AND $01         ;
 $CAE3 LD (IX+$02),A   ; }
 $CAE6 CALL $9EE4      ; Initialize teleporting data
 $CAE9 LD A,(IX+$09)   ; {Return if enemy is not FOOT MAN
 $CAEC OR A            ;
 $CAED RET NZ          ; }
 $CAEE CALL $C60D      ; Configure FOOT MAN for stand-by position
 $CAF1 LD (IX+$11),$18 ; Set state change counter
 $CAF5 RET             ;

; Check if enemy can be generated in a position
;
; Used by the routine at #R$CA69.
;
; O:A Enemy can be generated if #REGa <> 0
c$CAF6 CALL $A6AB    ; Computes into #REGhl address position in tile type
                     ; buffer based on (x,y) position on screen
 $CAF9 LD DE,$0060   ; {Set #REGhl to point under the feet of the enemy
 $CAFC ADD HL,DE     ;
 $CAFD LD ($A22C),HL ; }
 $CB00 LD A,(HL)     ; Set #REGa the tile type
 $CB01 CALL $CE17    ; Check if tile type is background
 $CB04 JP Z,$CB3F    ; Jump if is a background tile
 $CB07 LD DE,$0020   ; {Set #REGhl to point in front the feet of the enemy
 $CB0A AND A         ;
 $CB0B SBC HL,DE     ; }
 $CB0D LD A,(HL)     ; Set #REGa the tile type
 $CB0E OR A          ; Check if tile type is background
 $CB0F JP NZ,$CB3F   ; Jump if not a background tile
 $CB12 AND A         ; {Set #REGhl to point in front the head of the enemy
 $CB13 SBC HL,DE     ; }
 $CB15 LD A,(HL)     ; Set #REGa the tile type
 $CB16 CALL $CE17    ; Check if tile type is background
 $CB19 JP NZ,$CB3F   ; Jump if not a background tile
 $CB1C LD HL,($A22C) ; {Recover base address under of the feet of enemy and
 $CB1F INC HL        ; increase pointer}
 $CB20 LD A,(HL)     ; Set #REGa the tile type
 $CB21 CALL $CE17    ; Check if tile type is background
 $CB24 JP Z,$CB3F    ; Jump if is a background tile
 $CB27 LD DE,$0020   ; {Set #REGhl to point in front the feet of the enemy
 $CB2A AND A         ;
 $CB2B SBC HL,DE     ; }
 $CB2D LD A,(HL)     ; Set #REGa the tile type
 $CB2E OR A          ; Check if tile type is background
 $CB2F JP NZ,$CB3F   ; Jump if not a background tile
 $CB32 AND A         ; {Set #REGhl to point in front the head of the enemy
 $CB33 SBC HL,DE     ; }
 $CB35 LD A,(HL)     ; Set #REGa the tile type
 $CB36 CALL $CE17    ; Check if tile type is background
 $CB39 JP NZ,$CB3F   ; Jump if not a background tile
 $CB3C LD A,$FF      ; Return #REGa = $FF so the enemy can be generated
 $CB3E RET           ;
*$CB3F XOR A         ; Return #REGa = 0 so the enemy cannot be generated
 $CB40 RET           ;

; Configure static enemies for the current room
;
; Used by the routine at #R$A939.
c$CB41 LD HL,$5E66   ; {Reset enemy configuration buffer for the room
 $CB44 LD DE,$5E67   ;
 $CB47 LD BC,$0179   ;
 $CB4A LD (HL),$00   ;
 $CB4C LDIR          ; }
 $CB4E LD B,$0E      ; Set #REGb to the max. number of static enemies per room
 $CB50 LD IX,$5E66   ; Set #REGix to the base addres for the enemy
                     ; configuration buffer
 $CB54 LD IY,($A1B9) ; Set #REGiy to the address for the static enemy
                     ; definition of the current room
*$CB58 PUSH BC       ; Save #REGbc
 $CB59 LD A,(IY+$00) ; Pick up the first byte of the static enemy defintion
 $CB5C CP $FF        ; is end of marker - no more enemies?
 $CB5E JP Z,$CB75    ; Jump forward and return
 $CB61 CALL $CB77    ; Configure the current enemy
 $CB64 INC IY        ; {Point #REGiy to the next enemy defintion
 $CB66 INC IY        ;
 $CB68 INC IY        ; }
 $CB6A LD DE,$001B   ; {Point #REGix to the next address for the enemy
 $CB6D ADD IX,DE     ; configuration buffer}
 $CB6F POP BC        ; {Recover and decrement counter at #REGbc
 $CB70 DEC B         ; }
 $CB71 JP NZ,$CB58   ; Jump while there are static enemies to configure
 $CB74 RET           ;
*$CB75 POP BC        ; Recover #REGbc
 $CB76 RET           ;

; Configure entity for the current room
;
; Used by the routines at #R$C9E3 and #R$CB41.
;
; IY Address for the object definition of the current room
; IX Address for the enemy/object configuration buffer
c$CB77 LD A,(IY+$00)   ; Set #REGa to the type of static enemy (with reverse
                       ; bit)
; This entry point is used by the routine at #R$CA69.
*$CB7A LD (IX+$0E),$03 ; Initialize the width of the sprite (in bytes) to $03
 $CB7E LD (IX+$0F),$10 ; Initialize the height of the sprite (in pixels) to $10
 $CB82 LD (IX+$10),$02 ; Initialize speed to $02
 $CB86 LD (IX+$15),$00 ; Initialize bubble energy to $00
 $CB8A AND $7F         ; Set to 0 the reverse bit of the type of enemy
 $CB8C LD (IX+$09),A   ; Initialize the enemy type
 $CB8F OR A            ; enemy type = $00?
 $CB90 CALL Z,$CC05    ; Configure FOOT MAN
 $CB93 CP $01          ; enemy type = $01?
 $CB95 CALL Z,$CC40    ; Configure CATERPILLAR
 $CB98 CP $02          ; enemy type = $02?
 $CB9A CALL Z,$CC75    ; Configure DROP
 $CB9D CP $03          ; enemy type = $03?
 $CB9F CALL Z,$CC53    ; Configure BRAIN
 $CBA2 CP $04          ; enemy type = $04?
 $CBA4 CALL Z,$CC9D    ; Configure PINE
 $CBA7 CP $05          ; enemy type = $05?
 $CBA9 CALL Z,$CCF3    ; Configure PLANT
 $CBAC CP $09          ; enemy type = $09?
 $CBAE CALL Z,$CCD1    ; Configure BULB
 $CBB1 CP $06          ; enemy type = $06?
 $CBB3 CALL Z,$CC18    ; Confgiure FOOT MAN CROUCHED
 $CBB6 CP $0E          ; enemy type = $0E?
 $CBB8 CALL Z,$CD15    ; Configure TRIANGLE
 $CBBB CP $7C          ; enemy type = $7C?
 $CBBD CALL Z,$CCBF    ; Configure QUESTION
 $CBC0 LD (IX+$16),E   ; {Save address for graphic data of animated sprite
 $CBC3 LD (IX+$17),D   ; }
 $CBC6 LD (IX+$0A),L   ; {Save address for animation offset
 $CBC9 LD (IX+$0B),H   ; }
 $CBCC LD A,(IY+$01)   ; Set #REGa to the x-position of sprite
 $CBCF LD (IX+$00),A   ; Save x-position into enemy configuration buffer
 $CBD2 LD A,(IY+$02)   ; Set #REGa to the y-position of sprite
 $CBD5 SLA A           ; {Copy bits 7-3 to the y-position for the enemy
 $CBD7 SLA A           ; configuration buffer
 $CBD9 SLA A           ;
 $CBDB LD (IX+$01),A   ; }
 $CBDE LD A,(IY+$00)   ; {If bit 7 of enemy type is set then set the reverse
 $CBE1 AND $80         ; sprite indicator in enemy configuration buffer
 $CBE3 SRL A           ;
 $CBE5 SRL A           ;
 $CBE7 SRL A           ;
 $CBE9 SRL A           ;
 $CBEB SRL A           ;
 $CBED SRL A           ;
 $CBEF SRL A           ;
 $CBF1 LD (IX+$02),A   ; }
 $CBF4 LD (IX+$03),$00 ; Reset FOOT MAN jumping or explosion debris expansion
                       ; counter
 $CBF8 LD (IX+$06),$00 ; Reset FOOT MAN falling
 $CBFC LD (IX+$0C),$01 ; Set sprite active (alive)
 $CC00 LD (IX+$0D),$00 ; Reset explosion counter
 $CC04 RET             ;
; Configure FOOT MAN
*$CC05 LD HL,$AF52     ; Set #REGhl to the offset animation table
 $CC08 LD (IX+$11),$00 ; Set state counter to $00
 $CC0C LD (IX+$12),$00 ; Set FOOT MAN walking
 $CC10 LD (IX+$14),$02 ; Set health to $02
 $CC14 LD DE,$8198     ; Set #REGde to the graphics data for the enemy
 $CC17 RET             ;
; Configure FOOT MAN CROUCHED
*$CC18 LD HL,$8318     ; {Set address of graphic data for crouched FOOT MAN
 $CC1B LD (IX+$04),L   ;
 $CC1E LD (IX+$05),H   ; }
 $CC21 LD (IX+$11),$C8 ; Set state counter to fixed FOOT MAN crouched
 $CC25 LD (IX+$12),$01 ; Set FOOT MAN crouched
 $CC29 LD (IX+$10),$00 ; Set enemy stopped
 $CC2D LD (IX+$0E),$02 ; Set width of the sprite (in bytes)
 $CC31 LD (IX+$09),$80 ; Set graphic data from static sprite & enemy type FOOT
                       ; MAN
 $CC35 LD (IX+$14),$02 ; Set health
 $CC39 LD HL,$AF52     ; Set #REGhl to the offset animation table
 $CC3C LD DE,$8198     ; Set #REGde to the graphics data for the enemy
 $CC3F RET             ;
; Configure CATERPILLAR
*$CC40 LD (IX+$10),$02 ; Set enemy speed
 $CC44 LD (IX+$14),$0A ; Set health to $0A
 $CC48 LD (IX+$15),$01 ; Set big energy bubble
 $CC4C LD HL,$AF52     ; Set #REGhl to the offset animation table
 $CC4F LD DE,$8F00     ; Set #REGde to the graphics data for the enemy
 $CC52 RET             ;
; Configure BRAIN
*$CC53 LD (IX+$14),$02 ; Set health to $02
 $CC57 LD (IX+$15),$01 ; Set big energy bubble
 $CC5B LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CC5F LD (IX+$11),$00 ; Set wound state
 $CC63 LD HL,$8BE0     ; {Set address of graphic data for BRAIN
 $CC66 LD (IX+$04),L   ;
 $CC69 LD (IX+$05),H   ; }
 $CC6C LD (IX+$12),$05 ; Set recover counter
 $CC70 SET 7,(IX+$09)  ; Set graphics data from static sprite
 $CC74 RET             ;
; Configure DROP
*$CC75 LD (IX+$14),$02 ; Set health to $02
 $CC79 LD (IX+$15),$01 ; Set big energy bubble
 $CC7D LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CC81 LD HL,$8D20     ; {Set address of graphic data for DROP
 $CC84 LD (IX+$04),L   ;
 $CC87 LD (IX+$05),H   ; }
 $CC8A LD (IX+$11),$00 ; Set enemy state to stand-by in ceil
 $CC8E CALL $A530      ; {Set status change counter a random number between 100
 $CC91 AND $7F         ; and 227
 $CC93 ADD A,$64       ;
 $CC95 LD (IX+$12),A   ; }
 $CC98 LD (IX+$09),$82 ; Set graphics data from static sprite
 $CC9C RET             ;
; Configure PINE
*$CC9D LD (IX+$14),$08 ; Set health to $08
 $CCA1 LD (IX+$15),$01 ; Set big energy bubble
 $CCA5 LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CCA9 LD HL,$8FC0     ; {Set address of graphic data for PINE
 $CCAC LD (IX+$04),L   ;
 $CCAF LD (IX+$05),H   ; }
 $CCB2 LD (IX+$11),$00 ; Set movement downwards
 $CCB6 LD (IX+$12),$00 ; Set animation state to stand-by
 $CCBA SET 7,(IX+$09)  ; Set graphics data from static sprite
 $CCBE RET             ;
; Configure QUESTION
*$CCBF LD HL,$8BC0     ; {Set address of graphic data for QUESTION
 $CCC2 LD (IX+$04),L   ;
 $CCC5 LD (IX+$05),H   ; }
 $CCC8 LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CCCC SET 7,(IX+$09)  ; Set graphics data from static sprite
 $CCD0 RET             ;
; Configure BULB
*$CCD1 LD HL,$9040     ; {Set address of graphic data for BULB
 $CCD4 LD (IX+$04),L   ;
 $CCD7 LD (IX+$05),H   ; }
 $CCDA LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CCDE LD (IX+$14),$0E ; Set health to $0E
 $CCE2 LD (IX+$11),$00 ; Set state to stand-by
 $CCE6 LD (IX+$15),$01 ; Set big energy bubble
 $CCEA LD (IX+$12),$05 ; Set state change counter
 $CCEE SET 7,(IX+$09)  ; Set graphics data from static sprite
 $CCF2 RET             ;
; Configure PLANT
*$CCF3 LD HL,$8E20     ; {Set address of graphic data for PLANT
 $CCF6 LD (IX+$04),L   ;
 $CCF9 LD (IX+$05),H   ; }
 $CCFC LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CD00 LD (IX+$14),$0C ; Set health to $0C
 $CD04 LD (IX+$11),$00 ; Set enemy state to stand-by
 $CD08 LD (IX+$15),$01 ; Set big energy bubble
 $CD0C LD (IX+$12),$05 ; Set state change counter
 $CD10 SET 7,(IX+$09)  ; Set graphics data from static sprite
 $CD14 RET             ;
; Configure TRIANGLE
*$CD15 LD (IX+$14),$02 ; Set health to $02
 $CD19 LD (IX+$06),$00 ;
 $CD1D LD (IX+$0E),$02 ; Set sprite width to 2 bytes
 $CD21 LD (IX+$0F),$08 ; Set sprite height to 8 pixels
 $CD25 LD (IX+$10),$01 ; Set enemy speed to 1
 $CD29 LD (IX+$04),$00 ; {Reset x-delta and y-delta for enemy movement
 $CD2D LD (IX+$05),$00 ; }
 $CD31 LD (IX+$11),$10 ; Set state change counter
 $CD35 LD (IX+$12),$00 ; Set to not change movement
 $CD39 LD (IX+$15),$FF ; Set no bubble bonus
 $CD3D LD HL,$AF6A     ; Set #REGhl to the offset animation table
 $CD40 LD DE,$9100     ; Set graphic data for sprite
 $CD43 RET             ;

; Handle speed up duration
;
; Used by the routines at #R$CD52 and #R$CD6E.
c$CD44 LD A,($A20C)  ; {Decrement speed up counter
 $CD47 DEC A         ;
 $CD48 LD ($A20C),A  ; }
 $CD4B OR A          ; {Return if not zero
 $CD4C RET NZ        ; }
 $CD4D XOR A         ; {Reset speed mode to normal if counter is zero
 $CD4E LD ($A20B),A  ; }
 $CD51 RET           ;

; Configure Rex to move right
;
; Used by the routine at #R$9470.
c$CD52 LD A,($A20B)  ; {Jump if Rex speed mode is normal
 $CD55 OR A          ;
 $CD56 JP Z,$CD64    ; }
 $CD59 LD A,$04      ; {Set Rex speed to fast (4)
 $CD5B LD ($A22A),A  ; }
 $CD5E CALL $CD44    ; Handle speed up duration
 $CD61 JP $CD69      ; Jump to set face direction
*$CD64 LD A,$02      ; {Set Rex speed to normal (2)
 $CD66 LD ($A22A),A  ; }
*$CD69 XOR A         ; {Set face direction to right
 $CD6A LD ($A254),A  ; }
 $CD6D RET           ;

; Configure Rex to move left
;
; Used by the routine at #R$9470.
c$CD6E LD A,($A20B)  ; {Jump if Rex speed mode is normal
 $CD71 OR A          ;
 $CD72 JP Z,$CD80    ; }
 $CD75 LD A,$FC      ; {Set Rex speed to fast (-4)
 $CD77 LD ($A22A),A  ; }
 $CD7A CALL $CD44    ; Handle speed up duration
 $CD7D JP $CD85      ; Jump to set face direction
*$CD80 LD A,$FE      ; {Set Rex speed to normal (-2)
 $CD82 LD ($A22A),A  ; }
*$CD85 LD A,$01      ; {Set face direction to left
 $CD87 LD ($A254),A  ; }
 $CD8A RET           ;

; Handle Rex lateral movement
;
; Used by the routine at #R$9470.
c$CD8B LD A,($A254)  ; {Jump if Rex is facing right
 $CD8E OR A          ;
 $CD8F JP Z,$CDB8    ; }
 $CD92 JP $CDD2      ; Jump if Rex is facing left

; Move Rex left or right
;
; Used by the routines at #R$CDB8 and #R$CDD2.
c$CD95 LD A,($A24F)  ; {Add speed to x-position of Rex
 $CD98 LD HL,$A22A   ;
 $CD9B ADD A,(HL)    ; }
 $CD9C CP $F0        ; {If x-position of Rex is greater than 240 then check for
 $CD9E JP NC,$CE41   ; next room on the right}
 $CDA1 CP $03        ; {If x-position of Rex is less than 3 then check for next
 $CDA3 JP C,$CE30    ; room on the left}
 $CDA6 LD ($A24F),A  ; Set the new x-position
 $CDA9 LD A,($A256)  ; {Return if Rex is jumping
 $CDAC OR A          ;
 $CDAD RET NZ        ; }
 $CDAE LD A,($A255)  ; {Return if Rex is falling
 $CDB1 OR A          ;
 $CDB2 RET NZ        ; }
 $CDB3 XOR A         ; {Set speed to 0
 $CDB4 LD ($A22A),A  ; }
 $CDB7 RET           ;

; Handle Rex collision detection moving right
;
; Used by the routine at #R$CD8B.
c$CDB8 LD HL,($A1B2) ; {Set #REGhl the address into tile type buffer in
 $CDBB LD DE,$0023   ; front-up of Rex
 $CDBE ADD HL,DE     ; }
 $CDBF CALL $CDF5    ; {Return if tile is wall
 $CDC2 JP Z,$CDEC    ; }
 $CDC5 LD DE,$0020   ; {Set #REGhl the address into tile type buffer in
 $CDC8 ADD HL,DE     ; front-bottom of Rex}
 $CDC9 CALL $CDF5    ; {Jump to check tile of death if tile is wall
 $CDCC JP Z,$CDEC    ; }
 $CDCF JP $CD95      ; Move Rex to the right

; Handle Rex collision detection moving left
;
; Used by the routine at #R$CD8B.
c$CDD2 LD HL,($A1B2) ; {Set #REGhl the address into tile type buffer in
 $CDD5 LD DE,$0020   ; front-up of Rex
 $CDD8 ADD HL,DE     ; }
 $CDD9 CALL $CDF5    ; {Return if tile is wall
 $CDDC JP Z,$CDEC    ; }
 $CDDF LD DE,$0020   ; {Set #REGhl the address into tile type buffer in
 $CDE2 ADD HL,DE     ; front-bottom of Rex}
 $CDE3 CALL $CDF5    ; {Jump to check tile of death if tile is wall
 $CDE6 JP Z,$CDEC    ; }
 $CDE9 JP $CD95      ; Move Rex to the left
; This entry point is used by the routine at #R$CDB8.
*$CDEC LD A,($A25D)  ; {Jump to kill Rex if collides with tile of death
 $CDEF CP $03        ;
 $CDF1 CALL Z,$9CC5  ; }
 $CDF4 RET           ;

; Check if a tile is a wall or a background
;
; Check if a tile is a wall. Used by the routines at #R$C3C1, #R$C433, #R$C503,
; #R$C691, #R$CDB8, #R$CDD2 and #R$CE74.
;
; I:HL Address pointer of tile in the tile type buffer
; O:F Return Z:1 if tile type is in the list  Z:0 if tile type is not in the
; .   list
; O:A Return A=<tile type> if found ; A=0 if not found
c$CDF5 PUSH HL       ; {Save #REGhl and #REGbc
 $CDF6 PUSH BC       ; }
 $CDF7 LD A,(HL)     ; Set #REGa to the tile type pointed by #REGhl
 $CDF8 LD B,$05      ; Set #REGb to the number of tiles of type 'wall'
 $CDFA LD HL,$CE22   ; Set #REGhl to the address pointer of the list of tiles
                     ; 'wall'
; Check if the tile type in #REGa is in the list of #REGb elements pointed by
; #REGhl
*$CDFD LD C,$FF      ; {Check if #REGa is equal to (#REGhl)
*$CDFF CPI           ; }
 $CE01 JP Z,$CE0E    ; Jump if so
 $CE04 DJNZ $CDFF    ; Jump back and check next element
; is not in the list
 $CE06 POP BC        ; Restore #REGbc
 $CE07 POP HL        ; Restore #REGhl
 $CE08 LD A,$01      ; {Set flag Z=0
 $CE0A OR A          ; }
 $CE0B LD A,$00      ; Set #REGa = $00
 $CE0D RET           ;
; is in the list
*$CE0E XOR A         ; Set flag Z=1
 $CE0F DEC HL        ; {Set #REGa to the tile type found
 $CE10 LD A,(HL)     ; }
 $CE11 LD ($A25D),A  ; Set #R$A25D the tile type found
 $CE14 POP BC        ; {Restore #REGbc and #REGhl
 $CE15 POP HL        ; }
 $CE16 RET           ;
; Check into the list of background tiles. Used by the routines at #R$B694,
; #R$BC48, #R$C721, #R$CAF6 and #R$CEE5.
*$CE17 PUSH HL       ; {Save #REGhl and #REGbc
 $CE18 PUSH BC       ; }
 $CE19 LD A,(HL)     ; Set #REGa to the tile type pointed by #REGhl
 $CE1A LD B,$09      ; Set #REGb to the number of tiles of type 'background'
 $CE1C LD HL,$CE27   ; Set #REGhl to the address pointer of the list of tiles
                     ; 'background'
 $CE1F JP $CDFD      ; Jump to check tile

; List of 'wall' type tiles
b$CE22 DEFB $02,$04,$05,$06,$03

; List of 'background' type tiles
b$CE27 DEFB $00,$0E,$0F,$10,$11,$12,$03,$15,$16

; Check room connection to the left
;
; Used by the routine at #R$CD95.
c$CE30 LD A,($A229)  ; {Return if no room connection on the left
 $CE33 OR A          ;
 $CE34 RET Z         ; }
 $CE35 LD ($A251),A  ; Set the new room
 $CE38 LD A,$E8      ; {Set the new x-position (232)
 $CE3A LD ($A24F),A  ; }
 $CE3D POP BC        ; Restore #REGbc
 $CE3E JP $C9CD      ; Check for end game room

; Check room connection to the right
;
; Used by the routine at #R$CD95.
c$CE41 LD A,($A226)  ; {Return if no room connection on the right
 $CE44 OR A          ;
 $CE45 RET Z         ; }
 $CE46 LD ($A251),A  ; Set the new room
 $CE49 LD A,$08      ; {Set the new x-position (8)
 $CE4B LD ($A24F),A  ; }
 $CE4E POP BC        ; Restore #REGbc
 $CE4F JP $C9CD      ; Check for end game room

; Configure Rex for jump
;
; Used by the routines at #R$9470 and #R$A0F8.
c$CE52 LD A,($A255)  ; {Return if Rex is falling
 $CE55 OR A          ;
 $CE56 RET NZ        ; }
 $CE57 LD A,($A256)  ; {Return if Rex is jumping
 $CE5A OR A          ;
 $CE5B RET NZ        ; }
 $CE5C LD A,$01      ; {Set Rex jump active
 $CE5E LD ($A256),A  ; }
 $CE61 LD HL,$CE68   ; {Set #R$A259 the address pointer for the table of
 $CE64 LD ($A259),HL ; y-offsets increments for jumping}
 $CE67 RET           ;

; FOOT MAN and Rex jumping y-offsets increments
b$CE68 DEFB $06,$06,$04,$04,$02,$02,$00,$00
 $CE70 DEFB $00,$00,$FF

; Unused
s$CE73 DEFB $08

; Handle Rex jumping
;
; Used by the routine at #R$9470.
c$CE74 LD A,($A256)  ; {Return if Rex not jumping
 $CE77 OR A          ;
 $CE78 RET Z         ; }
 $CE79 LD HL,($A1B2) ; {Set #REGhl the address into tile type buffer pointing
 $CE7C LD DE,$0021   ; over Rex
 $CE7F ADD HL,DE     ; }
 $CE80 CALL $CDF5    ; Check if tile type is wall
 $CE83 JP Z,$CEAA    ; Jump to start falling if tile is wall
 $CE86 INC HL        ; Increment address
 $CE87 CALL $CDF5    ; Check if tile type is wall
 $CE8A JP Z,$CEAA    ; Jump to start falling if tile is wall
 $CE8D LD A,($A250)  ; {Substract to y-position of Rex the corresponding
 $CE90 LD HL,($A259) ; y-offset pointed by #R$A259
 $CE93 LD E,(HL)     ;
 $CE94 SUB E         ; }
 $CE95 CP $08        ; {If y-position of Rex is less than 8 then jump forward
 $CE97 JP C,$CEC7    ; to stop jumping}
 $CE9A LD ($A250),A  ; Set the new y-position of Rex
 $CE9D INC HL        ; {Increment address pointer into the y-offset table for
 $CE9E LD ($A259),HL ; jumping}
 $CEA1 LD A,(HL)     ; {Return if not arrived to the end of the y-offset table
 $CEA2 CP $FF        ;
 $CEA4 RET NZ        ; }
 $CEA5 XOR A         ; {Set Rex not jumping
 $CEA6 LD ($A256),A  ; }
 $CEA9 RET           ;
; Rex start falling after wall collision
*$CEAA LD A,($A25D)  ; {If Rex collides with tile type $03 (tile of death) then
 $CEAD CP $03        ; jump to kill Rex
 $CEAF CALL Z,$9CC5  ; }
; This entry point is used by the routine at #R$A0F8.
*$CEB2 LD A,$02      ; {Set falling speed
 $CEB4 LD ($A255),A  ; }
 $CEB7 XOR A         ; {Set not jumping
 $CEB8 LD ($A256),A  ; }
 $CEBB LD A,($A250)  ; {Return if Rex y-position is not grid fixed
 $CEBE AND $07       ;
 $CEC0 OR A          ;
 $CEC1 RET NZ        ; }
 $CEC2 XOR A         ; {Set Rex not falling
 $CEC3 LD ($A255),A  ; }
 $CEC6 RET           ;
; Rex start falling after collision with top border room
*$CEC7 XOR A         ; {Set not jumping
 $CEC8 LD ($A256),A  ; }
 $CECB LD A,$02      ; {Set falling speed
 $CECD LD ($A255),A  ; }
 $CED0 LD A,($A227)  ; {Return if no top room connection
 $CED3 OR A          ;
 $CED4 RET Z         ; }
 $CED5 LD ($A251),A  ; Set the top room to be the current room
 $CED8 LD A,$A0      ; {Set y-position of Rex to be 160
 $CEDA LD ($A250),A  ; }
 $CEDD XOR A         ; {Set Rex to not falling
 $CEDE LD ($A255),A  ; }
 $CEE1 POP BC        ; Restore #REGbc
 $CEE2 JP $C9CD      ; Check for end game room

; Handle Rex falling
;
; Used by the routine at #R$9470.
c$CEE5 LD A,($A256)  ; {Return if Rex is jumping
 $CEE8 OR A          ;
 $CEE9 RET NZ        ; }
 $CEEA LD A,($A250)  ; {Add falling speed to y-position of Rex
 $CEED LD HL,$A255   ;
 $CEF0 ADD A,(HL)    ; }
 $CEF1 CP $BA        ; {if y-position is greater then 186 jump to check bottom
 $CEF3 JP NC,$CF3B   ; room}
 $CEF6 LD ($A250),A  ; Set the new y-position
 $CEF9 AND $07       ; {Return if y-position is not grid fixed
 $CEFB OR A          ;
 $CEFC RET NZ        ; }
 $CEFD LD A,($A24F)  ; {Set #R$A248 the x-position of Rex
 $CF00 LD ($A248),A  ; }
 $CF03 LD A,($A250)  ; {Set #R$A249 the y-position of Rex
 $CF06 LD ($A249),A  ; }
 $CF09 LD A,($A254)  ; Set #REGa the face direction
 $CF0C CALL $A6AB    ; Computes address position in tile type buffer based on
                     ; (x,y) position on screen
 $CF0F LD DE,$0061   ; {Set #REGhl to point into tile type buffer under Rex
 $CF12 ADD HL,DE     ; feet}
 $CF13 LD A,(HL)     ; Set #REGa the tile type
 $CF14 CALL $CE17    ; Check if tile type is 'background'
 $CF17 JP NZ,$CF36   ; Jump to stop falling if not background
 $CF1A INC HL        ; Increment address
 $CF1B LD A,(HL)     ; Set #REGa the tile type
 $CF1C CALL $CE17    ; Check if tile type is 'background'
 $CF1F JP NZ,$CF36   ; Jump to stop falling if not background
 $CF22 LD A,($A25D)  ; {If Rex collides with tile type $03 (tile of death) then
 $CF25 CP $03        ; jump to kill Rex
 $CF27 CALL Z,$9CC5  ; }
 $CF2A LD A,($A255)  ; {Increase falling speed by 2
 $CF2D ADD A,$02     ; }
 $CF2F CP $06        ; {Return if falling speed greater than 4
 $CF31 RET Z         ; }
 $CF32 LD ($A255),A  ; Set the new falling speed
 $CF35 RET           ;
; Rex has finished falling
*$CF36 XOR A         ; {Set falling speed to 0
 $CF37 LD ($A255),A  ; }
 $CF3A RET           ;
; Rex has fallen through bottom room
*$CF3B LD A,($A228)  ; {If no bottom room connection then jump to kill Rex
 $CF3E OR A          ;
 $CF3F JP Z,$CF4E    ; }
 $CF42 LD ($A251),A  ; Set the new room
 $CF45 LD A,$08      ; {Set the new y-position of Rex as 8
 $CF47 LD ($A250),A  ; }
 $CF4A POP BC        ; Restore #REGbc
 $CF4B JP $C9CD      ; Check for end game room
; No room connection, kill Rex
*$CF4E XOR A         ; {Set Rex to not jumping nor falling
 $CF4F LD ($A255),A  ;
 $CF52 LD ($A256),A  ; }
 $CF55 CALL $9CC5    ; Handle Rex dead
 $CF58 RET           ;

; Handle enemy projectile collision with Rex
;
; Used by the routine at #R$9470.
c$CF59 LD A,($A1EE)    ; {Return if Rex is dead
 $CF5C OR A            ;
 $CF5D RET NZ          ; }
 $CF5E LD A,($A1F9)    ; {Return if Rex is teleporting
 $CF61 OR A            ;
 $CF62 RET NZ          ; }
 $CF63 LD IY,$5D22     ; Set #REGiy to base address for enemy projectiles
 $CF67 LD B,$14        ; Set #REGb to the number of projectiles to check
*$CF69 LD A,(IY+$06)   ; check projectile status
 $CF6C CP $01          ; is flying?
 $CF6E JP NZ,$CFAB     ; Jump forward and check next projectile if not flying
 $CF71 LD A,($A250)    ; {Check if projectile y-position is in range of
 $CF74 ADD A,$05       ; collision based on Rex y-position
 $CF76 CP (IY+$01)     ;
 $CF79 JP NC,$CFAB     ;
 $CF7C ADD A,$11       ;
 $CF7E CP (IY+$01)     ;
 $CF81 JP C,$CFAB      ; }
 $CF84 LD A,($A24F)    ; {Check if projectile x-position is in range of
 $CF87 CP (IY+$00)     ; collision based on Rex x-position
 $CF8A JP NC,$CFAB     ;
 $CF8D ADD A,$10       ;
 $CF8F CP (IY+$00)     ;
 $CF92 JP C,$CFAB      ; }
; Impact with Rex
 $CF95 LD (IY+$06),$02 ; Set projectile status to impact #1
 $CF99 LD A,($A1E2)    ; Check if Rex has the shield activated
 $CF9C OR A            ; {Jump to kill Rex if shield not active
 $CF9D JP Z,$CFA8      ; }
; Shield activated
 $CFA0 LD L,$05        ; Set #REGl to the shield loss quantity
 $CFA2 CALL $98EC      ; Handle shield loss
 $CFA5 JP $CFAB        ; Jump to handle next projectile
; Shield not activated
*$CFA8 CALL $9CC5      ; Kill Rex
*$CFAB LD DE,$000F     ; {Point #REGiy to the next projectile data
 $CFAE ADD IY,DE       ; }
 $CFB0 DEC B           ; Decrement projectile counter
 $CFB1 JP NZ,$CF69     ; Jump back and check next projectile
 $CFB4 RET             ;

; Handle collision detection of enemy with Rex and projectiles
;
; Used by the routine at #R$BC48.
c$CFB5 LD A,($A1EE)    ; {Return if Rex is dead
 $CFB8 OR A            ;
 $CFB9 RET NZ          ; }
; Configure opcodes for collision box according to enemy type
 $CFBA LD A,$1E        ; {Configure opcode ADD A at $D00E to add $1E
 $CFBC LD ($D00F),A    ; (y-position height range)}
 $CFBF LD A,$16        ; {Configure opcode ADD A at $D01E to add $1E
 $CFC1 LD ($D01F),A    ; (x-position width range)}
 $CFC4 LD A,$10        ; {Configure opcode ADD A at $D0A7 and $D0B8 to add $10
 $CFC6 LD ($D0A8),A    ;
 $CFC9 LD ($D0B9),A    ; }
 $CFCC LD A,$10        ; {Configure opcode SUB at $D019 to substract $10
 $CFCE LD ($D01A),A    ; (x-position width range)}
 $CFD1 LD A,(IX+$02)   ; {Jump forward if enemy moving left
 $CFD4 OR A            ;
 $CFD5 JP Z,$CFDD      ; }
 $CFD8 LD A,$08        ; {Enemy moving right, configure opcode SUB at $D019 to
 $CFDA LD ($D01A),A    ; substract $08 (x-position width range)}
*$CFDD LD A,(IX+$09)   ; {Check enemy type
 $CFE0 AND $7F         ; }
 $CFE2 CP $0E          ; is TRIANGLE?
 $CFE4 JP Z,$CFEA      ; Jump to reconfigure opcodes
 $CFE7 JP $CFFC        ; Jump forward and check for collision
; reconfigure opcodes for TRIANGLE
*$CFEA LD A,$16        ; {Configure opcode ADD A at $D00E to add $16
 $CFEC LD ($D00F),A    ; (y-position height range)}
 $CFEF LD A,$0E        ; {Configure opcode ADD A at $D01E to add $0E
 $CFF1 LD ($D01F),A    ; (x-position width range)}
 $CFF4 LD A,$08        ; {Configure opcode ADD A at $D0A7 and $D0B8 to add $08
 $CFF6 LD ($D0A8),A    ;
 $CFF9 LD ($D0B9),A    ; }
*$CFFC LD A,($A1F9)    ; {Jump forward if Rex is teleporting
 $CFFF OR A            ;
 $D000 JP NZ,$D07E     ; }
; check collision with Rex
 $D003 LD HL,$A250     ; Set #REGhl the y-position of Rex
 $D006 LD A,(IX+$01)   ; {Check if y-position of enemy is in the range of
 $D009 SUB $10         ; collision with Rex and jump forward if not
 $D00B CP (HL)         ;
 $D00C JR NC,$D07E     ;
 $D00E ADD A,$1E       ;
 $D010 CP (HL)         ;
 $D011 JR C,$D07E      ; }
 $D013 LD HL,$A24F     ; Set #REGhl the x-position of Rex
 $D016 LD A,(IX+$00)   ; {Check if x-position of enemy is in the range of
 $D019 SUB $10         ; collision with Rex
 $D01B CP (HL)         ;
 $D01C JR NC,$D07E     ;
 $D01E ADD A,$16       ;
 $D020 CP (HL)         ;
 $D021 JR C,$D07E      ; }
; collision with Rex detected and shield activated
 $D023 LD A,($A1E2)    ; {Jump forward if shield not activated
 $D026 OR A            ;
 $D027 JP Z,$D04D      ; }
 $D02A LD A,(IX+$09)   ; {Jump forward if entity is bubble, smartbomb or
 $D02D CP $FE          ; question
 $D02F JP Z,$D04D      ;
 $D032 CP $FD          ;
 $D034 JP Z,$D04D      ;
 $D037 CP $FC          ;
 $D039 JP Z,$D04D      ; }
 $D03C CALL $9807      ; Destroy enemy
 $D03F LD A,(IX+$14)   ; {Computes shield loss into #REGl shield loss = enemy
 $D042 SLA A           ; health * 4
 $D044 SLA A           ;
 $D046 LD L,A          ; }
 $D047 CALL $98EC      ; Handle shield loss
 $D04A JP $D069        ; Jump forward
; collision with Rex detected and shield not activated
*$D04D LD A,(IX+$18)   ; {Jump forward if enemy is teleporting
 $D050 OR A            ;
 $D051 JP NZ,$D07E     ; }
 $D054 LD A,(IX+$09)   ; {Jump forward if entity is bubble, smartbomb or
 $D057 CP $FE          ; question
 $D059 JP Z,$D069      ;
 $D05C CP $FD          ;
 $D05E JP Z,$D069      ;
 $D061 CP $FC          ;
 $D063 JP Z,$D069      ; }
 $D066 CALL $9CC5      ; Handle Rex dead
; Rex takes bubble, smartbombs or question
*$D069 LD A,(IX+$09)   ; check enemy?
 $D06C CP $FE          ; is bubble?
 $D06E CALL Z,$D204    ; Jump to handles Rex takes bubble
 $D071 CP $FD          ; is smartbomb?
 $D073 CALL Z,$D22C    ; Jump to handle Rex takes smartbomb
 $D076 LD A,(IX+$09)   ;
 $D079 CP $FC          ; is question?
 $D07B CALL Z,$D24E    ; Jump to handle question
; No collision with Rex - Check collision with Rex projectiles
*$D07E LD A,(IX+$09)   ; {Return if enemy is DROP
 $D081 CP $82          ;
 $D083 RET Z           ; }
 $D084 CP $84          ; {Jump forward if enemy is not PINE
 $D086 JP NZ,$D08E     ; }
 $D089 LD A,(IX+$12)   ; {Return if PINE animation state is stand-by
 $D08C OR A            ;
 $D08D RET Z           ; }
*$D08E LD IY,$5B60     ; Set #REGiy to the base address for Rex projectiles
                       ; configuration
 $D092 LD B,$1E        ; Set #REGb to the number of projectiles to check
*$D094 LD A,(IY+$06)   ; Set #REGa to the projectile status
 $D097 CP $01          ; is flying?
 $D099 JP NZ,$D13F     ; Jump to check another projectile if not flying
 $D09C LD A,(IX+$01)   ; {Jump to check another projectile if y-position of
 $D09F ADD A,$05       ; projectile is not in range of collision with the enemy
 $D0A1 CP (IY+$01)     ; y-position
 $D0A4 JP NC,$D13F     ;
 $D0A7 ADD A,$10       ;
 $D0A9 CP (IY+$01)     ;
 $D0AC JP C,$D13F      ; }
 $D0AF LD A,(IX+$00)   ; {Jump to check another projectile if x-position of
 $D0B2 CP (IY+$00)     ; projectile is not in range collision with then enemy
 $D0B5 JP NC,$D13F     ; x-position
 $D0B8 ADD A,$10       ;
 $D0BA CP (IY+$00)     ;
 $D0BD JP C,$D13F      ; }
; handle projectile collision with entity
 $D0C0 LD A,(IX+$09)   ; Check for entity type
 $D0C3 CP $FE          ; {Jump to check another projectile if entity is bubble
 $D0C5 JP Z,$D13F      ; }
 $D0C8 CP $FD          ; {Jump to check another projectile if entity is
 $D0CA JP Z,$D13F      ; smartbomb}
 $D0CD CP $FC          ; {Jump to handle another projectile if entity is
 $D0CF JP Z,$D13F      ; question}
 $D0D2 LD A,($A1AC)    ; {Jump forward if weapon type is laser
 $D0D5 CP $02          ;
 $D0D7 JP NZ,$D0E1     ; }
 $D0DA LD (IY+$06),$00 ; Destroy laser projectile
 $D0DE JP $D0F3        ; Jump forward
; non laser impact
*$D0E1 LD (IY+$06),$02 ; Set projectile status to impact #1
 $D0E5 LD A,($D5DA)    ; Check channel 3
 $D0E8 CP $FF          ; {Jump forward if channel in use
 $D0EA JP NZ,$D0F3     ; }
 $D0ED LD DE,$D51F     ; Set #REGde to base address for projectile impact sound
 $D0F0 CALL $D37F      ; Configure sound channel and mixer register
; handle enemy behaviour on projectile impact
*$D0F3 LD A,(IX+$09)   ; Check enemy type
 $D0F6 CP $06          ; {Handle collision if enemy type FOOT MAN DYING 6
 $D0F8 CALL Z,$D1B7    ; }
 $D0FB LD A,(IX+$09)   ; Check enemy type
 $D0FE CP $06          ; {Jump to handle next projectile if enemy type is FOOT
 $D100 JP Z,$D13F      ; MAN DYING 6}
 $D103 LD A,(IX+$14)   ; {Jump forward to handle next projectile if enemy
 $D106 OR A            ; health is zero
 $D107 JP Z,$D13F      ; }
 $D10A DEC A           ; {Decrement enemy health
 $D10B LD (IX+$14),A   ; }
 $D10E CP $01          ; {Jump forward if enemy health <> 1
 $D110 JP NZ,$D149     ; }
; enemy health is equal to 1
 $D113 LD A,(IX+$09)   ; {Jump forward and destroy enemy if enemy type is not
 $D116 AND $7F         ; FOOT MAN
 $D118 OR A            ;
 $D119 JP NZ,$D13C     ; }
 $D11C LD A,(IX+$02)   ; {Jump forward to check projectile direction if FOOT
 $D11F OR A            ; MAN is facing left
 $D120 JP NZ,$D12E     ; }
 $D123 LD A,(IY+$04)   ; {check projectile direction
 $D126 BIT 7,A         ; }
 $D128 JP NZ,$D136     ; Jump forward and FOOT MAN dying #6 animation
 $D12B JP $D13C        ; Jump to destroy enemy
*$D12E LD A,(IY+$04)   ; {check projectile direction
 $D131 BIT 7,A         ; }
 $D133 JP NZ,$D13C     ; Jump to destroy enemy if projectile is facing left
*$D136 CALL $D15A      ; Handle FOOT MAN dying #6
 $D139 JP $D13F        ; Jump to handle next projectile
*$D13C CALL $9807      ; Destroy enemy
; check for the next projectile if any
*$D13F LD DE,$000F     ; {Set #REGiy point to the next projectile configuration
 $D142 ADD IY,DE       ; }
 $D144 DEC B           ; Decrement projectile counter
 $D145 JP NZ,$D094     ; Jump back and handle next projectil until there are
                       ; projectiles
 $D148 RET             ;
; Enemy health is <> 1
*$D149 LD A,(IX+$09)   ; {Jump and handle next projectile. Enemy type $08
 $D14C AND $7F         ; doesn't exist
 $D14E CP $08          ;
 $D150 JP NZ,$D13F     ; }
 $D153 LD (IX+$10),$04 ; {Code not executed
 $D157 JP $D13F        ; }
; Handle FOOT MAN dying #6
*$D15A LD A,($A1AC)    ; Check weapon type
 $D15D CP $02          ; {Jump to destroy enemy if weapon type is laser
 $D15F JP Z,$9807      ; }
 $D162 CP $04          ; {Configure FOOT MAN jumping if weapon type is spray
 $D164 CALL Z,$C673    ; }
 $D167 LD A,(IX+$02)   ; {Change direction
 $D16A XOR $01         ;
 $D16C LD (IX+$02),A   ; }
 $D16F LD A,$04        ; {Set speed
 $D171 LD (IX+$10),A   ; }
 $D174 LD HL,$AF7A     ; {Set address of table offsets for FOOT MAN dying
 $D177 LD (IX+$0A),L   ; animation
 $D17A LD (IX+$0B),H   ; }
 $D17D LD HL,$8258     ; {Set address for graphic data of FOOT MAN dying
 $D180 LD (IX+$16),L   ;
 $D183 LD (IX+$17),H   ; }
 $D186 LD (IX+$09),$06 ; Set enemy type
 $D18A LD (IX+$11),$06 ; Set counter for state change
 $D18E LD (IX+$14),$02 ; Set health
 $D192 LD (IX+$0E),$03 ; Set sprite width
 $D196 LD A,($A1AC)    ; {Return if weapon type is spray or laser
 $D199 CP $04          ;
 $D19B RET Z           ;
 $D19C CP $02          ;
 $D19E RET Z           ; }
 $D19F LD HL,$5843     ; {Set base address to attribute file for score points
 $D1A2 LD ($A1D2),HL   ; }
 $D1A5 LD A,$09        ; {Init counter for score points
 $D1A7 LD ($A1D4),A    ; }
 $D1AA LD HL,$0002     ; {Set next score points
 $D1AD LD ($A1D5),HL   ; }
 $D1B0 LD DE,$0001     ; Set actual score points
 $D1B3 CALL $9945      ; Increment score
 $D1B6 RET             ;
; handle projectile collision with FOOT MAN dying 6
*$D1B7 LD A,($A1AC)    ; {Return if projectile type is spray
 $D1BA CP $04          ;
 $D1BC RET Z           ; }
 $D1BD LD A,$04        ; {Set enemy speed
 $D1BF LD (IX+$10),A   ; }
 $D1C2 LD HL,$AF7A     ; {Set address pointer for offsets animation
 $D1C5 LD (IX+$0A),L   ;
 $D1C8 LD (IX+$0B),H   ; }
 $D1CB LD HL,$8258     ; {Set address pointer of graphic data for FOOTMAN dying
 $D1CE LD (IX+$16),L   ;
 $D1D1 LD (IX+$17),H   ; }
 $D1D4 LD (IX+$09),$06 ; Set entity type
 $D1D8 LD (IX+$11),$06 ; Set counter for state change
 $D1DC LD (IX+$14),$02 ; Set enemy health
 $D1E0 LD A,($A1D4)    ; {Decrement score points counter and return if zero
 $D1E3 DEC A           ;
 $D1E4 RET Z           ; }
 $D1E5 LD ($A1D4),A    ; Set the new score point counter value
 $D1E8 LD DE,($A1D5)   ; Set #REGde bonus score points
 $D1EC CALL $9945      ; Increment score
 $D1EF LD HL,($A1D5)   ; {Increment bonus score points
 $D1F2 LD DE,$0001     ;
 $D1F5 ADD HL,DE       ;
 $D1F6 LD ($A1D5),HL   ; }
 $D1F9 LD HL,($A1D2)   ; {Increment base address into attribute file pointing
 $D1FC LD DE,$0003     ; to bonus points icon in HUD
 $D1FF ADD HL,DE       ;
 $D200 LD ($A1D2),HL   ; }
 $D203 RET             ;
; handle Rex takes bubble
*$D204 PUSH AF         ; Save #REGaf
 $D205 LD DE,$D573     ; Set #REGde sound buffer for catching small bubble
 $D208 CALL $D37F      ; Configure sound channel and mixer register
 $D20B LD (IX+$0C),$00 ; Set bubble not visible
 $D20F LD A,$26        ; Set #REGa the quantity of energy to increase
 $D211 CALL $BA09      ; Handle weapon energy increase
 $D214 XOR A           ; {Active HDU flash
 $D215 LD ($A1DB),A    ; }
 $D218 LD A,(IX+$15)   ; {Jump forward and return if bubble small
 $D21B OR A            ;
 $D21C JP Z,$D22A      ; }
 $D21F LD A,$26        ; Set #REGa the quantity of energy to increase
 $D221 CALL $BA09      ; Handle weapon energy increase
 $D224 LD DE,$D55E     ; Set #REGde sound buffer for catching big bubble
 $D227 CALL $D37F      ; Configure sound channel and mixer register
*$D22A POP AF          ; Restore #REGaf
 $D22B RET             ;
; handle Rex takes smartbomb
*$D22C LD (IX+$0C),$00 ; Set smartbomb to not visible
 $D230 LD A,($A205)    ; {Increase number of smartbombs
 $D233 INC A           ; }
 $D234 CP $04          ; {Return if number of smartbombs is qual to 4
 $D236 RET Z           ; }
 $D237 LD ($A205),A    ; Set the new number of smartbombs
 $D23A CALL $A371      ; Draw smartbombs
 $D23D LD DE,$D588     ; Set #REGde to the address for the smartbomb take sound
 $D240 CALL $D37F      ; Configure sound channel and mixer register
 $D243 RET             ;

; Address pointers into text definition windows for bonus
;
; (1-speed up 2-shield loss 3-1000 bonus 4-energy loss 5-100 rapid shots)
b$D244 DEFB $FE,$AB,$11,$AC,$24,$AC,$37,$AC
 $D24C DEFB $4A,$AC

; Handle Rex takes question
;
; Used by the routine at #R$CFB5.
c$D24E LD (IX+$0C),$00 ; Set question to not visble
 $D252 PUSH IX         ; {Save #REGix and #REGbc
 $D254 PUSH BC         ; }
 $D255 CALL $D36F      ; Reset sound volume chanels
 $D258 CALL $D63B      ; Copy screen display file into room graphic data buffer
 $D25B LD BC,$4E20     ; SET #REGbc = 20.000
 $D25E CALL $C94E      ; Wait some time ~1s (128 t-states 20.000 times)
 $D261 LD IX,$ABFE     ; Point #REGix to the text defintion for SPEED UP
 $D265 LD B,$01        ; Set #REGb to the number of rows to draw
 $D267 CALL $A2E6      ; Draw the windows into the display file
 $D26A LD HL,$1CE8     ; {Set #R$A216 the Bonus Windows Loop Counter (7200
 $D26D LD ($A216),HL   ; loops)}
 $D270 CALL $A51D      ; {Set #REGa a random number between 1-4
 $D273 AND $03         ;
 $D275 INC A           ; }
 $D276 LD ($A208),A    ; Set #R$A208 to the number of bonus screen to show
                       ; (0-speed up 1-shield loss 2-1000 bonus 3-energy loss
                       ; 4-100 rapid shots)
 $D279 SLA A           ; {Set into #REGix the address of the text defintion
 $D27B LD E,A          ; corresponding to the number of bonus
 $D27C LD D,$00        ;
 $D27E LD HL,$D244     ;
 $D281 ADD HL,DE       ;
 $D282 LD E,(HL)       ;
 $D283 INC HL          ;
 $D284 LD D,(HL)       ;
 $D285 PUSH DE         ;
 $D286 POP IX          ; }
*$D288 CALL $A4AF      ; Print the line of text into the windows
 $D28B INC IX          ; Increment pointer for the next bonus line
 $D28D LD BC,($A216)   ; Set #REGbc to the Bonus Windows Counter
*$D291 PUSH BC         ; Save #REGbc
 $D292 CALL $A61F      ; Check FIRE pressed
 $D295 POP BC          ; Restore #REGbc
 $D296 JP Z,$D2C7      ; If FIRE key pressed jump to handle the bonus selected
 $D299 DEC BC          ; Decrement counter
 $D29A LD A,B          ; {Jump back and wait for keypressed if counter has not
 $D29B OR C            ; reached zero
 $D29C JP NZ,$D291     ; }
 $D29F LD HL,($A216)   ; {Reset loop counter (substract 200 loops to the
 $D2A2 LD DE,$00C8     ; previous counter)
 $D2A5 AND A           ;
 $D2A6 SBC HL,DE       ;
 $D2A8 LD ($A216),HL   ; }
 $D2AB LD A,H          ; {If loop counter less than 256 then jump to handle the
 $D2AC OR A            ; bonus on screen
 $D2AD JP Z,$D2C7      ; }
 $D2B0 LD A,($A208)    ; {Increment the bonus windows number
 $D2B3 INC A           ;
 $D2B4 LD ($A208),A    ; }
 $D2B7 CP $05          ; {if bonus number equals 5 then point to the first
 $D2B9 JP NZ,$D288     ; bonus
 $D2BC LD IX,$ABFE     ;
 $D2C0 XOR A           ;
 $D2C1 LD ($A208),A    ; }
 $D2C4 JP $D288        ; Jump back and show the next bonus
; handle bonus selected
*$D2C7 LD A,($A208)    ; Check bonus slected
 $D2CA OR A            ; is speed up?
 $D2CB JP Z,$D2F5      ; Jump to handle speed up bonus
 $D2CE CP $01          ; is shield loss?
 $D2D0 JP Z,$D305      ; Jump to handle shield loss
 $D2D3 CP $02          ; is 1000 bouns points?
 $D2D5 JP Z,$D310      ; Jump to handle bonus points
 $D2D8 CP $03          ; is energy loss?
 $D2DA JP Z,$D31C      ; handle energy loss
 $D2DD CP $04          ; is rapid shots?
 $D2DF JP Z,$D328      ; handle rapid shots
; return to normal game
*$D2E2 LD BC,$4E20     ; Set #REGbc to 20.000
 $D2E5 CALL $C94E      ; Wait some time ~1s (128 t-states 20.000 times)
 $D2E8 CALL $D346      ; Reset sound data buffer
 $D2EB POP BC          ; {Restore #REGbc and #REGix
 $D2EC POP IX          ; }
 $D2EE CALL $A432      ; Copy room graphic buffer to display file
 $D2F1 CALL $C932      ; Copy room color attribute buffer to attribute file
 $D2F4 RET             ;
; handle speed up
*$D2F5 LD A,$01        ; {Set Rex fast speed
 $D2F7 LD ($A20B),A    ; }
 $D2FA LD A,$C8        ; {Set speed up duration to 200
 $D2FC LD ($A20C),A    ; }
 $D2FF LD HL,$ABFE     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D302 JP $D2E2        ; Jump back and return to normal game
; handle shield loss
*$D305 LD L,$14        ; loss quantity to #REGl = 20
 $D307 CALL $98EC      ; Handle shield loss
 $D30A LD HL,$AC11     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D30D JP $D2E2        ; Jump back and return to normal game
; handle bonus points
*$D310 LD DE,$000A     ; Set #REGa to the bonus points obtained (*100)
 $D313 CALL $9945      ; Increment score
 $D316 LD HL,$AC24     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D319 JP $D2E2        ; Jump back and return to normal game
; handle energy loss
*$D31C CALL $BAB8      ; Handle double weapon energy loss
 $D31F CALL $A34D      ; Draw HUD
 $D322 LD HL,$AC37     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D325 JP $D2E2        ; Jump back and return to normal game
; handle rapid shots
*$D328 LD A,$01        ; {Set rapid shots
 $D32A LD ($A1D9),A    ; }
 $D32D LD A,$64        ; {Set number of rapid shots
 $D32F LD ($A1DA),A    ; }
 $D332 LD HL,$AC4A     ; Set #REGhl to point to the bonus text definition
                       ; address
 $D335 JP $D2E2        ; Jump back and return to normal game

; Increment number of lives
;
; Used by the routine at #R$9945.
c$D338 LD A,($A1FC)  ;
 $D33B INC A         ;
 $D33C CP $0A        ;
 $D33E RET Z         ;
 $D33F LD ($A1FC),A  ;
 $D342 CALL $98D9    ; Draws lives number on HUD
 $D345 RET           ;

; Reset sound data channels
;
; Used by the routines at #R$9470, #R$97AB, #R$97D2, #R$A68F and #R$C7AE.
c$D346 LD A,$38        ; {Set sound data buffer to disable noise and tone
 $D348 LD ($D5ED),A    ; }
 $D34B CALL $D41A      ; Send command to the mixer (disable noise and tone)
 $D34E LD HL,$D5CA     ; {Reset channels data
 $D351 LD DE,$D5CB     ;
 $D354 LD BC,$001D     ;
 $D357 LD (HL),$00     ;
 $D359 LDIR            ; }
 $D35B LD IX,$D5CA     ; {Initialise channels at #R$D5CA
 $D35F LD (IX+$00),$FF ;
 $D363 LD (IX+$08),$FF ;
 $D367 LD (IX+$10),$FF ; }
 $D36B CALL $D36F      ; Reset sound volume channels
 $D36E RET             ;

; Reset the 3 channel volumes of the AY-3-8912
;
; Used by the routines at #R$97AB, #R$97D2, #R$A68F, #R$C7AE and #R$D346.
c$D36F LD E,$00      ; Set #REGe to the volume value
 $D371 LD D,$08      ; Set #REGd to the sound register for channel 1
 $D373 CALL $D4F1    ; Reset volume of channel 1
 $D376 INC D         ; Set #REGd to the sound register for channel 2
 $D377 CALL $D4F1    ; Reset volume of channel 2
 $D37A INC D         ; Set #REGd to the sound register for channel 3
 $D37B CALL $D4F1    ; Reset volume of channel 3
 $D37E RET           ;

; Configure sound channel and mixer register
;
; Used by the routines at #R$9683, #R$9807, #R$99E3, #R$9BA7, #R$9D2D, #R$9E15,
; #R$9E3D, #R$A0F8, #R$B54C, #R$B5A8, #R$B810, #R$CFB5, #R$D204 and #R$D22C.
;
; DE Sound data address
c$D37F PUSH IY       ; {Save #REGiy, #REGix and #REGbc
 $D381 PUSH IX       ;
 $D383 PUSH BC       ; }
 $D384 PUSH DE       ; {Copy #REGde into #REGiy
 $D385 POP IY        ; }
 $D387 CALL $D390    ; Configure sound channel and mixer register
 $D38A POP BC        ; {Restore #REGiy, #REGix and #REGbc
 $D38B POP IX        ;
 $D38D POP IY        ; }
 $D38F RET           ;
; Configure sound channel and mixer register
*$D390 LD A,(IY+$00) ; {Set #REGix to the base address for the channel to
 $D393 DEC A         ; configure
 $D394 SLA A         ;
 $D396 SLA A         ;
 $D398 SLA A         ;
 $D39A LD C,A        ;
 $D39B LD B,$00      ;
 $D39D LD IX,$D5CA   ;
 $D3A1 ADD IX,BC     ; }
 $D3A3 LD A,(IY+$02) ; {Set number of tones
 $D3A6 LD (IX+$00),A ; }
 $D3A9 LD A,(IY+$06) ; {Set variation counter
 $D3AC LD (IX+$01),A ; }
 $D3AF PUSH IY       ; {Set address for sound data
 $D3B1 POP HL        ;
 $D3B2 LD BC,$0006   ;
 $D3B5 ADD HL,BC     ;
 $D3B6 LD (IX+$02),L ;
 $D3B9 LD (IX+$03),H ; }
 $D3BC LD A,(IY+$04) ; {Set base fine and coarse pitch
 $D3BF LD (IX+$04),A ;
 $D3C2 LD A,(IY+$05) ;
 $D3C5 LD (IX+$05),A ; }
 $D3C8 LD A,(IY+$03) ; {Set channel volume
 $D3CB LD (IX+$07),A ; }
 $D3CE LD A,(IY+$01) ; Set #REGa to the data mixer
 $D3D1 CP $00        ; {Jump forward if not zero
 $D3D3 JP NZ,$D3E9   ; }
 $D3D6 LD B,(IY+$00) ; {Disable noise for selected channel
 $D3D9 LD C,$04      ;
*$D3DB SLA C         ;
 $D3DD DJNZ $D3DB    ; }
 $D3DF LD A,($D5ED)  ; {Disable noise for the selected channel into the current
 $D3E2 OR C          ; data mixer
 $D3E3 LD ($D5ED),A  ; }
 $D3E6 JP $D41A      ; Send this data to the mixer register
*$D3E9 LD A,($D5ED)  ; {Set #REGb the current data mixer
 $D3EC LD B,A        ; }
 $D3ED LD A,(IY+$00) ; {if channel 1 then disable tone in channel 1 and enable
 $D3F0 CP $01        ; noise in channel 1
 $D3F2 JP NZ,$D3FC   ;
 $D3F5 RES 3,B       ;
 $D3F7 SET 0,B       ; }
 $D3F9 JP $D40C      ; Jump to update data mixer
*$D3FC CP $02        ; {if channel 2 then disable tone in channel 2 and enable
 $D3FE JP NZ,$D408   ; noise in channel 2
 $D401 RES 4,B       ;
 $D403 SET 1,B       ; }
 $D405 JP $D40C      ; Jump to update data mixer
*$D408 RES 5,B       ; {if channel 3 then disable tone in channel 3 and enable
 $D40A SET 2,B       ; noise in channel 3}
*$D40C LD A,B        ; {Update data mixer
 $D40D LD ($D5ED),A  ; }
 $D410 CALL $D41A    ; Send this data to the mixer register
 $D413 LD A,(IY+$01) ; {Copy noise/tone enable/disable
 $D416 LD (IX+$06),A ; }
 $D419 RET           ;
; This entry point is used by the routine at #R$D346.
*$D41A LD A,($D5ED)  ;
 $D41D LD D,$07      ;
 $D41F LD E,A        ;
 $D420 CALL $D4F1    ;
 $D423 RET           ;

; Send data to the mixer register of AY-3-8912
;
; Used in the routine at #R$D346.
*$D41A LD A,($D5ED)  ; Set #REGa to the value of the mixer
 $D41D LD D,$07      ; Set #REGd to the mixer register
 $D41F LD E,A        ; Copy value of the mixer to #REGe
 $D420 CALL $D4F1    ; Send mixer command to sound device
 $D423 RET           ;

; Play sound channels
;
; Used by the routine at #R$9470.
c$D424 LD B,$03      ; Set #REGb the number of channels to play
 $D426 LD IX,$D5CA   ; Set #REGix to address for channel #1 sound data
 $D42A LD D,$00      ; Set sound register for fine pitch on channel #1
 $D42C LD A,$01      ; {Set channel volume #1
 $D42E LD ($D5EF),A  ; }
*$D431 PUSH BC       ; {Save #REGbc and #REGde
 $D432 PUSH DE       ; }
 $D433 CALL $D473    ; Configure next tone/noise data for current channel
 $D436 POP DE        ;
 $D437 PUSH DE       ;
 $D438 LD A,(IX+$00) ; {Jump to next channel if this channel is disabled
 $D43B CP $FF        ;
 $D43D JP Z,$D460    ; }
 $D440 LD A,(IX+$06) ; {Jump forward if noise sound
 $D443 CP $00        ;
 $D445 JP NZ,$D458   ; }
; play note
 $D448 LD E,(IX+$04) ; {Send command for fine pitch
 $D44B CALL $D4F1    ; }
 $D44E INC D         ; Increase register number
 $D44F LD E,(IX+$05) ; {Send command for coarse pitch
 $D452 CALL $D4F1    ; }
 $D455 JP $D460      ; Jump forward and play next channel
; play noise
*$D458 LD E,(IX+$04) ; {Send command for noise pitch
 $D45B LD D,$06      ;
 $D45D CALL $D4F1    ; }
; play next channel
*$D460 LD BC,$0008   ; {Point #REGix to the next channel data buffer
 $D463 ADD IX,BC     ; }
 $D465 POP DE        ; {Restore #REGde and #REGbc
 $D466 POP BC        ; }
 $D467 INC D         ; {Increment register for next channel
 $D468 INC D         ; }
 $D469 LD A,($D5EF)  ; {Increment volume channel
 $D46C INC A         ;
 $D46D LD ($D5EF),A  ; }
 $D470 DJNZ $D431    ; Jump back and play next channel
 $D472 RET           ;

; Configure note for current channel
;
; Used by the routine at #R$D424.
;
; IX address pointer to channel data buffer
c$D473 LD A,(IX+$00)  ; {Return if channel is not active
 $D476 CP $FF         ;
 $D478 RET Z          ; }
 $D479 CALL $D4DC     ; Send channel volume command
 $D47C CALL $D4F1     ; Send channel volume command
 $D47F LD L,(IX+$02)  ; {Set #REGiy to the address pointer for the sound da
 $D482 LD H,(IX+$03)  ;
 $D485 PUSH HL        ;
 $D486 POP IY         ; }
 $D488 DEC (IX+$01)   ; Decrement variation counter
 $D48B JP Z,$D4AD     ; If counter is 0 jump to configure next note
 $D48E LD E,(IY+$01)  ; {Set #REGbc value of pitch and coarse delta
 $D491 LD C,E         ;
 $D492 RL E           ;
 $D494 SBC A,A        ;
 $D495 LD B,A         ; }
 $D496 LD L,(IX+$04)  ; {Increment pitch and coarse data for tone/noise
 $D499 LD H,(IX+$05)  ;
 $D49C ADD HL,BC      ;
 $D49D LD (IX+$04),L  ;
 $D4A0 LD (IX+$05),H  ; }
 $D4A3 LD A,(IX+$07)  ; {Increment/decrement volume
 $D4A6 ADD A,(IY+$02) ;
 $D4A9 LD (IX+$07),A  ; }
 $D4AC RET            ;
; check if there are more tones
*$D4AD DEC (IX+$00)   ; Decrement tones number?
 $D4B0 JP Z,$D4CB     ; if zero jump to disable channel
 $D4B3 INC IY         ; {Point #REGiy to the next tone data
 $D4B5 INC IY         ;
 $D4B7 INC IY         ; }
 $D4B9 PUSH IY        ; {Update address pointer to tone data
 $D4BB POP HL         ;
 $D4BC LD (IX+$02),L  ;
 $D4BF LD (IX+$03),H  ; }
 $D4C2 LD A,(IY+$00)  ; {Set new variation counter
 $D4C5 LD (IX+$01),A  ; }
 $D4C8 JP $D473       ; Configure next tone
; disable channel
*$D4CB LD A,($D5EF)   ; {Set volume to zero for current channel
 $D4CE ADD A,$07      ;
 $D4D0 LD D,A         ;
 $D4D1 LD E,$00       ; }
 $D4D3 CALL $D4F1     ; Send volume command
 $D4D6 LD A,$FF       ; {Disable current channel
 $D4D8 LD (IX+$00),A  ; }
 $D4DB RET            ;

; Send channel volume command
;
; Used by the routine at #R$D473.
c$D4DC LD A,($D5EF)  ; {Set channel volume register into #REGd
 $D4DF ADD A,$07     ;
 $D4E1 LD D,A        ; }
 $D4E2 LD E,(IX+$07) ; {Set #REGe the volume value (bits 7-4)
 $D4E5 SRL E         ;
 $D4E7 SRL E         ;
 $D4E9 SRL E         ;
 $D4EB SRL E         ; }
 $D4ED CALL $D4F1    ; Send command to AY-3-8912
 $D4F0 RET           ;

; Send commands to AY-3-8912
;
; Used by the routines at #R$D36F, #R$D390, #R$D424, #R$D473 and #R$D4DC.
;
; D Register to write
; E Data to write
c$D4F1 LD BC,$FFFD   ;
 $D4F4 OUT (C),D     ;
 $D4F6 LD B,$BF      ;
 $D4F8 OUT (C),E     ;
 $D4FA RET           ;

; Sound data
;
; #TABLE(default)
; { =h Byte | =h Meaning }
; { $00 | Channel number (1-3) }
; { $01 | Noise/tone 0 - tone  1 - noise }
; { $02 | number of tones }
; { $03 | Channel Volume (bits 7-4) }
; { $04 | base fine/noise pitch }
; { $05 | base coarse pitch }
; { $06 | variation counter for note #1 }
; { $07 | pitch delta for note #1 (bit 7 - coarse pitch / bits6-0 fine pitch) }
; { $08 | volume delta for note #1 }
; { $09 + | counter, pitch and volume for note #n }
; TABLE#
b$D4FB DEFB $01,$01,$01,$AA,$0A,$00 ; {Weapon sound for basic laser, doub fire
 $D501 DEFB $0F,$00,$F4             ; and multiple}
 $D504 DEFB $03,$01,$02,$64,$0A,$00 ; {Enemy weapon sound
 $D50A DEFB $03,$05,$14             ; }
 $D50D DEFB $01,$01,$01,$96,$0A,$00 ; {Weapon sound for laser
 $D513 DEFB $64,$0A,$FF             ; }
 $D516 DEFB $01,$01,$01,$B8,$0A,$00 ; {Weapon sound for spray
 $D51C DEFB $03,$00,$9C             ; }
 $D51F DEFB $03,$01,$01,$78,$0A,$00 ; {Projectile impact sound
 $D525 DEFB $02,$00,$F0             ; }
 $D528 DEFB $03,$01,$02,$FF,$0A,$00 ; {Explosion sound
 $D52E DEFB $08,$3C,$00             ;
 $D531 DEFB $26,$00,$F9             ; }
 $D534 DEFB $02,$00,$01,$82,$E8,$03 ; {Shield sound
 $D53A DEFB $04,$00,$00             ; }
 $D53D DEFB $02,$00,$01,$FF,$20,$4E ; {Sound not used
 $D543 DEFB $02,$0A,$F6             ; }
 $D546 DEFB $02,$00,$02,$A6,$40,$9C ; {Rex teleporting
 $D54C DEFB $5A,$00,$01             ;
 $D54F DEFB $1E,$00,$FA             ; }
 $D552 DEFB $02,$00,$02,$3C,$40,$9C ; {Rex dead
 $D558 DEFB $1E,$00,$06             ;
 $D55B DEFB $5A,$00,$FF             ; }
 $D55E DEFB $02,$00,$05,$96,$DE,$01 ; {Big Bubble catching sound
 $D564 DEFB $02,$00,$00             ;
 $D567 DEFB $02,$CC,$00             ;
 $D56A DEFB $02,$00,$00             ;
 $D56D DEFB $02,$D1,$00             ;
 $D570 DEFB $02,$00,$00             ; }
 $D573 DEFB $02,$00,$05,$96,$EF,$00 ; {Small Bubble catching sound
 $D579 DEFB $02,$00,$00             ;
 $D57C DEFB $02,$E6,$00             ;
 $D57F DEFB $02,$00,$00             ;
 $D582 DEFB $02,$E9,$00             ;
 $D585 DEFB $02,$00,$00             ; }
 $D588 DEFB $02,$00,$05,$96,$BC,$03 ; {Smartbomb catching sound
 $D58E DEFB $02,$00,$00             ;
 $D591 DEFB $02,$CA,$00             ;
 $D594 DEFB $02,$00,$00             ;
 $D597 DEFB $02,$CD,$00             ;
 $D59A DEFB $02,$00,$00             ; }
 $D59D DEFB $02,$00,$09,$C8,$20,$4E ; {Respawn sound
 $D5A3 DEFB $0A,$00,$01             ;
 $D5A6 DEFB $02,$00,$9C             ;
 $D5A9 DEFB $02,$00,$00             ;
 $D5AC DEFB $0A,$0A,$FF             ;
 $D5AF DEFB $0A,$46,$00             ;
 $D5B2 DEFB $02,$00,$9C             ;
 $D5B5 DEFB $05,$00,$00             ;
 $D5B8 DEFB $02,$04,$64             ;
 $D5BB DEFB $04,$00,$00             ; }
 $D5BE DEFB $02,$00,$02,$A0,$40,$9C ; {Shield recharging sound
 $D5C4 DEFB $07,$05,$01             ;
 $D5C7 DEFB $07,$FB,$FF             ; }

; Channel data buffer por playing sound
;
; #TABLE(default)
; { =h Byte | =h Meaning }
; { $00 | number of tones }
; { $01 | variation counter }
; { $02 - $03 | Address pointer to sound data }
; { $04 | fine pitch / noise pitch }
; { $05 | coarse pitch }
; { $06 | Noise/tone 0 - Tone  1 - Noise }
; { $07 | Volume (bits 7-4 ) }
; TABLE#
g$D5CA DEFS $08      ; Data channel 1
 $D5D2 DEFS $08      ; Data channel 2
 $D5DA DEFS $08      ; Data channel 3

; Unused
s$D5E2 DEFS $0B

; Sound data mixer
g$D5ED DEFS $01

; Unused
s$D5EE DEFS $01

; Channel volumne number (1-3)
g$D5EF DEFS $01

; Routine not used
s$D5F0 LD IX,$5E66
 $D5F4 LD A,($A22B)
 $D5F7 LD B,A
*$D5F8 LD A,(IX+$0C)
 $D5FB OR A
 $D5FC RET Z
 $D5FD LD DE,$001B
 $D600 ADD IX,DE
 $D602 DJNZ $D5F8
 $D604 LD IX,$03E8
 $D608 RET

; Show weapon bonus windows
;
; This entry point is used by the routine at #R$A0F8.
c$D609 LD A,(HL)     ; {Return if weapon has been collected previously
 $D60A OR A          ;
 $D60B RET NZ        ; }
 $D60C LD (HL),$FF   ; Set weapon collected in text definition buffer
 $D60E INC HL        ; {Set #REGhl the number of lines to draw on windows
 $D60F LD A,(HL)     ; }
 $D610 INC HL        ; Point #REGhl to text definition data
 $D611 PUSH IX       ; {Save #REGix, #REGiy and #REGbc
 $D613 PUSH IY       ;
 $D615 PUSH BC       ; }
 $D616 CALL $D36F    ; Reset channel volumes
 $D619 PUSH HL       ; {Copy #REGhl into #REGix
 $D61A POP IX        ; }
 $D61C CALL $D63B    ; Copy screen display file into room graphic data buffer
 $D61F LD B,A        ; Set #REGb the number of lines to draw
 $D620 CALL $A2E6    ; Draw windows with weapon text
 $D623 LD BC,$2710   ; Set #REGbc = 10.000
 $D626 CALL $C94E    ; Wait some time ~0.5s (128 t-states 10.000 times)
 $D629 CALL $97AB    ; Reset sound buffer, volume channels and check for FIRE
                     ; key
 $D62C CALL $A432    ; Copy room graphic buffer to display file
 $D62F CALL $C932    ; Copy room color attribute buffer to attribute file
 $D632 CALL $D346    ; Reset sound data buffer
 $D635 POP BC        ; {Restore #REGbc, #REGiy and #rEGix
 $D636 POP IY        ;
 $D638 POP IX        ; }
 $D63A RET           ;
; Copy screen display file into room graphic data buffer
*$D63B LD IY,$ACCA   ; Set #REGiy to the address into the display lookup table
 $D63F LD B,$A8      ; Set #REGb to the number of pixel-rows to copy
 $D641 LD DE,$EAFF   ; Set #REGde to the base address for the room graphic
                     ; buffer
*$D644 PUSH BC       ; Save REGbc
 $D645 LD L,(IY+$00) ; {Copy a pixel-row from display file to room graphic data
 $D648 LD H,(IY+$01) ;
 $D64B LD BC,$0020   ;
 $D64E LDIR          ; }
 $D650 INC IY        ; {Increment address into the display lookup table
 $D652 INC IY        ; }
 $D654 POP BC        ; Restore #REGbc
 $D655 DJNZ $D644    ; Jump back until all the screen copied
 $D657 RET           ;

; Draws an sprite
;
; Draws an sprite with the information defined in the data buffer pointed by
; the address at #REGsp. Used by the routines at #R$A383 and #R$A3BA.
c$D658 LD ($A22C),IX  ; Save at #R$A22C the current value of #REGix
 $D65C LD ($A22E),IY  ; Save at #R$A22E the current value of #REGiy
 $D660 POP IY         ; Restore the base address of the data buffer for the
                      ; sprite to display
 $D662 LD L,(IY+$03)  ; {Set #REGhl to the vertical position of the sprite
 $D665 LD H,$00       ; }
 $D667 ADD HL,HL      ; {Set #REGhl the address location of the sprite in the
 $D668 LD DE,$AC9A    ; display file lookup table
 $D66B ADD HL,DE      ; }
 $D66C PUSH HL        ; {Copy #REGhl to #REGix
 $D66D POP IX         ; }
 $D66F LD L,(IY+$00)  ; {Set #REGhl to point to address of the graphic data for
 $D672 LD H,(IY+$01)  ; the sprite}
 $D675 LD B,(IY+$05)  ; Set #REGb the height of the sprite
*$D678 PUSH BC        ; Save #REGbc
 $D679 LD A,(IX+$00)  ; Set #REGa to the lower byte of the address to the
                      ; display file where draw the sprite
 $D67C LD D,(IX+$01)  ; Set #REGd to the high byte of the address to the
                      ; display file where draw the sprite
 $D67F ADD A,(IY+$02) ; Add the horizontal position to the lowe byte of the
                      ; display file
 $D682 LD E,A         ; Set #REGde the address point in display file to draw
                      ; the sprite
 $D683 LD C,(IY+$04)  ; {Set #REGbc to the width of the sprite
 $D686 LD B,$00       ; }
 $D688 LDIR           ; Copy to display file the graphics data of the sprite (a
                      ; row of pixels)
 $D68A INC IX         ; {Points to the next address in the display file look up
 $D68C INC IX         ; table}
 $D68E POP BC         ; Recover #REGbc
 $D68F DJNZ $D678     ; Jump back if there are partial sprite to draw
 $D691 LD DE,$0006    ; {Point #REGiy to the end of the data buffer for the
 $D694 ADD IY,DE      ; sprite. This will be the next instruction to execute
                      ; when return from this routine}
 $D696 PUSH IY        ; Save #REGiy
 $D698 LD IY,($A22E)  ; {Restore #REGiy and #REGix
 $D69C LD IX,($A22C)  ; }
 $D6A0 RET            ; Return to instruction pointed by #REGiy

; Fill a rectangle with a color attribute in the attribute file
;
; Used by the routines at #R$A34D and #R$BADC.
;
; HL Points to the address in the attributte file for the top-left corner of
; .  the rectangle to fill
; A Fill color attribute
; B Height of the rectangle
; E Width of the rectangle
c$D6A1 PUSH AF       ; {Save #REGaf, #REGde, #REGbc and #REGhl
 $D6A2 PUSH DE       ;
 $D6A3 PUSH BC       ;
 $D6A4 PUSH HL       ; }
 $D6A5 LD ($A22C),A  ; Save color attribute at #R$A22C
 $D6A8 LD A,E        ; {Save width at #R$A22E
 $D6A9 LD ($A22E),A  ; }
*$D6AC PUSH BC       ; {Save #REGbc and #REGhl briefly
 $D6AD PUSH HL       ; }
 $D6AE LD A,($A22E)  ; {Save width at #REGb
 $D6B1 LD B,A        ; }
 $D6B2 LD A,($A22C)  ; {Set color attribute into attribute file
*$D6B5 LD (HL),A     ; }
 $D6B6 INC HL        ; Increment pointer to the attribute file
 $D6B7 DJNZ $D6B5    ; Jump back while there are columns to fill
 $D6B9 POP HL        ; Restore #REGhl
 $D6BA LD DE,$0020   ; {Increment pointer to attribute file to the next row
 $D6BD ADD HL,DE     ; }
 $D6BE POP BC        ; Restore #REGbc
 $D6BF DJNZ $D6AC    ; Jump back while there are rows to fill
 $D6C1 POP HL        ; {Restore #REGhl, #REGbc, #REGde and #REGaf
 $D6C2 POP BC        ;
 $D6C3 POP DE        ;
 $D6C4 POP AF        ; }
 $D6C5 RET           ;

; Routine not used
s$D6C6 POP BC
 $D6C7 RET

; Unused
s$D6C8 DEFS $029A

; Mapping table for tile graphic and room graphic buffer
;
; Contains two words for every tile drawn on screen. First word: address of the
; tile location into the room graphics buffer Second word: address of the tile
; graphics $FF is an end marker Tiles $00, $01, $10, $81, $95, $96, $C6 and $D6
; are special tiles, not drawn. The routine #R$C7AE fill this table and the
; data overwrites the main loop routine for the title screen (#R$DAC0) and
; subsequent routines
g$D962 DEFS $015E

; Main loop for the tile screen
;
; Used by the routine at #R$9470.
c$DAC0 LD A,$00      ; {Set screen border color to black
 $DAC2 OUT ($FE),A   ; }
 $DAC4 LD DE,$4000   ; {Copy the contents of the screen buffer to the display
 $DAC7 LD HL,$E4FF   ; and attribute file
 $DACA LD BC,$1B00   ;
 $DACD LDIR          ; }
 $DACF LD B,$05      ; Set #REGb to the number of lines for the windows
 $DAD1 LD IX,$DFC6   ; Point #REGix to the input select text definition windows
 $DAD5 CALL $A2E6    ; Draws the windows for input select
 $DAD8 LD DE,$E4FF   ; {Copy display and attribute file to screen buffer
 $DADB LD HL,$4000   ;
 $DADE LD BC,$1B00   ;
 $DAE1 LDIR          ; }
; Handle password input
*$DAE3 LD DE,$4000   ; {Copy screen buffer to display and attribute file
 $DAE6 LD HL,$E4FF   ;
 $DAE9 LD BC,$1B00   ;
 $DAEC LDIR          ; }
 $DAEE CALL $DB27    ; Enter and decode password
; Check input key methods
*$DAF1 LD DE,$4000   ; {Copy screen buffer to display and attribute file
 $DAF4 LD HL,$E4FF   ;
 $DAF7 LD BC,$1B00   ;
 $DAFA LDIR          ; }
*$DAFC LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DAFF IN A,(C)      ; }
 $DB01 BIT 3,A       ; Key 4 is pressed?
 $DB03 JP Z,$DF20    ; Jump if so
 $DB06 LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB09 IN A,(C)      ; }
 $DB0B BIT 2,A       ; Key 3 is pressed?
 $DB0D JP Z,$DF59    ; Jump if so
 $DB10 LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB13 IN A,(C)      ; }
 $DB15 BIT 1,A       ; Key 2 is pressed?
 $DB17 JP Z,$DEE6    ; Jump if so
 $DB1A LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DB1D IN A,(C)      ; }
 $DB1F BIT 0,A       ; Key 1 is pressed?
 $DB21 JP Z,$DE19    ; Jump if so
 $DB24 JP $DAFC      ; Jump back and continue to check for input key method

; Enter and decode password
;
; Used by the routine at #R$DAC0.
c$DB27 CALL $DD1F    ; Handle passsword code input
; Decode entered password into text definition at #R$DD0E
 $DB2A LD A,($DD01)  ; {Set first figure of score
 $DB2D LD ($DD0E),A  ; }
 $DB30 LD A,($DCF6)  ; {Set second figure of score
 $DB33 LD ($DD0F),A  ; }
 $DB36 LD A,($DCFA)  ; {Set third figure of score
 $DB39 LD ($DD10),A  ; }
 $DB3C LD A,($DCFE)  ; {Set fourth figure of score
 $DB3F LD ($DD11),A  ; }
 $DB42 LD A,($DCFC)  ; {Set fifth figure of score
 $DB45 LD ($DD12),A  ; }
 $DB48 LD A,($DCF8)  ; {Set number of lives
 $DB4B LD ($DD13),A  ; }
 $DB4E LD A,($DCF5)  ; {Set weapon available for double fire
 $DB51 LD ($DD14),A  ; }
 $DB54 LD A,($DCF9)  ; {Set weapon available for laser
 $DB57 LD ($DD15),A  ; }
 $DB5A LD A,($DCFB)  ; {Set weapon available for multiple
 $DB5D LD ($DD16),A  ; }
 $DB60 LD A,($DCF7)  ; {Set weapon available for spray
 $DB63 LD ($DD17),A  ; }
 $DB66 LD A,($DD00)  ; {Set first figure for shield power
 $DB69 LD ($DD18),A  ; }
 $DB6C LD A,($DCFD)  ; {Set second figure for shield power
 $DB6F LD ($DD19),A  ; }
 $DB72 LD A,($DCFF)  ; {Set number of smartbombs
 $DB75 LD ($DD1A),A  ; }
 $DB78 LD A,($DD03)  ; {Set first figure of checksum
 $DB7B LD ($DD1B),A  ; }
 $DB7E LD A,($DD04)  ; {Set second figure of checksum
 $DB81 LD ($DD1C),A  ; }
 $DB84 LD A,($DD02)  ; {Set third figure of checksum
 $DB87 LD ($DD1D),A  ; }
 $DB8A LD B,$0D      ; {For every charcode in the password substract the
 $DB8C LD E,$00      ; current number to 9. So 9 => 0 8 => 1 7 => 2 ...
 $DB8E LD ($A22C),HL ;
 $DB91 LD HL,$DD0E   ;
*$DB94 LD C,(HL)     ;
 $DB95 LD A,$39      ;
 $DB97 SUB C         ;
 $DB98 ADD A,$30     ;
 $DB9A LD (HL),A     ; }
 $DB9B SUB $30       ; {Set into #REGe the protection code (checksum) Checksum
 $DB9D ADD A,E       ; will be the sum of all the digits of the code
 $DB9E LD E,A        ; }
 $DB9F INC HL        ; Increment address for the next charcode
 $DBA0 DJNZ $DB94    ; Jump until all charcodes processed
 $DBA2 LD HL,$DCF5   ; {Computes checksum code into #REGe for the entered
 $DBA5 LD B,$0D      ; password
 $DBA7 LD DE,$0000   ;
*$DBAA LD A,(HL)     ;
 $DBAB SUB $30       ;
 $DBAD ADD A,E       ;
 $DBAE LD E,A        ;
 $DBAF INC HL        ;
 $DBB0 DJNZ $DBAA    ; }
 $DBB2 LD ($A261),DE ; Save checksum code into #R$A261
 $DBB6 LD A,E        ; {Jump to show invalid code windows if checksum == 0
 $DBB7 OR A          ;
 $DBB8 JP Z,$DC59    ; }
 $DBBB LD A,$30      ; {Set into charcode buffer at #R$A23F the checksum code
 $DBBD LD ($A23F),A  ;
 $DBC0 LD ($A240),A  ;
 $DBC3 LD A,($DD1D)  ;
 $DBC6 LD ($A243),A  ;
 $DBC9 LD A,($DD1B)  ;
 $DBCC LD ($A241),A  ;
 $DBCF LD A,($DD1C)  ;
 $DBD2 LD ($A242),A  ; }
 $DBD5 CALL $DC69    ; Computes into #REGhl the corresponent checksum number
 $DBD8 LD DE,($A261) ; {Test if checksum number computed is equal to checksum
 $DBDC AND A         ; number of the code and jump to show invalid code if both
 $DBDD SBC HL,DE     ; number are diferent
 $DBDF JP NZ,$DC59   ; }
 $DBE2 LD A,($DD0E)  ; {Set into charcode buffer at #R$A23F th score
 $DBE5 LD ($A23F),A  ;
 $DBE8 LD A,($DD0F)  ;
 $DBEB LD ($A240),A  ;
 $DBEE LD A,($DD10)  ;
 $DBF1 LD ($A241),A  ;
 $DBF4 LD A,($DD11)  ;
 $DBF7 LD ($A242),A  ;
 $DBFA LD A,($DD12)  ;
 $DBFD LD ($A243),A  ; }
 $DC00 CALL $DC69    ; {Computes the score number and set into #R$A263
 $DC03 LD ($A263),HL ; }
 $DC06 LD A,($DD13)  ; {Computes the lives of Rex from password code and set
 $DC09 SUB $30       ; into #R$A267
 $DC0B LD ($A267),A  ; }
 $DC0E LD A,($DD14)  ; {For every weapon set if weapon is available or not
 $DC11 SUB $30       ; based on password
 $DC13 LD ($A1E9),A  ;
 $DC16 LD A,($DD15)  ;
 $DC19 SUB $30       ;
 $DC1B LD ($A1EA),A  ;
 $DC1E LD A,($DD16)  ;
 $DC21 SUB $30       ;
 $DC23 LD ($A1EB),A  ;
 $DC26 LD A,($DD17)  ;
 $DC29 SUB $30       ;
 $DC2B LD ($A1EC),A  ; }
 $DC2E LD A,$30      ; {Set into charcode buffer the shield power
 $DC30 LD ($A23F),A  ;
 $DC33 LD ($A240),A  ;
 $DC36 LD ($A241),A  ;
 $DC39 LD A,($DD18)  ;
 $DC3C LD ($A242),A  ;
 $DC3F LD A,($DD19)  ;
 $DC42 LD ($A243),A  ; }
 $DC45 CALL $DC69    ; {Computes shield power number and set into #R$A265
 $DC48 LD ($A265),HL ; }
 $DC4B LD A,($DD1A)  ; {Computes smartbombs number and set into #R$A266
 $DC4E SUB $30       ;
 $DC50 LD ($A266),A  ; }
 $DC53 CP $04        ; {if smartbomb is greater than 3 then jump to show
 $DC55 JP NC,$DC59   ; invalid code}
 $DC58 RET           ;
; Show invalid code windows
*$DC59 LD IX,$DCA7   ; Set #REGiy to the address for text definition of invalid
                     ; code
 $DC5D LD B,$02      ; Set #REGb the number of lines
 $DC5F CALL $A2E6    ; Draws a windows
 $DC62 CALL $DD9B    ; Wait for a keypress and set into #REGa the charcode for
                     ; the key
 $DC65 POP BC        ; Restore #REGbc
 $DC66 JP $DAE3      ; Jump back to handle password input
; Convert the digit charcode buffer to the equivalent number and save it into
; #REGhl
*$DC69 LD HL,$A23F   ; Point #REGhl to the digit charcode buffer for checksum
                     ; code
 $DC6C LD B,$05      ; {Convert charcode buffer to number buffer number =
*$DC6E LD A,(HL)     ; charcode - $30
 $DC6F SUB $30       ;
 $DC71 LD (HL),A     ;
 $DC72 INC HL        ;
 $DC73 DJNZ $DC6E    ; }
 $DC75 LD HL,$0000   ; Reset number value to 0
 $DC78 LD IX,$A23E   ; Point #REGix to the address previous to the ten
                     ; thousands figure
 $DC7C LD DE,$2710   ; Set #REGde to 10.000
 $DC7F CALL $DC9B    ; Jump to compute the equivalent number in the figure of
                     ; ten thousands
 $DC82 LD DE,$03E8   ; Set #REGde to 1.000
 $DC85 CALL $DC9B    ; Jump to compute the equivalent number in the figure of
                     ; thousands
 $DC88 LD DE,$0064   ; Set #REGde to 100
 $DC8B CALL $DC9B    ; Jump to compute the equivalent number in the figure of
                     ; hundreds
 $DC8E LD DE,$000A   ; Set #REGde to 10
 $DC91 CALL $DC9B    ; Jump to compute the equivalent number in the figure of
                     ; tens
 $DC94 LD DE,$0001   ; Set #REGde to 1
 $DC97 CALL $DC9B    ; Jump to compute the equivalent number in the figure of
                     ; units
 $DC9A RET           ;
; Compute the equivalent number based in the figure of the digit
*$DC9B INC IX        ; Point to the next figure
 $DC9D LD A,(IX+$00) ; {Return if digit is 0
 $DCA0 OR A          ;
 $DCA1 RET Z         ; }
 $DCA2 LD B,A        ; {Compute the equivalent figure x => x0.000 for ten
*$DCA3 ADD HL,DE     ; thousands, x => x.000 for thousands ...
 $DCA4 DJNZ $DCA3    ; }
 $DCA6 RET           ;

; Text Definition Data - Input code windows
;
; INVALID CODE
b$DCA7 DEFB $02,$0D,$58              ; Color attribute and position of text
 $DCAA DEFM "INVALID CODE"           ; #MESSAGE($DCAA,$DCB5)(invalid_code)
 $DCB6 DEFB $00                      ; End marker
; TRY AGAIN
 $DCB7 DEFB $02,$0D,$60              ; Color attribute and position of text
 $DCBA DEFM "TRY AGAIN   "           ; #MESSAGE($DCBA,$DCC5)(try_again)
 $DCC6 DEFB $00                      ; End marker
; INPUT YOUR CODE
 $DCC7 DEFB $06,$03,$70              ; Color attribute and position of text
 $DCCA DEFM "INPUT YOUR CODE"        ; #MESSAGE($DCCA,$DCD8)(input_your_code)
 $DCD9 DEFB $00                      ; End marker
; USE CAPS TO DELETE
 $DCDA DEFB $06,$03,$78              ; Color attribute and position of text
 $DCDD DEFM "USE CAPS TO DELETE:"    ; #MESSAGE($DCDD,$DCEF)(use_caps)
 $DCF0 DEFB $00                      ; End marker
; SPACES(22)
 $DCF1 DEFB $05,$03,$80              ; Color attribute and position of text
 $DCF4 DEFM "                      " ; #MESSAGE($DCF4,$DD09)(spaces_22)
 $DD0A DEFB $00                      ; End marker
; SPACES(16)
 $DD0B DEFB $07,$03,$40              ; Color attribute and position of text
 $DD0E DEFM "                "       ; #MESSAGE($DD0E,$DD1D)(spaces_16)
 $DD1E DEFB $00                      ; End marker

; Handle passsword code input
;
; Used by the routine at #R$DB27.
c$DD1F LD HL,$DCF4   ; {Reset charcode for password
 $DD22 LD DE,$DCF5   ;
 $DD25 LD BC,$0010   ;
 $DD28 LD (HL),$20   ;
 $DD2A LDIR          ; }
 $DD2C LD HL,$DCF4   ; {Set cursor graphic into windows for insert password
 $DD2F LD (HL),$20   ; code
 $DD31 INC HL        ;
 $DD32 LD (HL),$3F   ;
 $DD34 INC HL        ;
 $DD35 LD (HL),$00   ; }
 $DD37 LD IX,$DCC7   ; Point #REGix to the text definition data for input code
                     ; windows
 $DD3B LD B,$03      ; Set #REGb to the number of lines to draw
 $DD3D CALL $A2E6    ; Draws windows for input code
 $DD40 XOR A         ; {Reset the number of digits inputs in password code
 $DD41 LD ($A260),A  ; }
 $DD44 LD HL,$DCF5   ; {Point #R$A238 to the first character of the password
 $DD47 LD ($A238),HL ; code}
 $DD4A JR $DD77      ; Jump to check for key pressed
*$DD4C LD A,($A260)  ; Set #REGa the number of digits entered
 $DD4F CP $10        ; 16 digits entered ?
 $DD51 JP Z,$DD77    ; Jump to check for key pressed if so
 $DD54 LD A,($A236)  ; Set #REGa the charcode of the key pressed
 $DD57 LD HL,($A238) ; {Set charcode into address for text defintion windows
 $DD5A LD (HL),A     ; }
 $DD5B INC HL        ; {Increment address into text definition
 $DD5C LD ($A238),HL ; }
 $DD5F LD HL,$A260   ; {Increment number of entered digits
 $DD62 INC (HL)      ; }
; Reset cursor and draw password
*$DD63 LD HL,($A238) ; {Reset cursor position
 $DD66 LD (HL),$3F   ;
 $DD68 INC HL        ;
 $DD69 LD (HL),$20   ;
 $DD6B INC HL        ;
 $DD6C LD (HL),$00   ; }
 $DD6E LD IX,$DCF1   ; Set #REGiy to the text definition data for the entered
                     ; password
 $DD72 LD B,$01      ; Set #REGb the number of lines to draw
 $DD74 CALL $A487    ; Print the password
; Check for key pressed
*$DD77 CALL $DD9B    ; Wait for a keypress and set into #REGa the charcode for
                     ; the key
 $DD7A CP $2D        ; is - (CAPS key)?
 $DD7C JR Z,$DD87    ; Jump to erase a digit
 $DD7E CP $2B        ; is + (ENTER key)?
 $DD80 JR Z,$DD9A    ; Jump to check the code input
 $DD82 LD ($A236),A  ; Set #R$A236 the charcode for the key pressed
 $DD85 JR $DD4C      ; Jump to draw the charcode
; Erase a digit
*$DD87 LD A,($A260)  ; {Jump to reset cursor if no digit entered
 $DD8A OR A          ;
 $DD8B JR Z,$DD63    ; }
 $DD8D LD HL,($A238) ; {Decrement pointer to the address for the input password
 $DD90 DEC HL        ;
 $DD91 LD ($A238),HL ; }
 $DD94 LD HL,$A260   ; {Decrement the number of digit entered for the password
 $DD97 DEC (HL)      ; }
 $DD98 JR $DD63      ; Jump to reset cursor
*$DD9A RET           ;
; Detect a key pressed and set key charcode into #REGa. This entry point is
; used by the routines at #R$DB27 and #R$DE19.
*$DD9B PUSH IY       ; Save #REGiy
*$DD9D LD IX,$AE1A   ; Set #REGix to point to address of port list for keys
                     ; read
 $DDA1 LD IY,$AE2A   ; Set #REGiy to point to the list of charcodes for the
                     ; keys read
 $DDA5 LD B,$08      ; Set #REGb the number of ports to read
*$DDA7 PUSH BC       ; Save #REGb
 $DDA8 LD C,(IX+$00) ; {Set #R$A244 the port to read
 $DDAB LD B,(IX+$01) ;
 $DDAE LD ($A244),BC ; }
 $DDB2 IN A,(C)      ; Read keys into #REGa
 $DDB4 LD B,$05      ; {Read the status for the 5 keys of this port and jump to
 $DDB6 LD E,$00      ; handle the read if pressed
 $DDB8 LD D,A        ;
*$DDB9 RRCA          ;
 $DDBA JP NC,$DDCF   ;
 $DDBD INC E         ;
 $DDBE DJNZ $DDB9    ; }
; key not pressed for this port
 $DDC0 POP BC        ; Restore #REGb
 $DDC1 INC IX        ; {Point #REGix to the next port
 $DDC3 INC IX        ; }
 $DDC5 LD DE,$0005   ; {Point #REGiy to the next list of charcodes of keys
 $DDC8 ADD IY,DE     ; }
 $DDCA DJNZ $DDA7    ; Jump until all ports read
 $DDCC JP $DD9D      ; Jump back and continue with the first port
; handle key pressed
*$DDCF POP BC        ; Restore #REGbc
 $DDD0 PUSH DE       ; Save #REGde
*$DDD1 LD C,(IX+$00) ; {Loop until key not pressed
 $DDD4 LD B,(IX+$01) ;
 $DDD7 IN A,(C)      ;
 $DDD9 CP D          ;
 $DDDA JP Z,$DDD1    ; }
 $DDDD LD A,E        ; {Computes into #R$A246 the opcode of the corresponent
 $DDDE SLA A         ; BIT operation to check key presses
 $DDE0 SLA A         ;
 $DDE2 SLA A         ;
 $DDE4 LD D,$47      ;
 $DDE6 ADD A,D       ;
 $DDE7 LD ($A246),A  ; }
 $DDEA POP DE        ; Restore #REGde
 $DDEB LD D,$00      ; {Set #REGa to the corresponding charcode for the key
 $DDED ADD IY,DE     ; pressed
 $DDEF LD A,(IY+$00) ; }
 $DDF2 POP IY        ; Restore #REGiy
 $DDF4 CP $20        ; is SPACE charcode ?
 $DDF6 JP Z,$DD9B    ; Jump back and begin to check for the first port
 $DDF9 CP $48        ; is H charcode ?
 $DDFB JP Z,$DD9B    ; Jump back and begin to check for the first port
 $DDFE LD IY,$DE13   ; {Compare if key read has been assigned previously. Jump
 $DE02 LD B,$05      ; back and begin to check for the first port if is the
*$DE04 CP (IY+$00)   ; case
 $DE07 JP Z,$DD9B    ;
 $DE0A INC IY        ;
 $DE0C DJNZ $DE04    ; }
 $DE0E LD IY,$DE13   ; Set #REGiy to the base address for assigned keys
 $DE12 RET           ;

; Defined keys for Rex controls
;
; #TABLE(default)
; { =h Bytes | =h Control }
; { $00 | Up }
; { $01 | Down }
; { $02 | Left }
; { $03 | Right }
; { $04 | Fire }
; TABLE#
g$DE13 DEFS $05

; Unused
s$DE18 DEFS $01

; Keypress handlers for the title screen menu
;
; Used by the routine at #R$DAC0.
; .
; This routine handles the Define keys option menu
c$DE19 LD HL,$0000   ; {Reset the keys for Rex movement defined at #R$DE13
 $DE1C LD ($DE13),HL ;
 $DE1F LD ($DE15),HL ;
 $DE22 LD ($DE17),HL ; }
 $DE25 LD IY,$DE13   ; Set #REGiy to the base address of the keys defined for
                     ; Rex movement
 $DE29 LD IX,$E060   ; Set #REGix to address of the text definition data for
                     ; DEFINE KEYS
 $DE2D LD B,$06      ; Set #REGb to the number of rows of the windows
 $DE2F PUSH IY       ; Save #REGiy
 $DE31 CALL $A2E6    ; Draws the windows DEFINE KEYS
 $DE34 POP IY        ; Restore #REGiy
*$DE36 LD BC,$F7FE   ; {Read keys 1-2-3-4-5 into #REGa
 $DE39 IN A,(C)      ; }
 $DE3B BIT 0,A       ; Is key 1 pressed?
 $DE3D JP Z,$DE36    ; Jump back until key 1 is not pressed
 $DE40 LD IX,$E09B   ; Set #REGix to the address of the windows defintion for
                     ; the highlighted options of the menu
 $DE44 LD B,$01      ; Set #REGb to the number of files
 $DE46 PUSH IY       ; Save #REGiy
 $DE48 CALL $A487    ; Draw the line of highlighted text UP
 $DE4B POP IY        ; Restore #REGiy
; Handles the DEFINE UP key
 $DE4D CALL $DD9B    ; Check for UP key pressed in the DEFINE keys windows
 $DE50 LD (IY+$00),A ; Save the keycode of the key pressed at the UP address of
                     ; the Rex movement table at #R$DE13
 $DE53 CALL $DFB1    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DE56 LD HL,$488F   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DE59 CALL $DFBD    ; Draw the grahics data of character into display file
 $DE5C CALL $A65D    ; Configure check UP key pressed routine
 $DE5F LD IX,$E0A3   ; Set #REGix to the address of the text definition data
                     ; for higlighted UP text
 $DE63 LD B,$01      ; Set #REGb to the number of lines
 $DE65 PUSH IY       ; Save #REGiy
 $DE67 CALL $A487    ; Draws the line of higlighted text UP
 $DE6A POP IY        ; Restore #REGiy
; Handles the DEFINE DOWN key
 $DE6C CALL $DD9B    ; Check for DOWN key pressed in the DEFINE keys windows
 $DE6F LD (IY+$01),A ; Save the keycode of the key pressed at the DOWN address
                     ; of the Rex movement table at #R$DE13
 $DE72 CALL $DFB1    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DE75 LD HL,$48AF   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DE78 CALL $DFBD    ; Draw the grahics data of character into display file
 $DE7B CALL $A676    ; Configure check DOWN key pressed routine
 $DE7E LD IX,$E0AD   ; Set #REGix to the address of the text definition data
                     ; for higlighted DOWN text
 $DE82 LD B,$01      ; Set #REGb to the number of lines
 $DE84 PUSH IY       ; Save #REGiy
 $DE86 CALL $A487    ; Draws the line of higlighted text DOWN
 $DE89 POP IY        ; Restore #REGiy
; Handles the DEFINE LEFT key
 $DE8B CALL $DD9B    ; Check for LEFT key pressed in the DEFINE keys windows
 $DE8E LD (IY+$02),A ; Save the keycode of the key pressed at the LEFT address
                     ; of the Rex movement table at #R$DE13
 $DE91 CALL $DFB1    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DE94 LD HL,$48CF   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DE97 CALL $DFBD    ; Draw the grahics data of character into display file
 $DE9A CALL $A62B    ; Configure check LEFT key pressed routine
 $DE9D LD IX,$E0B7   ; Set #REGix to the address of the text definition data
                     ; for higlighted LEFT text
 $DEA1 LD B,$01      ; Set #REGb to the number of lines
 $DEA3 PUSH IY       ; Save #REGiy
 $DEA5 CALL $A487    ; Draws the line of higlighted text LEFT
 $DEA8 POP IY        ; Restore #REGiy
; Handles the DEFINE RIGHT key
 $DEAA CALL $DD9B    ; Check for RIGHT key pressed in the DEFINE keys windowse
                     ; charcode for the key
 $DEAD LD (IY+$03),A ; Save the keycode of the key pressed at the UP address of
                     ; the Rex movement table at #R$DE13
 $DEB0 CALL $DFB1    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DEB3 LD HL,$48EF   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DEB6 CALL $DFBD    ; Draw the grahics data of character into display file
 $DEB9 CALL $A644    ; Configure check RIGHT key pressed routine
 $DEBC LD IX,$E0C2   ; Set #REGix to the address of the text definition data
                     ; for higlighted RIGHT text
 $DEC0 LD B,$01      ; Set #REGb to the number of lines
 $DEC2 PUSH IY       ; Save #REGiy
 $DEC4 CALL $A487    ; Draws the line of higlighted text RIGHT
 $DEC7 POP IY        ; Restore #REGiy
; Handles the FIRE key
 $DEC9 CALL $DD9B    ; Check for FIRE key pressed in the DEFINE keys windowse
                     ; charcode for the key
 $DECC LD (IY+$04),A ; Save the keycode of the key pressed at the FIRE address
                     ; of the Rex movement table at #R$DE13
 $DECF CALL $DFB1    ; Point #REGde to the address graphics data of the key
                     ; pressed
 $DED2 LD HL,$500F   ; Point #REGhl to the address of the diplay file to print
                     ; the character
 $DED5 CALL $DFBD    ; Draw the grahics data of character into display file
 $DED8 CALL $A612    ; Configure check FIRE key pressed routine
 $DEDB XOR A         ; {Set input device to keyboard
 $DEDC LD ($A247),A  ; }
 $DEDF LD IX,$E04C   ; Set #REGix to the address of the text definition for
                     ; confirm keys
 $DEE3 JP $DF93      ; Jump to draw windows confirmation
; This routine handles the Kempston option
*$DEE6 LD HL,$001F   ; {Set #R$A244 to the port to read the inputs from
 $DEE9 LD ($A244),HL ; Kempston joystick}
 $DEEC LD A,$67      ; {Set #R$A246 to the BIT opcode corresponent to the FIRE
 $DEEE LD ($A246),A  ; button}
 $DEF1 CALL $A612    ; Configure check FIRE button pressed routine
 $DEF4 LD A,$5F      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DEF6 LD ($A246),A  ; joystick UP}
 $DEF9 CALL $A65D    ; Configure check joystick UP routine
 $DEFC LD A,$57      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DEFE LD ($A246),A  ; joystick DOWN}
 $DF01 CALL $A676    ; Configure check joystick DOWN routine
 $DF04 LD A,$47      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF06 LD ($A246),A  ; joystick RIGHT}
 $DF09 CALL $A644    ; Configure check joystick RIGHT routine
 $DF0C LD A,$4F      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF0E LD ($A246),A  ; joystick LEFT}
 $DF11 CALL $A62B    ; Configure check joystick LEFT routine
 $DF14 LD A,$FF      ; {Set Kempston as input device type at #R$A247
 $DF16 LD ($A247),A  ; }
 $DF19 LD IX,$E034   ; Points #REGix to the text definition data for CONFIRM
                     ; KEMPSTON windows
 $DF1D JP $DF93      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; This routine handles the Sinclair option
*$DF20 LD HL,$EFFE   ; {Set #R$A244 to the port to read the inputs from
 $DF23 LD ($A244),HL ; Sinclair joystick}
 $DF26 LD A,$47      ; {Set #R$A246 to the BIT opcode corresponent to the FIRE
 $DF28 LD ($A246),A  ; button}
 $DF2B CALL $A612    ; Configure check FIRE button pressed routine
 $DF2E LD A,$4F      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF30 LD ($A246),A  ; joystick UP}
 $DF33 CALL $A65D    ; Configure check joystick UP routine
 $DF36 LD A,$57      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF38 LD ($A246),A  ; joystick DOWN}
 $DF3B CALL $A676    ; Configure check joystick DOWN routine
 $DF3E LD A,$5F      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF40 LD ($A246),A  ; joystick RIGHT}
 $DF43 CALL $A644    ; Configure check joystick RIGHT routine
 $DF46 LD A,$67      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF48 LD ($A246),A  ; joystick LEFT}
 $DF4B CALL $A62B    ; Configure check joystick LEFT routine
; Reset input device type
 $DF4E XOR A         ; {Set Sinclair as input device type at #R$A247
 $DF4F LD ($A247),A  ; }
 $DF52 LD IX,$E006   ; Points #REGix to the text definition data for CONFIRM
                     ; SINCLAIR windows
 $DF56 JP $DF93      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; This routine handles the Cursor option
*$DF59 LD HL,$EFFE   ; {Set #R$A244 to the port to read the inputs FIRE, UP,
 $DF5C LD ($A244),HL ; DOWN and RIGHT from Sinclair joystick}
 $DF5F LD A,$47      ; {Set #R$A246 to the BIT opcode corresponent to the FIRE
 $DF61 LD ($A246),A  ; button}
 $DF64 CALL $A612    ; Configure check FIRE button pressed routine
 $DF67 LD A,$57      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF69 LD ($A246),A  ; joystick RIGHT}
 $DF6C CALL $A644    ; Configure check joystick RIGHT routine
 $DF6F LD A,$5F      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF71 LD ($A246),A  ; joystick UP}
 $DF74 CALL $A65D    ; Configure check joystick UP routine
 $DF77 LD A,$67      ; {Set #R$A246 to the BIT opcode corresponent to the
 $DF79 LD ($A246),A  ; joystick DOWN}
 $DF7C CALL $A676    ; Configure check joystick DOWN routine
 $DF7F LD HL,$F7FE   ; {Set #R$A246 to the port to read the input LEFT from
 $DF82 LD ($A244),HL ; Sinclair joystick}
 $DF85 CALL $A62B    ; Configure check joystick LEFT routine
 $DF88 XOR A         ; {Set Cursor as input device type at #R$A247
 $DF89 LD ($A247),A  ; }
 $DF8C LD IX,$E01E   ; Points #REGix to the text definition data for CONFIRM
                     ; CURSOR windows
 $DF90 JP $DF93      ; Jump to show confirmation windows and handles Y/N key
                     ; presses
; Show confirmation windows for input device and handles Y/N key press
*$DF93 LD B,$01      ; Set #REGb to the number of lines
 $DF95 CALL $A2E6    ; Draw input device confirmation windows
*$DF98 LD BC,$DFFE   ; Set #REGbc to port $DFFE for read keys P-O-I-U-Y
 $DF9B IN A,(C)      ; {Check if key Y is pressed
 $DF9D BIT 4,A       ; }
 $DF9F RET Z         ; Return if pressed. Jump to the start routine to init the
                     ; game
 $DFA0 LD BC,$7FFE   ; Set #REGbc to port $7FFE for read keys SPACE-SYM-M-N-B
 $DFA3 IN A,(C)      ; {Check if key N is pressed
 $DFA5 BIT 3,A       ; }
 $DFA7 JP Z,$DFAD    ; Jump forward if pressed
 $DFAA JP $DF98      ; Jump backs and continue to read for keys if not
*$DFAD JP $DAF1      ; Jump back to the main loop routine for the title screen
 $DFB0 RET           ;
; Point #REGde to the address graphics data of the key pressed
*$DFB1 LD L,A        ; {Point #REGhl to the address graphic data of the key
 $DFB2 LD H,$00      ; pressed from the charset table at #R$6306
 $DFB4 ADD HL,HL     ;
 $DFB5 ADD HL,HL     ;
 $DFB6 ADD HL,HL     ;
 $DFB7 LD DE,$6206   ;
 $DFBA ADD HL,DE     ; }
 $DFBB EX DE,HL      ; Exchange #REGde and #REGhl
 $DFBC RET           ;
; Draw the grahics data of character into display file
*$DFBD LD B,$08      ; Set #REGb to the number of bytes to copy
*$DFBF LD A,(DE)     ; {Copy a byte from the graphics data to the display file
 $DFC0 LD (HL),A     ; }
 $DFC1 INC DE        ; Point #REGde to the next byte of the graphics data
 $DFC2 INC H         ; Point #REGhl to the addres of the next row of pixels
 $DFC3 DJNZ $DFBF    ; Jump back until all the bytes are copied
 $DFC5 RET           ;

; Text Defintion Data - Control configuration
;
; MAIN SELECT MENU
b$DFC6 DEFB $06,$15,$90            ; Color attribute and position of text
 $DFC9 DEFM "  SELECT"             ; #MESSAGE($DFC9,$DFD0)(select)
 $DFD1 DEFB $00                    ; End marker
 $DFD2 DEFB $05,$15,$98            ; Color attribute and position of text
 $DFD5 DEFM "1:DEFINE"             ; #MESSAGE($DFD5,$DFDC)(define)
 $DFDD DEFB $00                    ; End marker
 $DFDE DEFB $05,$15,$A0            ; Color attribute and position of text
 $DFE1 DEFM "2:KEMPSTON"           ; #MESSAGE($DFE1,$DFEA)(kempston)
 $DFEB DEFB $00                    ; End marker
 $DFEC DEFB $05,$15,$A8            ; Color attribute and position of text
 $DFEF DEFM "3:CURSOR"             ; #MESSAGE($DFEF,$DFF6)(cursor)
 $DFF7 DEFB $00                    ; End marker
 $DFF8 DEFB $05,$15,$B0            ; Color attribute and position of text
 $DFFB DEFM "4:SINCLAIR"           ; #MESSAGE($DFFB,$E004)(sinclair)
 $E005 DEFB $00                    ; End marker
; CONFIRM SINCLAIR
 $E006 DEFB $04,$09,$80            ; Color attribute and position of text
 $E009 DEFM "CONFIRM SINCLAIR Y.N" ; #MESSAGE($E009,$E01C)(confirm_sinclair)
 $E01D DEFB $00                    ; End marker
; CONFIRM CURSOR
 $E01E DEFB $04,$09,$80            ; Color attribute and position of text
 $E021 DEFM "CONFIRM CURSOR Y.N"   ; #MESSAGE($E021,$E032)(confirm_cursor)
 $E033 DEFB $00                    ; End marker
; CONFIRM KEMPSTON
 $E034 DEFB $04,$09,$80            ; Color attribute and position of text
 $E037 DEFM "CONFIRM KEMPSTON Y.N" ; #MESSAGE($E037,$E04A)(confirm_kempston)
 $E04B DEFB $00                    ; End marker
; CONFIRM KEYS
 $E04C DEFB $04,$03,$90            ; Color attribute and position of text
 $E04F DEFM "CONFIRM KEYS Y.N"     ; #MESSAGE($E04F,$E05E)(confirm_keys)
 $E05F DEFB $00                    ; End marker
; DEFINE KEYS - no highligthed options
 $E060 DEFB $07,$0F,$58            ; Color attribute and position of text
 $E063 DEFM " PRESS"               ; #MESSAGE($E063,$E068)(press)
 $E069 DEFB $00                    ; End marker
 $E06A DEFB $01,$0F,$60            ; Color attribute and position of text
 $E06D DEFM " :UP"                 ; #MESSAGE($E06D,$E070)(up)
 $E071 DEFB $00                    ; End marker
 $E072 DEFB $01,$0F,$68            ; Color attribute and position of text
 $E075 DEFM " :DOWN"               ; #MESSAGE($E075,$E07A)(down)
 $E07B DEFB $00                    ; End marker
 $E07C DEFB $01,$0F,$70            ; Color attribute and position of text
 $E07F DEFM " :LEFT"               ; #MESSAGE($E07F,$E084)(left)
 $E085 DEFB $00                    ; End marker
 $E086 DEFB $01,$0F,$78            ; Color attribute and position of text
 $E089 DEFM " :RIGHT"              ; #MESSAGE($E089,$E08F)(right)
 $E090 DEFB $00                    ; End marker
 $E091 DEFB $01,$0F,$80            ; Color attribute and position of text
 $E094 DEFM " :FIRE"               ; #MESSAGE($E094,$E099)(shot)
 $E09A DEFB $00                    ; End marker
; DEFINE KEYS - highlighted options
 $E09B DEFB $06,$0F,$60            ; Color attribute and position of text
 $E09E DEFM " :UP"                 ; #MESSAGE($E09E,$E0A1)(hi_up)
 $E0A2 DEFB $00                    ; End marker
 $E0A3 DEFB $06,$0F,$68            ; Color attribute and position of text
 $E0A6 DEFM " :DOWN"               ; #MESSAGE($E0A6,$E0AB)(hi_down)
 $E0AC DEFB $00                    ; End marker
 $E0AD DEFB $06,$0F,$70            ; Color attribute and position of text
 $E0B0 DEFM " :LEFT"               ; #MESSAGE($E0B0,$E0B5)(hi_left)
 $E0B6 DEFB $00                    ; End marker
 $E0B7 DEFB $06,$0F,$78            ; Color attribute and position of text
 $E0BA DEFM " :RIGHT"              ; #MESSAGE($E0BA,$E0C0)(hi_right)
 $E0C1 DEFB $00                    ; End marker
 $E0C2 DEFB $06,$0F,$80            ; Color attribute and position of text
 $E0C5 DEFM " :FIRE"               ; #MESSAGE($E0C5,$E0CA)(hi_shot)
 $E0CB DEFB $00                    ; End marker

; Tile count buffer (partial)
;
; Initialized in routine #R$C7AE but never used. Tile count buffer spans from
; $DE9F to $E19E
g$E0CC DEFS $D3

; Unused
s$E19F DEFS $60

; Tile type buffer
;
; Initialized at routine #R$C7AE.
g$E1FF DEFS $02A0

; Unused
s$E49F DEFS $60

; Title screen
;
; #LOGO
b$E4FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E507 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E50F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E517 DEFB $00,$00,$00,$00,$00,$D8,$00,$00
 $E51F DEFB $00,$00,$00,$00,$00,$00,$5B,$2E
 $E527 DEFB $DB,$AE,$ED,$7C,$88,$10,$00,$5B
 $E52F DEFB $9F,$F7,$C0,$00,$00,$00,$00,$00
 $E537 DEFB $00,$00,$04,$40,$6F,$E0,$00,$00
 $E53F DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $E547 DEFB $FF,$FF,$FF,$FF,$38,$00,$00,$7E
 $E54F DEFB $FF,$A0,$42,$66,$00,$00,$00,$00
 $E557 DEFB $04,$00,$28,$BF,$F5,$A0,$00,$00
 $E55F DEFB $00,$02,$4C,$0A,$27,$FF,$FF,$48
 $E567 DEFB $02,$EE,$9B,$7F,$FF,$02,$0F,$FF
 $E56F DEFB $FF,$00,$FF,$FF,$EB,$55,$02,$0C
 $E577 DEFB $40,$00,$47,$FF,$48,$00,$00,$00
 $E57F DEFB $00,$00,$05,$27,$FF,$FF,$FE,$80
 $E587 DEFB $04,$00,$06,$FF,$FF,$13,$7F,$FF
 $E58F DEFB $F0,$00,$7F,$FB,$FE,$11,$00,$00
 $E597 DEFB $00,$00,$3F,$FF,$C0,$00,$00,$00
 $E59F DEFB $00,$00,$00,$37,$FF,$FF,$A3,$00
 $E5A7 DEFB $52,$00,$3F,$FF,$F8,$87,$FF,$FF
 $E5AF DEFB $90,$00,$01,$FF,$FF,$FF,$C0,$B6
 $E5B7 DEFB $82,$9F,$FF,$FD,$48,$00,$00,$00
 $E5BF DEFB $00,$00,$01,$32,$FF,$FF,$32,$08
 $E5C7 DEFB $0E,$BF,$FF,$FE,$01,$53,$FF,$30
 $E5CF DEFB $00,$02,$25,$AF,$FF,$FE,$D6,$15
 $E5D7 DEFB $7B,$FF,$FF,$22,$00,$00,$00,$00
 $E5DF DEFB $00,$00,$24,$47,$FF,$FC,$00,$00
 $E5E7 DEFB $DF,$FF,$B4,$00,$0F,$FF,$FD,$24
 $E5EF DEFB $11,$51,$00,$00,$03,$F7,$FD,$00
 $E5F7 DEFB $07,$FF,$F0,$62,$40,$00,$00,$00
 $E5FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E607 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E60F DEFB $F6,$40,$00,$00,$00,$00,$00,$00
 $E617 DEFB $00,$00,$00,$00,$12,$34,$00,$00
 $E61F DEFB $00,$00,$00,$00,$00,$00,$0A,$FB
 $E627 DEFB $FF,$BF,$73,$FD,$22,$00,$00,$06
 $E62F DEFB $EF,$5C,$00,$00,$00,$00,$00,$00
 $E637 DEFB $00,$00,$09,$15,$12,$28,$80,$00
 $E63F DEFB $00,$00,$00,$00,$01,$BB,$FF,$FF
 $E647 DEFB $FF,$FF,$FF,$FF,$D6,$C0,$00,$2D
 $E64F DEFB $FF,$F3,$B1,$99,$8A,$80,$00,$00
 $E657 DEFB $00,$00,$44,$3F,$FF,$F0,$00,$00
 $E65F DEFB $00,$00,$14,$51,$0F,$FF,$FF,$F2
 $E667 DEFB $80,$BD,$EF,$FF,$FF,$EC,$07,$FF
 $E66F DEFB $FA,$01,$FF,$7B,$C0,$EC,$44,$31
 $E677 DEFB $20,$01,$7F,$FF,$FF,$00,$00,$00
 $E67F DEFB $00,$00,$00,$11,$0F,$FF,$E0,$00
 $E687 DEFB $55,$00,$09,$1F,$F4,$00,$FF,$FF
 $E68F DEFB $80,$00,$1F,$FF,$F8,$0A,$40,$11
 $E697 DEFB $00,$00,$6F,$FF,$F4,$00,$00,$00
 $E69F DEFB $00,$00,$00,$08,$FF,$FF,$DC,$C0
 $E6A7 DEFB $00,$00,$1B,$FF,$40,$47,$FF,$F0
 $E6AF DEFB $00,$00,$6F,$FF,$FF,$FC,$01,$10
 $E6B7 DEFB $26,$43,$FF,$F8,$A0,$00,$00,$00
 $E6BF DEFB $00,$40,$00,$4F,$FF,$FF,$F2,$04
 $E6C7 DEFB $01,$5F,$FF,$E0,$02,$DD,$FE,$00
 $E6CF DEFB $00,$04,$8A,$20,$FF,$FF,$F8,$22
 $E6D7 DEFB $4E,$77,$FF,$DC,$80,$00,$00,$00
 $E6DF DEFB $00,$00,$01,$07,$FF,$A0,$00,$02
 $E6E7 DEFB $2D,$FF,$FF,$80,$5F,$FF,$F8,$51
 $E6EF DEFB $08,$88,$00,$00,$1F,$ED,$FF,$A4
 $E6F7 DEFB $9F,$FF,$FD,$F2,$00,$00,$00,$00
 $E6FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E707 DEFB $00,$00,$00,$22,$00,$00,$00,$00
 $E70F DEFB $00,$03,$00,$00,$00,$00,$00,$00
 $E717 DEFB $00,$00,$00,$00,$1B,$00,$00,$00
 $E71F DEFB $00,$00,$00,$00,$00,$03,$EB,$AF
 $E727 DEFB $FF,$FF,$FE,$D9,$89,$00,$00,$0B
 $E72F DEFB $A7,$FC,$00,$00,$00,$00,$00,$00
 $E737 DEFB $08,$00,$00,$43,$EF,$80,$00,$00
 $E73F DEFB $00,$00,$00,$00,$00,$6F,$FF,$FF
 $E747 DEFB $FF,$FF,$FF,$FF,$FC,$00,$00,$FF
 $E74F DEFB $FF,$E0,$02,$66,$CA,$A0,$00,$00
 $E757 DEFB $00,$00,$1B,$FF,$FF,$F8,$00,$00
 $E75F DEFB $00,$01,$4D,$14,$5F,$FF,$FF,$80
 $E767 DEFB $02,$45,$BD,$BF,$FF,$01,$7F,$FF
 $E76F DEFB $FE,$01,$FD,$DF,$FD,$1B,$02,$88
 $E777 DEFB $40,$00,$AF,$FF,$F0,$00,$00,$00
 $E77F DEFB $00,$00,$00,$24,$7F,$FF,$40,$00
 $E787 DEFB $99,$80,$00,$FF,$FF,$A0,$FF,$FF
 $E78F DEFB $F0,$01,$FF,$77,$FF,$00,$00,$24
 $E797 DEFB $40,$41,$BB,$FF,$D1,$00,$00,$00
 $E79F DEFB $00,$00,$00,$22,$7F,$FF,$FB,$00
 $E7A7 DEFB $01,$10,$3F,$FF,$FA,$1D,$FF,$FC
 $E7AF DEFB $00,$00,$09,$FF,$FF,$FA,$00,$44
 $E7B7 DEFB $49,$FF,$FF,$FF,$20,$00,$00,$00
 $E7BF DEFB $00,$00,$01,$B3,$FF,$FE,$01,$48
 $E7C7 DEFB $22,$7F,$FF,$F8,$05,$FF,$FF,$38
 $E7CF DEFB $00,$00,$31,$00,$FF,$FF,$FC,$08
 $E7D7 DEFB $90,$FF,$FF,$F2,$00,$00,$00,$00
 $E7DF DEFB $00,$00,$14,$4F,$FF,$F8,$00,$01
 $E7E7 DEFB $7F,$FF,$F0,$02,$77,$FF,$E8,$88
 $E7EF DEFB $12,$22,$00,$00,$0F,$FF,$FF,$F0
 $E7F7 DEFB $0F,$FF,$FE,$A4,$00,$00,$00,$00
 $E7FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $E807 DEFB $05,$19,$00,$48,$80,$00,$00,$0B
 $E80F DEFB $08,$A8,$00,$00,$00,$00,$00,$00
 $E817 DEFB $00,$00,$00,$02,$46,$00,$00,$00
 $E81F DEFB $00,$00,$00,$00,$00,$00,$5D,$FF
 $E827 DEFB $FF,$FF,$FB,$F7,$F2,$00,$00,$1D
 $E82F DEFB $EF,$FB,$C0,$00,$00,$00,$00,$00
 $E837 DEFB $00,$00,$05,$1E,$DF,$C0,$00,$00
 $E83F DEFB $00,$00,$00,$00,$6A,$BB,$FF,$FD
 $E847 DEFB $DF,$FF,$FF,$FF,$D0,$00,$17,$FD
 $E84F DEFB $FF,$81,$75,$F9,$82,$80,$00,$08
 $E857 DEFB $80,$00,$CC,$FF,$FD,$80,$00,$00
 $E85F DEFB $00,$02,$20,$51,$7F,$FF,$FF,$F4
 $E867 DEFB $01,$35,$6B,$6F,$FD,$00,$06,$7F
 $E86F DEFB $C0,$00,$BF,$FF,$F8,$44,$44,$40
 $E877 DEFB $00,$00,$05,$FF,$FE,$20,$00,$00
 $E87F DEFB $00,$00,$00,$01,$7F,$FF,$F8,$00
 $E887 DEFB $26,$00,$17,$FF,$FE,$2F,$FF,$FF
 $E88F DEFB $00,$00,$0F,$DD,$FF,$E4,$00,$01
 $E897 DEFB $01,$80,$D7,$FF,$04,$00,$00,$00
 $E89F DEFB $00,$00,$00,$3F,$FF,$FD,$34,$C0
 $E8A7 DEFB $02,$4F,$FF,$FF,$C0,$B7,$EF,$D8
 $E8AF DEFB $00,$00,$00,$7F,$FF,$FF,$E9,$12
 $E8B7 DEFB $16,$7F,$FF,$F8,$C0,$00,$00,$00
 $E8BF DEFB $00,$00,$01,$B7,$FF,$FC,$20,$41
 $E8C7 DEFB $5D,$FF,$FF,$E0,$1F,$1D,$F0,$00
 $E8CF DEFB $00,$02,$8C,$4B,$7F,$FF,$D0,$23
 $E8D7 DEFB $5D,$FF,$FE,$B4,$40,$00,$00,$00
 $E8DF DEFB $00,$00,$22,$FF,$FF,$F0,$00,$02
 $E8E7 DEFB $FF,$FF,$20,$00,$57,$FF,$C0,$27
 $E8EF DEFB $58,$89,$00,$01,$6E,$F7,$DF,$F0
 $E8F7 DEFB $3F,$FF,$F0,$00,$00,$00,$00,$00
 $E8FF DEFB $00,$00,$00,$00,$00,$00,$00,$02
 $E907 DEFB $60,$00,$00,$02,$44,$00,$00,$00
 $E90F DEFB $13,$02,$A0,$00,$00,$00,$00,$00
 $E917 DEFB $00,$00,$00,$00,$44,$00,$00,$00
 $E91F DEFB $00,$00,$00,$00,$00,$53,$B7,$7F
 $E927 DEFB $FF,$FF,$FF,$6D,$40,$00,$00,$C5
 $E92F DEFB $FF,$F8,$05,$33,$00,$00,$00,$00
 $E937 DEFB $01,$00,$08,$9D,$F7,$D8,$00,$00
 $E93F DEFB $00,$00,$00,$00,$05,$DF,$FF,$FB
 $E947 DEFB $FF,$FF,$FF,$FF,$FF,$80,$01,$FF
 $E94F DEFB $F6,$0A,$16,$00,$2A,$A8,$00,$02
 $E957 DEFB $20,$01,$2B,$FF,$FF,$80,$08,$00
 $E95F DEFB $00,$00,$8D,$1A,$4B,$FF,$FC,$00
 $E967 DEFB $00,$44,$BA,$BF,$FF,$C0,$0F,$FF
 $E96F DEFB $F8,$27,$FB,$FF,$90,$A0,$83,$90
 $E977 DEFB $00,$00,$1F,$FF,$58,$20,$00,$00
 $E97F DEFB $00,$00,$00,$15,$7F,$FF,$F1,$00
 $E987 DEFB $D9,$00,$0A,$FF,$F4,$03,$FF,$FA
 $E98F DEFB $00,$00,$07,$FE,$FF,$C0,$00,$14
 $E997 DEFB $40,$2F,$FF,$FF,$D1,$00,$00,$00
 $E99F DEFB $00,$00,$00,$88,$B7,$FF,$A3,$04
 $E9A7 DEFB $00,$11,$3F,$FF,$83,$1D,$FF,$E0
 $E9AF DEFB $00,$00,$05,$BF,$FF,$FE,$80,$A4
 $E9B7 DEFB $2A,$9F,$FF,$FF,$22,$00,$00,$00
 $E9BF DEFB $00,$00,$00,$47,$FF,$FF,$B0,$02
 $E9C7 DEFB $47,$FF,$FF,$C0,$06,$FF,$FF,$00
 $E9CF DEFB $08,$84,$51,$20,$FF,$FF,$FF,$F7
 $E9D7 DEFB $E7,$FF,$FF,$A1,$00,$00,$00,$00
 $E9DF DEFB $00,$00,$2A,$8F,$FF,$F8,$00,$00
 $E9E7 DEFB $0D,$FF,$F4,$11,$77,$FF,$F8,$8B
 $E9EF DEFB $59,$72,$00,$00,$01,$6F,$FF,$F8
 $E9F7 DEFB $3F,$FF,$FF,$33,$00,$00,$00,$00
 $E9FF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $EA07 DEFB $1F,$7D,$C9,$2A,$91,$00,$00,$43
 $EA0F DEFB $67,$F8,$00,$00,$00,$00,$00,$00
 $EA17 DEFB $00,$00,$00,$00,$07,$00,$00,$40
 $EA1F DEFB $00,$00,$00,$00,$00,$10,$CF,$FF
 $EA27 DEFB $FF,$FF,$FF,$D7,$57,$00,$00,$3E
 $EA2F DEFB $CF,$F0,$02,$4C,$C0,$00,$00,$00
 $EA37 DEFB $08,$80,$23,$7F,$6E,$A0,$00,$00
 $EA3F DEFB $00,$00,$08,$08,$9F,$7F,$FF,$FF
 $EA47 DEFB $D7,$5F,$FF,$FF,$FF,$00,$5F,$FF
 $EA4F DEFB $FF,$E0,$FB,$BF,$D5,$22,$02,$00
 $EA57 DEFB $80,$00,$0B,$FF,$FF,$E0,$00,$00
 $EA5F DEFB $00,$02,$2C,$80,$1F,$FF,$FF,$40
 $EA67 DEFB $00,$01,$25,$BF,$FF,$00,$1F,$FF
 $EA6F DEFB $C0,$00,$5F,$FF,$FE,$A2,$24,$00
 $EA77 DEFB $00,$02,$BF,$FF,$F0,$40,$00,$00
 $EA7F DEFB $00,$00,$40,$26,$FF,$FF,$FD,$40
 $EA87 DEFB $DA,$00,$07,$FF,$FE,$01,$FF,$FE
 $EA8F DEFB $00,$00,$0F,$AF,$FF,$E0,$00,$AA
 $EA97 DEFB $02,$20,$DF,$FC,$C8,$00,$00,$00
 $EA9F DEFB $00,$00,$01,$23,$FF,$FF,$F0,$84
 $EAA7 DEFB $01,$5F,$FF,$FF,$E0,$EF,$FF,$F8
 $EAAF DEFB $00,$00,$0B,$FF,$EF,$FF,$C0,$11
 $EAB7 DEFB $4F,$FF,$FF,$E4,$E4,$00,$00,$00
 $EABF DEFB $00,$00,$01,$17,$FE,$E8,$00,$00
 $EAC7 DEFB $38,$EF,$F6,$00,$07,$BB,$FE,$00
 $EACF DEFB $10,$45,$1A,$40,$43,$FF,$FF,$80
 $EAD7 DEFB $8B,$FD,$FB,$10,$00,$00,$00,$00
 $EADF DEFB $00,$00,$7A,$EF,$FE,$B0,$00,$00
 $EAE7 DEFB $FF,$FF,$00,$00,$3F,$FB,$E0,$52
 $EAEF DEFB $52,$84,$00,$00,$26,$57,$FF,$FF
 $EAF7 DEFB $F7,$FF,$F8,$6C,$C0,$00,$00,$00
 $EAFF DEFB $00,$00,$00,$00,$00,$00,$01,$75
 $EB07 DEFB $D5,$D5,$72,$4C,$84,$00,$00,$01
 $EB0F DEFB $DF,$05,$00,$00,$00,$00,$00,$00
 $EB17 DEFB $00,$00,$00,$05,$DA,$01,$20,$00
 $EB1F DEFB $00,$00,$00,$00,$00,$0F,$FF,$BF
 $EB27 DEFB $FF,$FF,$FF,$BF,$B8,$00,$00,$3D
 $EB2F DEFB $BF,$F0,$00,$13,$00,$00,$00,$00
 $EB37 DEFB $00,$00,$48,$B9,$FF,$9E,$00,$00
 $EB3F DEFB $00,$00,$08,$12,$21,$5B,$FF,$FD
 $EB47 DEFB $72,$FE,$DF,$FF,$FA,$00,$03,$7F
 $EB4F DEFB $FE,$00,$76,$ED,$74,$48,$04,$82
 $EB57 DEFB $20,$00,$BA,$9F,$FF,$01,$00,$00
 $EB5F DEFB $00,$01,$4A,$20,$3F,$FF,$34,$00
 $EB67 DEFB $44,$00,$02,$25,$FF,$C0,$FF,$FF
 $EB6F DEFB $C0,$00,$7F,$BB,$FC,$A0,$42,$00
 $EB77 DEFB $00,$00,$3F,$FF,$80,$00,$00,$00
 $EB7F DEFB $00,$00,$80,$09,$AF,$FE,$B1,$00
 $EB87 DEFB $22,$00,$0A,$9F,$60,$1F,$FF,$F8
 $EB8F DEFB $00,$00,$03,$FF,$FF,$FD,$01,$2A
 $EB97 DEFB $84,$89,$FF,$FF,$B6,$00,$00,$00
 $EB9F DEFB $00,$00,$00,$09,$FF,$FF,$22,$0E
 $EBA7 DEFB $02,$25,$FF,$FF,$07,$BB,$FF,$80
 $EBAF DEFB $00,$00,$0A,$F7,$FF,$FF,$FC,$24
 $EBB7 DEFB $51,$7F,$FF,$59,$00,$00,$00,$00
 $EBBF DEFB $00,$00,$00,$FF,$FF,$F8,$00,$01
 $EBC7 DEFB $5F,$FF,$FF,$E8,$BE,$EF,$FF,$D4
 $EBCF DEFB $00,$95,$48,$01,$7F,$FF,$FF,$82
 $EBD7 DEFB $27,$FF,$FC,$A2,$00,$00,$00,$00
 $EBDF DEFB $00,$00,$17,$FF,$FF,$FC,$00,$17
 $EBE7 DEFB $FF,$F8,$00,$02,$FF,$FF,$20,$05
 $EBEF DEFB $5A,$20,$00,$00,$00,$6E,$FF,$FE
 $EBF7 DEFB $7F,$FF,$E0,$13,$00,$00,$00,$00
 $EBFF DEFB $00,$00,$00,$00,$00,$00,$00,$03
 $EC07 DEFB $66,$BB,$BF,$DB,$51,$00,$00,$01
 $EC0F DEFB $66,$DD,$80,$00,$00,$00,$00,$00
 $EC17 DEFB $00,$00,$00,$00,$3F,$B8,$08,$00
 $EC1F DEFB $00,$00,$00,$02,$4D,$FB,$FF,$FF
 $EC27 DEFB $FF,$FF,$FF,$FF,$EE,$00,$0B,$FF
 $EC2F DEFB $FF,$FC,$D5,$FC,$C0,$00,$00,$00
 $EC37 DEFB $08,$00,$0F,$FE,$BF,$80,$00,$00
 $EC3F DEFB $00,$01,$18,$00,$80,$9F,$FF,$FB
 $EC47 DEFB $81,$7E,$AD,$FF,$FF,$80,$03,$FF
 $EC4F DEFB $FF,$8D,$DF,$FF,$DD,$A2,$02,$01
 $EC57 DEFB $00,$01,$17,$FF,$FC,$00,$00,$00
 $EC5F DEFB $00,$00,$08,$90,$15,$FF,$F8,$00
 $EC67 DEFB $91,$00,$01,$4F,$FE,$00,$1F,$FF
 $EC6F DEFB $80,$00,$FF,$EE,$F8,$44,$00,$00
 $EC77 DEFB $00,$0B,$DF,$FF,$FC,$00,$00,$00
 $EC7F DEFB $00,$01,$00,$36,$7F,$FF,$F4,$40
 $EC87 DEFB $89,$00,$07,$FF,$F8,$01,$BF,$FE
 $EC8F DEFB $00,$00,$07,$FF,$FF,$68,$00,$2A
 $EC97 DEFB $40,$23,$FF,$FD,$E1,$00,$00,$00
 $EC9F DEFB $00,$00,$00,$AF,$FF,$FF,$00,$84
 $ECA7 DEFB $00,$8F,$FF,$F7,$A4,$ED,$FF,$EF
 $ECAF DEFB $00,$00,$1B,$B3,$FF,$FF,$E0,$01
 $ECB7 DEFB $44,$FF,$FF,$F0,$00,$00,$00,$00
 $ECBF DEFB $00,$00,$11,$03,$FF,$FD,$C0,$02
 $ECC7 DEFB $33,$FF,$FF,$00,$0F,$FB,$F4,$91
 $ECCF DEFB $0A,$06,$90,$00,$5F,$FF,$FF,$F1
 $ECD7 DEFB $4B,$FF,$FF,$19,$80,$00,$00,$00
 $ECDF DEFB $00,$00,$2B,$BF,$FF,$80,$15,$78
 $ECE7 DEFB $BF,$FE,$80,$03,$B7,$FF,$F0,$6A
 $ECEF DEFB $F9,$25,$D8,$00,$01,$5D,$FF,$FF
 $ECF7 DEFB $FF,$FF,$C0,$3C,$80,$00,$00,$00
 $ECFF DEFB $00,$00,$55,$7F,$FF,$F9,$E0,$77
 $ED07 DEFB $FF,$F8,$00,$01,$6F,$FE,$E0,$02
 $ED0F DEFB $A4,$60,$08,$00,$00,$77,$FF,$FF
 $ED17 DEFB $FF,$FF,$F3,$60,$00,$00,$00,$00
 $ED1F DEFB $00,$03,$90,$FF,$FF,$FF,$FF,$FF
 $ED27 DEFB $82,$89,$11,$FF,$DF,$FF,$FF,$FF
 $ED2F DEFB $FF,$FF,$FF,$EE,$02,$2C,$FF,$FF
 $ED37 DEFB $FF,$F4,$10,$51,$00,$00,$00,$00
 $ED3F DEFB $00,$11,$27,$FF,$FF,$2F,$33,$FF
 $ED47 DEFB $F8,$C0,$00,$17,$FF,$FF,$FF,$FF
 $ED4F DEFB $FF,$FF,$FF,$80,$00,$00,$0F,$FF
 $ED57 DEFB $FF,$FE,$B1,$04,$C8,$00,$00,$00
 $ED5F DEFB $00,$00,$1F,$FF,$E0,$00,$48,$7F
 $ED67 DEFB $FF,$F8,$05,$53,$DF,$E0,$02,$28
 $ED6F DEFB $60,$09,$10,$44,$44,$00,$2F,$FF
 $ED77 DEFB $FF,$FF,$E3,$A2,$20,$00,$00,$00
 $ED7F DEFB $3C,$02,$FF,$D0,$00,$24,$80,$05
 $ED87 DEFB $FF,$FF,$80,$25,$DF,$FF,$C0,$08
 $ED8F DEFB $20,$00,$00,$00,$00,$F7,$FF,$FE
 $ED97 DEFB $7F,$FF,$FF,$FA,$88,$51,$00,$00
 $ED9F DEFB $00,$0F,$FF,$FC,$02,$00,$00,$00
 $EDA7 DEFB $7F,$FF,$F9,$10,$07,$FF,$F8,$00
 $EDAF DEFB $00,$11,$10,$00,$9A,$7F,$FD,$95
 $EDB7 DEFB $88,$07,$FF,$FF,$C0,$00,$00,$00
 $EDBF DEFB $00,$5F,$EF,$00,$1F,$80,$00,$00
 $EDC7 DEFB $00,$7F,$FF,$D0,$00,$1F,$FF,$FC
 $EDCF DEFB $00,$0A,$40,$00,$25,$FF,$FC,$58
 $EDD7 DEFB $AA,$06,$DE,$FF,$FF,$60,$00,$00
 $EDDF DEFB $00,$18,$00,$00,$00,$02,$00,$00
 $EDE7 DEFB $00,$01,$FF,$B7,$20,$00,$FF,$FF
 $EDEF DEFB $80,$00,$00,$00,$1F,$FF,$E3,$69
 $EDF7 DEFB $00,$80,$0B,$1F,$FF,$89,$00,$00
 $EDFF DEFB $00,$02,$35,$5F,$FF,$C0,$7F,$FF
 $EE07 DEFB $FF,$E0,$00,$5F,$FF,$FF,$53,$9F
 $EE0F DEFB $B5,$DE,$7F,$A0,$00,$EF,$FF,$FF
 $EE17 DEFB $FF,$FE,$82,$59,$00,$00,$00,$00
 $EE1F DEFB $00,$02,$47,$7F,$FF,$FF,$FF,$FF
 $EE27 DEFB $FC,$51,$00,$5F,$EB,$FF,$7F,$FF
 $EE2F DEFB $FF,$FF,$FF,$FF,$84,$91,$5F,$FF
 $EE37 DEFB $FF,$FE,$E0,$08,$00,$00,$00,$00
 $EE3F DEFB $00,$0A,$47,$FF,$F8,$19,$F7,$FF
 $EE47 DEFB $FF,$00,$00,$7F,$FF,$BF,$FF,$FD
 $EE4F DEFB $FF,$FF,$FA,$EC,$20,$00,$04,$FF
 $EE57 DEFB $FF,$F1,$B6,$11,$22,$00,$00,$00
 $EE5F DEFB $00,$00,$03,$7F,$80,$12,$04,$02
 $EE67 DEFB $FF,$FC,$09,$47,$77,$FF,$02,$00
 $EE6F DEFB $10,$80,$CC,$D1,$12,$09,$FF,$FF
 $EE77 DEFB $FF,$FF,$FC,$90,$88,$00,$00,$00
 $EE7F DEFB $3E,$00,$FF,$FF,$00,$00,$00,$00
 $EE87 DEFB $FF,$FF,$F0,$04,$BF,$FF,$F9,$00
 $EE8F DEFB $00,$00,$00,$00,$00,$01,$FF,$FE
 $EE97 DEFB $21,$FF,$FF,$FE,$A4,$88,$00,$00
 $EE9F DEFB $00,$00,$7F,$C0,$20,$00,$00,$00
 $EEA7 DEFB $00,$17,$FC,$00,$4F,$FF,$FE,$00
 $EEAF DEFB $08,$4D,$C4,$01,$2A,$97,$FF,$E8
 $EEB7 DEFB $20,$3F,$FF,$FF,$E8,$00,$00,$00
 $EEBF DEFB $00,$1E,$BB,$A0,$35,$80,$00,$00
 $EEC7 DEFB $05,$AC,$FF,$50,$00,$0F,$FF,$F8
 $EECF DEFB $00,$00,$00,$00,$59,$FF,$FF,$E3
 $EED7 DEFB $0A,$05,$FF,$FF,$FF,$C0,$00,$00
 $EEDF DEFB $00,$04,$00,$00,$00,$01,$80,$00
 $EEE7 DEFB $00,$17,$FF,$E8,$00,$05,$FF,$FF
 $EEEF DEFB $E8,$00,$00,$0C,$7F,$FE,$C8,$80
 $EEF7 DEFB $12,$20,$80,$7F,$FF,$6E,$00,$00
 $EEFF DEFB $00,$04,$DD,$FF,$FF,$FF,$FC,$7F
 $EF07 DEFB $FF,$FF,$00,$1F,$FF,$FF,$FD,$F7
 $EF0F DEFB $F7,$6D,$F5,$00,$00,$EF,$FF,$FF
 $EF17 DEFB $FF,$FF,$E4,$74,$00,$00,$00,$00
 $EF1F DEFB $00,$08,$91,$FF,$FF,$FF,$FF,$ED
 $EF27 DEFB $79,$14,$02,$FF,$FF,$FF,$FF,$FF
 $EF2F DEFB $FF,$FF,$FF,$F8,$00,$12,$1F,$FF
 $EF37 DEFB $FF,$F0,$A8,$82,$00,$00,$00,$00
 $EF3F DEFB $00,$00,$02,$FF,$FC,$04,$61,$FF
 $EF47 DEFB $FF,$80,$00,$BF,$FF,$E7,$7B,$4F
 $EF4F DEFB $FE,$FF,$F8,$00,$40,$00,$07,$FF
 $EF57 DEFB $FF,$FF,$D4,$0A,$48,$00,$00,$00
 $EF5F DEFB $00,$07,$3F,$FF,$00,$6C,$04,$1F
 $EF67 DEFB $FF,$F8,$04,$01,$DF,$F8,$00,$00
 $EF6F DEFB $00,$01,$12,$8C,$EC,$00,$7F,$FF
 $EF77 DEFB $FF,$FF,$FF,$E6,$24,$00,$00,$00
 $EF7F DEFB $3E,$03,$FF,$FC,$00,$00,$00,$00
 $EF87 DEFB $97,$FD,$40,$04,$1F,$DF,$E0,$00
 $EF8F DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $EF97 DEFB $01,$FF,$FF,$FF,$48,$22,$00,$00
 $EF9F DEFB $00,$07,$FC,$00,$00,$20,$00,$00
 $EFA7 DEFB $01,$FF,$FF,$D0,$20,$7F,$EF,$10
 $EFAF DEFB $00,$3B,$24,$00,$0A,$FF,$FF,$EF
 $EFB7 DEFB $88,$03,$FF,$FF,$3F,$40,$00,$00
 $EFBF DEFB $00,$B5,$DE,$00,$40,$C0,$01,$00
 $EFC7 DEFB $00,$FF,$FF,$FC,$00,$1F,$FF,$FE
 $EFCF DEFB $80,$00,$02,$41,$46,$FF,$FA,$48
 $EFD7 DEFB $A2,$0C,$CF,$FF,$FF,$F0,$00,$00
 $EFDF DEFB $00,$66,$A0,$00,$00,$00,$00,$08
 $EFE7 DEFB $00,$00,$5F,$D7,$00,$00,$77,$FF
 $EFEF DEFB $80,$00,$00,$00,$3F,$FF,$EB,$44
 $EFF7 DEFB $00,$84,$27,$7F,$FF,$FA,$00,$00
 $EFFF DEFB $00,$00,$2B,$7F,$FF,$FF,$FF,$FF
 $F007 DEFB $FE,$D0,$00,$07,$DB,$FF,$FF,$FF
 $F00F DEFB $FB,$FF,$FF,$D8,$00,$59,$FF,$FF
 $F017 DEFB $EF,$FF,$01,$69,$00,$00,$00,$00
 $F01F DEFB $00,$13,$7F,$FF,$FF,$FF,$FF,$FF
 $F027 DEFB $EC,$58,$20,$3F,$FF,$FF,$FF,$FF
 $F02F DEFB $F7,$FF,$FD,$6E,$02,$48,$A7,$FF
 $F037 DEFB $FF,$F1,$E8,$09,$80,$00,$00,$00
 $F03F DEFB $00,$00,$07,$FC,$50,$11,$31,$37
 $F047 DEFB $E1,$00,$00,$0F,$FF,$FF,$93,$3B
 $F04F DEFB $53,$4F,$88,$00,$88,$00,$3F,$FF
 $F057 DEFB $FF,$FF,$F6,$40,$A2,$00,$00,$00
 $F05F DEFB $00,$00,$1F,$FF,$C0,$01,$04,$05
 $F067 DEFB $FF,$FF,$08,$55,$77,$FF,$80,$08
 $F06F DEFB $00,$40,$A4,$73,$90,$00,$FF,$FF
 $F077 DEFB $FF,$FF,$FF,$81,$58,$00,$00,$00
 $F07F DEFB $3E,$00,$7F,$F8,$00,$00,$00,$00
 $F087 DEFB $7F,$FF,$E0,$85,$13,$FD,$80,$00
 $F08F DEFB $00,$22,$00,$00,$00,$07,$FF,$FA
 $F097 DEFB $47,$FF,$FF,$FF,$00,$89,$00,$00
 $F09F DEFB $00,$05,$FF,$40,$12,$00,$10,$00
 $F0A7 DEFB $1F,$FF,$FF,$00,$00,$3F,$FF,$00
 $F0AF DEFB $00,$00,$8A,$00,$33,$7F,$FF,$F5
 $F0B7 DEFB $40,$01,$7F,$FF,$F8,$00,$00,$00
 $F0BF DEFB $00,$1F,$75,$00,$00,$20,$00,$00
 $F0C7 DEFB $00,$7F,$FF,$E0,$00,$03,$FF,$B0
 $F0CF DEFB $00,$00,$09,$02,$0F,$FF,$E0,$82
 $F0D7 DEFB $82,$05,$BB,$FF,$FF,$C0,$00,$00
 $F0DF DEFB $00,$00,$00,$00,$00,$00,$40,$08
 $F0E7 DEFB $00,$01,$F7,$BB,$00,$00,$5F,$FF
 $F0EF DEFB $C0,$00,$00,$27,$FF,$FF,$EC,$81
 $F0F7 DEFB $46,$20,$08,$A9,$FF,$AE,$E4,$00
 $F0FF DEFB $00,$02,$88,$95,$FF,$F8,$99,$BF
 $F107 DEFB $FF,$E4,$00,$3F,$FF,$FF,$FF,$FF
 $F10F DEFB $F7,$FF,$FF,$E0,$00,$27,$7F,$FF
 $F117 DEFB $FF,$FF,$C2,$00,$00,$00,$00,$00
 $F11F DEFB $00,$02,$A0,$5F,$FC,$83,$FF,$FF
 $F127 DEFB $FE,$92,$00,$7F,$FF,$FF,$FF,$FF
 $F12F DEFB $FF,$FF,$FF,$F8,$04,$00,$09,$FF
 $F137 DEFB $FF,$FE,$A0,$52,$20,$00,$00,$00
 $F13F DEFB $00,$00,$01,$BF,$FC,$0D,$67,$FF
 $F147 DEFB $FF,$D0,$00,$7F,$FF,$C1,$D2,$4C
 $F14F DEFB $FE,$9E,$EB,$83,$22,$00,$0B,$FF
 $F157 DEFB $FF,$FF,$FF,$11,$10,$00,$00,$00
 $F15F DEFB $08,$00,$0F,$FA,$00,$10,$40,$6F
 $F167 DEFB $FF,$C8,$03,$07,$BF,$EA,$00,$00
 $F16F DEFB $20,$00,$80,$89,$00,$03,$EF,$FF
 $F177 DEFB $CF,$FF,$FE,$F6,$C4,$00,$00,$00
 $F17F DEFB $1E,$27,$FF,$A0,$00,$00,$00,$00
 $F187 DEFB $5F,$FF,$FC,$05,$07,$FF,$F0,$00
 $F18F DEFB $08,$48,$80,$00,$20,$1B,$F7,$F8
 $F197 DEFB $80,$0B,$FF,$FE,$D0,$52,$00,$00
 $F19F DEFB $00,$03,$FF,$D4,$1F,$80,$00,$00
 $F1A7 DEFB $03,$FF,$FE,$A0,$06,$FF,$FF,$C8
 $F1AF DEFB $00,$0A,$2D,$A0,$1C,$FF,$FF,$EB
 $F1B7 DEFB $34,$17,$FF,$FF,$FE,$00,$00,$00
 $F1BF DEFB $00,$0D,$C0,$01,$80,$00,$20,$00
 $F1C7 DEFB $00,$07,$FF,$FC,$C0,$07,$FF,$F8
 $F1CF DEFB $00,$00,$00,$00,$8B,$FE,$4A,$A8
 $F1D7 DEFB $90,$02,$AF,$FF,$FF,$F0,$00,$00
 $F1DF DEFB $03,$13,$00,$00,$00,$00,$40,$18
 $F1E7 DEFB $10,$00,$FB,$AE,$F0,$01,$FF,$FF
 $F1EF DEFB $F0,$00,$00,$01,$BF,$FF,$FD,$00
 $F1F7 DEFB $91,$00,$02,$27,$FF,$77,$00,$00
 $F1FF DEFB $00,$04,$45,$BF,$FF,$FF,$FF,$FF
 $F207 DEFB $FE,$69,$80,$FF,$FF,$FF,$FF,$FF
 $F20F DEFB $ED,$DF,$FF,$FD,$00,$7D,$FF,$FF
 $F217 DEFB $FF,$FA,$00,$C0,$00,$00,$00,$00
 $F21F DEFB $00,$0A,$A9,$FF,$EA,$7E,$DF,$FF
 $F227 DEFB $BA,$10,$27,$FF,$FF,$FF,$FF,$FF
 $F22F DEFB $FF,$FF,$FF,$FC,$01,$10,$1F,$FF
 $F237 DEFB $FF,$FD,$CC,$00,$80,$00,$00,$00
 $F23F DEFB $00,$00,$DF,$FF,$FE,$81,$10,$7F
 $F247 DEFB $FE,$C0,$04,$CF,$FF,$E0,$16,$48
 $F24F DEFB $6A,$21,$AA,$04,$88,$00,$7F,$FF
 $F257 DEFB $FF,$FF,$BD,$42,$44,$00,$00,$00
 $F25F DEFB $00,$00,$FF,$FF,$E8,$64,$00,$00
 $F267 DEFB $2F,$FF,$F0,$44,$EF,$FF,$00,$00
 $F26F DEFB $08,$00,$00,$72,$00,$1F,$FF,$FF
 $F277 DEFB $FF,$FF,$FF,$F0,$10,$44,$00,$00
 $F27F DEFB $09,$00,$3F,$FC,$80,$00,$00,$00
 $F287 DEFB $EF,$FF,$F8,$04,$BF,$FF,$FC,$80
 $F28F DEFB $00,$02,$00,$00,$00,$3F,$FF,$FE
 $F297 DEFB $00,$3F,$FF,$FF,$00,$00,$00,$00
 $F29F DEFB $00,$37,$FF,$00,$1F,$00,$00,$00
 $F2A7 DEFB $01,$FF,$FF,$00,$00,$0B,$FF,$00
 $F2AF DEFB $00,$11,$4A,$40,$27,$FF,$FF,$EE
 $F2B7 DEFB $CC,$06,$FF,$FF,$38,$80,$00,$00
 $F2BF DEFB $00,$7C,$30,$01,$0C,$00,$E0,$00
 $F2C7 DEFB $00,$EF,$FF,$FC,$00,$00,$7F,$FF
 $F2CF DEFB $30,$00,$00,$02,$37,$FF,$FE,$CD
 $F2D7 DEFB $46,$00,$A2,$FF,$FF,$FF,$80,$00
 $F2DF DEFB $00,$78,$00,$00,$00,$00,$70,$18
 $F2E7 DEFB $40,$03,$F6,$AB,$00,$00,$57,$FF
 $F2EF DEFB $40,$00,$00,$03,$7F,$FF,$55,$80
 $F2F7 DEFB $04,$44,$62,$93,$FF,$D5,$00,$00
 $F2FF DEFB $00,$01,$10,$FF,$FF,$FF,$FF,$FF
 $F307 DEFB $FC,$AA,$20,$7F,$DF,$FF,$FF,$FF
 $F30F DEFB $FF,$FF,$FD,$C0,$00,$D5,$7F,$FF
 $F317 DEFB $FF,$FF,$B2,$91,$00,$00,$00,$00
 $F31F DEFB $00,$13,$27,$FF,$FF,$1B,$FF,$FF
 $F327 DEFB $FC,$0A,$00,$5F,$FF,$FF,$FF,$EF
 $F32F DEFB $FF,$FF,$FF,$F0,$04,$48,$26,$FF
 $F337 DEFB $FF,$F1,$30,$0A,$20,$00,$00,$00
 $F33F DEFB $00,$00,$03,$FF,$60,$01,$00,$1F
 $F347 DEFB $FF,$E0,$09,$37,$FF,$FC,$12,$5C
 $F34F DEFB $3A,$00,$98,$44,$A2,$00,$1F,$FF
 $F357 DEFB $FF,$FF,$FD,$11,$12,$00,$00,$00
 $F35F DEFB $08,$00,$1F,$FF,$80,$11,$08,$01
 $F367 DEFB $FF,$FE,$02,$13,$B7,$FF,$D0,$00
 $F36F DEFB $08,$00,$00,$89,$00,$01,$FF,$FF
 $F377 DEFB $05,$FF,$FF,$E1,$54,$91,$00,$00
 $F37F DEFB $08,$00,$FC,$A0,$80,$00,$00,$00
 $F387 DEFB $26,$FF,$60,$A5,$0F,$EF,$78,$00
 $F38F DEFB $00,$29,$90,$00,$00,$0F,$FF,$FB
 $F397 DEFB $80,$1F,$FF,$FF,$00,$00,$00,$00
 $F39F DEFB $00,$0E,$E8,$60,$3F,$80,$00,$00
 $F3A7 DEFB $00,$1F,$FF,$1C,$00,$1F,$FF,$80
 $F3AF DEFB $00,$04,$42,$90,$2D,$FF,$FF,$2A
 $F3B7 DEFB $90,$04,$BF,$FF,$FF,$F6,$00,$00
 $F3BF DEFB $00,$0F,$40,$00,$00,$04,$70,$06
 $F3C7 DEFB $00,$0F,$FF,$FE,$00,$2D,$FF,$FC
 $F3CF DEFB $00,$00,$00,$01,$6F,$FF,$E0,$91
 $F3D7 DEFB $82,$01,$10,$1F,$FF,$F8,$00,$00
 $F3DF DEFB $00,$00,$00,$00,$00,$00,$39,$38
 $F3E7 DEFB $80,$80,$1F,$96,$C0,$00,$01,$7F
 $F3EF DEFB $F8,$00,$00,$0F,$FF,$F4,$6D,$80
 $F3F7 DEFB $51,$21,$00,$38,$FF,$64,$98,$00
 $F3FF DEFB $00,$04,$EB,$DF,$FF,$FF,$FF,$FF
 $F407 DEFB $F8,$28,$80,$17,$FF,$FF,$FF,$FF
 $F40F DEFB $F7,$FF,$BF,$FE,$58,$33,$1B,$FF
 $F417 DEFB $FF,$FE,$45,$4C,$00,$00,$00,$00
 $F41F DEFB $00,$05,$7B,$FE,$80,$02,$CF,$FF
 $F427 DEFB $EC,$00,$05,$FE,$FF,$FF,$FF,$FF
 $F42F DEFB $FF,$FF,$FE,$5C,$82,$01,$4D,$7F
 $F437 DEFB $FF,$FD,$48,$11,$00,$00,$00,$00
 $F43F DEFB $00,$00,$07,$FF,$FE,$00,$20,$1F
 $F447 DEFB $FF,$FC,$02,$CF,$FF,$40,$00,$48
 $F44F DEFB $6A,$00,$A2,$93,$98,$04,$FF,$FF
 $F457 DEFB $FF,$FF,$FC,$81,$E4,$00,$00,$00
 $F45F DEFB $48,$00,$FF,$FE,$00,$00,$00,$00
 $F467 DEFB $17,$FF,$00,$01,$2F,$FF,$C0,$00
 $F46F DEFB $0F,$80,$00,$52,$00,$0F,$FF,$FF
 $F477 DEFB $C0,$BF,$FF,$F2,$20,$04,$00,$00
 $F47F DEFB $00,$07,$FF,$F0,$00,$00,$00,$00
 $F487 DEFB $8F,$FF,$F4,$90,$11,$7F,$FE,$00
 $F48F DEFB $00,$46,$C4,$00,$09,$FF,$FF,$EE
 $F497 DEFB $A0,$6B,$7F,$FF,$F0,$00,$00,$00
 $F49F DEFB $00,$05,$BB,$00,$1F,$00,$00,$00
 $F4A7 DEFB $00,$1F,$FF,$A0,$02,$7F,$FF,$E0
 $F4AF DEFB $00,$11,$24,$20,$8F,$FF,$FF,$C0
 $F4B7 DEFB $88,$03,$FF,$FF,$F5,$80,$00,$00
 $F4BF DEFB $00,$AB,$6B,$04,$00,$02,$60,$06
 $F4C7 DEFB $00,$0F,$FF,$DC,$00,$03,$FF,$FF
 $F4CF DEFB $00,$00,$00,$02,$7F,$FF,$D1,$E4
 $F4D7 DEFB $80,$00,$44,$7F,$FF,$FE,$00,$00
 $F4DF DEFB $02,$00,$00,$00,$00,$00,$3B,$FF
 $F4E7 DEFB $02,$05,$BA,$EF,$B0,$00,$07,$FF
 $F4EF DEFB $F0,$00,$00,$01,$FF,$FE,$29,$88
 $F4F7 DEFB $8A,$44,$01,$17,$FF,$AD,$00,$00
 $F4FF DEFB $02,$00,$00,$00,$00,$02,$3F,$FF
 $F507 DEFB $82,$00,$03,$7A,$C0,$00,$1F,$FF
 $F50F DEFB $FF,$40,$04,$1F,$FF,$FF,$D1,$22
 $F517 DEFB $22,$02,$DC,$37,$FF,$F5,$91,$00
 $F51F DEFB $00,$00,$00,$00,$00,$0F,$FF,$FF
 $F527 DEFB $FF,$F0,$00,$00,$40,$00,$00,$00
 $F52F DEFB $E8,$00,$01,$FF,$FD,$04,$88,$80
 $F537 DEFB $00,$88,$0A,$91,$00,$6D,$90,$00
 $F53F DEFB $00,$00,$00,$08,$01,$FF,$FF,$FF
 $F547 DEFB $FF,$F0,$04,$00,$00,$00,$00,$00
 $F54F DEFB $00,$00,$01,$B8,$D8,$FD,$80,$00
 $F557 DEFB $00,$02,$20,$01,$12,$00,$04,$00
 $F55F DEFB $00,$00,$00,$00,$01,$C1,$FF,$FF
 $F567 DEFB $FC,$DF,$FF,$80,$67,$E0,$00,$00
 $F56F DEFB $00,$00,$20,$9A,$94,$40,$00,$00
 $F577 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F57F DEFB $00,$00,$00,$00,$00,$00,$07,$8F
 $F587 DEFB $00,$3F,$FF,$80,$00,$80,$00,$00
 $F58F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F597 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F59F DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $F5A7 DEFB $00,$04,$20,$00,$11,$90,$00,$00
 $F5AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5BF DEFB $00,$00,$00,$FE,$00,$00,$00,$00
 $F5C7 DEFB $0E,$43,$00,$02,$27,$FF,$A1,$C0
 $F5CF DEFB $40,$00,$00,$00,$00,$00,$00,$00
 $F5D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5E7 DEFB $00,$00,$00,$00,$00,$00,$01,$FF
 $F5EF DEFB $00,$04,$00,$00,$00,$00,$00,$00
 $F5F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F5FF DEFB $00,$01,$80,$00,$00,$01,$3F,$FF
 $F607 DEFB $DC,$00,$1C,$D7,$60,$00,$01,$FF
 $F60F DEFB $E8,$00,$00,$82,$5D,$DD,$00,$08
 $F617 DEFB $89,$00,$64,$01,$BF,$EE,$C6,$00
 $F61F DEFB $00,$00,$00,$00,$00,$EF,$FF,$FF
 $F627 DEFB $FF,$80,$00,$2B,$D0,$40,$00,$03
 $F62F DEFB $B6,$80,$00,$FF,$DE,$22,$22,$20
 $F637 DEFB $01,$22,$2D,$B4,$47,$13,$71,$00
 $F63F DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $F647 DEFB $FF,$9C,$00,$00,$00,$00,$00,$00
 $F64F DEFB $20,$00,$5B,$EE,$A0,$2C,$00,$00
 $F657 DEFB $00,$00,$88,$00,$A4,$00,$03,$10
 $F65F DEFB $00,$00,$00,$00,$03,$03,$FF,$FF
 $F667 DEFB $FC,$7F,$FF,$80,$0B,$E0,$00,$00
 $F66F DEFB $00,$04,$CA,$17,$11,$20,$00,$00
 $F677 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F67F DEFB $00,$00,$00,$00,$00,$00,$03,$83
 $F687 DEFB $00,$3F,$FF,$C0,$00,$00,$00,$00
 $F68F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F697 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F69F DEFB $00,$00,$00,$10,$40,$00,$03,$00
 $F6A7 DEFB $00,$00,$00,$00,$38,$18,$00,$00
 $F6AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6BF DEFB $00,$00,$00,$7E,$00,$00,$06,$00
 $F6C7 DEFB $1E,$03,$00,$00,$00,$FE,$01,$80
 $F6CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6E7 DEFB $00,$00,$00,$00,$00,$00,$00,$FE
 $F6EF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F6FF DEFB $00,$00,$00,$00,$01,$01,$FF,$FF
 $F707 DEFB $F8,$00,$00,$4C,$00,$00,$00,$FF
 $F70F DEFB $FC,$00,$00,$07,$FB,$74,$40,$A2
 $F717 DEFB $52,$00,$04,$55,$7F,$73,$A4,$00
 $F71F DEFB $08,$00,$00,$10,$00,$FF,$FF,$FF
 $F727 DEFB $FF,$80,$00,$00,$00,$00,$00,$00
 $F72F DEFB $05,$93,$00,$1E,$EF,$EA,$89,$90
 $F737 DEFB $00,$08,$44,$22,$88,$7F,$C0,$00
 $F73F DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $F747 DEFB $FF,$82,$10,$00,$00,$00,$00,$00
 $F74F DEFB $00,$00,$FE,$99,$00,$50,$00,$00
 $F757 DEFB $00,$02,$20,$00,$00,$00,$B8,$08
 $F75F DEFB $00,$00,$00,$00,$08,$05,$FF,$FF
 $F767 DEFB $F8,$3F,$FF,$C0,$01,$F0,$00,$00
 $F76F DEFB $00,$0D,$50,$02,$4E,$40,$00,$00
 $F777 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F77F DEFB $00,$00,$00,$00,$00,$04,$03,$01
 $F787 DEFB $80,$1F,$FF,$60,$00,$00,$00,$00
 $F78F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F797 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F79F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7A7 DEFB $01,$00,$00,$00,$10,$18,$80,$60
 $F7AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7BF DEFB $00,$00,$00,$7D,$00,$00,$06,$60
 $F7C7 DEFB $0C,$00,$00,$00,$00,$FE,$00,$00
 $F7CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7E7 DEFB $00,$00,$00,$00,$00,$00,$00,$7F
 $F7EF DEFB $83,$00,$00,$00,$00,$00,$00,$00
 $F7F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F7FF DEFB $04,$30,$00,$03,$00,$81,$FF,$FF
 $F807 DEFB $FC,$E0,$00,$D1,$40,$00,$17,$FD
 $F80F DEFB $DE,$80,$00,$1F,$FF,$03,$01,$10
 $F817 DEFB $00,$00,$49,$B2,$1E,$4C,$00,$00
 $F81F DEFB $00,$00,$01,$00,$00,$3F,$FF,$FF
 $F827 DEFB $FF,$80,$00,$02,$10,$40,$00,$CB
 $F82F DEFB $C0,$00,$0F,$FD,$BB,$CA,$57,$20
 $F837 DEFB $00,$A2,$11,$09,$A2,$0D,$74,$60
 $F83F DEFB $00,$00,$00,$00,$00,$5F,$FF,$FF
 $F847 DEFB $FF,$90,$30,$20,$04,$00,$00,$00
 $F84F DEFB $00,$00,$1D,$DE,$E8,$88,$00,$00
 $F857 DEFB $00,$01,$48,$00,$00,$20,$01,$04
 $F85F DEFB $00,$00,$00,$00,$08,$00,$FF,$FF
 $F867 DEFB $F0,$7F,$FF,$80,$02,$10,$00,$00
 $F86F DEFB $00,$09,$78,$81,$10,$00,$00,$00
 $F877 DEFB $00,$00,$00,$00,$00,$00,$00,$02
 $F87F DEFB $00,$00,$00,$00,$00,$08,$03,$01
 $F887 DEFB $80,$1F,$FE,$10,$00,$00,$00,$00
 $F88F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F897 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F89F DEFB $00,$00,$00,$18,$00,$00,$01,$00
 $F8A7 DEFB $01,$00,$10,$00,$00,$79,$00,$60
 $F8AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8BF DEFB $00,$00,$00,$50,$80,$00,$00,$40
 $F8C7 DEFB $00,$00,$00,$00,$00,$FF,$00,$40
 $F8CF DEFB $02,$00,$00,$00,$00,$00,$00,$00
 $F8D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8E7 DEFB $00,$00,$00,$00,$00,$10,$00,$7F
 $F8EF DEFB $00,$02,$00,$00,$00,$00,$00,$00
 $F8F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F8FF DEFB $00,$60,$00,$01,$00,$69,$FF,$FF
 $F907 DEFB $FF,$80,$17,$B8,$1E,$00,$04,$FB
 $F90F DEFB $74,$00,$00,$FF,$FD,$74,$44,$44
 $F917 DEFB $00,$00,$28,$48,$8F,$F5,$8C,$00
 $F91F DEFB $00,$00,$00,$04,$04,$1F,$FF,$FF
 $F927 DEFB $FF,$F0,$00,$00,$C8,$00,$00,$00
 $F92F DEFB $B4,$E0,$00,$FD,$C4,$FA,$80,$00
 $F937 DEFB $01,$11,$54,$82,$4A,$5A,$80,$00
 $F93F DEFB $00,$00,$00,$00,$00,$1F,$FF,$FF
 $F947 DEFB $FF,$98,$20,$00,$00,$08,$00,$00
 $F94F DEFB $00,$00,$06,$66,$92,$22,$00,$00
 $F957 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F95F DEFB $00,$00,$00,$00,$00,$00,$FF,$FF
 $F967 DEFB $D0,$3F,$FF,$80,$00,$00,$00,$00
 $F96F DEFB $00,$05,$54,$15,$44,$00,$00,$00
 $F977 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F97F DEFB $00,$00,$00,$0C,$00,$00,$02,$00
 $F987 DEFB $80,$3F,$FE,$00,$00,$08,$00,$00
 $F98F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F997 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F99F DEFB $00,$00,$00,$19,$00,$00,$00,$00
 $F9A7 DEFB $00,$00,$00,$00,$03,$FF,$C0,$00
 $F9AF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9B7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9BF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9C7 DEFB $00,$00,$00,$00,$01,$39,$00,$20
 $F9CF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9D7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9DF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9E7 DEFB $00,$00,$00,$00,$00,$00,$00,$7C
 $F9EF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9F7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $F9FF DEFB $00,$80,$00,$00,$00,$37,$FF,$FF
 $FA07 DEFB $FF,$00,$00,$20,$A8,$00,$00,$3F
 $FA0F DEFB $D1,$00,$00,$3F,$FB,$B2,$99,$12
 $FA17 DEFB $00,$00,$05,$32,$EF,$1D,$00,$00
 $FA1F DEFB $00,$00,$00,$7C,$00,$1F,$FF,$FF
 $FA27 DEFB $FF,$C2,$00,$00,$00,$00,$00,$00
 $FA2F DEFB $00,$00,$07,$DE,$BB,$6C,$80,$00
 $FA37 DEFB $00,$46,$69,$14,$A2,$00,$E6,$80
 $FA3F DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $FA47 DEFB $FF,$0F,$F4,$C0,$03,$10,$00,$00
 $FA4F DEFB $00,$00,$9D,$98,$C0,$89,$00,$00
 $FA57 DEFB $00,$00,$00,$00,$00,$00,$02,$00
 $FA5F DEFB $00,$00,$00,$00,$00,$00,$DF,$FE
 $FA67 DEFB $30,$7F,$FF,$E0,$04,$08,$00,$00
 $FA6F DEFB $00,$0D,$91,$22,$20,$00,$00,$00
 $FA77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA7F DEFB $00,$00,$00,$0C,$00,$00,$03,$00
 $FA87 DEFB $00,$21,$F1,$00,$00,$00,$00,$00
 $FA8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FA9F DEFB $00,$00,$01,$3E,$00,$00,$00,$00
 $FAA7 DEFB $00,$00,$00,$00,$01,$FF,$00,$00
 $FAAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FABF DEFB $00,$00,$01,$10,$00,$00,$00,$00
 $FAC7 DEFB $00,$00,$00,$00,$01,$10,$80,$31
 $FACF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FADF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAE7 DEFB $00,$00,$00,$00,$00,$00,$00,$CC
 $FAEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FAFF DEFB $00,$00,$00,$00,$00,$3F,$FF,$FF
 $FB07 DEFB $FF,$02,$00,$1C,$00,$00,$00,$15
 $FB0F DEFB $77,$D0,$00,$37,$FE,$E8,$84,$E4
 $FB17 DEFB $00,$00,$2A,$95,$86,$EE,$FA,$00
 $FB1F DEFB $00,$00,$00,$1E,$C0,$FF,$FF,$FF
 $FB27 DEFB $FF,$E0,$00,$00,$00,$00,$00,$00
 $FB2F DEFB $21,$00,$03,$FD,$DC,$55,$00,$00
 $FB37 DEFB $01,$12,$10,$01,$10,$00,$20,$00
 $FB3F DEFB $00,$00,$00,$00,$00,$7F,$FF,$FF
 $FB47 DEFB $FF,$0F,$FF,$80,$13,$D0,$00,$00
 $FB4F DEFB $80,$00,$72,$A6,$42,$72,$00,$00
 $FB57 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB5F DEFB $00,$00,$00,$00,$00,$01,$87,$EE
 $FB67 DEFB $19,$FF,$FF,$F8,$00,$80,$00,$00
 $FB6F DEFB $00,$0A,$E4,$88,$88,$00,$00,$00
 $FB77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB7F DEFB $00,$00,$00,$00,$00,$00,$01,$00
 $FB87 DEFB $60,$00,$60,$80,$00,$80,$00,$00
 $FB8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FB9F DEFB $00,$00,$00,$7E,$00,$00,$00,$00
 $FBA7 DEFB $00,$00,$00,$00,$00,$FE,$00,$00
 $FBAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBC7 DEFB $00,$00,$00,$00,$00,$00,$00,$7C
 $FBCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBE7 DEFB $00,$00,$00,$00,$00,$00,$00,$82
 $FBEF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FBFF DEFB $00,$00,$00,$00,$00,$07,$FF,$FF
 $FC07 DEFB $FF,$1C,$00,$06,$40,$00,$0A,$FB
 $FC0F DEFB $BC,$00,$03,$FF,$FB,$B2,$55,$10
 $FC17 DEFB $00,$00,$4A,$A4,$40,$BB,$80,$00
 $FC1F DEFB $00,$00,$00,$1C,$5F,$FF,$FF,$FF
 $FC27 DEFB $FF,$C0,$00,$00,$00,$00,$00,$09
 $FC2F DEFB $10,$00,$6E,$EF,$75,$54,$80,$00
 $FC37 DEFB $00,$A5,$44,$00,$44,$1C,$4C,$D0
 $FC3F DEFB $00,$00,$00,$00,$00,$FB,$FF,$FF
 $FC47 DEFB $FE,$1F,$FF,$00,$43,$F0,$00,$00
 $FC4F DEFB $00,$00,$0E,$39,$11,$00,$00,$00
 $FC57 DEFB $00,$00,$00,$00,$00,$00,$01,$28
 $FC5F DEFB $00,$00,$00,$00,$00,$01,$07,$8F
 $FC67 DEFB $04,$7F,$FF,$80,$01,$C2,$00,$00
 $FC6F DEFB $00,$0A,$B9,$22,$64,$00,$00,$00
 $FC77 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC7F DEFB $00,$00,$00,$00,$00,$40,$01,$00
 $FC87 DEFB $60,$40,$60,$40,$01,$88,$00,$00
 $FC8F DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC97 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FC9F DEFB $00,$00,$00,$7F,$A4,$00,$00,$00
 $FCA7 DEFB $0C,$43,$00,$00,$01,$FF,$00,$00
 $FCAF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCB7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCBF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCC7 DEFB $00,$00,$00,$40,$00,$10,$00,$7F
 $FCCF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCD7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCDF DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCE7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCEF DEFB $00,$0E,$00,$00,$00,$00,$00,$00
 $FCF7 DEFB $00,$00,$00,$00,$00,$00,$00,$00
 $FCFF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD07 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD0F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD17 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD1F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD27 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD2F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD37 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD3F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD47 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD4F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD57 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD5F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD67 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD6F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD77 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD7F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD87 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD8F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD97 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FD9F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDA7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDAF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDB7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDBF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDC7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDCF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDD7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDDF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDE7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDEF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDF7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FDFF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE07 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE0F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE17 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE1F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE27 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE2F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE37 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE3F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE47 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE4F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE57 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE5F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE67 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE6F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE77 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE7F DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FE87 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE8F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE97 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FE9F DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FEA7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEAF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEB7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEBF DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FEC7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FECF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FED7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEDF DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FEE7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEEF DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEF7 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FEFF DEFB $02,$02,$02,$02,$42,$42,$42,$42
 $FF07 DEFB $42,$42,$02,$02,$02,$02,$02,$02
 $FF0F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF17 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF1F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF27 DEFB $42,$42,$02,$02,$02,$02,$02,$02
 $FF2F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF37 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF3F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF47 DEFB $42,$42,$42,$42,$42,$42,$42,$02
 $FF4F DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF57 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF5F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF67 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF6F DEFB $42,$42,$42,$02,$02,$42,$42,$42
 $FF77 DEFB $02,$02,$02,$02,$02,$02,$02,$02
 $FF7F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF87 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF8F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF97 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FF9F DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFA7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFAF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFB7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFBF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFC7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFCF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFD7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFDF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFE7 DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFEF DEFB $42,$42,$42,$42,$42,$42,$42,$42
 $FFF7 DEFB $42,$42,$42,$00,$00,$00,$00,$00

; Unused
s$FFFF DEFS $01
